--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name ndarray --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=f8d2c497ede25231 -C extra-filename=-f8d2c497ede25231 --out-dir /usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps --extern matrixmultiply=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps/libmatrixmultiply-678db49957ea9a6a.rmeta --extern num_complex=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps/libnum_complex-e8588d2428ed0761.rmeta --extern num_integer=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps/libnum_integer-3ab2f35c5c817fa1.rmeta --extern num_traits=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps/libnum_traits-48928e5ddc2653bd.rmeta --extern rawpointer=/usr/home/liquid/tmp/.tmpJcPLFN/target/debug/deps/librawpointer-fb8c133107348f2c.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-ndarray-0.15.4-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
13,855,560,811 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
318,967,937 ( 2.30%)  ./malloc/malloc.c:_int_free
251,641,857 ( 1.82%)  ./malloc/malloc.c:_int_malloc
182,924,952 ( 1.32%)  ./malloc/malloc.c:malloc
121,974,866 ( 0.88%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
119,553,938 ( 0.86%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
110,632,378 ( 0.80%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
106,328,029 ( 0.77%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
104,857,059 ( 0.76%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
103,027,418 ( 0.74%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 96,382,557 ( 0.70%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 94,477,314 ( 0.68%)  ./malloc/malloc.c:free
 85,523,508 ( 0.62%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 78,436,791 ( 0.57%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 70,690,122 ( 0.51%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 69,669,787 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 66,506,314 ( 0.48%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 64,728,696 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>::{closure#0}>
 59,578,023 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 56,346,330 ( 0.41%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 56,328,814 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 56,243,829 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 53,923,588 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 53,724,115 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 51,303,154 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 51,244,348 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Predicate>::to_opt_poly_trait_pred
 50,982,376 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 49,993,270 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 49,044,380 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 46,094,022 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 45,727,352 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 45,332,770 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 44,867,304 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::resolve::OpportunisticVarResolver, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::resolve::OpportunisticVarResolver>::{closure#0}>
 43,343,306 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 43,019,930 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/resolve.rs:<rustc_infer::infer::resolve::OpportunisticVarResolver as rustc_middle::ty::fold::TypeFolder>::fold_ty
 42,688,806 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::wf::WfPredicates>::normalize
 41,419,204 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 40,559,873 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 40,257,380 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind> as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 39,127,807 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
 39,066,384 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 38,765,557 ( 0.28%)  ./malloc/malloc.c:realloc
 38,230,818 ( 0.28%)  ./malloc/malloc.c:malloc_consolidate
 37,209,912 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 36,824,235 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::fold::BoundVarReplacer as rustc_middle::ty::fold::TypeFolder>::fold_ty
 36,593,780 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::resolve::OpportunisticVarResolver, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::resolve::OpportunisticVarResolver>::{closure#0}>
 36,231,642 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind> as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 36,080,019 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_typeck::check::inherited::Inherited>::register_predicate
 35,812,648 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::GenericArg as core::convert::From<&rustc_middle::ty::TyS>>::from
 35,601,737 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 35,252,470 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::fulfill::FulfillmentContext as rustc_infer::traits::engine::TraitEngine>::register_predicate_obligation
 34,087,022 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<core::iter::adapters::map::Map<core::iter::adapters::zip::Zip<core::iter::adapters::zip::Zip<alloc::vec::into_iter::IntoIter<rustc_middle::ty::Predicate>, alloc::vec::into_iter::IntoIter<rustc_span::span_encoding::Span>>, core::iter::adapters::rev::Rev<alloc::vec::into_iter::IntoIter<rustc_span::def_id::DefId>>>, <rustc_trait_selection::traits::wf::WfPredicates>::nominal_obligations::{closure#0}> as core::iter::traits::iterator::Iterator>::try_fold::<(), core::iter::traits::iterator::Iterator::find::check<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, &mut <rustc_trait_selection::traits::wf::WfPredicates>::nominal_obligations::{closure#1}>::{closure#0}, core::ops::control_flow::ControlFlow<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>>
 33,529,256 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:rustc_trait_selection::traits::project::project_type
 32,489,687 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 31,679,909 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::fold::BoundVarReplacer>
 31,552,930 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 30,783,410 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 30,678,817 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::project_type
 30,410,244 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::anonymize_late_bound_regions::<rustc_middle::ty::PredicateKind>
 30,409,560 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 29,794,728 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>::{closure#0}>
 29,500,167 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::fold::BoundVarReplacer>
 28,867,060 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 28,805,925 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 28,459,204 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::wf::WfPredicates>::normalize
 28,180,166 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind> as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 28,017,514 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 27,698,268 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 27,604,052 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 27,544,612 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 27,502,671 ( 0.20%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 27,343,918 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_type_ir/src/lib.rs:<rustc_type_ir::DebruijnIndex>::shift_out
 27,338,797 ( 0.20%)  ./malloc/malloc.c:_int_realloc
 27,288,972 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 26,780,121 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 25,082,389 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 24,093,633 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
 24,053,346 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_typeck::check::inherited::Inherited>::register_predicate
 24,044,213 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::equate::Equate>
 23,849,392 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::fold::BoundVarReplacer>
 23,437,644 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_type_ir/src/lib.rs:<rustc_type_ir::DebruijnIndex>::shift_in
 23,350,742 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::fulfill::FulfillmentContext as rustc_infer::traits::engine::TraitEngine>::register_predicate_obligation
 23,331,232 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 23,090,728 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::fold::BoundVarReplacer>
 23,047,961 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 22,869,201 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 22,809,873 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 22,802,978 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 22,717,170 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 22,600,344 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::zip::Zip<core::iter::adapters::zip::Zip<alloc::vec::into_iter::IntoIter<rustc_middle::ty::Predicate>, alloc::vec::into_iter::IntoIter<rustc_span::span_encoding::Span>>, core::iter::adapters::rev::Rev<alloc::vec::into_iter::IntoIter<rustc_span::def_id::DefId>>>, <rustc_trait_selection::traits::wf::WfPredicates>::nominal_obligations::{closure#0}> as core::iter::traits::iterator::Iterator>::try_fold::<(), core::iter::traits::iterator::Iterator::find::check<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, &mut <rustc_trait_selection::traits::wf::WfPredicates>::nominal_obligations::{closure#1}>::{closure#0}, core::ops::control_flow::ControlFlow<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>>
 22,553,261 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 22,492,675 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 22,147,804 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:rustc_middle::ty::util::fold_list::<rustc_middle::ty::fold::BoundVarReplacer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_middle::ty::fold::BoundVarReplacer>::{closure#0}>
 22,016,119 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::register_obligation_at
 21,968,951 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs:<alloc::collections::btree::map::BTreeMap<rustc_middle::ty::sty::BoundRegion, &rustc_middle::ty::sty::RegionKind> as core::ops::drop::Drop>::drop
 21,858,980 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 21,316,078 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 20,801,733 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/convert/mod.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 20,685,124 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 20,590,226 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::resolve::OpportunisticVarResolver, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::resolve::OpportunisticVarResolver>::{closure#0}>
 20,448,750 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 20,268,986 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs:<rustc_infer::traits::util::Elaborator as core::iter::traits::iterator::Iterator>::next
 20,080,028 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 19,482,080 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>::{closure#0}>
 19,355,161 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_trait_selection::traits::fulfill::FulfillProcessor>::progress_changed_obligations
 19,107,729 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 19,004,808 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_type_ir/src/lib.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 18,802,710 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_middle::ty::sty::Binder<rustc_middle::ty::sty::TraitRef>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::combine::CombineFields>::higher_ranked_sub<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 18,335,016 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 18,274,068 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 18,241,837 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::Predicate, ())>>::insert::<hashbrown::map::make_hasher<rustc_middle::ty::Predicate, rustc_middle::ty::Predicate, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 18,217,572 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 17,954,750 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 17,941,157 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 17,940,135 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
 17,835,061 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 17,608,580 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 17,198,211 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_from
 17,179,783 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 17,047,843 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:rustc_middle::ty::util::fold_list::<rustc_middle::ty::fold::BoundVarReplacer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_middle::ty::fold::BoundVarReplacer>::{closure#0}>
 16,962,039 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
 16,232,030 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 16,172,258 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
 16,108,249 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 16,077,451 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
 16,068,037 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::TraitPredicate>::remap_constness
 16,012,022 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Predicate as core::cmp::PartialEq>::eq
 16,012,022 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_middle::ty::Predicate as core::cmp::PartialEq>::eq
 15,738,713 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 15,673,066 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 15,555,160 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:rustc_infer::traits::util::anonymize_predicate
 15,530,790 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 15,447,560 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 15,261,642 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 15,223,339 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
 15,218,123 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 15,195,916 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 15,104,941 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_tys::<rustc_infer::infer::equate::Equate>
 14,997,666 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::freshen::TypeFreshener>
 14,984,574 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::resolve::OpportunisticVarResolver, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::resolve::OpportunisticVarResolver>::{closure#0}>
 14,885,368 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 14,717,926 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
 14,624,580 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::sub::Sub>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
 14,341,328 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 14,341,218 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 14,340,886 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 14,278,460 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::sub::Sub>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::sub::Sub>::{closure#0}>>::{closure#0}>
 14,229,602 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_trait_selection::traits::wf::WfPredicates>::normalize
 14,177,995 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::Predicate>, ())>>::insert::<hashbrown::map::make_hasher<rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::Predicate>, rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 14,171,810 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::Predicate, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::Predicate, rustc_middle::ty::Predicate, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 14,160,061 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 14,153,783 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 14,100,816 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
 14,064,350 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind> as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 13,977,745 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs:rustc_infer::traits::util::anonymize_predicate
 13,963,020 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/convert/mod.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
 13,938,407 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 13,893,351 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::sub::Sub>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::sub::Sub>::{closure#0}>>::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                 

-- line 56 ----------------------------------------
        .           #[derive(Copy, Clone, Debug)]
        .           pub enum RelationDir {
        .               SubtypeOf,
        .               SupertypeOf,
        .               EqTo,
        .           }
        .           
        .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
4,141,062 ( 0.03%)      pub fn super_combine_tys<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>>
        .               where
        .                   R: TypeRelation<'tcx>,
        .               {
        .                   let a_is_expected = relation.a_is_expected();
        .           
3,434,834 ( 0.02%)          match (a.kind(), b.kind()) {
        .                       // Relate integral variables to other types
       88 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
      484 ( 0.00%)                  self.inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .unify_var_var(a_id, b_id)
        .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
        .                           Ok(a)
        .                       }
    1,760 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
    3,520 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
        .                       }
       10 ( 0.00%)              (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
       20 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
        .                       }
    2,386 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
    4,772 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
        .                       }
       83 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
      166 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
        .                       }
        .           
        .                       // Relate floating-point variables to other types
        .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .float_unification_table()
        .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
        .                           self.unify_float_variable(a_is_expected, v_id, v)
        .                       }
        .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
        .                           self.unify_float_variable(!a_is_expected, v_id, v)
        .                       }
        .           
        .                       // All other cases of inference are errors
        .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
   51,230 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
        .                       }
        .           
2,931,570 ( 0.02%)              _ => ty::relate::super_relate_tys(relation, a, b),
        .                   }
4,141,062 ( 0.03%)      }
        .           
  357,816 ( 0.00%)      pub fn super_combine_consts<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
        .               where
        .                   R: ConstEquateRelation<'tcx>,
        .               {
        .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
  154,445 ( 0.00%)          if a == b {
        .                       return Ok(a);
        .                   }
        .           
   85,095 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
   85,095 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
        .           
        .                   let a_is_expected = relation.a_is_expected();
        .           
  393,188 ( 0.00%)          match (a.val, b.val) {
        .                       (
        .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
        .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
        .                       ) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 154 ----------------------------------------
        .           
        .                       // All other cases of inference with other variables are errors.
        .                       (ty::ConstKind::Infer(InferConst::Var(_)), ty::ConstKind::Infer(_))
        .                       | (ty::ConstKind::Infer(_), ty::ConstKind::Infer(InferConst::Var(_))) => {
        .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
        .                       }
        .           
        .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
      294 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
        .                       }
        .           
        .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
    4,745 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
        .                       }
       30 ( 0.00%)              (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
        .                           // FIXME(#59490): Need to remove the leak check to accommodate
        .                           // escaping bound variables here.
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(b);
        .                       }
        .                       (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {
-- line 176 ----------------------------------------
-- line 179 ----------------------------------------
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(a);
        .                       }
        .                       _ => {}
        .                   }
        .           
  136,870 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
  268,362 ( 0.00%)      }
        .           
        .               /// Unifies the const variable `target_vid` with the given constant.
        .               ///
        .               /// This also tests if the given const `ct` contains an inference variable which was previously
        .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
        .               /// would result in an infinite type as we continuously replace an inference variable
        .               /// in `ct` with `ct` itself.
        .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// of `fn bind` (meaning that its substs contain `N`).
        .               ///
        .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
        .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
        .               ///
        .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
        .               ///
        .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
   18,829 ( 0.00%)      #[instrument(level = "debug", skip(self))]
        .               fn unify_const_variable(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   target_vid: ty::ConstVid<'tcx>,
        .                   ct: &'tcx ty::Const<'tcx>,
        .                   vid_is_expected: bool,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   let (for_universe, span) = {
        .                       let mut inner = self.inner.borrow_mut();
    3,964 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
    1,982 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
    1,982 ( 0.00%)              match var_value.val {
        .                           ConstVariableValue::Known { value } => {
        .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
        .                           }
        .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
        .                       }
        .                   };
    7,928 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
        .                       .relate(ct, ct)?;
        .           
    3,964 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .const_unification_table()
        .                       .unify_var_value(
        .                           target_vid,
    5,946 ( 0.00%)                  ConstVarValue {
        .                               origin: ConstVariableOrigin {
        .                                   kind: ConstVariableOriginKind::ConstInference,
        .                                   span: DUMMY_SP,
        .                               },
        .                               val: ConstVariableValue::Known { value },
        .                           },
        .                       )
        .                       .map(|()| value)
        .                       .map_err(|e| const_unification_error(vid_is_expected, e))
        .               }
        .           
   25,434 ( 0.00%)      fn unify_integral_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::IntVid,
        .                   val: ty::IntVarValue,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
   33,912 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .int_unification_table()
        .                       .unify_var_value(vid, Some(val))
        .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
    8,478 ( 0.00%)          match val {
    1,770 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
    9,177 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
        .                   }
   33,912 ( 0.00%)      }
        .           
        .               fn unify_float_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::FloatVid,
        .                   val: ty::FloatTy,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
        .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
        .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
        .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
        .                   Ok(self.tcx.mk_mach_float(val))
        .               }
        .           }
        .           
        .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
  615,348 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
        .                   Equate::new(self, a_is_expected)
        .               }
        .           
1,696,378 ( 0.01%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
        .                   Sub::new(self, a_is_expected)
  848,189 ( 0.01%)      }
        .           
        .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
        .                   Lub::new(self, a_is_expected)
        .               }
        .           
1,885,884 ( 0.01%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
        .                   Glb::new(self, a_is_expected)
  942,942 ( 0.01%)      }
        .           
        .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
        .               /// The idea is that we should ensure that the type `a_ty` is equal
        .               /// to, a subtype of, or a supertype of (respectively) the type
        .               /// to which `b_vid` is bound.
        .               ///
        .               /// Since `b_vid` has not yet been instantiated with a type, we
        .               /// will first instantiate `b_vid` with a *generalized* version
        .               /// of `a_ty`. Generalization introduces other inference
        .               /// variables wherever subtyping could occur.
1,403,567 ( 0.01%)      pub fn instantiate(
        .                   &mut self,
        .                   a_ty: Ty<'tcx>,
        .                   dir: RelationDir,
        .                   b_vid: ty::TyVid,
        .                   a_is_expected: bool,
        .               ) -> RelateResult<'tcx, ()> {
        .                   use self::RelationDir::*;
        .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
        .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
        .                   //   inference variable,
        .                   // - and `dir` == `SubtypeOf`.
        .                   //
        .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
        .                   // `'?2` and `?3` are fresh region/type inference
        .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
        .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
  127,593 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
        .                   debug!(
        .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
        .                       a_ty, dir, b_vid, b_ty
        .                   );
  893,151 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
        .           
  127,593 ( 0.00%)          if needs_wf {
        .                       self.obligations.push(Obligation::new(
        .                           self.trace.cause.clone(),
        .                           self.param_env,
        .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
        .                               .to_predicate(self.infcx.tcx),
        .                       ));
        .                   }
        .           
        .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
        .                   //
        .                   // FIXME(#16847): This code is non-ideal because all these subtype
        .                   // relations wind up attributed to the same spans. We need
        .                   // to associate causes/spans with each of the relations in
        .                   // the stack to get this right.
  478,266 ( 0.00%)          match dir {
  483,725 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
   80,265 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
   29,590 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_ty,
        .                           b_ty,
        .                       ),
        .                   }?;
        .           
  127,593 ( 0.00%)          Ok(())
1,020,776 ( 0.01%)      }
        .           
        .               /// Attempts to generalize `ty` for the type variable `for_vid`.
        .               /// This checks for cycle -- that is, whether the type `ty`
        .               /// references `for_vid`. The `dir` is the "direction" for which we
        .               /// a performing the generalization (i.e., are we producing a type
        .               /// that can be used as a supertype etc).
        .               ///
        .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
        .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
        .                   // Determine the ambient variance within which `ty` appears.
        .                   // The surrounding equation is:
        .                   //
        .                   //     ty [op] ty2
        .                   //
        .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
        .                   // naturally.
  510,388 ( 0.00%)          let ambient_variance = match dir {
        .                       RelationDir::EqTo => ty::Invariant,
        .                       RelationDir::SubtypeOf => ty::Covariant,
        .                       RelationDir::SupertypeOf => ty::Contravariant,
        .                   };
        .           
        .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
        .           
1,275,970 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
        .                       v @ TypeVariableValue::Known { .. } => {
        .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
        .                       }
        .                       TypeVariableValue::Unknown { universe } => universe,
        .                   };
        .           
        .                   debug!("generalize: for_universe = {:?}", for_universe);
        .                   debug!("generalize: trace = {:?}", self.trace);
        .           
1,275,970 ( 0.01%)          let mut generalize = Generalizer {
        .                       infcx: self.infcx,
        .                       cause: &self.trace.cause,
        .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
        .                       for_universe,
        .                       ambient_variance,
        .                       needs_wf: false,
        .                       root_ty: ty,
  127,597 ( 0.00%)              param_env: self.param_env,
        .                       cache: SsoHashMap::new(),
        .                   };
        .           
  255,194 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
  127,593 ( 0.00%)              Ok(ty) => ty,
        .                       Err(e) => {
        .                           debug!("generalize: failure {:?}", e);
       24 ( 0.00%)                  return Err(e);
        .                       }
        .                   };
  127,593 ( 0.00%)          let needs_wf = generalize.needs_wf;
        .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
        .                   Ok(Generalization { ty, needs_wf })
        .               }
        .           
        .               pub fn add_const_equate_obligation(
        .                   &mut self,
        .                   a_is_expected: bool,
        .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
        .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
        .               /// holds, which in turn implies that `?C::Item == ?D`. So once
        .               /// `?C` is constrained, that should suffice to restrict `?D`.
        .               needs_wf: bool,
        .           }
        .           
        .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  162,880 ( 0.00%)          self.infcx.tcx
        .               }
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    7,113 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "Generalizer"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
        .               }
        .           
    5,930 ( 0.00%)      fn binders<T>(
        .                   &mut self,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
        .               where
        .                   T: Relate<'tcx>,
        .               {
   10,002 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
    5,930 ( 0.00%)      }
        .           
  475,838 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   43,258 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
        .                       // Avoid fetching the variance if we are in an invariant
        .                       // context; no need, and it can induce dependency cycles
        .                       // (e.g., #41849).
   29,769 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
        .                   } else {
        .                       let tcx = self.tcx();
        .                       let opt_variances = tcx.variances_of(item_def_id);
   67,445 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
        .                   }
  389,322 ( 0.00%)      }
        .           
  176,733 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   _info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
        .               ) -> RelateResult<'tcx, T> {
       11 ( 0.00%)          let old_ambient_variance = self.ambient_variance;
  593,879 ( 0.00%)          self.ambient_variance = self.ambient_variance.xform(variance);
        .           
        .                   let result = self.relate(a, b);
  112,606 ( 0.00%)          self.ambient_variance = old_ambient_variance;
        .                   result
  137,459 ( 0.00%)      }
        .           
2,102,922 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
  233,658 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
1,401,948 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
   13,548 ( 0.00%)              return result.clone();
        .                   }
        .                   debug!("generalize: t={:?}", t);
        .           
        .                   // Check to see whether the type we are generalizing references
        .                   // any other type variable related to `vid` via
        .                   // subtyping. This is basically our "occurs check", preventing
        .                   // us from creating infinitely sized types.
  749,363 ( 0.01%)          let result = match *t.kind() {
    8,913 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    8,913 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
    8,913 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
    8,913 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
        .                               // If sub-roots are equal, then `for_vid` and
        .                               // `vid` are related via subtyping.
       20 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
        .                           } else {
   53,454 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
   17,818 ( 0.00%)                      match probe {
        .                                   TypeVariableValue::Known { value: u } => {
        .                                       debug!("generalize: known value {:?}", u);
        .                                       self.relate(u, u)
        .                                   }
        .                                   TypeVariableValue::Unknown { universe } => {
   41,610 ( 0.00%)                              match self.ambient_variance {
        .                                           // Invariant: no need to make a fresh type variable.
        .                                           ty::Invariant => {
   36,165 ( 0.00%)                                      if self.for_universe.can_name(universe) {
   28,204 ( 0.00%)                                          return Ok(t);
        .                                               }
        .                                           }
        .           
        .                                           // Bivariant: make a fresh var, but we
        .                                           // may need a WF predicate. See
        .                                           // comment on `needs_wf` field for
        .                                           // more info.
        .                                           ty::Bivariant => self.needs_wf = true,
        .           
        .                                           // Co/contravariant: this will be
        .                                           // sufficiently constrained later on.
        .                                           ty::Covariant | ty::Contravariant => (),
        .                                       }
        .           
        .                                       let origin =
   11,439 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    8,897 ( 0.00%)                              let new_var_id = self
        .                                           .infcx
        .                                           .inner
        .                                           .borrow_mut()
        .                                           .type_variables()
    8,897 ( 0.00%)                                  .new_var(self.for_universe, origin);
        .                                       let u = self.tcx().mk_ty_var(new_var_id);
        .           
        .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
        .                                       // operation. This is needed to detect cyclic types. To see why, see the
        .                                       // docs in the `type_variables` module.
    6,355 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
        .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    2,542 ( 0.00%)                              Ok(u)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
        .                           // No matter what mode we are in,
        .                           // integer/floating-point types must be equal to be
        .                           // relatable.
    1,268 ( 0.00%)                  Ok(t)
        .                       }
  660,270 ( 0.00%)              _ => relate::super_relate_tys(self, t, t),
        .                   };
        .           
2,232,200 ( 0.02%)          self.cache.insert(t, result.clone());
1,339,320 ( 0.01%)          return result;
2,102,922 ( 0.02%)      }
        .           
  209,224 ( 0.00%)      fn regions(
        .                   &mut self,
        .                   r: ty::Region<'tcx>,
        .                   r2: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   24,213 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   debug!("generalize: regions r={:?}", r);
        .           
   48,426 ( 0.00%)          match *r {
        .                       // Never make variables for regions bound within the type itself,
        .                       // nor for erased regions.
        .                       ty::ReLateBound(..) | ty::ReErased => {
        .                           return Ok(r);
        .                       }
        .           
        .                       ty::RePlaceholder(..)
        .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   // If we are in an invariant context, we can re-use the region
        .                   // as is, unless it happens to be in some universe that we
        .                   // can't name. (In the case of a region *variable*, we could
        .                   // use it if we promoted it into our universe, but we don't
        .                   // bother.)
   47,656 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
   54,687 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
  127,373 ( 0.00%)              if self.for_universe.can_name(r_universe) {
        .                           return Ok(r);
        .                       }
        .                   }
        .           
        .                   // FIXME: This is non-ideal because we don't give a
        .                   // very descriptive origin for this region variable.
   58,060 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  209,224 ( 0.00%)      }
        .           
   65,421 ( 0.00%)      fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   c2: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
   21,326 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      156 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
      624 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
      156 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
      312 ( 0.00%)                  match var_value.val {
        .                               ConstVariableValue::Known { value: u } => {
        .                                   drop(inner);
        .                                   self.relate(u, u)
        .                               }
      156 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
      780 ( 0.00%)                          if self.for_universe.can_name(universe) {
        .                                       Ok(c)
        .                                   } else {
        .                                       let new_var_id = variable_table.new_key(ConstVarValue {
        .                                           origin: var_value.origin,
        .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
        .                                       });
        .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })
       13 ( 0.00%)                  if self.tcx().lazy_normalization() =>
        .                       {
        .                           assert_eq!(promoted, None);
        .                           let substs = self.relate_with_variance(
        .                               ty::Variance::Invariant,
        .                               ty::VarianceDiagInfo::default(),
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
   35,565 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
   65,421 ( 0.00%)      }
        .           }
        .           
        .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
        .               /// Register an obligation that both constants must be equal to each other.
        .               ///
        .               /// If they aren't equal then the relation doesn't hold.
        .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
        .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
        .               target_vid: ty::ConstVid<'tcx>,
        .           }
        .           
        .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
        .           //
        .           // Both inputs are expected to be the same.
        .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    3,964 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      991 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "ConstInferUnifier"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
        .                       return Ok(r);
        .                   } else {
        .                       // FIXME: This is non-ideal because we don't give a
        .                       // very descriptive origin for this region variable.
        .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
        .                   }
        .               }
        .           
   18,829 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   _c: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   debug_assert_eq!(c, _c);
        .                   debug!("ConstInferUnifier: c={:?}", c);
        .           
    4,955 ( 0.00%)          match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        .                           // Check if the current unification would end up
        .                           // unifying `target_vid` with a const which contains
        .                           // an inference variable which is unioned with `target_vid`.
        .                           //
        .                           // Not doing so can easily result in stack overflows.
        .                           if self
        .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
    4,955 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
        .               }
        .           }

3,070,531 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs
--------------------------------------------------------------------------------
Ir                  

-- line 62 ----------------------------------------
         .               message = "expected a `{Fn}<{Args}>` closure, found `{Self}`",
         .               label = "expected an `Fn<{Args}>` closure, found `{Self}`"
         .           )]
         .           #[fundamental] // so that regex can rely that `&str: !FnMut`
         .           #[must_use = "closures are lazy and do nothing unless called"]
         .           pub trait Fn<Args>: FnMut<Args> {
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
     1,654 ( 0.00%)      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
         .           }
         .           
         .           /// The version of the call operator that takes a mutable receiver.
         .           ///
         .           /// Instances of `FnMut` can be called repeatedly and may mutate state.
         .           ///
         .           /// `FnMut` is implemented automatically by closures which take mutable
         .           /// references to captured variables, as well as all types that implement
-- line 78 ----------------------------------------
-- line 142 ----------------------------------------
         .               message = "expected a `{FnMut}<{Args}>` closure, found `{Self}`",
         .               label = "expected an `FnMut<{Args}>` closure, found `{Self}`"
         .           )]
         .           #[fundamental] // so that regex can rely that `&str: !FnMut`
         .           #[must_use = "closures are lazy and do nothing unless called"]
         .           pub trait FnMut<Args>: FnOnce<Args> {
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
   760,897 ( 0.01%)      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
         .           }
         .           
         .           /// The version of the call operator that takes a by-value receiver.
         .           ///
         .           /// Instances of `FnOnce` can be called, but might not be callable multiple
         .           /// times. Because of this, if the only thing known about a type is that it
         .           /// implements `FnOnce`, it can only be called once.
         .           ///
-- line 158 ----------------------------------------
-- line 219 ----------------------------------------
         .           pub trait FnOnce<Args> {
         .               /// The returned type after the call operator is used.
         .               #[lang = "fn_once_output"]
         .               #[stable(feature = "fn_once_output", since = "1.12.0")]
         .               type Output;
         .           
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
 2,186,576 ( 0.02%)      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
         .           }
         .           
         .           mod impls {
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> Fn<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
         .                   extern "rust-call" fn call(&self, args: A) -> F::Output {
         4 ( 0.00%)              (**self).call(args)
         .                   }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnMut<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
-- line 245 ----------------------------------------
-- line 251 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnOnce<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
         .                   type Output = F::Output;
         .           
         .                   extern "rust-call" fn call_once(self, args: A) -> F::Output {
         2 ( 0.00%)              (*self).call(args)
         .                   }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnMut<A> for &mut F
         .               where
         .                   F: FnMut<A>,
         .               {
   220,106 ( 0.00%)          extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
 2,712,868 ( 0.02%)              (*self).call_mut(args)
   373,612 ( 0.00%)          }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnOnce<A> for &mut F
         .               where
         .                   F: FnMut<A>,
         .               {
         .                   type Output = F::Output;
13,893,688 ( 0.10%)          extern "rust-call" fn call_once(self, args: A) -> F::Output {
   657,070 ( 0.00%)              (*self).call_mut(args)
11,611,341 ( 0.08%)          }
         .               }
         .           }

   134,598 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           use super::BuiltinImplConditions;
         .           use super::IntercrateAmbiguityCause;
         .           use super::OverflowError;
         .           use super::SelectionCandidate::{self, *};
         .           use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};
         .           
         .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 2,238,208 ( 0.02%)      #[instrument(level = "debug", skip(self))]
 2,797,760 ( 0.02%)      pub(super) fn candidate_from_obligation<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   // Watch out for overflow. This intentionally bypasses (and does
         .                   // not update) the cache.
   559,552 ( 0.00%)          self.check_recursion_limit(&stack.obligation, &stack.obligation)?;
         .           
         .                   // Check the cache. Note that we freshen the trait-ref
         .                   // separately rather than using `stack.fresh_trait_ref` --
         .                   // this is because we want the unbound variables to be
         .                   // replaced with fresh types starting from index 0.
 2,517,984 ( 0.02%)          let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);
         .                   debug!(?cache_fresh_trait_pred);
         .                   debug_assert!(!stack.obligation.predicate.has_escaping_bound_vars());
         .           
 3,620,830 ( 0.03%)          if let Some(c) =
   839,328 ( 0.01%)              self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)
         .                   {
         .                       debug!(candidate = ?c, "CACHE HIT");
         .                       return c;
         .                   }
         .           
         .                   // If no match, compute result and insert into cache.
         .                   //
         .                   // FIXME(nikomatsakis) -- this cache is not taking into
         .                   // account cycles that may have occurred in forming the
         .                   // candidate. I don't know of any specific problems that
         .                   // result but it seems awfully suspicious.
   366,516 ( 0.00%)          let (candidate, dep_node) =
   183,258 ( 0.00%)              self.in_task(|this| this.candidate_from_obligation_no_cache(stack));
         .           
         .                   debug!(?candidate, "CACHE MISS");
         .                   self.insert_candidate_cache(
   122,172 ( 0.00%)              stack.obligation.param_env,
   244,344 ( 0.00%)              cache_fresh_trait_pred,
         .                       dep_node,
         .                       candidate.clone(),
         .                   );
   733,032 ( 0.01%)          candidate
         .               }
         .           
   610,860 ( 0.00%)      fn candidate_from_obligation_no_cache<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
     2,560 ( 0.00%)          if let Some(conflict) = self.is_knowable(stack) {
         .                       debug!("coherence stage: not knowable");
       230 ( 0.00%)              if self.intercrate_ambiguity_causes.is_some() {
         .                           debug!("evaluate_stack: intercrate_ambiguity_causes is some");
         .                           // Heuristics: show the diagnostics when there are no candidates in crate.
         .                           if let Ok(candidate_set) = self.assemble_candidates(stack) {
         .                               let mut no_candidates_apply = true;
         .           
         .                               for c in candidate_set.vec.iter() {
         .                                   if self.evaluate_candidate(stack, &c)?.may_apply() {
         .                                       no_candidates_apply = false;
-- line 87 ----------------------------------------
-- line 106 ----------------------------------------
         .                                   } else {
         .                                       IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }
         .                                   };
         .                                   debug!(?cause, "evaluate_stack: pushing cause");
         .                                   self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
         .                               }
         .                           }
         .                       }
       460 ( 0.00%)              return Ok(None);
         .                   }
         .           
   182,568 ( 0.00%)          let candidate_set = self.assemble_candidates(stack)?;
         .           
   121,712 ( 0.00%)          if candidate_set.ambiguous {
         .                       debug!("candidate set contains ambig");
     6,176 ( 0.00%)              return Ok(None);
         .                   }
         .           
         .                   let candidates = candidate_set.vec;
         .           
         .                   debug!(?stack, ?candidates, "assembled {} candidates", candidates.len());
         .           
         .                   // At this point, we know that each of the entries in the
         .                   // candidate set is *individually* applicable. Now we have to
         .                   // figure out if they contain mutual incompatibilities. This
         .                   // frequently arises if we have an unconstrained input type --
         .                   // for example, we are looking for `$0: Eq` where `$0` is some
         .                   // unconstrained type variable. In that case, we'll get a
         .                   // candidate which assumes $0 == int, one that assumes `$0 ==
         .                   // usize`, etc. This spells an ambiguity.
         .           
   231,072 ( 0.00%)          let mut candidates = self.filter_impls(candidates, stack.obligation);
         .           
         .                   // If there is more than one candidate, first winnow them down
         .                   // by considering extra conditions (nested obligations and so
         .                   // forth). We don't winnow if there is exactly one
         .                   // candidate. This is a relatively minor distinction but it
         .                   // can lead to better inference and error-reporting. An
         .                   // example would be if there was an impl:
         .                   //
         .                   //     impl<T:Clone> Vec<T> { fn push_clone(...) { ... } }
         .                   //
         .                   // and we were to see some code `foo.push_clone()` where `boo`
         .                   // is a `Vec<Bar>` and `Bar` does not implement `Clone`.  If
         .                   // we were to winnow, we'd wind up with zero candidates.
         .                   // Instead, we select the right impl now but report "`Bar` does
         .                   // not implement `Clone`".
   115,536 ( 0.00%)          if candidates.len() == 1 {
   142,167 ( 0.00%)              return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);
         .                   }
         .           
         .                   // Winnow, but record the exact outcome of evaluation, which
         .                   // is needed for specialization. Propagate overflow if it occurs.
    62,274 ( 0.00%)          let mut candidates = candidates
         .                       .into_iter()
         .                       .map(|c| match self.evaluate_candidate(stack, &c) {
    45,294 ( 0.00%)                  Ok(eval) if eval.may_apply() => {
    55,464 ( 0.00%)                      Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))
         .                           }
         .                           Ok(_) => Ok(None),
         .                           Err(OverflowError::Canonical) => Err(Overflow),
         .                           Err(OverflowError::ErrorReporting) => Err(ErrorReporting),
         .                       })
         .                       .flat_map(Result::transpose)
         .                       .collect::<Result<Vec<_>, _>>()?;
         .           
         .                   debug!(?stack, ?candidates, "winnowed to {} candidates", candidates.len());
         .           
    10,379 ( 0.00%)          let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();
         .           
    31,137 ( 0.00%)          let sized_predicate = self.tcx().lang_items().sized_trait()
    20,758 ( 0.00%)              == Some(stack.obligation.predicate.skip_binder().def_id());
         .           
         .                   // If there are STILL multiple candidates, we can further
         .                   // reduce the list by dropping duplicates -- including
         .                   // resolving specializations.
    31,137 ( 0.00%)          if candidates.len() > 1 {
         .                       let mut i = 0;
     3,948 ( 0.00%)              while i < candidates.len() {
    12,141 ( 0.00%)                  let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {
         .                               self.candidate_should_be_dropped_in_favor_of(
         .                                   sized_predicate,
         .                                   &candidates[i],
         .                                   &candidates[j],
         .                                   needs_infer,
         .                               )
         .                           });
         .                           if is_dup {
         .                               debug!(candidate = ?candidates[i], "Dropping candidate #{}/{}", i, candidates.len());
         .                               candidates.swap_remove(i);
         .                           } else {
         .                               debug!(candidate = ?candidates[i], "Retaining candidate #{}/{}", i, candidates.len());
     3,992 ( 0.00%)                      i += 1;
         .           
         .                               // If there are *STILL* multiple candidates, give up
         .                               // and report ambiguity.
     5,988 ( 0.00%)                      if i > 1 {
         .                                   debug!("multiple matches, ambig");
     8,472 ( 0.00%)                          return Err(Ambiguous(
         .                                       candidates
         .                                           .into_iter()
     5,087 ( 0.00%)                                  .filter_map(|c| match c.candidate {
         .                                               SelectionCandidate::ImplCandidate(def_id) => Some(def_id),
         .                                               _ => None,
         .                                           })
         .                                           .collect(),
         .                                   ));
         .                               }
         .                           }
         .                       }
-- line 215 ----------------------------------------
-- line 219 ----------------------------------------
         .                   // that we know of, anyway. Note that in the case where there
         .                   // are unbound type variables within the obligation, it might
         .                   // be the case that you could still satisfy the obligation
         .                   // from another crate by instantiating the type variables with
         .                   // a type from another crate that does have an impl. This case
         .                   // is checked for in `evaluate_stack` (and hence users
         .                   // who might care about this case, like coherence, should use
         .                   // that function).
     9,673 ( 0.00%)          if candidates.is_empty() {
         .                       // If there's an error type, 'downgrade' our result from
         .                       // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid
         .                       // emitting additional spurious errors, since we're guaranteed
         .                       // to have emitted at least one.
    17,022 ( 0.00%)              if stack.obligation.references_error() {
         .                           debug!("no results for error type, treating as ambiguous");
     8,511 ( 0.00%)                  return Ok(None);
         .                       }
         .                       return Err(Unimplemented);
         .                   }
         .           
         .                   // Just one candidate left.
     3,486 ( 0.00%)          self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)
   569,120 ( 0.00%)      }
         .           
   486,848 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
   608,560 ( 0.00%)      pub(super) fn assemble_candidates<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {
    60,856 ( 0.00%)          let TraitObligationStack { obligation, .. } = *stack;
 1,156,264 ( 0.01%)          let obligation = &Obligation {
    60,856 ( 0.00%)              param_env: obligation.param_env,
         .                       cause: obligation.cause.clone(),
   182,568 ( 0.00%)              recursion_depth: obligation.recursion_depth,
   730,272 ( 0.01%)              predicate: self.infcx().resolve_vars_if_possible(obligation.predicate),
         .                   };
         .           
   127,614 ( 0.00%)          if obligation.predicate.skip_binder().self_ty().is_ty_var() {
         .                       // Self is a type variable (e.g., `_: AsRef<str>`).
         .                       //
         .                       // This is somewhat problematic, as the current scheme can't really
         .                       // handle it turning to be a projection. This does end up as truly
         .                       // ambiguous in most cases anyway.
         .                       //
         .                       // Take the fast path out - this also improves
         .                       // performance by preventing assemble_candidates_from_impls from
         .                       // matching every impl for this trait.
     8,508 ( 0.00%)              return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });
         .                   }
         .           
   174,060 ( 0.00%)          let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };
         .           
         .                   // The only way to prove a NotImplemented(T: Foo) predicate is via a negative impl.
         .                   // There are no compiler built-in rules for this.
   116,040 ( 0.00%)          if obligation.polarity() == ty::ImplPolarity::Negative {
         .                       self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .                       self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                   } else {
    58,020 ( 0.00%)              self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .           
         .                       // Other bounds. Consider both in-scope bounds from fn decl
         .                       // and applicable impls. There is a certain set of precedence rules here.
   348,120 ( 0.00%)              let def_id = obligation.predicate.def_id();
    58,020 ( 0.00%)              let lang_items = self.tcx().lang_items();
         .           
   183,892 ( 0.00%)              if lang_items.copy_trait() == Some(def_id) {
         .                           debug!(obligation_self_ty = ?obligation.predicate.skip_binder().self_ty());
         .           
         .                           // User-defined copy impls are permitted, but only for
         .                           // structs and enums.
     4,916 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .           
         .                           // For other types, we'll use the builtin rules.
    19,664 ( 0.00%)                  let copy_conditions = self.copy_clone_conditions(obligation);
    49,160 ( 0.00%)                  self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);
   159,318 ( 0.00%)              } else if lang_items.discriminant_kind_trait() == Some(def_id) {
         .                           // `DiscriminantKind` is automatically implemented for every type.
         .                           candidates.vec.push(DiscriminantKindCandidate);
   159,303 ( 0.00%)              } else if lang_items.pointee_trait() == Some(def_id) {
         .                           // `Pointee` is automatically implemented for every type.
         .                           candidates.vec.push(PointeeCandidate);
   183,771 ( 0.00%)              } else if lang_items.sized_trait() == Some(def_id) {
         .                           // Sized is never implementable by end-users, it is
         .                           // always automatically computed.
    12,234 ( 0.00%)                  let sized_conditions = self.sized_conditions(obligation);
   122,340 ( 0.00%)                  self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);
   124,373 ( 0.00%)              } else if lang_items.unsize_trait() == Some(def_id) {
     1,772 ( 0.00%)                  self.assemble_candidates_for_unsizing(obligation, &mut candidates);
   120,234 ( 0.00%)              } else if lang_items.drop_trait() == Some(def_id)
         .                           && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst
         .                       {
       460 ( 0.00%)                  self.assemble_const_drop_candidates(obligation, &mut candidates);
         .                       } else {
   122,575 ( 0.00%)                  if lang_items.clone_trait() == Some(def_id) {
         .                               // Same builtin conditions as `Copy`, i.e., every type which has builtin support
         .                               // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`
         .                               // types have builtin support for `Clone`.
     5,816 ( 0.00%)                      let clone_conditions = self.copy_clone_conditions(obligation);
    13,086 ( 0.00%)                      self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);
         .                           }
         .           
    39,889 ( 0.00%)                  self.assemble_generator_candidates(obligation, &mut candidates);
    39,889 ( 0.00%)                  self.assemble_closure_candidates(obligation, &mut candidates);
    39,889 ( 0.00%)                  self.assemble_fn_pointer_candidates(obligation, &mut candidates);
   119,667 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                           self.assemble_candidates_from_object_ty(obligation, &mut candidates);
         .                       }
         .           
         .                       self.assemble_candidates_from_projected_tys(obligation, &mut candidates);
         .                       self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;
         .                       // Auto implementations have lower priority, so we only
         .                       // consider triggering a default if there is no other impl that can apply.
    58,020 ( 0.00%)              if candidates.vec.is_empty() {
         .                           self.assemble_candidates_from_auto_impls(obligation, &mut candidates);
         .                       }
         .                   }
         .                   debug!("candidate list size: {}", candidates.vec.len());
   754,260 ( 0.01%)          Ok(candidates)
         .               }
         .           
         .               #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_candidates_from_projected_tys(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Before we go into the whole placeholder thing, just
         .                   // quickly check if the self-type is a projection at all.
   517,716 ( 0.00%)          match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {
         .                       ty::Projection(_) | ty::Opaque(..) => {}
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           span_bug!(
         .                               obligation.cause.span,
         .                               "Self=_ should have been handled by assemble_candidates"
         .                           );
         .                       }
         .                       _ => return,
         .                   }
         .           
     4,694 ( 0.00%)          let result = self
         .                       .infcx
     2,347 ( 0.00%)              .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));
         .           
     4,694 ( 0.00%)          candidates.vec.extend(result.into_iter().map(ProjectionCandidate));
         .               }
         .           
         .               /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller
         .               /// supplied to find out whether it is listed among them.
         .               ///
         .               /// Never affects the inference environment.
         .               #[tracing::instrument(level = "debug", skip(self, stack, candidates))]
         .               fn assemble_candidates_from_caller_bounds<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) -> Result<(), SelectionError<'tcx>> {
         .                   debug!(?stack.obligation);
         .           
   232,080 ( 0.00%)          let all_bounds = stack
         .                       .obligation
         .                       .param_env
         .                       .caller_bounds()
         .                       .iter()
 6,774,100 ( 0.05%)              .filter_map(|o| o.to_opt_poly_trait_pred());
         .           
         .                   // Micro-optimization: filter out predicates relating to different traits.
         .                   let matching_bounds =
29,598,072 ( 0.21%)              all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());
         .           
         .                   // Keep only those bounds which may apply, and propagate overflow if it occurs.
         .                   for bound in matching_bounds {
         .                       // FIXME(oli-obk): it is suspicious that we are dropping the constness and
         .                       // polarity here.
   259,966 ( 0.00%)              let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;
   519,932 ( 0.00%)              if wc.may_apply() {
         .                           candidates.vec.push(ParamCandidate(bound));
         .                       }
         .                   }
         .           
         .                   Ok(())
         .               }
         .           
   319,112 ( 0.00%)      fn assemble_generator_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
   478,668 ( 0.00%)          if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because the substs on generator types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters.
         .                   let self_ty = obligation.self_ty().skip_binder();
         .                   match self_ty.kind() {
-- line 414 ----------------------------------------
-- line 418 ----------------------------------------
         .                           candidates.vec.push(GeneratorCandidate);
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_generator_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
   279,223 ( 0.00%)      }
         .           
         .               /// Checks for the artificial impl that the compiler will create for an obligation like `X :
         .               /// FnMut<..>` where `X` is a closure type.
         .               ///
         .               /// Note: the type parameters on a closure candidate are modeled as *output* type
         .               /// parameters and hence do not affect whether this trait is a match or not. They will be
         .               /// unified during the confirmation step.
   279,223 ( 0.00%)      fn assemble_closure_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
   438,779 ( 0.00%)          let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {
         .                       Some(k) => k,
         .                       None => {
         .                           return;
         .                       }
         .                   };
         .           
         .                   // Okay to skip binder because the substs on closure types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters
    13,846 ( 0.00%)          match *obligation.self_ty().skip_binder().kind() {
     1,274 ( 0.00%)              ty::Closure(_, closure_substs) => {
         .                           debug!(?kind, ?obligation, "assemble_unboxed_candidates");
     5,096 ( 0.00%)                  match self.infcx.closure_kind(closure_substs) {
         .                               Some(closure_kind) => {
         .                                   debug!(?closure_kind, "assemble_unboxed_candidates");
     6,360 ( 0.00%)                          if closure_kind.extends(kind) {
         .                                       candidates.vec.push(ClosureCandidate);
         .                                   }
         .                               }
         .                               None => {
         .                                   debug!("assemble_unboxed_candidates: closure_kind not yet known");
         .                                   candidates.vec.push(ClosureCandidate);
         .                               }
         .                           }
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_unboxed_closure_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
   239,334 ( 0.00%)      }
         .           
         .               /// Implements one of the `Fn()` family for a fn pointer.
   359,001 ( 0.00%)      fn assemble_fn_pointer_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We provide impl of all fn traits for fn pointers.
   398,890 ( 0.00%)          if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because what we are inspecting doesn't involve bound regions.
     4,684 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
    15,858 ( 0.00%)          match *self_ty.kind() {
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_fn_pointer_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true; // Could wind up being a fn() type.
         .                       }
         .                       // Provide an impl, but only for suitable `fn` pointers.
         .                       ty::FnPtr(_) => {
         .                           if let ty::FnSig {
         .                               unsafety: hir::Unsafety::Normal,
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
         .                               c_variadic: false,
         .                               ..
         .                           } = self_ty.fn_sig(self.tcx()).skip_binder()
         .                           {
         .                               candidates.vec.push(FnPointerCandidate { is_const: false });
         .                           }
         .                       }
         .                       // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).
       268 ( 0.00%)              ty::FnDef(def_id, _) => {
       402 ( 0.00%)                  if let ty::FnSig {
         .                               unsafety: hir::Unsafety::Normal,
         .                               abi: Abi::Rust,
         .                               c_variadic: false,
         .                               ..
       268 ( 0.00%)                  } = self_ty.fn_sig(self.tcx()).skip_binder()
         .                           {
       267 ( 0.00%)                      if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {
         .                                   candidates
         .                                       .vec
       536 ( 0.00%)                              .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });
         .                               }
         .                           }
         .                       }
         .                       _ => {}
         .                   }
   319,112 ( 0.00%)      }
         .           
         .               /// Searches for impls that might apply to `obligation`.
   448,050 ( 0.00%)      fn assemble_candidates_from_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(?obligation, "assemble_candidates_from_impls");
         .           
         .                   // Essentially any user-written impl will match with an error type,
         .                   // so creating `ImplCandidates` isn't useful. However, we might
         .                   // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)
         .                   // This helps us avoid overflow: see issue #72839
         .                   // Since compilation is already guaranteed to fail, this is just
         .                   // to try to show the 'nicest' possible errors to the user.
         .                   // We don't check for errors in the `ParamEnv` - in practice,
         .                   // it seems to cause us to be overly aggressive in deciding
         .                   // to give up searching for candidates, leading to spurious errors.
    89,610 ( 0.00%)          if obligation.predicate.references_error() {
         .                       return;
         .                   }
         .           
   134,415 ( 0.00%)          self.tcx().for_each_relevant_impl(
   358,440 ( 0.00%)              obligation.predicate.def_id(),
         .                       obligation.predicate.skip_binder().trait_ref.self_ty(),
   224,025 ( 0.00%)              |impl_def_id| {
   825,648 ( 0.01%)                  self.infcx.probe(|_| {
   691,220 ( 0.00%)                      if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {
    35,992 ( 0.00%)                          candidates.vec.push(ImplCandidate(impl_def_id));
         .                               }
         .                           });
         .                       },
         .                   );
   358,440 ( 0.00%)      }
         .           
         .               fn assemble_candidates_from_auto_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
     8,943 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty, "assemble_candidates_from_auto_impls");
         .           
    53,658 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
    35,772 ( 0.00%)          if self.tcx().trait_is_auto(def_id) {
       600 ( 0.00%)              match self_ty.kind() {
         .                           ty::Dynamic(..) => {
         .                               // For object types, we don't know what the closed
         .                               // over types are. This means we conservatively
         .                               // say nothing; a candidate may be added by
         .                               // `assemble_candidates_from_object_ty`.
         .                           }
         .                           ty::Foreign(..) => {
         .                               // Since the contents of foreign types is unknown,
-- line 577 ----------------------------------------
-- line 625 ----------------------------------------
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(
         .                       self_ty = ?obligation.self_ty().skip_binder(),
         .                       "assemble_candidates_from_object_ty",
         .                   );
         .           
   319,112 ( 0.00%)          self.infcx.probe(|_snapshot| {
         .                       // The code below doesn't care about regions, and the
         .                       // self-ty here doesn't escape this probe, so just erase
         .                       // any LBR.
    39,889 ( 0.00%)              let self_ty = self.tcx().erase_late_bound_regions(obligation.self_ty());
   199,583 ( 0.00%)              let poly_trait_ref = match self_ty.kind() {
         .                           ty::Dynamic(ref data, ..) => {
         4 ( 0.00%)                      if data.auto_traits().any(|did| did == obligation.predicate.def_id()) {
         .                                   debug!(
         .                                       "assemble_candidates_from_object_ty: matched builtin bound, \
         .                                        pushing candidate"
         .                                   );
         .                                   candidates.vec.push(BuiltinObjectCandidate);
         .                                   return;
         .                               }
         .           
        48 ( 0.00%)                      if let Some(principal) = data.principal() {
        20 ( 0.00%)                          if !self.infcx.tcx.features().object_safe_for_dispatch {
         .                                       principal.with_self_ty(self.tcx(), self_ty)
         .                                   } else if self.tcx().is_object_safe(principal.def_id()) {
         .                                       principal.with_self_ty(self.tcx(), self_ty)
         .                                   } else {
         .                                       return;
         .                                   }
         .                               } else {
         .                                   // Only auto trait bounds exist.
-- line 658 ----------------------------------------
-- line 664 ----------------------------------------
         .                               candidates.ambiguous = true; // could wind up being an object type
         .                               return;
         .                           }
         .                           _ => return,
         .                       };
         .           
         .                       debug!(?poly_trait_ref, "assemble_candidates_from_object_ty");
         .           
        52 ( 0.00%)              let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .                       let placeholder_trait_predicate =
        64 ( 0.00%)                  self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
         .           
         .                       // Count only those upcast versions that match the trait-ref
         .                       // we are looking for. Specifically, do not only check for the
         .                       // correct trait, but also the correct type parameters.
         .                       // For example, we may be trying to upcast `Foo` to `Bar<i32>`,
         .                       // but `Foo` is declared as `trait Foo: Bar<u32>`.
        28 ( 0.00%)              let candidate_supertraits = util::supertraits(self.tcx(), poly_trait_ref)
         .                           .enumerate()
         .                           .filter(|&(_, upcast_trait_ref)| {
        40 ( 0.00%)                      self.infcx.probe(|_| {
        24 ( 0.00%)                          self.match_normalize_trait_ref(
         .                                       obligation,
        32 ( 0.00%)                              upcast_trait_ref,
        32 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
         .                                   )
         .                                   .is_ok()
         .                               })
         .                           })
         .                           .map(|(idx, _)| ObjectCandidate(idx));
         .           
         .                       candidates.vec.extend(candidate_supertraits);
         .                   })
-- line 696 ----------------------------------------
-- line 739 ----------------------------------------
         .                   };
         .           
         .                   let def_id = data.principal_def_id()?;
         .           
         .                   return Some((normalized_ty, def_id));
         .               }
         .           
         .               /// Searches for unsizing that might apply to `obligation`.
     8,860 ( 0.00%)      fn assemble_candidates_for_unsizing(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We currently never consider higher-ranked obligations e.g.
         .                   // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not
         .                   // because they are a priori invalid, and we could potentially add support
         .                   // for them later, it's just that there isn't really a strong need for it.
-- line 755 ----------------------------------------
-- line 758 ----------------------------------------
         .                   //
         .                   // That said, one might try to write a fn with a where clause like
         .                   //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>
         .                   // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.
         .                   // Still, you'd be more likely to write that where clause as
         .                   //     T: Trait
         .                   // so it seems ok if we (conservatively) fail to accept that `Unsize`
         .                   // obligation above. Should be possible to extend this in the future.
     4,430 ( 0.00%)          let source = match obligation.self_ty().no_bound_vars() {
       886 ( 0.00%)              Some(t) => t,
         .                       None => {
         .                           // Don't add any candidates if there are bound regions.
         .                           return;
         .                       }
         .                   };
     2,658 ( 0.00%)          let target = obligation.predicate.skip_binder().trait_ref.substs.type_at(1);
         .           
         .                   debug!(?source, ?target, "assemble_candidates_for_unsizing");
         .           
    12,577 ( 0.00%)          match (source.kind(), target.kind()) {
         .                       // Trait+Kx+'a -> Trait+Ky+'b (upcasts).
         .                       (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {
         .                           // Upcast coercions permit several things:
         .                           //
         .                           // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`
         .                           // 2. Tightening the region bound, e.g., `Foo + 'a` to `Foo + 'b` if `'a: 'b`
         .                           // 3. Tightening trait to its super traits, eg. `Foo` to `Bar` if `Foo: Bar`
         .                           //
-- line 785 ----------------------------------------
-- line 843 ----------------------------------------
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // Ambiguous handling is below `T` -> `Trait`, because inference
         .                       // variables can still implement `Unsize<Trait>` and nested
         .                       // obligations will have the final say (likely deferred).
         .                       (&ty::Infer(ty::TyVar(_)), _) | (_, &ty::Infer(ty::TyVar(_))) => {
         .                           debug!("assemble_candidates_for_unsizing: ambiguous");
       504 ( 0.00%)                  candidates.ambiguous = true;
         .                       }
         .           
         .                       // `[T; n]` -> `[T]`
         .                       (&ty::Array(..), &ty::Slice(_)) => {
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // `Struct<T>` -> `Struct<U>`
       509 ( 0.00%)              (&ty::Adt(def_id_a, _), &ty::Adt(def_id_b, _)) if def_id_a.is_struct() => {
       822 ( 0.00%)                  if def_id_a == def_id_b {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       // `(.., T)` -> `(.., U)`
         .                       (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {
         .                           if tys_a.len() == tys_b.len() {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       _ => {}
         .                   };
     7,088 ( 0.00%)      }
         .           
   812,280 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, obligation, candidates))]
         .               fn assemble_candidates_for_trait_alias(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
   116,040 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty);
         .           
   464,160 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
   232,080 ( 0.00%)          if self.tcx().is_trait_alias(def_id) {
         .                       candidates.vec.push(TraitAliasCandidate(def_id));
         .                   }
         .               }
         .           
         .               /// Assembles the trait which are built-in to the language itself:
         .               /// `Copy`, `Clone` and `Sized`.
   148,832 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_builtin_bound_candidates(
         .                   &mut self,
         .                   conditions: BuiltinImplConditions<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
    75,774 ( 0.00%)          match conditions {
         .                       BuiltinImplConditions::Where(nested) => {
         .                           candidates
         .                               .vec
         .                               .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });
         .                       }
         .                       BuiltinImplConditions::None => {}
         .                       BuiltinImplConditions::Ambiguous => {
         .                           candidates.ambiguous = true;
         .                       }
         .                   }
         .               }
         .           
       736 ( 0.00%)      fn assemble_const_drop_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // If the predicate is `~const Drop` in a non-const environment, we don't actually need
         .                   // to check anything. We'll short-circuit checking any obligations in confirmation, too.
         .                   if obligation.param_env.constness() == hir::Constness::NotConst {
         .                       candidates.vec.push(ConstDropCandidate(None));
         .                       return;
         .                   }
         .           
        12 ( 0.00%)          let self_ty = self.infcx().shallow_resolve(obligation.self_ty());
        30 ( 0.00%)          match self_ty.skip_binder().kind() {
         .                       ty::Opaque(..)
         .                       | ty::Dynamic(..)
         .                       | ty::Error(_)
         .                       | ty::Bound(..)
         .                       | ty::Param(_)
         .                       | ty::Placeholder(_)
         .                       | ty::Projection(_) => {
         .                           // We don't know if these are `~const Drop`, at least
-- line 936 ----------------------------------------
-- line 958 ----------------------------------------
         .                       | ty::Tuple(_)
         .                       | ty::GeneratorWitness(_) => {
         .                           // These are built-in, and cannot have a custom `impl const Drop`.
         .                           candidates.vec.push(ConstDropCandidate(None));
         .                       }
         .           
         .                       ty::Adt(..) => {
         .                           // Find a custom `impl Drop` impl, if it exists
        15 ( 0.00%)                  let relevant_impl = self.tcx().find_map_relevant_impl(
        30 ( 0.00%)                      obligation.predicate.def_id(),
        15 ( 0.00%)                      obligation.predicate.skip_binder().trait_ref.self_ty(),
         .                               Some,
         .                           );
         .           
        10 ( 0.00%)                  if let Some(impl_def_id) = relevant_impl {
         .                               // Check that `impl Drop` is actually const, if there is a custom impl
         .                               if self.tcx().impl_constness(impl_def_id) == hir::Constness::Const {
         .                                   candidates.vec.push(ConstDropCandidate(Some(impl_def_id)));
         .                               }
         .                           } else {
         .                               // Otherwise check the ADT like a built-in type (structurally)
         .                               candidates.vec.push(ConstDropCandidate(None));
         .                           }
         .                       }
         .           
         .                       ty::Infer(_) => {
         .                           candidates.ambiguous = true;
         .                       }
         .                   }
       736 ( 0.00%)      }
         .           }

 9,661,138 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   446,433 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   410,876 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 6,580,013 ( 0.05%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
93,902,999 ( 0.68%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
   147,896 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
28,692,240 ( 0.21%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

 1,193,191 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 24 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
         .               fn tag(&self) -> &'static str {
         .                   "Equate"
         .               }
         .           
         .               fn tcx(&self) -> TyCtxt<'tcx> {
   266,204 ( 0.00%)          self.fields.tcx()
   147,051 ( 0.00%)      }
         .           
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
   165,926 ( 0.00%)          self.fields.param_env
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
   791,484 ( 0.01%)          self.a_is_expected
         .               }
         .           
   425,325 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   _item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   // N.B., once we are equating types, we don't care about
         .                   // variance, so don't try to lookup the variance here. This
         .                   // also avoids some cycles (e.g., #41849) since looking up
         .                   // variance requires computing types which can require
         .                   // performing trait matching (which then performs equality
         .                   // unification).
         .           
    85,065 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
   510,390 ( 0.00%)      }
         .           
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   _: ty::Variance,
         .                   _info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
         .               ) -> RelateResult<'tcx, T> {
         .                   self.relate(a, b)
         .               }
         .           
11,639,223 ( 0.08%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
         .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 1,293,247 ( 0.01%)          if a == b {
         .                       return Ok(a);
         .                   }
         .           
 1,061,670 ( 0.01%)          let infcx = self.fields.infcx;
 1,061,670 ( 0.01%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 1,061,670 ( 0.01%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
         .           
         .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
         .           
 2,955,800 ( 0.02%)          match (a.kind(), b.kind()) {
         .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
         .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
         .                       }
         .           
    11,461 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
    45,844 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
         .                       }
         .           
    85,288 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
   426,440 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
         .                       }
         .           
         .                       _ => {
 3,003,322 ( 0.02%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
         .                       }
         .                   }
         .           
         .                   Ok(a)
11,639,223 ( 0.08%)      }
         .           
   662,994 ( 0.00%)      fn regions(
         .                   &mut self,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
         .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
   220,998 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
   441,996 ( 0.00%)          self.fields
         .                       .infcx
         .                       .inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
   441,996 ( 0.00%)              .make_eqregion(origin, a, b);
   147,332 ( 0.00%)          Ok(a)
   662,994 ( 0.00%)      }
         .           
         .               fn consts(
         .                   &mut self,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
   208,387 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
         .               }
         .           
        60 ( 0.00%)      fn binders<T>(
         .                   &mut self,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
         .               where
         .                   T: Relate<'tcx>,
         .               {
         7 ( 0.00%)          if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {
        55 ( 0.00%)              self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;
        45 ( 0.00%)              self.fields.higher_ranked_sub(b, a, self.a_is_expected)
         .                   } else {
         .                       // Fast path for the common case.
         5 ( 0.00%)              self.relate(a.skip_binder(), b.skip_binder())?;
         6 ( 0.00%)              Ok(a)
         .                   }
        54 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {
         .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {
         .                   self.fields.add_const_equate_obligation(self.a_is_expected, a, b);
         .               }
         .           }

 2,925,054 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .           
         .               /// Returns a static string we can use for printouts.
         .               fn tag(&self) -> &'static str;
         .           
         .               /// Returns `true` if the value `a` is the "expected" type in the
         .               /// relation. Just affects error messages.
         .               fn a_is_expected(&self) -> bool;
         .           
     2,453 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   f(self)
     2,161 ( 0.00%)      }
         .           
         .               /// Generic relation routine suitable for most anything.
 1,235,199 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 6,695,362 ( 0.05%)          Relate::relate(self, a, b)
 1,015,776 ( 0.01%)      }
         .           
         .               /// Relate the two substitutions for the given item. The default
         .               /// is to look up the variance for the item and proceed
         .               /// accordingly.
   229,670 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   debug!(
         .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
         .                       item_def_id, a_subst, b_subst
         .                   );
         .           
         .                   let tcx = self.tcx();
         .                   let opt_variances = tcx.variances_of(item_def_id);
    91,868 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   206,703 ( 0.00%)      }
         .           
         .               /// Switch variance for the purpose of relating `a` and `b`.
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self>;
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Relate impls
         .           
   437,907 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: ty::TypeAndMut<'tcx>,
         .               b: ty::TypeAndMut<'tcx>,
         .               base_ty: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
         .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
   112,775 ( 0.00%)      if a.mutbl != b.mutbl {
     1,664 ( 0.00%)          Err(TypeError::Mutability)
         .               } else {
         .                   let mutbl = a.mutbl;
         .                   let (variance, info) = match mutbl {
         .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
         .                       ast::Mutability::Mut => {
         .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
         .                       }
         .                   };
    26,070 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   194,666 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
         .               }
   453,030 ( 0.00%)  }
         .           
       900 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               variances: Option<(DefId, &[ty::Variance])>,
         .               a_subst: SubstsRef<'tcx>,
         .               b_subst: SubstsRef<'tcx>,
         .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 3,246,758 ( 0.02%)      let tcx = relation.tcx();
   784,300 ( 0.01%)      let mut cached_ty = None;
         .           
         .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 5,953,302 ( 0.04%)          let (variance, variance_info) = match variances {
   107,112 ( 0.00%)              Some((ty_def_id, variances)) => {
   160,668 ( 0.00%)                  let variance = variances[i];
    53,556 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
         .                               let ty =
    44,766 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
         .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
         .                           } else {
         .                               ty::VarianceDiagInfo::default()
         .                           };
         .                           (variance, variance_info)
         .                       }
         .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
         .                   };
 1,237,569 ( 0.01%)          relation.relate_with_variance(variance, variance_info, a, b)
         .               });
         .           
         .               tcx.mk_substs(params)
     1,080 ( 0.00%)  }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
    41,951 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::FnSig<'tcx>,
         .                   b: ty::FnSig<'tcx>,
         .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
         .                   let tcx = relation.tcx();
         .           
    19,362 ( 0.00%)          if a.c_variadic != b.c_variadic {
         .                       return Err(TypeError::VariadicMismatch(expected_found(
         .                           relation,
         .                           a.c_variadic,
         .                           b.c_variadic,
         .                       )));
         .                   }
    15,420 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
         .                   let abi = relation.relate(a.abi, b.abi)?;
         .           
    27,787 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
         .                       return Err(TypeError::ArgCount);
         .                   }
         .           
    29,043 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    12,974 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    25,816 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
     5,164 ( 0.00%)              .map(|((a, b), is_output)| {
     5,164 ( 0.00%)                  if is_output {
     4,268 ( 0.00%)                      relation.relate(a, b)
         .                           } else {
         .                               relation.relate_with_variance(
         .                                   ty::Contravariant,
         .                                   ty::VarianceDiagInfo::default(),
         .                                   a,
         .                                   b,
         .                               )
         .                           }
         .                       })
         .                       .enumerate()
    17,198 ( 0.00%)              .map(|(i, r)| match r {
         .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
         .                               Err(TypeError::ArgumentSorts(exp_found, i))
         .                           }
         .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
         .                               Err(TypeError::ArgumentMutability(i))
         .                           }
    29,876 ( 0.00%)                  r => r,
         .                       });
    23,845 ( 0.00%)          Ok(ty::FnSig {
         .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
     3,227 ( 0.00%)              c_variadic: a.c_variadic,
         .                       unsafety,
         .                       abi,
         .                   })
    29,043 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::BoundConstness,
         .                   b: ty::BoundConstness,
         .               ) -> RelateResult<'tcx, ty::BoundConstness> {
         6 ( 0.00%)          if a != b {
         .                       Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ast::Unsafety,
         .                   b: ast::Unsafety,
         .               ) -> RelateResult<'tcx, ast::Unsafety> {
     3,227 ( 0.00%)          if a != b {
         .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
         .                   a: abi::Abi,
         .                   b: abi::Abi,
         .               ) -> RelateResult<'tcx, abi::Abi> {
         .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
 2,790,603 ( 0.02%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionTy<'tcx>,
         .                   b: ty::ProjectionTy<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
   597,455 ( 0.00%)          if a.item_def_id != b.item_def_id {
    21,012 ( 0.00%)              Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let substs = relation.relate(a.substs, b.substs)?;
   349,320 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
         .                   }
 1,803,547 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
       391 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialProjection<'tcx>,
         .                   b: ty::ExistentialProjection<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
       287 ( 0.00%)          if a.item_def_id != b.item_def_id {
         .                       Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let term = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
       153 ( 0.00%)                  a.term,
       164 ( 0.00%)                  b.term,
         .                       )?;
       210 ( 0.00%)              let substs = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
        41 ( 0.00%)                  a.substs,
        41 ( 0.00%)                  b.substs,
         .                       )?;
       380 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
         .                   }
       369 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 6,072,234 ( 0.04%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitRef<'tcx>,
         .                   b: ty::TraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
         .                   // Different traits cannot be related.
 1,302,946 ( 0.01%)          if a.def_id != b.def_id {
     3,810 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
   433,892 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
 1,068,980 ( 0.01%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
         .                   }
 3,903,114 ( 0.03%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
       561 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialTraitRef<'tcx>,
         .                   b: ty::ExistentialTraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
         .                   // Different traits cannot be related.
     1,074 ( 0.00%)          if a.def_id != b.def_id {
         .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
       490 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
       554 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
         .                   }
       357 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Debug, Clone, TypeFoldable)]
         .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
         .           
         .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
         .           
         .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
         .               #[inline]
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 2,926,709 ( 0.02%)          relation.tys(a, b)
         .               }
         .           }
         .           
         .           /// The main "type relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
 5,714,504 ( 0.04%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: Ty<'tcx>,
         .               b: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, Ty<'tcx>> {
         .               let tcx = relation.tcx();
         .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
12,759,152 ( 0.09%)      match (a.kind(), b.kind()) {
         .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_tys")
         .                   }
         .           
         .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
         .                       bug!("bound types encountered in super_relate_tys")
         .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
         .           
         .                   (&ty::Never, _)
         .                   | (&ty::Char, _)
         .                   | (&ty::Bool, _)
         .                   | (&ty::Int(_), _)
         .                   | (&ty::Uint(_), _)
         .                   | (&ty::Float(_), _)
         .                   | (&ty::Str, _)
    49,304 ( 0.00%)              if a == b =>
         .                   {
         .                       Ok(a)
         .                   }
         .           
   577,978 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
         .           
         .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
         .           
 1,533,040 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
   534,524 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
         .                       Ok(tcx.mk_adt(a_def, substs))
         .                   }
         .           
         .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
         .           
     2,401 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
       686 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
         .                           relation.relate_with_variance(
         .                               ty::Contravariant,
         .                               ty::VarianceDiagInfo::default(),
       343 ( 0.00%)                      a_region,
         .                               b_region,
         .                           )
         .                       })?;
         .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
         .                   }
         .           
         .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
         .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
         .                       // inside the binder so we can related them
         .                       let a_types = a_types.map_bound(GeneratorWitness);
         .                       let b_types = b_types.map_bound(GeneratorWitness);
         .                       // Then remove the GeneratorWitness for the result
         .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
         .                       Ok(tcx.mk_generator_witness(types))
         .                   }
         .           
    13,536 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
         .                       // All Closure types with the same id represent
         .                       // the (anonymous) type of the same closure expression. So
         .                       // all of their regions should be equated.
     3,384 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_closure(a_id, &substs))
         .                   }
         .           
    19,842 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
     9,190 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ptr(mt))
         .                   }
         .           
 1,156,086 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   323,848 ( 0.00%)              let r = relation.relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_r,
         .                           b_r,
         .                       )?;
         .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
         .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
   479,816 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ref(r, mt))
         .                   }
         .           
   191,254 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
     3,213 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
    76,582 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    32,940 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
         .                           Err(err) => {
         .                               // Check whether the lengths are both concrete/known values,
         .                               // but are unequal, for better diagnostics.
         .                               //
         .                               // It might seem dubious to eagerly evaluate these constants here,
         .                               // we however cannot end up with errors in `Relate` during both
         .                               // `type_of` and `predicates_of`. This means that evaluating the
         .                               // constants should not cause cycle errors here.
   136,555 ( 0.00%)                      let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());
    81,933 ( 0.00%)                      let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());
   163,866 ( 0.00%)                      match (sz_a, sz_b) {
   109,244 ( 0.00%)                          (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(
         .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
         .                                   ),
         .                                   _ => Err(err),
         .                               }
         .                           }
         .                       }
         .                   }
         .           
    22,741 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
       948 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
         .                       Ok(tcx.mk_slice(t))
         .                   }
         .           
    31,280 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    31,280 ( 0.00%)              if as_.len() == bs.len() {
         .                           Ok(tcx.mk_tup(
   133,322 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
         .                           )?)
     2,424 ( 0.00%)              } else if !(as_.is_empty() || bs.is_empty()) {
     3,216 ( 0.00%)                  Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
         .                       } else {
         .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
         .                       }
         .                   }
         .           
     3,858 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
     6,430 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     5,144 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
         .                       Ok(tcx.mk_fn_def(a_def_id, substs))
         .                   }
         .           
         .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    23,640 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
         .                       Ok(tcx.mk_fn_ptr(fty))
         .                   }
         .           
         .                   // these two are already handled downstream in case of lazy normalization
    77,105 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
         .                       let projection_ty = relation.relate(a_data, b_data)?;
         .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
         .                   }
         .           
       360 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
       900 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
     1,080 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
         .                       Ok(tcx.mk_opaque(a_def_id, substs))
         .                   }
         .           
         .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
         .               }
 6,428,817 ( 0.05%)  }
         .           
         .           /// The main "const relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
   356,790 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
         .               let tcx = relation.tcx();
         .           
         .               // FIXME(oli-obk): once const generics can have generic types, this assertion
         .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
    71,358 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
    71,358 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
    35,679 ( 0.00%)      if a_ty != b_ty {
         .                   relation.tcx().sess.delay_span_bug(
         .                       DUMMY_SP,
         .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
         .                   );
         .               }
         .           
         .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
    35,679 ( 0.00%)      let a = eagerly_eval(a);
    71,358 ( 0.00%)      let b = eagerly_eval(b);
         .           
         .               // Currently, the values that can be unified are primitive types,
         .               // and those that derive both `PartialEq` and `Eq`, corresponding
         .               // to structural-match types.
   392,469 ( 0.00%)      let is_match = match (a.val, b.val) {
         .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
         .                   }
         .           
         .                   (ty::ConstKind::Error(_), _) => return Ok(a),
         .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
         .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
         .                               substs,
         .                               promoted: au.promoted,
         .                           }),
         .                           ty: a.ty,
         .                       }));
         .                   }
         .                   _ => false,
         .               };
   186,751 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
   321,111 ( 0.00%)  }
         .           
         .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a_val: ConstValue<'tcx>,
         .               b_val: ConstValue<'tcx>,
         .               // FIXME(oli-obk): these arguments should go away with valtrees
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               // FIXME(oli-obk): this should just be `bool` with valtrees
         .           ) -> RelateResult<'tcx, bool> {
    35,679 ( 0.00%)      let tcx = relation.tcx();
   392,469 ( 0.00%)      Ok(match (a_val, b_val) {
   784,938 ( 0.01%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
    35,679 ( 0.00%)              a_val == b_val
         .                   }
         .                   (
         .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
         .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
         .                   ) => {
         .                       a_val == b_val
         .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
         .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   _ => false,
         .               })
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
     3,430 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
       343 ( 0.00%)          let tcx = relation.tcx();
         .           
         .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
         .                   // We need to perform this deduplication as we sometimes generate duplicate projections
         .                   // in `a`.
         .                   let mut a_v: Vec<_> = a.into_iter().collect();
         .                   let mut b_v: Vec<_> = b.into_iter().collect();
         .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
       220 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   a_v.dedup();
         .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   b_v.dedup();
     1,029 ( 0.00%)          if a_v.len() != b_v.len() {
         .                       return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
         .                   }
         .           
     1,372 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
         .                       use crate::ty::ExistentialPredicate::*;
     1,528 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
     1,372 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
         .                               .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
       182 ( 0.00%)                  (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
         .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
         .                           ))),
         .                           (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
         .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
         .                       }
         .                   });
       686 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
     2,744 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ClosureSubsts<'tcx>,
         .                   b: ty::ClosureSubsts<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: SubstsRef<'tcx>,
         .                   b: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   198,550 ( 0.00%)          relate_substs(relation, None, a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   502,379 ( 0.00%)          relation.regions(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    37,095 ( 0.00%)          relation.consts(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
    52,552 ( 0.00%)          relation.binders(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 4,884,295 ( 0.04%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GenericArg<'tcx>,
         .                   b: GenericArg<'tcx>,
         .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
 6,907,092 ( 0.05%)          match (a.unpack(), b.unpack()) {
         .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
         .                           Ok(relation.relate(a_lt, b_lt)?.into())
         .                       }
         .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    18,986 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
         .                       }
         .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
         .                           Ok(relation.relate(a_ct, b_ct)?.into())
         .                       }
         .                       (GenericArgKind::Lifetime(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Type(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Const(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                   }
 5,661,245 ( 0.04%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ImplPolarity,
         .                   b: ty::ImplPolarity,
         .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
         6 ( 0.00%)          if a != b {
         .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
    19,575 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitPredicate<'tcx>,
         .                   b: ty::TraitPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        36 ( 0.00%)          Ok(ty::TraitPredicate {
     8,910 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        36 ( 0.00%)              constness: relation.relate(a.constness, b.constness)?,
        12 ( 0.00%)              polarity: relation.relate(a.polarity, b.polarity)?,
         .                   })
    16,020 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
       123 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
       287 ( 0.00%)          Ok(match (a, b) {
        90 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
         .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
         .                       _ => return Err(TypeError::Mismatch),
         .                   })
       164 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionPredicate<'tcx>,
         .                   b: ty::ProjectionPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
-- line 855 ----------------------------------------
-- line 862 ----------------------------------------
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Error handling
         .           
         .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
         .           where
         .               R: TypeRelation<'tcx>,
         .           {
     2,536 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
         .           }

20,282,323 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 10,806,491 ( 0.08%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    775,760 ( 0.01%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
264,025,905 ( 1.91%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,098,492 ( 0.01%)          self.stride += Group::WIDTH;
  1,098,492 ( 0.01%)          self.pos += self.stride;
    896,406 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    973,004 ( 0.01%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,924,610 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    609,480 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,586,922 ( 0.02%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    714,078 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,858,745 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,589,994 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      4,384 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     11,040 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
      2,330 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     43,570 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    296,912 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    296,912 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    593,824 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     79,420 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    514,404 ( 0.00%)          self.erase_no_drop(&item);
        964 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,923,719 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      6,820 ( 0.00%)          match self.find(hash, eq) {
     44,874 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    705,649 ( 0.01%)              None => None,
          .                   }
  5,893,692 ( 0.04%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    119,042 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,568,150 ( 0.02%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,680,284 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  3,934,341 ( 0.03%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,509,736 ( 0.02%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 16,626,786 ( 0.12%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     43,921 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 10,402,074 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 12,285,891 ( 0.09%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,743,816 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        247 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,057,862 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     10,711 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,013,545 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     63,134 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,459,706 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,498,402 ( 0.03%)          self.table.items += 1;
          .                   bucket
     21,364 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
     15,728 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     29,037 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    101,121 ( 0.00%)              eq(self.bucket(index).as_ref())
     11,400 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      3,168 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
     15,824 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    114,273 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
          .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     69,698 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  4,490,133 ( 0.03%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          4 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    588,937 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     37,724 ( 0.00%)          let allocation = self.into_allocation();
     28,293 ( 0.00%)          RawIntoIter {
     47,155 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     19,532 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      2,327 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  5,463,303 ( 0.04%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,390,630 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    711,028 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,858,104 ( 0.01%)          Ok(Self {
          .                       ctrl,
    796,652 ( 0.01%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  2,466,876 ( 0.02%)      }
          .           
          .               #[inline]
     94,718 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     25,304 ( 0.00%)          if capacity == 0 {
     22,000 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,536,910 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     46,962 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     94,718 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    765,095 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    765,095 ( 0.01%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,530,190 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  6,975,366 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 20,583,420 ( 0.15%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  9,456,392 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    512,420 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 23,769,860 ( 0.17%)              for bit in group.match_byte(h2_hash) {
 50,361,352 ( 0.36%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 30,932,534 ( 0.22%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  5,924,542 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
         18 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
         18 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 25,171,408 ( 0.18%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
134,212,276 ( 0.97%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 13,000,435 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 10,400,348 ( 0.08%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        162 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 19,566,819 ( 0.14%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  6,522,273 ( 0.05%)          *self.ctrl(index) = ctrl;
  6,526,594 ( 0.05%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,975,357 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  1,795,358 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
 10,104,231 ( 0.07%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      3,654 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
  1,037,586 ( 0.01%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    479,852 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    959,719 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    959,716 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  2,046,257 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
         12 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    479,852 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
      9,045 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  3,950,186 ( 0.03%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    479,852 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        384 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         54 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
         18 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    296,043 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     43,422 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     54,554 ( 0.00%)          self.items = 0;
     43,422 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    692,356 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,769,424 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,318,585 ( 0.02%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,769,424 ( 0.02%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     29,456 ( 0.00%)      fn clone(&self) -> Self {
      4,193 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
     33,138 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        932 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,324,385 ( 0.03%)      fn drop(&mut self) {
  4,367,730 ( 0.03%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  4,518,338 ( 0.03%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     37,724 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     47,155 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,444,896 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    172,469 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    263,766 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,173,237 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     38,719 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     20,354 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     89,867 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      9,008 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    195,496 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    477,144 ( 0.00%)          if let Some(b) = self.iter.next() {
  1,768,544 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    390,992 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     12,380 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     93,195 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        798 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      2,767 ( 0.00%)      fn next(&mut self) -> Option<T> {
      1,575 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      5,534 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          8 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     11,448 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      1,431 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     11,448 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 75,343,688 ( 0.54%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
18,267,176 ( 0.13%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
11,416,985 ( 0.08%)              .intern(kind, |kind| {
   213,612 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   427,224 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
20,550,573 ( 0.15%)      }
         .           
         .               #[inline(never)]
10,293,200 ( 0.07%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 9,006,550 ( 0.07%)              .intern(kind, |kind| {
   577,140 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
11,579,850 ( 0.08%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   953,847 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
   693,466 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   139,664 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   139,664 ( 0.00%)          self.data.get(&id.local_id)
   556,000 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
    13,188 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         1 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     8,792 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    50,112 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   592,992 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    50,112 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   140,391 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    93,594 ( 0.00%)          match *qpath {
   244,332 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    36,450 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   233,985 ( 0.00%)      }
         .           
     1,022 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     9,937 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     1,022 ( 0.00%)      }
         .           
    15,236 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    33,971 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    30,472 ( 0.00%)      }
         .           
    50,640 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    50,640 ( 0.00%)      }
         .           
    65,861 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    65,861 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    65,861 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
     8,606 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     1,883 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    13,152 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     6,576 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    23,206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    11,603 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     3,924 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     1,962 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   134,040 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    67,020 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   232,336 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   116,168 ( 0.00%)      }
         .           
   957,150 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   159,525 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
   797,625 ( 0.01%)      }
         .           
   210,746 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   210,746 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   421,492 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    34,300 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    17,150 ( 0.00%)      }
         .           
    74,491 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    74,491 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   148,982 ( 0.00%)      }
         .           
    49,973 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    49,973 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
    99,946 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    22,396 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   191,149 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   191,199 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    89,292 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    44,646 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   140,120 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    70,060 ( 0.00%)      }
         .           
    85,235 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   170,470 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   170,470 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    10,065 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     2,013 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,000 ( 0.00%)      }
         .           
     8,785 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     1,757 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     4,896 ( 0.00%)      }
         .           
     8,915 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    17,830 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    23,370 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    17,830 ( 0.00%)      }
         .           
    54,084 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    72,112 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    45,504 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    13,738 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    23,384 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    11,692 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    47,516 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    23,758 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    14,286 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     7,143 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
    17,408 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
    21,760 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     4,332 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     2,166 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         2 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    13,124 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     6,562 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     8,792 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     4,396 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     4,334 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     2,167 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         2 ( 0.00%)      }
         .           
       669 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       223 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       446 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     2,166 ( 0.00%)          &self.coercion_casts
     2,166 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
       478 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     1,001 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     3,518 ( 0.00%)      pub fn is_identity(&self) -> bool {
     7,036 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     3,518 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
    12,200 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     5,889 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       606 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     7,036 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     6,006 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    41,906 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   101,020 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    40,408 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    80,816 ( 0.00%)      }
         .           
     7,500 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     2,500 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    10,000 ( 0.00%)      }
         .           
    39,015 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     7,803 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    54,621 ( 0.00%)      }
         .           
    10,000 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     2,500 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    12,500 ( 0.00%)      }
         .           
     1,017 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     1,808 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
       452 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
         .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
         .                   let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
         .               }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    14,832 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
     7,416 ( 0.00%)          let attrs = self.get_attrs(def_id);
    31,518 ( 0.00%)          let get = |name| {
     7,416 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
         8 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
         4 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
         2 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
    37,080 ( 0.00%)          };
    11,124 ( 0.00%)          (
    11,124 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     5,562 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    14,832 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
       532 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
        76 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
       597 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
       608 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 5,809,552 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 7,469,424 ( 0.05%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       343 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       392 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    63,728 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    72,832 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   430,976 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   492,544 ( 0.00%)      }
         .           
    48,314 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    62,118 ( 0.00%)      }
         .           
 1,232,770 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 1,408,880 ( 0.01%)      }
         .           
       110 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    62,788 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
    11,386 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
       216 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
         .               pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
-- line 1274 ----------------------------------------
-- line 1277 ----------------------------------------
         .                   } else {
         .                       self.untracked_resolutions.cstore.def_path(id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    21,031 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
       660 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   121,974 ( 0.00%)          &*self.untracked_resolutions.cstore
    60,987 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       262 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     1,309 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     4,332 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     6,498 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     2,166 ( 0.00%)          self.sess.opts.borrowck_mode
     8,664 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
     2,303 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
     1,743 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
         .                   self.sess.crate_types().iter().any(|crate_type| {
         .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
         .                   self.mk_imm_ref(
         .                       self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
         .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
         .               }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    10,648 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     7,744 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    17,424 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
     8,712 ( 0.00%)      }
         .           
         .               pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
         .               }
         .           
 2,959,824 ( 0.02%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 3,382,656 ( 0.02%)      }
         .           
         .               pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
         .               }
         .           
     1,204 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
     1,376 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   373,307 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,425,127 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   701,123 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   701,058 ( 0.01%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 2,201,122 ( 0.02%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   344,052 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 1,209,152 ( 0.01%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 2,870,943 ( 0.02%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   177,534 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   580,881 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
    66,478 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 4,749,512 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 2,408,529 ( 0.02%)                  self.interners.$name.intern(v, |v| {
    14,667 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 5,341,536 ( 0.04%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
29,786,264 ( 0.21%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
26,732,862 ( 0.19%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
    14,796 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
    11,097 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
     2,466 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
    11,097 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
     6,282 ( 0.00%)              let trait_did = stack.pop()?;
     3,141 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
    18,729 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
     9,408 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   564,544 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
17,500,823 ( 0.13%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
14,136,220 ( 0.10%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
74,977,464 ( 0.54%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
 8,333,089 ( 0.06%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
74,977,464 ( 0.54%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     3,076 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
     3,076 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     4,711 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     4,711 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
       290 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
       290 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
       870 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
        24 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
        45 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
         3 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        12 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
         3 ( 0.00%)                          assert!(has_default);
         9 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
         3 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
        24 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        15 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
        33 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
     5,819 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     6,072 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     3,512 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     7,636 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    84,328 ( 0.00%)          iter.intern_with(|ts| {
    33,968 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    86,977 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    75,366 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     1,730 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
       104 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     8,914 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     9,708 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
         .                   self.mk_ty(Infer(it))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
        70 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
   185,640 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   125,280 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    21,960 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
    45,720 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
   185,640 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
       873 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
       873 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     1,746 ( 0.00%)      }
         .           
         2 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
         6 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
         4 ( 0.00%)      }
         .           
        20 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
        20 ( 0.00%)          self.mk_place_elem(
         .                       place,
        40 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
        40 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
         .           
         .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Index(index))
         .               }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
     8,055 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     8,950 ( 0.00%)      }
         .           
     2,548 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       364 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
       220 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
     1,456 ( 0.00%)          self._intern_poly_existential_predicates(eps)
     2,912 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    50,743 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
    38,714 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    29,058 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   183,898 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
       232 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 4,821,893 ( 0.03%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   132,206 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    37,752 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    19,308 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
   142,721 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    10,758 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
   563,777 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   888,192 ( 0.01%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    17,522 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     3,781 ( 0.00%)              c_variadic,
     4,863 ( 0.00%)              unsafety,
     5,398 ( 0.00%)              abi,
     3,330 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
     1,466 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        82 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    17,703 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
         .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 2,116,757 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
         .               }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    45,430 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
    87,936 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   175,872 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 2,812,273 ( 0.02%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
   564,466 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   564,466 ( 0.00%)          let hir = self.hir();
         .                   loop {
 1,149,618 ( 0.01%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 1,516,584 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
   907,704 ( 0.01%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
   806,380 ( 0.01%)      }
         .           
    34,992 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   197,442 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    15,134 ( 0.00%)              let next = self.hir().get_parent_node(id);
    45,402 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    34,992 ( 0.00%)      }
         .           
       532 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
     8,815 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     1,921 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       304 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    35,861 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    10,246 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
    10,246 ( 0.00%)          Some(&*candidates)
    40,984 ( 0.00%)      }
         .           
    49,637 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    63,819 ( 0.00%)      }
         .           
     8,469 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       462 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     7,528 ( 0.00%)      }
         .           
    83,076 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
   106,812 ( 0.00%)      }
         .           
   107,253 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
   107,253 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
     2,070 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       207 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        26 ( 0.00%)              match self.lookup_const_stability(def_id) {
        52 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
        16 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
     1,863 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   167,400 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
21,563,750 ( 0.16%)          E::intern_with(self, f)
   161,388 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 5,883,591 ( 0.04%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 3,158,364 ( 0.02%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         6 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        51 ( 0.00%)                  assert!(iter.next().is_none());
   267,911 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
     1,425 ( 0.00%)                  assert!(iter.next().is_none());
   177,065 ( 0.00%)                  f(&[t0, t1])
         .                       }
     9,464 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 3,520,417 ( 0.03%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    63,956 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
     1,332 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    52,364 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 6,410,457 ( 0.05%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 5,094,170 ( 0.04%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
       951 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
   206,977 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     3,956 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     3,956 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     5,817 ( 0.00%)                  assert!(iter.next().is_none());
   514,602 ( 0.00%)                  f(&[t0, t1])
         .                       }
    53,624 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 7,220,821 ( 0.05%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   701,123 ( 0.01%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    55,200 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

14,920,709 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 15 ----------------------------------------
         .               b: B,
         .               // index, len and a_len are only used by the specialized version of zip
         .               index: usize,
         .               len: usize,
         .               a_len: usize,
         .           }
         .           impl<A: Iterator, B: Iterator> Zip<A, B> {
         .               pub(in crate::iter) fn new(a: A, b: B) -> Zip<A, B> {
        32 ( 0.00%)          ZipImpl::new(a, b)
         .               }
         .               fn super_nth(&mut self, mut n: usize) -> Option<(A::Item, B::Item)> {
         .                   while let Some(x) = Iterator::next(self) {
         .                       if n == 0 {
         .                           return Some(x);
         .                       }
         .                       n -= 1;
         .                   }
-- line 31 ----------------------------------------
-- line 63 ----------------------------------------
         .           /// assert!(iter.next().is_none());
         .           /// ```
         .           #[stable(feature = "iter_zip", since = "1.59.0")]
         .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
         .           where
         .               A: IntoIterator,
         .               B: IntoIterator,
         .           {
   151,379 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> Iterator for Zip<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator,
         .           {
-- line 79 ----------------------------------------
-- line 136 ----------------------------------------
         .                   Self: Iterator + TrustedRandomAccessNoCoerce;
         .           }
         .           
         .           // Work around limitations of specialization, requiring `default` impls to be repeated
         .           // in intermediary impls.
         .           macro_rules! zip_impl_general_defaults {
         .               () => {
         .                   default fn new(a: A, b: B) -> Self {
        64 ( 0.00%)              Zip {
         .                           a,
         .                           b,
         .                           index: 0, // unused
         .                           len: 0,   // unused
         .                           a_len: 0, // unused
         .                       }
         .                   }
         .           
         .                   #[inline]
         .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
   567,768 ( 0.00%)              let x = self.a.next()?;
   386,600 ( 0.00%)              let y = self.b.next()?;
    25,206 ( 0.00%)              Some((x, y))
    50,992 ( 0.00%)          }
         .           
         .                   #[inline]
         .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                       self.super_nth(n)
         .                   }
         .           
         .                   #[inline]
         .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
         .               B: Iterator,
         .           {
         .               type Item = (A::Item, B::Item);
         .           
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
        82 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
       258 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
         .           
         .                   let lower = cmp::min(a_lower, b_lower);
         .           
         .                   let upper = match (a_upper, b_upper) {
         .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
         .                       (Some(x), None) => Some(x),
         .                       (None, Some(y)) => Some(y),
         .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
         .           where
         .               A: TrustedRandomAccessNoCoerce + Iterator,
         .               B: TrustedRandomAccessNoCoerce + Iterator,
         .           {
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
       686 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
         .                   (size, Some(size))
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
     1,296 ( 0.00%)          let idx = self.index + idx;
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
         .               }
         .           }
         .           
         .           #[doc(hidden)]
         .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
-- line 258 ----------------------------------------
-- line 263 ----------------------------------------
         .               fn new(a: A, b: B) -> Self {
         .                   let a_len = a.size();
         .                   let len = cmp::min(a_len, b.size());
         .                   Zip { a, b, index: 0, len, a_len }
         .               }
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
27,126,501 ( 0.20%)          if self.index < self.len {
         .                       let i = self.index;
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
 6,708,123 ( 0.05%)              self.index += 1;
         .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
         .                       unsafe {
        93 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
         .                       }
        34 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
         .                       let i = self.index;
         .                       // as above, increment before executing code that may panic
         .                       self.index += 1;
         .                       self.len += 1;
         .                       // match the base implementation's potential side effects
         .                       // SAFETY: we just checked that `i` < `self.a.len()`
         .                       unsafe {
         .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
         .                       None
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
 2,421,960 ( 0.02%)          let len = self.len - self.index;
         .                   (len, Some(len))
         .               }
         .           
         .               #[inline]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   let delta = cmp::min(n, self.len - self.index);
         .                   let end = self.index + delta;
         .                   while self.index < end {
-- line 306 ----------------------------------------
-- line 535 ----------------------------------------
         .           #[unstable(feature = "trusted_random_access", issue = "none")]
         .           #[rustc_specialization_trait]
         .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
         .               // Convenience method.
         .               fn size(&self) -> usize
         .               where
         .                   Self: Iterator,
         .               {
     6,008 ( 0.00%)          self.size_hint().0
         .               }
         .               /// `true` if getting an iterator element may have side effects.
         .               /// Remember to take inner iterators into account.
         .               const MAY_HAVE_SIDE_EFFECT: bool;
         .           }
         .           
         .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
         .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
         .           /// Same requirements calling `get_unchecked` directly.
         .           #[doc(hidden)]
         .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
         .           where
         .               I: Iterator,
         .           {
         .               // SAFETY: the caller must uphold the contract for
         .               // `Iterator::__iterator_get_unchecked`.
    40,283 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
         .           }
         .           
         .           unsafe trait SpecTrustedRandomAccess: Iterator {
         .               /// If `Self: TrustedRandomAccess`, it must be safe to call
         .               /// `Iterator::__iterator_get_unchecked(self, index)`.
         .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
         .           }
         .           
-- line 571 ----------------------------------------

 4,232,336 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        18 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    15,286 ( 0.00%)      pub ty: Ty<'tcx>,
    76,430 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    82,507 ( 0.00%)      pub scope: DefId,
   163,844 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
 3,484,048 ( 0.03%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
   244,210 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
   430,527 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     2,865 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   563,830 ( 0.00%)      pub var: BoundVar,
   530,854 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
62,250,633 ( 0.45%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 5,658,190 ( 0.04%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   189,139 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 5,856,553 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    14,993 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
    19,436 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
       334 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       668 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
     1,336 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       668 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     7,048 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    52,110 ( 0.00%)              [
    14,714 ( 0.00%)                  ref parent_substs @ ..,
    15,420 ( 0.00%)                  closure_kind_ty,
     6,802 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    10,980 ( 0.00%)                  tupled_upvars_ty,
    28,192 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
    21,144 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        99 ( 0.00%)      pub fn is_valid(self) -> bool {
       198 ( 0.00%)          self.substs.len() >= 3
       198 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
       198 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
     1,776 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     2,943 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     2,061 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
     1,184 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    31,265 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     3,613 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     7,226 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
       258 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       258 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       516 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     2,969 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     5,938 ( 0.00%)          match ty.kind() {
    11,876 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     8,907 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     1,184 ( 0.00%)          let tupled_tys = match self {
     1,518 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
     2,444 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
     2,110 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     1,852 ( 0.00%)          match self {
     2,190 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    13,326 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    15,294 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       495 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
       640 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
       594 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     1,485 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
       841 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         4 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     1,320 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
        19 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
       570 ( 0.00%)          self[0]
       513 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
        76 ( 0.00%)              })
         .                       .transpose()
        57 ( 0.00%)      }
         .           
       160 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       320 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
        84 ( 0.00%)              predicate
       148 ( 0.00%)                  .map_bound(|pred| match pred {
        32 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
-- line 875 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    46,153 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
54,995,180 ( 0.40%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    19,140 ( 0.00%)      pub def_id: DefId,
25,718,500 ( 0.19%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
    13,855 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    55,420 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,818 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       808 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     1,212 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,616 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     7,648 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       956 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    10,516 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
   240,480 ( 0.00%)          self.skip_binder().def_id
    80,160 ( 0.00%)      }
         .           
    72,717 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
   145,434 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    72,717 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        68 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     6,373 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
       712 ( 0.00%)      pub def_id: DefId,
     6,751 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
        48 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
        48 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        30 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        15 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
        75 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        12 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        12 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        16 ( 0.00%)      }
         .           }
         .           
   933,345 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    28,321 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 3,481,590 ( 0.03%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
   125,955 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   504,168 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 1,534,734 ( 0.01%)          Binder(value, ty::List::empty())
   125,869 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
 1,373,203 ( 0.01%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
22,890,006 ( 0.17%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
   361,857 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
   313,755 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     2,729 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   307,151 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 3,161,459 ( 0.02%)          Binder(value, self.1)
     2,723 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   582,216 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
 2,391,239 ( 0.02%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 4,080,796 ( 0.03%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     4,750 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
    10,953 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
10,082,171 ( 0.07%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
 1,201,446 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
 4,068,006 ( 0.03%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
   519,757 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
   148,502 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   594,008 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
   117,138 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    50,202 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
    83,670 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
   150,606 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
   665,262 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    73,918 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    73,918 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   813,098 ( 0.01%)      }
         .           
   144,506 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   433,518 ( 0.00%)          self.substs.type_at(0)
   289,012 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   149,824 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   120,760 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
    21,863 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   187,357 ( 0.00%)      pub c_variadic: bool,
    37,061 ( 0.00%)      pub unsafety: hir::Unsafety,
   157,037 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
   100,831 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   431,392 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   201,662 ( 0.00%)      }
         .           
    65,074 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   479,020 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   130,148 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    13,021 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    28,562 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     2,198 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    17,174 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     4,394 ( 0.00%)          self.skip_binder().c_variadic
     2,197 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    14,594 ( 0.00%)          self.skip_binder().unsafety
     7,297 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    28,676 ( 0.00%)          self.skip_binder().abi
     7,169 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       652 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
    87,438 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
     4,968 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
     2,484 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
     3,708 ( 0.00%)          ParamTy::new(def.index, def.name)
     1,854 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       170 ( 0.00%)      pub index: u32,
       170 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
18,238,735 ( 0.13%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        22 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
 1,058,434 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    57,656 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
   100,907 ( 0.00%)      pub def_id: DefId,
   121,465 ( 0.00%)      pub index: u32,
   232,572 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     9,665 ( 0.00%)      pub index: u32,
     5,606 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
    19,436 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   330,544 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        13 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     1,170 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
        56 ( 0.00%)      pub item_def_id: DefId,
       920 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       230 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       196 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
        84 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        56 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
        28 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
       252 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
        15 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
         9 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
        12 ( 0.00%)          Self {
         6 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
         3 ( 0.00%)              term: projection_predicate.term,
         .                   }
        21 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
        80 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
        80 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
        96 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        28 ( 0.00%)          self.skip_binder().item_def_id
        14 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     5,891 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   332,260 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   349,975 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    23,906 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
    12,140 ( 0.00%)          match self.kind() {
     3,430 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   120,726 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   213,527 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   512,182 ( 0.00%)          match self.kind() {
    34,216 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
     1,002 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
        12 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
       204 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
     1,361 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
     1,076 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       506 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     1,012 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       506 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       187 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
        81 ( 0.00%)          matches!(
        54 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     8,366 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   169,776 ( 0.00%)          match self.kind() {
    19,221 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
        64 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
        64 ( 0.00%)          match self.kind() {
       160 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
        64 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     3,999 ( 0.00%)          matches!(
     9,108 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
        67 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
         .                   matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
         .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    19,062 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     5,852 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     7,691 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    22,906 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    29,864 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
       120 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     5,814 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    25,885 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   150,584 ( 0.00%)          match self.kind() {
     2,510 ( 0.00%)              Adt(def, _) if def.is_box() => {
        85 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    91,278 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       816 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    51,770 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     6,499 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       841 ( 0.00%)      }
         .           
   149,776 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    74,888 ( 0.00%)          match self.kind() {
    56,166 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   168,498 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
       711 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     5,150 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
     1,574 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     7,306 ( 0.00%)          match self.kind() {
     5,601 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     3,148 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       999 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
     1,998 ( 0.00%)          match self.kind() {
     1,998 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,998 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
       100 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
        50 ( 0.00%)          match self.kind() {
        20 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
        10 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
        80 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
     5,750 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     2,875 ( 0.00%)          match self.kind() {
     4,600 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     4,600 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     9,076 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    18,152 ( 0.00%)          match self.kind() {
    17,988 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     9,076 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   544,140 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   362,760 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
    11,422 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    25,779 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   544,140 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       342 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   155,952 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   233,928 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    77,976 ( 0.00%)      }
         .           }

82,910,637 ( 0.60%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  465,057 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
1,966,343 ( 0.01%)          match undo {
  358,942 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  221,978 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  349,194 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  930,114 ( 0.01%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
2,799,476 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
1,761,824 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
  292,182 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    2,470 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   35,280 ( 0.00%)          self.eq_relations().union(a, b);
   30,240 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    8,623 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  650,745 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  911,043 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  650,745 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
1,015,764 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
1,523,646 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  846,470 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
  169,294 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
1,523,646 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  677,176 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
1,185,058 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    4,560 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  494,838 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    2,556 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  417,198 ( 0.00%)          self.sub_relations().find(vid)
    5,112 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
6,310,325 ( 0.05%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
6,310,325 ( 0.05%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
2,973,382 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
2,722,064 ( 0.02%)          match *t.kind() {
  972,648 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
4,948,987 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  322,892 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   22,800 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   27,360 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   27,360 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
  255,072 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
2,407,416 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  545,796 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    5,040 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    5,040 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
   20,160 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  308,221 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                 

-- line 33 ----------------------------------------
        .           
        .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
        .               /// Note that we include both the `ParamEnv` and the `Predicate`,
        .               /// as the `ParamEnv` can influence whether fulfillment succeeds
        .               /// or fails.
        .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
        .           
        .               fn as_cache_key(&self) -> Self::CacheKey {
2,307,978 ( 0.02%)          self.obligation.param_env.and(self.obligation.predicate)
        .               }
        .           }
        .           
        .           /// The fulfillment context is used to drive trait resolution. It
        .           /// consists of a list of obligations that must be (eventually)
        .           /// satisfied. The job is to track which are satisfied, which yielded
        .           /// errors, and which are still pending. At any point, users can call
        .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
        .               // outside of any snapshot, so any use of it inside a snapshot
        .               // will lead to trouble and therefore is checked against, but
        .               // other fulfillment contexts sometimes do live inside of
        .               // a snapshot (they don't *straddle* a snapshot, so there
        .               // is no trouble there).
        .               usable_in_snapshot: bool,
        .           }
        .           
       90 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub struct PendingPredicateObligation<'tcx> {
        .               pub obligation: PredicateObligation<'tcx>,
        .               // This is far more often read than modified, meaning that we
        .               // should mostly optimize for reading speed, while modifying is not as relevant.
        .               //
        .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
        .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
        .           }
        .           
        .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(PendingPredicateObligation<'_>, 72);
        .           
        .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
        .               /// Creates a new fulfillment context.
   27,194 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
  339,844 ( 0.00%)          FulfillmentContext {
   46,295 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: false,
        .                   }
   27,194 ( 0.00%)      }
        .           
        .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
      369 ( 0.00%)          FulfillmentContext {
      123 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: true,
        .                       usable_in_snapshot: true,
        .                   }
        .               }
        .           
        .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
   65,942 ( 0.00%)          FulfillmentContext {
   16,482 ( 0.00%)              predicates: ObligationForest::new(),
        .                       relationships: FxHashMap::default(),
        .                       register_region_obligations: false,
        .                       usable_in_snapshot: false,
        .                   }
        .               }
        .           
        .               /// Attempts to select obligations using `selcx`.
        .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
  325,174 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
        .                   let _enter = span.enter();
        .           
        .                   let mut errors = Vec::new();
        .           
        .                   loop {
        .                       debug!("select: starting another iteration");
        .           
        .                       // Process pending obligations.
        .                       let outcome: Outcome<_, _> =
1,424,752 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
        .                               selcx,
  203,536 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
        .                           });
        .                       debug!("select: outcome={:#?}", outcome);
        .           
        .                       // FIXME: if we kept the original cache key, we could mark projection
        .                       // obligations as complete for the projection cache here.
        .           
        .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
        .           
        .                       // If nothing new was added, no need to keep looping.
  407,072 ( 0.00%)              if outcome.stalled {
        .                           break;
        .                       }
        .                   }
        .           
        .                   debug!(
        .                       "select({} predicates remaining, {} errors) done",
        .                       self.predicates.len(),
        .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
        .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
        .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
        .               /// creating a fresh type variable `$0` as well as a projection
        .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
        .               /// inference engine runs, it will attempt to find an impl of
        .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
        .               /// something concrete. If this fails, we'll unify `$0` with
        .               /// `projection_ty` again.
    2,706 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
        .               fn normalize_projection_type(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   projection_ty: ty::ProjectionTy<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
        .           
        .                   // FIXME(#20304) -- cache
        .           
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   let mut obligations = vec![];
    1,107 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
        .                       &mut selcx,
        .                       param_env,
        .                       projection_ty,
      615 ( 0.00%)              cause,
        .                       0,
        .                       &mut obligations,
        .                   );
        .                   self.register_predicate_obligations(infcx, obligations);
        .           
        .                   debug!(?normalized_ty);
        .           
        .                   normalized_ty
        .               }
        .           
1,741,938 ( 0.01%)      fn register_predicate_obligation(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) {
        .                   // this helps to reduce duplicate errors, as well as making
        .                   // debug output much nicer to read and so on.
  870,969 ( 0.01%)          let obligation = infcx.resolve_vars_if_possible(obligation);
        .           
        .                   debug!(?obligation, "register_predicate_obligation");
        .           
1,741,938 ( 0.01%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
        .           
  870,969 ( 0.01%)          super::relationships::update(self, infcx, &obligation);
        .           
        .                   self.predicates
        .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
1,451,615 ( 0.01%)      }
        .           
  783,464 ( 0.01%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
        .                   {
   97,933 ( 0.00%)              let errors = self.select_where_possible(infcx);
   97,933 ( 0.00%)              if !errors.is_empty() {
       20 ( 0.00%)                  return errors;
        .                       }
        .                   }
        .           
  489,645 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
  685,531 ( 0.00%)      }
        .           
1,625,870 ( 0.01%)      fn select_where_possible(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .               ) -> Vec<FulfillmentError<'tcx>> {
        .                   let mut selcx = SelectionContext::new(infcx);
        .                   self.select(&mut selcx)
1,463,283 ( 0.01%)      }
        .           
    3,525 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
        .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
    4,700 ( 0.00%)      }
        .           
        .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
      511 ( 0.00%)          &mut self.relationships
      511 ( 0.00%)      }
        .           }
        .           
        .           struct FulfillProcessor<'a, 'b, 'tcx> {
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               register_region_obligations: bool,
        .           }
        .           
        .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
        .               #[inline(always)]
        .               fn process_obligation(
        .                   &mut self,
        .                   pending_obligation: &mut Self::Obligation,
        .               ) -> ProcessResult<Self::Obligation, Self::Error> {
        .                   // If we were stalled on some unresolved variables, first check whether
        .                   // any of them have been resolved; if not, don't bother doing more work
        .                   // yet.
2,207,223 ( 0.02%)          let change = match pending_obligation.stalled_on.len() {
        .                       // Match arms are in order of frequency, which matters because this
        .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
        .                       1 => {
  638,586 ( 0.00%)                  let infer_var = pending_obligation.stalled_on[0];
  212,862 ( 0.00%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
        .                       }
        .                       0 => {
        .                           // In this case we haven't changed, but wish to make a change.
        .                           true
        .                       }
        .                       _ => {
        .                           // This `for` loop was once a call to `all()`, but this lower-level
        .                           // form was a perf win. See #64545 for details.
   18,990 ( 0.00%)                  (|| {
   40,158 ( 0.00%)                      for &infer_var in &pending_obligation.stalled_on {
    1,380 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
        .                                       return true;
        .                                   }
        .                               }
        .                               false
        .                           })()
        .                       }
        .                   };
        .           
      249 ( 0.00%)          if !change {
        .                       debug!(
        .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
        .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
        .                           pending_obligation.stalled_on
        .                       );
        .                       return ProcessResult::Unchanged;
        .                   }
        .           
  964,641 ( 0.01%)          self.progress_changed_obligations(pending_obligation)
        .               }
        .           
        .               fn process_backedge<'c, I>(
        .                   &mut self,
        .                   cycle: I,
        .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
        .               ) where
        .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
        .               // The code calling this method is extremely hot and only rarely
        .               // actually uses this, so move this part of the code
        .               // out of that loop.
        .               #[inline(never)]
3,215,470 ( 0.02%)      fn progress_changed_obligations(
        .                   &mut self,
        .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
        .                   pending_obligation.stalled_on.truncate(0);
        .           
        .                   let obligation = &mut pending_obligation.obligation;
        .           
  964,641 ( 0.01%)          if obligation.predicate.has_infer_types_or_consts() {
   75,721 ( 0.00%)              obligation.predicate =
  227,163 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   }
        .           
        .                   debug!(?obligation, ?obligation.cause, "process_obligation");
        .           
        .                   let infcx = self.selcx.infcx();
        .           
  491,652 ( 0.00%)          let binder = obligation.predicate.kind();
2,250,829 ( 0.02%)          match binder.no_bound_vars() {
   98,725 ( 0.00%)              None => match binder.skip_binder() {
        .                           // Evaluation will discard candidates using the leak check.
        .                           // This means we need to pass it the bound version of our
        .                           // predicate.
        .                           ty::PredicateKind::Trait(trait_ref) => {
        .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
        .           
   34,396 ( 0.00%)                      self.process_trait_obligation(
        .                                   obligation,
  103,188 ( 0.00%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::Projection(data) => {
        .                               let project_obligation = obligation.with(binder.rebind(data));
        .           
    1,504 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
    4,512 ( 0.00%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .                           ty::PredicateKind::RegionOutlives(_)
        .                           | ty::PredicateKind::TypeOutlives(_)
        .                           | ty::PredicateKind::WellFormed(_)
        .                           | ty::PredicateKind::ObjectSafe(_)
        .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                       Some(pred) => match pred {
        .                           ty::PredicateKind::Trait(data) => {
        .                               let trait_obligation = obligation.with(Binder::dummy(data));
        .           
  949,800 ( 0.01%)                      self.process_trait_obligation(
        .                                   obligation,
4,179,120 ( 0.03%)                          trait_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(data) => {
   17,358 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
   11,572 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
        .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
   34,334 ( 0.00%)                      if self.register_region_obligations {
   85,835 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
        .                                       t_a,
        .                                       r_b,
        .                                       &obligation.cause,
        .                                   );
        .                               }
        .                               ProcessResult::Changed(vec![])
        .                           }
        .           
        .                           ty::PredicateKind::Projection(ref data) => {
        .                               let project_obligation = obligation.with(Binder::dummy(*data));
        .           
  242,880 ( 0.00%)                      self.process_projection_obligation(
        .                                   obligation,
  728,640 ( 0.01%)                          project_obligation,
        .                                   &mut pending_obligation.stalled_on,
        .                               )
        .                           }
        .           
        .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
      140 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
        .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                               } else {
        .                                   ProcessResult::Changed(vec![])
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
    4,383 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
    8,538 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           ProcessResult::Changed(vec![])
        .                                       } else {
        .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
        .                                       }
        .                                   }
        .                                   None => ProcessResult::Unchanged,
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::WellFormed(arg) => {
  362,817 ( 0.00%)                      match wf::obligations(
        .                                   self.selcx.infcx(),
  103,662 ( 0.00%)                          obligation.param_env,
  103,662 ( 0.00%)                          obligation.cause.body_id,
  155,493 ( 0.00%)                          obligation.recursion_depth + 1,
        .                                   arg,
        .                                   obligation.cause.span,
        .                               ) {
        .                                   None => {
   28,584 ( 0.00%)                              pending_obligation.stalled_on =
   50,022 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
   14,292 ( 0.00%)                              ProcessResult::Unchanged
        .                                   }
  134,055 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(subtype) => {
    3,712 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
        .                                   &obligation.cause,
        .                                   obligation.param_env,
        .                                   Binder::dummy(subtype),
        .                               ) {
        .                                   None => {
        .                                       // None means that both are unresolved.
    2,145 ( 0.00%)                              pending_obligation.stalled_on = vec![
      429 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
      858 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
        .                                       ];
        .                                       ProcessResult::Unchanged
        .                                   }
        .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
        .                                   Some(Err(err)) => {
        .                                       let expected_found =
        .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
        .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
        .                                           expected_found,
        .                                           err,
        .                                       ))
        .                                   }
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Coerce(coerce) => {
    1,352 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
        .                                   &obligation.cause,
        .                                   obligation.param_env,
        .                                   Binder::dummy(coerce),
        .                               ) {
        .                                   None => {
        .                                       // None means that both are unresolved.
      185 ( 0.00%)                              pending_obligation.stalled_on = vec![
       37 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
       74 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),
        .                                       ];
        .                                       ProcessResult::Unchanged
        .                                   }
        .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
        .                                   Some(Err(err)) => {
        .                                       let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);
        .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
        .                                           expected_found,
        .                                           err,
        .                                       ))
        .                                   }
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ConstEvaluatable(uv) => {
       96 ( 0.00%)                      match const_evaluatable::is_const_evaluatable(
        .                                   self.selcx.infcx(),
      192 ( 0.00%)                          uv,
       32 ( 0.00%)                          obligation.param_env,
       16 ( 0.00%)                          obligation.cause.span,
        .                               ) {
        .                                   Ok(()) => ProcessResult::Changed(vec![]),
        .                                   Err(NotConstEvaluatable::MentionsInfer) => {
        .                                       pending_obligation.stalled_on.clear();
        .                                       pending_obligation.stalled_on.extend(
        .                                           uv.substs
        .                                               .iter()
        .                                               .filter_map(TyOrConstInferVar::maybe_from_generic_arg),
-- line 543 ----------------------------------------
-- line 639 ----------------------------------------
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
        .                           }
        .                       },
        .                   }
2,893,923 ( 0.02%)      }
        .           
3,772,621 ( 0.03%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
        .               fn process_trait_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   trait_obligation: TraitObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
  198,559 ( 0.00%)          let infcx = self.selcx.infcx();
  595,677 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
   64,726 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
        .                           debug!(
        .                               "selecting trait at depth {} evaluated to holds",
        .                               obligation.recursion_depth
        .                           );
   62,160 ( 0.00%)                  return ProcessResult::Changed(vec![]);
        .                       }
        .                   }
        .           
1,172,345 ( 0.01%)          match self.selcx.select(&trait_obligation) {
        .                       Ok(Some(impl_source)) => {
        .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
2,761,254 ( 0.02%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
        .                       }
        .                       Ok(None) => {
        .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
        .           
        .                           // This is a bit subtle: for the most part, the
        .                           // only reason we can fail to make progress on
        .                           // trait selection is because we don't have enough
        .                           // information about the types in the trait.
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
   14,072 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
        .                           ));
        .           
        .                           debug!(
        .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
        .                               infcx.resolve_vars_if_possible(obligation.clone()),
        .                               stalled_on
        .                           );
        .           
   14,072 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       Err(selection_err) => {
        .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
        .           
       56 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
        .                       }
        .                   }
        .               }
        .           
  538,472 ( 0.00%)      fn process_projection_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .                   project_obligation: PolyProjectionObligation<'tcx>,
        .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
        .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
   48,952 ( 0.00%)          let tcx = self.selcx.tcx();
        .           
  146,856 ( 0.00%)          if obligation.predicate.is_global() {
        .                       // no type variables present, can use evaluation for better caching.
        .                       // FIXME: consider caching errors too.
   11,002 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
   33,006 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
        .                               &mut self.selcx,
   38,507 ( 0.00%)                      project_obligation.predicate,
        .                           ) {
        .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
        .                               // evaluated all sub-obligations. We can therefore mark the 'root'
        .                               // obligation as complete, and skip evaluating sub-obligations.
   33,006 ( 0.00%)                      self.selcx
        .                                   .infcx()
        .                                   .inner
        .                                   .borrow_mut()
        .                                   .projection_cache()
        .                                   .complete(key, EvaluationResult::EvaluatedToOk);
        .                           }
   11,002 ( 0.00%)                  return ProcessResult::Changed(vec![]);
        .                       } else {
        .                           tracing::debug!("Does NOT hold: {:?}", obligation);
        .                       }
        .                   }
        .           
  304,157 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
        .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
        .                       Ok(Ok(None)) => {
        .                           stalled_on.clear();
        .                           stalled_on.extend(substs_infer_vars(
        .                               self.selcx,
    2,913 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
        .                           ));
    2,913 ( 0.00%)                  ProcessResult::Unchanged
        .                       }
        .                       // Let the caller handle the recursion
        .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
        .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
        .                       ])),
        .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
        .                   }
  391,616 ( 0.00%)      }
        .           }
        .           
        .           /// Returns the set of inference variables contained in `substs`.
        .           fn substs_infer_vars<'a, 'tcx>(
        .               selcx: &mut SelectionContext<'a, 'tcx>,
        .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
        .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
        .               selcx
        .                   .infcx()
        .                   .resolve_vars_if_possible(substs)
        .                   .skip_binder() // ok because this check doesn't care about regions
        .                   .iter()
        .                   .filter(|arg| arg.has_infer_types_or_consts())
        .                   .flat_map(|arg| {
   89,585 ( 0.00%)              let mut walker = arg.walk();
  167,528 ( 0.00%)              while let Some(c) = walker.next() {
   19,322 ( 0.00%)                  if !c.has_infer_types_or_consts() {
        .                               walker.visited.remove(&c);
      854 ( 0.00%)                      walker.skip_current_subtree();
        .                           }
        .                       }
        .                       walker.visited.into_iter()
        .                   })
        .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
        .           }
        .           
        .           fn to_fulfillment_error<'tcx>(
        .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
        .           ) -> FulfillmentError<'tcx> {
        .               let mut iter = error.backtrace.into_iter();
        4 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
        .               // The root obligation is the last item in the backtrace - if there's only
        .               // one item, then it's the same as the main obligation
        .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
      120 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
        .           }

4,649,604 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[derive(Clone)]
         .           pub struct FilterMap<I, F> {
         .               iter: I,
         .               f: F,
         .           }
         .           impl<I, F> FilterMap<I, F> {
         .               pub(in crate::iter) fn new(iter: I, f: F) -> FilterMap<I, F> {
   159,305 ( 0.00%)          FilterMap { iter, f }
         .               }
         .           }
         .           
         .           #[stable(feature = "core_impl_debug", since = "1.9.0")]
         .           impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_struct("FilterMap").field("iter", &self.iter).finish()
         .               }
         .           }
         .           
         .           fn filter_map_fold<T, B, Acc>(
         .               mut f: impl FnMut(T) -> Option<B>,
         .               mut fold: impl FnMut(Acc, B) -> Acc,
         .           ) -> impl FnMut(Acc, T) -> Acc {
   113,664 ( 0.00%)      move |acc, item| match f(item) {
    20,640 ( 0.00%)          Some(x) => fold(acc, x),
         .                   None => acc,
         .               }
         .           }
         .           
         .           fn filter_map_try_fold<'a, T, B, Acc, R: Try<Output = Acc>>(
         .               f: &'a mut impl FnMut(T) -> Option<B>,
         .               mut fold: impl FnMut(Acc, B) -> R + 'a,
         .           ) -> impl FnMut(Acc, T) -> R + 'a {
16,906,151 ( 0.12%)      move |acc, item| match f(item) {
14,826,431 ( 0.11%)          Some(x) => fold(acc, x),
         .                   None => try { acc },
     3,942 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<B, I: Iterator, F> Iterator for FilterMap<I, F>
         .           where
         .               F: FnMut(I::Item) -> Option<B>,
         .           {
         .               type Item = B;
         .           
         .               #[inline]
     4,959 ( 0.00%)      fn next(&mut self) -> Option<B> {
    23,458 ( 0.00%)          self.iter.find_map(&mut self.f)
     5,529 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,942 ( 0.00%)          let (_, upper) = self.iter.size_hint();
         .                   (0, upper) // can't know a lower bound, due to the predicate
         .               }
         .           
         .               #[inline]
         .               fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
         .               where
         .                   Self: Sized,
         .                   Fold: FnMut(Acc, Self::Item) -> R,
         .                   R: Try<Output = Acc>,
         .               {
     6,046 ( 0.00%)          self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))
         .               }
         .           
         .               #[inline]
         .               fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
         .               where
         .                   Fold: FnMut(Acc, Self::Item) -> Acc,
         .               {
     5,792 ( 0.00%)          self.iter.fold(init, filter_map_fold(self.f, fold))
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>
         .           where
         .               F: FnMut(I::Item) -> Option<B>,
         .           {
-- line 93 ----------------------------------------

 7,667,321 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir                  

-- line 51 ----------------------------------------
         .               /// let vec = vec!['a', 'b', 'c'];
         .               /// let mut into_iter = vec.into_iter();
         .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
         .               /// let _ = into_iter.next().unwrap();
         .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
         .               /// ```
         .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
         .               pub fn as_slice(&self) -> &[T] {
    89,408 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
         .               }
         .           
         .               /// Returns the remaining items of this iterator as a mutable slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let vec = vec!['a', 'b', 'c'];
-- line 67 ----------------------------------------
-- line 80 ----------------------------------------
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               #[inline]
         .               pub fn allocator(&self) -> &A {
         .                   &self.alloc
         .               }
         .           
         .               fn as_raw_mut_slice(&mut self) -> *mut [T] {
 4,292,154 ( 0.03%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
         .               }
         .           
         .               /// Drops remaining elements and relinquishes the backing allocation.
         .               ///
         .               /// This is roughly equivalent to the following, but more efficient
         .               ///
         .               /// ```
         .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
-- line 96 ----------------------------------------
-- line 99 ----------------------------------------
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
         .                   let remaining = self.as_raw_mut_slice();
         .           
         .                   // overwrite the individual fields instead of creating a new
         .                   // struct and then overwriting &mut self.
         .                   // this creates less assembly
     4,754 ( 0.00%)          self.cap = 0;
     9,508 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
     5,904 ( 0.00%)          self.ptr = self.buf.as_ptr();
     7,254 ( 0.00%)          self.end = self.buf.as_ptr();
         .           
         .                   unsafe {
         .                       ptr::drop_in_place(remaining);
         .                   }
         .               }
         .           }
         .           
         .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 128 ----------------------------------------
         .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<T> {
10,633,168 ( 0.08%)          if self.ptr as *const _ == self.end {
   603,001 ( 0.00%)              None
       114 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
         .                       // purposefully don't use 'ptr.offset' because for
         .                       // vectors with 0-size elements this would return the
         .                       // same pointer.
         .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
         .           
         .                       // Make up a value of this ZST.
         .                       Some(unsafe { mem::zeroed() })
         .                   } else {
         .                       let old = self.ptr;
 1,435,810 ( 0.01%)              self.ptr = unsafe { self.ptr.offset(1) };
         .           
   320,701 ( 0.00%)              Some(unsafe { ptr::read(old) })
         .                   }
         4 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   let exact = if mem::size_of::<T>() == 0 {
         .                       (self.end as usize).wrapping_sub(self.ptr as usize)
         .                   } else {
         .                       unsafe { self.end.offset_from(self.ptr) as usize }
         .                   };
         3 ( 0.00%)          (exact, Some(exact))
         .               }
         .           
         .               #[inline]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   let step_size = self.len().min(n);
         .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
         .                   if mem::size_of::<T>() == 0 {
         .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
-- line 169 ----------------------------------------
-- line 181 ----------------------------------------
         .                   if step_size < n {
         .                       return Err(step_size);
         .                   }
         .                   Ok(())
         .               }
         .           
         .               #[inline]
         .               fn count(self) -> usize {
         2 ( 0.00%)          self.len()
         .               }
         .           
         .               #[doc(hidden)]
         .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
         .               where
         .                   Self: TrustedRandomAccessNoCoerce,
         .               {
         .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<T> {
   610,837 ( 0.00%)          if self.end == self.ptr {
         .                       None
         .                   } else if mem::size_of::<T>() == 0 {
         .                       // See above for why 'ptr.offset' isn't used
         .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
         .           
         .                       // Make up a value of this ZST.
         .                       Some(unsafe { mem::zeroed() })
         .                   } else {
   191,404 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
         .           
     4,170 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
         .                   let step_size = self.len().min(n);
         .                   if mem::size_of::<T>() == 0 {
         .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
13,381,014 ( 0.10%)      fn drop(&mut self) {
         .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
         .           
         .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
         .                       fn drop(&mut self) {
         .                           unsafe {
         .                               // `IntoIter::alloc` is not used anymore after this
         .                               let alloc = ptr::read(&self.0.alloc);
         .                               // RawVec handles deallocation
 2,531,697 ( 0.02%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
         .                           }
         .                       }
         .                   }
         .           
         .                   let guard = DropGuard(self);
         .                   // destroy the remaining elements
         .                   unsafe {
       169 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
         .                   }
         .                   // now `guard` will be dropped and do the rest
12,131,629 ( 0.09%)      }
         .           }
         .           
         .           #[unstable(issue = "none", feature = "inplace_iteration")]
         .           #[doc(hidden)]
         .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
         .           
         .           #[unstable(issue = "none", feature = "inplace_iteration")]
         .           #[doc(hidden)]
-- line 331 ----------------------------------------

 4,901,097 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                   

-- line 193 ----------------------------------------
          .               /// assert_eq!(a.iter().count(), 5);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn count(self) -> usize
          .               where
          .                   Self: Sized,
          .               {
     12,761 ( 0.00%)          self.fold(
          .                       0,
          .                       #[rustc_inherit_overflow_checks]
     63,456 ( 0.00%)              |count, _| count + 1,
          .                   )
          .               }
          .           
          .               /// Consumes the iterator, returning the last element.
          .               ///
          .               /// This method will evaluate the iterator until it returns [`None`]. While
          .               /// doing so, it keeps track of the current element. After [`None`] is
          .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 266 ----------------------------------------
          .               /// assert_eq!(iter.advance_by(2), Ok(()));
          .               /// assert_eq!(iter.next(), Some(&3));
          .               /// assert_eq!(iter.advance_by(0), Ok(()));
          .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
          .               /// ```
          .               #[inline]
          .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
          .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         75 ( 0.00%)          for i in 0..n {
      6,821 ( 0.00%)              self.next().ok_or(i)?;
          .                   }
          .                   Ok(())
          .               }
          .           
          .               /// Returns the `n`th element of the iterator.
          .               ///
          .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
          .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 313 ----------------------------------------
          .               /// Returning `None` if there are less than `n + 1` elements:
          .               ///
          .               /// ```
          .               /// let a = [1, 2, 3];
          .               /// assert_eq!(a.iter().nth(10), None);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
      2,368 ( 0.00%)      fn nth(&mut self, n: usize) -> Option<Self::Item> {
          .                   self.advance_by(n).ok()?;
     11,395 ( 0.00%)          self.next()
          .               }
          .           
          .               /// Creates an iterator starting at the same point, but stepping by
          .               /// the given amount at each iteration.
          .               ///
          .               /// Note 1: The first element of the iterator will always be returned,
          .               /// regardless of the step given.
          .               ///
-- line 331 ----------------------------------------
-- line 441 ----------------------------------------
          .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
          .               where
          .                   Self: Sized,
          .                   U: IntoIterator<Item = Self::Item>,
          .               {
     43,432 ( 0.00%)          Chain::new(self, other.into_iter())
          .               }
          .           
          .               /// 'Zips up' two iterators into a single iterator of pairs.
          .               ///
          .               /// `zip()` returns a new iterator that will iterate over two other
          .               /// iterators, returning a tuple where the first element comes from the
          .               /// first iterator, and the second element comes from the second iterator.
          .               ///
-- line 457 ----------------------------------------
-- line 555 ----------------------------------------
          .               /// [`zip`]: crate::iter::zip
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>
          .               where
          .                   Self: Sized,
          .                   U: IntoIterator,
          .               {
      2,034 ( 0.00%)          Zip::new(self, other.into_iter())
          .               }
          .           
          .               /// Creates a new iterator which places a copy of `separator` between adjacent
          .               /// items of the original iterator.
          .               ///
          .               /// In case `separator` does not implement [`Clone`] or needs to be
          .               /// computed every time, use [`intersperse_with`].
          .               ///
-- line 571 ----------------------------------------
-- line 714 ----------------------------------------
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn map<B, F>(self, f: F) -> Map<Self, F>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> B,
          .               {
    515,684 ( 0.00%)          Map::new(self, f)
          .               }
          .           
          .               /// Calls a closure on each element of an iterator.
          .               ///
          .               /// This is equivalent to using a [`for`] loop on the iterator, although
          .               /// `break` and `continue` are not possible from a closure. It's generally
          .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
          .               /// when processing items at the end of longer iterator chains. In some
-- line 730 ----------------------------------------
-- line 761 ----------------------------------------
          .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
          .               fn for_each<F>(self, f: F)
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item),
          .               {
          .                   #[inline]
          .                   fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
      5,170 ( 0.00%)              move |(), item| f(item)
          .                   }
          .           
  6,931,661 ( 0.05%)          self.fold((), call(f));
          .               }
          .           
          .               /// Creates an iterator which uses a closure to determine if an element
          .               /// should be yielded.
          .               ///
          .               /// Given an element the closure must return `true` or `false`. The returned
          .               /// iterator will yield only the elements for which the closure returns
          .               /// true.
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
          .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
          .               where
          .                   Self: Sized,
          .                   P: FnMut(&Self::Item) -> bool,
          .               {
    575,954 ( 0.00%)          Filter::new(self, predicate)
          .               }
          .           
          .               /// Creates an iterator that both filters and maps.
          .               ///
          .               /// The returned iterator yields only the `value`s for which the supplied
          .               /// closure returns `Some(value)`.
          .               ///
          .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> Option<B>,
          .               {
     43,797 ( 0.00%)          FilterMap::new(self, f)
          .               }
          .           
          .               /// Creates an iterator which gives the current iteration count as well as
          .               /// the next value.
          .               ///
          .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
          .               /// current index of iteration and `val` is the value returned by the
          .               /// iterator.
-- line 895 ----------------------------------------
-- line 924 ----------------------------------------
          .               /// assert_eq!(iter.next(), None);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn enumerate(self) -> Enumerate<Self>
          .               where
          .                   Self: Sized,
          .               {
         32 ( 0.00%)          Enumerate::new(self)
          .               }
          .           
          .               /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods
          .               /// to look at the next element of the iterator without consuming it. See
          .               /// their documentation for more information.
          .               ///
          .               /// Note that the underlying iterator is still advanced when [`peek`] or
          .               /// [`peek_mut`] are called for the first time: In order to retrieve the
-- line 940 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// [`peek_mut`]: Peekable::peek_mut
          .               /// [`next`]: Iterator::next
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn peekable(self) -> Peekable<Self>
          .               where
          .                   Self: Sized,
          .               {
         13 ( 0.00%)          Peekable::new(self)
          .               }
          .           
          .               /// Creates an iterator that [`skip`]s elements based on a predicate.
          .               ///
          .               /// [`skip`]: Iterator::skip
          .               ///
          .               /// `skip_while()` takes a closure as an argument. It will call this
          .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1537 ----------------------------------------
          .               /// assert_eq!(iter.next(), None);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn fuse(self) -> Fuse<Self>
          .               where
          .                   Self: Sized,
          .               {
     31,361 ( 0.00%)          Fuse::new(self)
          .               }
          .           
          .               /// Does something with each element of an iterator, passing the value on.
          .               ///
          .               /// When using iterators, you'll often chain several of them together.
          .               /// While working on such code, you might want to check out what's
          .               /// happening at various parts in the pipeline. To do that, insert
          .               /// a call to `inspect()`.
-- line 1553 ----------------------------------------
-- line 1769 ----------------------------------------
          .               /// [`char`]: type@char
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
          .               fn collect<B: FromIterator<Self::Item>>(self) -> B
          .               where
          .                   Self: Sized,
          .               {
     88,788 ( 0.00%)          FromIterator::from_iter(self)
          .               }
          .           
          .               /// Consumes an iterator, creating two collections from it.
          .               ///
          .               /// The predicate passed to `partition()` can return `true`, or `false`.
          .               /// `partition()` returns a pair, all of the elements for which it returned
          .               /// `true`, and all of the elements for which it returned `false`.
          .               ///
-- line 1785 ----------------------------------------
-- line 1798 ----------------------------------------
          .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
          .               ///     .iter()
          .               ///     .partition(|&n| n % 2 == 0);
          .               ///
          .               /// assert_eq!(even, vec![2]);
          .               /// assert_eq!(odd, vec![1, 3]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
      1,960 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
          .               where
          .                   Self: Sized,
          .                   B: Default + Extend<Self::Item>,
          .                   F: FnMut(&Self::Item) -> bool,
          .               {
          .                   #[inline]
          .                   fn extend<'a, T, B: Extend<T>>(
          .                       mut f: impl FnMut(&T) -> bool + 'a,
          .                       left: &'a mut B,
          .                       right: &'a mut B,
          .                   ) -> impl FnMut((), T) + 'a {
          .                       move |(), x| {
        209 ( 0.00%)                  if f(&x) {
          .                               left.extend_one(x);
          .                           } else {
          .                               right.extend_one(x);
          .                           }
          .                       }
          .                   }
          .           
          .                   let mut left: B = Default::default();
          .                   let mut right: B = Default::default();
          .           
         40 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
          .           
      2,960 ( 0.00%)          (left, right)
      2,205 ( 0.00%)      }
          .           
          .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
          .               /// such that all those that return `true` precede all those that return `false`.
          .               /// Returns the number of `true` elements found.
          .               ///
          .               /// The relative order of partitioned items is not maintained.
          .               ///
          .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
          .               ///     } else {
          .               ///         ControlFlow::Break(prev)
          .               ///     }
          .               /// });
          .               /// assert_eq!(triangular, ControlFlow::Continue(435));
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
     45,265 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
          .               where
          .                   Self: Sized,
          .                   F: FnMut(B, Self::Item) -> R,
          .                   R: Try<Output = B>,
          .               {
     25,658 ( 0.00%)          let mut accum = init;
 14,485,482 ( 0.10%)          while let Some(x) = self.next() {
308,318,352 ( 2.23%)              accum = f(accum, x)?;
          .                   }
     40,539 ( 0.00%)          try { accum }
     44,112 ( 0.00%)      }
          .           
          .               /// An iterator method that applies a fallible function to each item in the
          .               /// iterator, stopping at the first error and returning that error.
          .               ///
          .               /// This can also be thought of as the fallible form of [`for_each()`]
          .               /// or as the stateless version of [`try_fold()`].
          .               ///
          .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2077 ----------------------------------------
          .               fn try_for_each<F, R>(&mut self, f: F) -> R
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> R,
          .                   R: Try<Output = ()>,
          .               {
          .                   #[inline]
          .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
      2,250 ( 0.00%)              move |(), x| f(x)
          .                   }
          .           
      1,436 ( 0.00%)          self.try_fold((), call(f))
          .               }
          .           
          .               /// Folds every element into an accumulator by applying an operation,
          .               /// returning the final result.
          .               ///
          .               /// `fold()` takes two arguments: an initial value, and a closure with two
          .               /// arguments: an 'accumulator', and an element. The closure returns the value that
          .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
          .               /// // they're the same
          .               /// assert_eq!(result, result2);
          .               /// ```
          .               ///
          .               /// [`reduce()`]: Iterator::reduce
          .               #[doc(alias = "inject", alias = "foldl")]
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
      2,618 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
          .               where
          .                   Self: Sized,
          .                   F: FnMut(B, Self::Item) -> B,
          .               {
      3,565 ( 0.00%)          let mut accum = init;
  1,721,056 ( 0.01%)          while let Some(x) = self.next() {
  1,334,446 ( 0.01%)              accum = f(accum, x);
          .                   }
          .                   accum
      3,088 ( 0.00%)      }
          .           
          .               /// Reduces the elements to a single one, by repeatedly applying a reducing
          .               /// operation.
          .               ///
          .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
          .               /// result of the reduction.
          .               ///
          .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2240 ----------------------------------------
          .               #[inline]
          .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
          .               fn reduce<F>(mut self, f: F) -> Option<Self::Item>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
          .               {
          .                   let first = self.next()?;
     35,797 ( 0.00%)          Some(self.fold(first, f))
          .               }
          .           
          .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
          .               /// closure returns a failure, the failure is propagated back to the caller immediately.
          .               ///
          .               /// The return type of this method depends on the return type of the closure. If the closure
          .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
          .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
-- line 2256 ----------------------------------------
-- line 2370 ----------------------------------------
          .               fn all<F>(&mut self, f: F) -> bool
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> bool,
          .               {
          .                   #[inline]
          .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
          .                       move |(), x| {
     48,064 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
          .                       }
          .                   }
     31,088 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
          .               }
          .           
          .               /// Tests if any element of the iterator matches a predicate.
          .               ///
          .               /// `any()` takes a closure that returns `true` or `false`. It applies
          .               /// this closure to each element of the iterator, and if any of them return
          .               /// `true`, then so does `any()`. If they all return `false`, it
          .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2423 ----------------------------------------
          .               fn any<F>(&mut self, f: F) -> bool
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> bool,
          .               {
          .                   #[inline]
          .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
          .                       move |(), x| {
        158 ( 0.00%)                  if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }
          .                       }
          .                   }
          .           
         54 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::BREAK
          .               }
          .           
          .               /// Searches for an element of an iterator that satisfies a predicate.
          .               ///
          .               /// `find()` takes a closure that returns `true` or `false`. It applies
          .               /// this closure to each element of the iterator, and if any of them return
          .               /// `true`, then `find()` returns [`Some(element)`]. If they all return
          .               /// `false`, it returns [`None`].
-- line 2443 ----------------------------------------
-- line 2483 ----------------------------------------
          .               fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
          .               where
          .                   Self: Sized,
          .                   P: FnMut(&Self::Item) -> bool,
          .               {
          .                   #[inline]
          .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
          .                       move |(), x| {
  3,062,794 ( 0.02%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
         96 ( 0.00%)              }
          .                   }
          .           
  2,413,355 ( 0.02%)          self.try_fold((), check(predicate)).break_value()
          .               }
          .           
          .               /// Applies function to the elements of iterator and returns
          .               /// the first non-none result.
          .               ///
          .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
          .               ///
          .               /// # Examples
-- line 2503 ----------------------------------------
-- line 2513 ----------------------------------------
          .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
          .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(Self::Item) -> Option<B>,
          .               {
          .                   #[inline]
          .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
  3,480,826 ( 0.03%)              move |(), x| match f(x) {
    108,235 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
          .                           None => ControlFlow::CONTINUE,
          .                       }
          .                   }
          .           
         49 ( 0.00%)          self.try_fold((), check(f)).break_value()
          .               }
          .           
          .               /// Applies function to the elements of iterator and returns
          .               /// the first true result or the first error.
          .               ///
          .               /// The return type of this method depends on the return type of the closure.
          .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
          .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2713 ----------------------------------------
          .               {
          .                   // No need for an overflow check here, because `ExactSizeIterator`
          .                   // implies that the number of elements fits into a `usize`.
          .                   #[inline]
          .                   fn check<T>(
          .                       mut predicate: impl FnMut(T) -> bool,
          .                   ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {
          .                       move |i, x| {
         18 ( 0.00%)                  let i = i - 1;
          .                           if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i) }
          .                       }
          .                   }
          .           
          .                   let n = self.len();
          .                   self.try_rfold(n, check(predicate)).break_value()
          .               }
          .           
-- line 2729 ----------------------------------------
-- line 2812 ----------------------------------------
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// let a = [-3_i32, 0, 1, 5, -10];
          .               /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
         21 ( 0.00%)      fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(&Self::Item) -> B,
          .               {
          .                   #[inline]
          .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
         36 ( 0.00%)              move |x| (f(&x), x)
          .                   }
          .           
          .                   #[inline]
          .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
          .                       x_p.cmp(y_p)
          .                   }
          .           
         54 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
          .                   Some(x)
         24 ( 0.00%)      }
          .           
          .               /// Returns the element that gives the maximum value with respect to the
          .               /// specified comparison function.
          .               ///
          .               /// If several elements are equally maximum, the last element is
          .               /// returned. If the iterator is empty, [`None`] is returned.
          .               ///
          .               /// # Examples
-- line 2845 ----------------------------------------
-- line 2852 ----------------------------------------
          .               #[stable(feature = "iter_max_by", since = "1.15.0")]
          .               fn max_by<F>(self, compare: F) -> Option<Self::Item>
          .               where
          .                   Self: Sized,
          .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
          .               {
          .                   #[inline]
          .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
         42 ( 0.00%)              move |x, y| cmp::max_by(x, y, &mut compare)
          .                   }
          .           
     36,282 ( 0.00%)          self.reduce(fold(compare))
          .               }
          .           
          .               /// Returns the element that gives the minimum value from the
          .               /// specified function.
          .               ///
          .               /// If several elements are equally minimum, the first element is
          .               /// returned. If the iterator is empty, [`None`] is returned.
          .               ///
-- line 2871 ----------------------------------------
-- line 2946 ----------------------------------------
          .               /// ```
          .               #[inline]
          .               #[doc(alias = "reverse")]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn rev(self) -> Rev<Self>
          .               where
          .                   Self: Sized + DoubleEndedIterator,
          .               {
         13 ( 0.00%)          Rev::new(self)
          .               }
          .           
          .               /// Converts an iterator of pairs into a pair of containers.
          .               ///
          .               /// `unzip()` consumes an entire iterator of pairs, producing two
          .               /// collections: one from the left elements of the pairs, and one
          .               /// from the right elements.
          .               ///
-- line 2962 ----------------------------------------
-- line 2987 ----------------------------------------
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
          .               where
          .                   FromA: Default + Extend<A>,
          .                   FromB: Default + Extend<B>,
          .                   Self: Sized + Iterator<Item = (A, B)>,
          .               {
          .                   let mut unzipped: (FromA, FromB) = Default::default();
        388 ( 0.00%)          unzipped.extend(self);
          .                   unzipped
          .               }
          .           
          .               /// Creates an iterator which copies all of its elements.
          .               ///
          .               /// This is useful when you have an iterator over `&T`, but you need an
          .               /// iterator over `T`.
          .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
          .               /// assert_eq!(v_map, vec![1, 2, 3]);
          .               /// ```
          .               #[stable(feature = "iter_copied", since = "1.36.0")]
          .               fn copied<'a, T: 'a>(self) -> Copied<Self>
          .               where
          .                   Self: Sized + Iterator<Item = &'a T>,
          .                   T: Copy,
          .               {
    429,579 ( 0.00%)          Copied::new(self)
          .               }
          .           
          .               /// Creates an iterator which [`clone`]s all of its elements.
          .               ///
          .               /// This is useful when you have an iterator over `&T`, but you need an
          .               /// iterator over `T`.
          .               ///
          .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
          .               /// assert_eq!(v_map, vec![1, 2, 3]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
          .               where
          .                   Self: Sized + Iterator<Item = &'a T>,
          .                   T: Clone,
          .               {
    211,066 ( 0.00%)          Cloned::new(self)
          .               }
          .           
          .               /// Repeats an iterator endlessly.
          .               ///
          .               /// Instead of stopping at [`None`], the iterator will instead start again,
          .               /// from the beginning. After iterating again, it will start at the
          .               /// beginning again. And again. And again. Forever. Note that in case the
          .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// assert_eq!([1].iter().eq([1].iter()), true);
          .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
          .               /// ```
          .               #[stable(feature = "iter_order", since = "1.5.0")]
        721 ( 0.00%)      fn eq<I>(self, other: I) -> bool
          .               where
          .                   I: IntoIterator,
          .                   Self::Item: PartialEq<I::Item>,
          .                   Self: Sized,
          .               {
        824 ( 0.00%)          self.eq_by(other, |x, y| x == y)
        824 ( 0.00%)      }
          .           
          .               /// Determines if the elements of this [`Iterator`] are equal to those of
          .               /// another with respect to the specified equality function.
          .               ///
          .               /// # Examples
          .               ///
          .               /// Basic usage:
          .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
          .               /// ```
          .               #[unstable(feature = "iter_order_by", issue = "64295")]
          .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
          .               where
          .                   Self: Sized,
          .                   I: IntoIterator,
          .                   F: FnMut(Self::Item, I::Item) -> bool,
          .               {
      1,030 ( 0.00%)          let mut other = other.into_iter();
          .           
          .                   loop {
        309 ( 0.00%)              let x = match self.next() {
          .                           None => return other.next().is_none(),
      1,133 ( 0.00%)                  Some(val) => val,
          .                       };
          .           
        309 ( 0.00%)              let y = match other.next() {
          .                           None => return false,
          .                           Some(val) => val,
          .                       };
          .           
         22 ( 0.00%)              if !eq(x, y) {
          .                           return false;
          .                       }
          .                   }
          .               }
          .           
          .               /// Determines if the elements of this [`Iterator`] are unequal to those of
          .               /// another.
          .               ///
-- line 3373 ----------------------------------------
-- line 3589 ----------------------------------------
          .                   unreachable!("Always specialized");
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<I: Iterator + ?Sized> Iterator for &mut I {
          .               type Item = I::Item;
          .               #[inline]
        634 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
    179,349 ( 0.00%)          (**self).next()
        951 ( 0.00%)      }
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (**self).size_hint()
          .               }
          .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
          .                   (**self).advance_by(n)
          .               }
          .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
          .                   (**self).nth(n)
-- line 3607 ----------------------------------------

  4,327,341 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
4,263,547 ( 0.03%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
  170,911 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
2,329,067 ( 0.02%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
1,808,884 ( 0.01%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
4,775,974 ( 0.03%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

3,120,549 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
16,010,008 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
12,007,506 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   412,208 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   618,312 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 4,105,543 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 1,649,632 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 3,299,264 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 165 ----------------------------------------
        .           #[rustc_insignificant_dtor]
        .           pub struct BTreeMap<K, V> {
        .               root: Option<Root<K, V>>,
        .               length: usize,
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {
8,142,624 ( 0.06%)      fn drop(&mut self) {
        .                   drop(unsafe { ptr::read(self) }.into_iter())
8,197,026 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {
        .               fn clone(&self) -> BTreeMap<K, V> {
       78 ( 0.00%)          fn clone_subtree<'a, K: Clone, V: Clone>(
        .                       node: NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>,
        .                   ) -> BTreeMap<K, V>
        .                   where
        .                       K: 'a,
        .                       V: 'a,
        .                   {
        9 ( 0.00%)              match node.force() {
        .                           Leaf(leaf) => {
       23 ( 0.00%)                      let mut out_tree = BTreeMap { root: Some(Root::new()), length: 0 };
        .           
        .                               {
        .                                   let root = out_tree.root.as_mut().unwrap(); // unwrap succeeds because we just wrapped
        .                                   let mut out_node = match root.borrow_mut().force() {
        .                                       Leaf(leaf) => leaf,
        .                                       Internal(_) => unreachable!(),
        .                                   };
        .           
        .                                   let mut in_edge = leaf.first_edge();
        .                                   while let Ok(kv) = in_edge.right_kv() {
        .                                       let (k, v) = kv.into_kv();
        .                                       in_edge = kv.right_edge();
        .           
       25 ( 0.00%)                              out_node.push(k.clone(), v.clone());
       65 ( 0.00%)                              out_tree.length += 1;
        .                                   }
        .                               }
        .           
       35 ( 0.00%)                      out_tree
        .                           }
        .                           Internal(internal) => {
        .                               let mut out_tree = clone_subtree(internal.first_edge().descend());
        .           
        .                               {
        .                                   let out_root = BTreeMap::ensure_is_owned(&mut out_tree.root);
        .                                   let mut out_node = out_root.push_internal_level();
        .                                   let mut in_edge = internal.first_edge();
-- line 217 ----------------------------------------
-- line 235 ----------------------------------------
        .                                       out_node.push(k, v, subroot.unwrap_or_else(Root::new));
        .                                       out_tree.length += 1 + sublength;
        .                                   }
        .                               }
        .           
        .                               out_tree
        .                           }
        .                       }
       72 ( 0.00%)          }
        .           
       10 ( 0.00%)          if self.is_empty() {
        .                       BTreeMap::new()
        .                   } else {
       26 ( 0.00%)              clone_subtree(self.root.as_ref().unwrap().reborrow()) // unwrap succeeds because not empty
        .                   }
        .               }
        .           }
        .           
        .           impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
        .           where
        .               K: Borrow<Q> + Ord,
        .               Q: Ord,
-- line 256 ----------------------------------------
-- line 515 ----------------------------------------
        .               ///
        .               /// // entries can now be inserted into the empty map
        .               /// map.insert(1, "a");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               #[must_use]
        .               pub const fn new() -> BTreeMap<K, V> {
4,429,255 ( 0.03%)          BTreeMap { root: None, length: 0 }
        .               }
        .           
        .               /// Clears the map, removing all elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 531 ----------------------------------------
-- line 560 ----------------------------------------
        .               /// assert_eq!(map.get(&2), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
      381 ( 0.00%)          let root_node = self.root.as_ref()?.reborrow();
    1,041 ( 0.00%)          match root_node.search_tree(key) {
      228 ( 0.00%)              Found(handle) => Some(handle.into_kv().1),
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
-- line 578 ----------------------------------------
-- line 848 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,619 ( 0.00%)      pub fn insert(&mut self, key: K, value: V) -> Option<V>
        .               where
        .                   K: Ord,
        .               {
        .                   match self.entry(key) {
        .                       Occupied(mut entry) => Some(entry.insert(value)),
        .                       Vacant(entry) => {
    1,630 ( 0.00%)                  entry.insert(value);
        2 ( 0.00%)                  None
        .                       }
        .                   }
    1,085 ( 0.00%)      }
        .           
        .               /// Tries to insert a key-value pair into the map, and returns
        .               /// a mutable reference to the value in the entry.
        .               ///
        .               /// If the map already had this key present, nothing is updated, and
        .               /// an error containing the occupied entry and the value is returned.
        .               ///
        .               /// # Examples
-- line 875 ----------------------------------------
-- line 914 ----------------------------------------
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map = BTreeMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  554,056 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
  346,285 ( 0.00%)          self.remove_entry(key).map(|(_, v)| v)
  623,313 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the key
        .               /// was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
        .               ///
        .               /// # Examples
-- line 936 ----------------------------------------
-- line 947 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "btreemap_remove_entry", since = "1.45.0")]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
        .                   let (map, dormant_map) = DormantMutRef::new(self);
   69,260 ( 0.00%)          let root_node = map.root.as_mut()?.borrow_mut();
  346,300 ( 0.00%)          match root_node.search_tree(key) {
        .                       Found(handle) => {
  138,514 ( 0.00%)                  Some(OccupiedEntry { handle, dormant_map, _marker: PhantomData }.remove_entry())
   69,257 ( 0.00%)              }
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.
        .               /// The elements are visited in ascending key order.
-- line 967 ----------------------------------------
-- line 1135 ----------------------------------------
        .               /// // count the number of occurrences of letters in the vec
        .               /// for x in ["a", "b", "a", "c", "a", "b"] {
        .               ///     *count.entry(x).or_insert(0) += 1;
        .               /// }
        .               ///
        .               /// assert_eq!(count["a"], 3);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       50 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V>
        .               where
        .                   K: Ord,
        .               {
        .                   // FIXME(@porglezomp) Avoid allocating if we don't insert
        .                   let (map, dormant_map) = DormantMutRef::new(self);
        .                   let root_node = Self::ensure_is_owned(&mut map.root).borrow_mut();
  759,707 ( 0.01%)          match root_node.search_tree(&key) {
    5,976 ( 0.00%)              Found(handle) => Occupied(OccupiedEntry { handle, dormant_map, _marker: PhantomData }),
        .                       GoDown(handle) => {
  379,596 ( 0.00%)                  Vacant(VacantEntry { key, handle, dormant_map, _marker: PhantomData })
        .                       }
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given key. Returns everything after the given key,
        .               /// including the key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 1164 ----------------------------------------
-- line 1307 ----------------------------------------
        .               }
        .           
        .               /// Makes a `BTreeMap` from a sorted iterator.
        .               pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self
        .               where
        .                   K: Ord,
        .                   I: IntoIterator<Item = (K, V)>,
        .               {
       10 ( 0.00%)          let mut root = Root::new();
        5 ( 0.00%)          let mut length = 0;
       25 ( 0.00%)          root.bulk_push(DedupSortedIter::new(iter.into_iter()), &mut length);
       10 ( 0.00%)          BTreeMap { root: Some(root), length }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {
        .               type Item = (&'a K, &'a V);
        .               type IntoIter = Iter<'a, K, V>;
        .           
-- line 1326 ----------------------------------------
-- line 1328 ----------------------------------------
        .                   self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
       14 ( 0.00%)      fn next(&mut self) -> Option<(&'a K, &'a V)> {
  819,656 ( 0.01%)          if self.length == 0 {
        .                       None
        .                   } else {
  338,965 ( 0.00%)              self.length -= 1;
        .                       Some(unsafe { self.range.next_unchecked() })
        .                   }
       24 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.length, Some(self.length))
        .               }
        .           
        .               fn last(mut self) -> Option<(&'a K, &'a V)> {
        .                   self.next_back()
        .               }
-- line 1351 ----------------------------------------
-- line 1460 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> IntoIterator for BTreeMap<K, V> {
        .               type Item = (K, V);
        .               type IntoIter = IntoIter<K, V>;
        .           
        .               fn into_iter(self) -> IntoIter<K, V> {
        .                   let mut me = ManuallyDrop::new(self);
3,693,738 ( 0.03%)          if let Some(root) = me.root.take() {
        .                       let full_range = root.into_dying().full_range();
        .           
       30 ( 0.00%)              IntoIter { range: full_range, length: me.length }
        .                   } else {
3,879,426 ( 0.03%)              IntoIter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           impl<K, V> Drop for IntoIter<K, V> {
   25,772 ( 0.00%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);
        .           
        .                   impl<'a, K, V> Drop for DropGuard<'a, K, V> {
        .                       fn drop(&mut self) {
        .                           // Continue the same loop we perform below. This only runs when unwinding, so we
        .                           // don't have to care about panics this time (they'll abort).
        .                           while let Some(kv) = self.0.dying_next() {
        .                               // SAFETY: we consume the dying handle immediately.
        .                               unsafe { kv.drop_key_val() };
        .                           }
        .                       }
        .                   }
        .           
2,179,436 ( 0.02%)          while let Some(kv) = self.dying_next() {
        .                       let guard = DropGuard(self);
        .                       // SAFETY: we don't touch the tree before consuming the dying handle.
   48,712 ( 0.00%)              unsafe { kv.drop_key_val() };
        .                       mem::forget(guard);
        .                   }
   25,772 ( 0.00%)      }
        .           }
        .           
        .           impl<K, V> IntoIter<K, V> {
        .               /// Core of a `next` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
4,112,184 ( 0.03%)      fn dying_next(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
4,672,281 ( 0.03%)          if self.length == 0 {
        .                       self.range.deallocating_end();
1,021,940 ( 0.01%)              None
        .                   } else {
  312,988 ( 0.00%)              self.length -= 1;
  320,683 ( 0.00%)              Some(unsafe { self.range.deallocating_next_unchecked() })
        .                   }
4,112,181 ( 0.03%)      }
        .           
        .               /// Core of a `next_back` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
        .               fn dying_next_back(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
        .                   if self.length == 0 {
        .                       self.range.deallocating_end();
-- line 1524 ----------------------------------------
-- line 1529 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> Iterator for IntoIter<K, V> {
        .               type Item = (K, V);
        .           
    7,630 ( 0.00%)      fn next(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next().map(unsafe { |kv| kv.into_key_val() })
    8,720 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
      956 ( 0.00%)          (self.length, Some(self.length))
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> DoubleEndedIterator for IntoIter<K, V> {
        .               fn next_back(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next_back().map(unsafe { |kv| kv.into_key_val() })
-- line 1551 ----------------------------------------
-- line 1562 ----------------------------------------
        .           #[stable(feature = "fused", since = "1.26.0")]
        .           impl<K, V> FusedIterator for IntoIter<K, V> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               fn next(&mut self) -> Option<&'a K> {
        8 ( 0.00%)          self.inner.next().map(|(k, _)| k)
        .               }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           
        .               fn last(mut self) -> Option<&'a K> {
        .                   self.next_back()
-- line 1578 ----------------------------------------
-- line 2089 ----------------------------------------
        .               ///     println!("{}: {}", key, value);
        .               /// }
        .               ///
        .               /// let (first_key, first_value) = map.iter().next().unwrap();
        .               /// assert_eq!((*first_key, *first_value), (1, "a"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn iter(&self) -> Iter<'_, K, V> {
  918,721 ( 0.01%)          if let Some(root) = &self.root {
        .                       let full_range = root.reborrow().full_range();
        .           
      165 ( 0.00%)              Iter { range: full_range, length: self.length }
        .                   } else {
        6 ( 0.00%)              Iter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           
        .               /// Gets a mutable iterator over the entries of the map, sorted by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 2110 ----------------------------------------
-- line 2149 ----------------------------------------
        .               /// a.insert(2, "b");
        .               /// a.insert(1, "a");
        .               ///
        .               /// let keys: Vec<_> = a.keys().cloned().collect();
        .               /// assert_eq!(keys, [1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
   13,137 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// Gets an iterator over the values of the map, in order by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2165 ----------------------------------------
-- line 2217 ----------------------------------------
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn len(&self) -> usize {
       46 ( 0.00%)          self.length
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2233 ----------------------------------------
-- line 2238 ----------------------------------------
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn is_empty(&self) -> bool {
  490,832 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// If the root node is the empty (non-allocated) root node, allocate our
        .               /// own node. Is an associated function to avoid borrowing the entire BTreeMap.
        .               fn ensure_is_owned(root: &mut Option<Root<K, V>>) -> &mut Root<K, V> {
        .                   root.get_or_insert_with(Root::new)
        .               }
        .           }
-- line 2254 ----------------------------------------

  975,317 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir                  

-- line 39 ----------------------------------------
         .               pub fn canonicalize_query<V>(
         .                   &self,
         .                   value: V,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
    74,088 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
         .           
   365,317 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
         .               }
         .           
         .               /// Canonicalizes a query *response* `V`. When we canonicalize a
         .               /// query response, we only canonicalize unbound inference
         .               /// variables, and we leave other free regions alone. So,
         .               /// continuing with the example from `canonicalize_query`, if
         .               /// there was an input query `T: Trait<'static>`, it would have
         .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 69 ----------------------------------------
         .               /// things) includes a mapping to `'?0 := 'static`. When
         .               /// canonicalizing this query result R, we would leave this
         .               /// reference to `'static` alone.
         .               ///
         .               /// To get a good understanding of what is happening here, check
         .               /// out the [chapter in the rustc dev guide][c].
         .               ///
         .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
     3,222 ( 0.00%)      pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
    67,434 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
   236,019 ( 0.00%)          Canonicalizer::canonicalize(
   386,026 ( 0.00%)              value,
         .                       self,
    33,717 ( 0.00%)              self.tcx,
         .                       &CanonicalizeQueryResponse,
         .                       &mut query_state,
         .                   )
     2,506 ( 0.00%)      }
         .           
    24,597 ( 0.00%)      pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
     7,076 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
    24,766 ( 0.00%)          Canonicalizer::canonicalize(
    20,423 ( 0.00%)              value,
         .                       self,
     3,538 ( 0.00%)              self.tcx,
         .                       &CanonicalizeUserTypeAnnotation,
         .                       &mut query_state,
         .                   )
    19,131 ( 0.00%)      }
         .           
         .               /// A variant of `canonicalize_query` that does not
         .               /// canonicalize `'static`. This is useful when
         .               /// the query implementation can perform more efficient
         .               /// handling of `'static` regions (e.g. trait evaluation).
    43,500 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
         .                   &self,
         .                   value: V,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
   313,842 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
         .           
 1,402,000 ( 0.01%)          Canonicalizer::canonicalize(
    49,198 ( 0.00%)              value,
         .                       self,
   156,921 ( 0.00%)              self.tcx,
         .                       &CanonicalizeFreeRegionsOtherThanStatic,
         .                       query_state,
         .                   )
    43,500 ( 0.00%)      }
         .           }
         .           
         .           /// Controls how we canonicalize "free regions" that are not inference
         .           /// variables. This depends on what we are canonicalizing *for* --
         .           /// e.g., if we are canonicalizing to create a query, we want to
         .           /// replace those with inference variables, since we want to make a
         .           /// maximally general query. But if we are canonicalizing a *query
         .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
         .               ) -> ty::Region<'tcx>;
         .           
         .               fn any(&self) -> bool;
         .           }
         .           
         .           struct CanonicalizeQueryResponse;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
   312,000 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   187,200 ( 0.00%)          match r {
         .                       ty::ReFree(_)
         .                       | ty::ReErased
         .                       | ty::ReStatic
         .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
         .                       | ty::ReEarlyBound(..) => r,
         .           
         .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
         .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
         .                           r,
         .                       ),
         .           
         .                       ty::ReVar(vid) => {
    60,279 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
         .                           canonicalizer.canonical_var_for_region(
         .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
         .                               r,
         .                           )
         .                       }
         .           
         .                       ty::ReEmpty(ui) => {
         .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
         .                               tcx.sess.delay_span_bug(
         .                                   rustc_span::DUMMY_SP,
         .                                   &format!("unexpected region in query response: `{:?}`", r),
         .                               );
         .                           });
         .                           r
         .                       }
         .                   }
   312,000 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   false
         .               }
         .           }
         .           
         .           struct CanonicalizeUserTypeAnnotation;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {
     4,107 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
     4,107 ( 0.00%)          match r {
         .                       ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReStatic => r,
         .                       ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),
         .                       _ => {
         .                           // We only expect region names that the user can type.
         .                           bug!("unexpected region in query response: `{:?}`", r)
         .                       }
         .                   }
     4,107 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   false
    74,510 ( 0.00%)      }
         .           }
         .           
         .           struct CanonicalizeAllFreeRegions;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
    82,028 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
         .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
    61,521 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   true
   387,930 ( 0.00%)      }
         .           }
         .           
         .           struct CanonicalizeFreeRegionsOtherThanStatic;
         .           
         .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
   159,393 ( 0.00%)      fn canonicalize_free_region<'tcx>(
         .                   &self,
         .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   106,262 ( 0.00%)          if let ty::ReStatic = r {
         .                       r
         .                   } else {
         .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
         .                   }
   159,393 ( 0.00%)      }
         .           
         .               fn any(&self) -> bool {
         .                   true
         .               }
         .           }
         .           
         .           struct Canonicalizer<'cx, 'tcx> {
         .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
         .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
         .               needs_canonical_flags: TypeFlags,
         .           
         .               binder_index: ty::DebruijnIndex,
         .           }
         .           
         .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 2,977,878 ( 0.02%)          self.tcx
 2,704,557 ( 0.02%)      }
         .           
         .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 8,004,090 ( 0.06%)          self.binder_index.shift_in(1);
14,067,028 ( 0.10%)          let t = t.super_fold_with(self);
 7,970,755 ( 0.06%)          self.binder_index.shift_out(1);
         .                   t
         .               }
         .           
   553,020 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   829,530 ( 0.01%)          match *r {
       848 ( 0.00%)              ty::ReLateBound(index, ..) => {
       848 ( 0.00%)                  if index >= self.binder_index {
         .                               bug!("escaping late-bound region during canonicalization");
         .                           } else {
         .                               r
         .                           }
         .                       }
         .           
         .                       ty::ReVar(vid) => {
   101,049 ( 0.00%)                  let resolved_vid = self
         .                               .infcx
         .                               .inner
         .                               .borrow_mut()
         .                               .unwrap_region_constraints()
         .                               .opportunistic_resolve_var(vid);
         .                           debug!(
         .                               "canonical: region var found with vid {:?}, \
         .                                opportunistically resolved to {:?}",
         .                               vid, r
         .                           );
   404,196 ( 0.00%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
   606,294 ( 0.00%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
         .                       }
         .           
         .                       ty::ReStatic
         .                       | ty::ReEarlyBound(..)
         .                       | ty::ReFree(_)
         .                       | ty::ReEmpty(_)
         .                       | ty::RePlaceholder(..)
   363,580 ( 0.00%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
         .                   }
   611,382 ( 0.00%)      }
         .           
32,989,944 ( 0.24%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
27,571,381 ( 0.20%)          match *t.kind() {
    21,982 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
         .                           debug!("canonical: type var found with vid {:?}", vid);
    87,928 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
         .                               // `t` could be a float / int variable; canonicalize that instead.
         .                               Ok(t) => {
         .                                   debug!("(resolved to {:?})", t);
         .                                   self.fold_ty(t)
         .                               }
         .           
         .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
         .                               // result.
         .                               Err(mut ui) => {
         .                                   // FIXME: perf problem described in #55921.
         .                                   ui = ty::UniverseIndex::ROOT;
         .                                   self.canonicalize_ty_var(
    19,337 ( 0.00%)                              CanonicalVarInfo {
         .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
         .                                       },
         .                                       t,
         .                                   )
         .                               }
         .                           }
         .                       }
         .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
         .                       | ty::FnPtr(_)
         .                       | ty::Dynamic(..)
         .                       | ty::Never
         .                       | ty::Tuple(..)
         .                       | ty::Projection(..)
         .                       | ty::Foreign(..)
         .                       | ty::Param(..)
         .                       | ty::Opaque(..) => {
10,957,738 ( 0.08%)                  if t.flags().intersects(self.needs_canonical_flags) {
   848,232 ( 0.01%)                      t.super_fold_with(self)
         .                           } else {
         .                               t
         .                           }
         .                       }
         .                   }
32,262,888 ( 0.23%)      }
         .           
     2,457 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     2,457 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
         .                           debug!("canonical: const var found with vid {:?}", vid);
         .                           match self.infcx.probe_const_var(vid) {
         .                               Ok(c) => {
         .                                   debug!("(resolved to {:?})", c);
         .                                   return self.fold_const(c);
         .                               }
         .           
-- line 421 ----------------------------------------
-- line 445 ----------------------------------------
         .                           return self.canonicalize_const_var(
         .                               CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderConst(placeholder) },
         .                               ct,
         .                           );
         .                       }
         .                       _ => {}
         .                   }
         .           
       702 ( 0.00%)          let flags = FlagComputation::for_const(ct);
       351 ( 0.00%)          if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
     2,106 ( 0.00%)      }
         .           }
         .           
         .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
         .               /// The main `canonicalize` method, shared impl of
         .               /// `canonicalize_query` and `canonicalize_response`.
 3,176,118 ( 0.02%)      fn canonicalize<V>(
         .                   value: V,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   tcx: TyCtxt<'tcx>,
         .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
         .                   query_state: &mut OriginalQueryValues<'tcx>,
         .               ) -> Canonicalized<'tcx, V>
         .               where
         .                   V: TypeFoldable<'tcx>,
         .               {
 1,399,265 ( 0.01%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
         .                       TypeFlags::NEEDS_INFER |
         .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
         .                       TypeFlags::HAS_TY_PLACEHOLDER |
         .                       TypeFlags::HAS_CT_PLACEHOLDER
         .                   } else {
         .                       TypeFlags::NEEDS_INFER
         .                           | TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER
         .                   };
         .           
         .                   // Fast path: nothing that needs to be canonicalized.
   320,759 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
         .                       let canon_value = Canonical {
         .                           max_universe: ty::UniverseIndex::ROOT,
         .                           variables: List::empty(),
   252,485 ( 0.00%)                  value,
         .                       };
   751,184 ( 0.01%)              return canon_value;
         .                   }
         .           
   783,271 ( 0.01%)          let mut canonicalizer = Canonicalizer {
         .                       infcx,
         .                       tcx,
         .                       canonicalize_region_mode,
         .                       needs_canonical_flags,
         .                       variables: SmallVec::new(),
         .                       query_state,
         .                       indices: FxHashMap::default(),
         .                       binder_index: ty::INNERMOST,
         .                   };
   318,202 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
         .           
         .                   // Once we have canonicalized `out_value`, it should not
         .                   // contain anything that ties it to this inference context
         .                   // anymore, so it should live in the global arena.
         .                   debug_assert!(!out_value.needs_infer());
         .           
   142,173 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
         .           
         .                   let max_universe = canonical_variables
         .                       .iter()
   285,134 ( 0.00%)              .map(|cvar| cvar.universe())
         .                       .max()
         .                       .unwrap_or(ty::UniverseIndex::ROOT);
         .           
   489,093 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
 2,093,492 ( 0.02%)      }
         .           
         .               /// Creates a canonical variable replacing `kind` from the input,
         .               /// or returns an existing variable if `kind` has already been
         .               /// seen. `kind` is expected to be an unbound variable (or
         .               /// potentially a free region).
 1,502,770 ( 0.01%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
   300,554 ( 0.00%)          let Canonicalizer { variables, query_state, indices, .. } = self;
         .           
   300,554 ( 0.00%)          let var_values = &mut query_state.var_values;
         .           
         .                   // This code is hot. `variables` and `var_values` are usually small
         .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
         .                   // avoid allocations in those cases. We also don't use `indices` to
         .                   // determine if a kind has been seen before until the limit of 8 has
         .                   // been exceeded, to also avoid allocations for `indices`.
   300,554 ( 0.00%)          if !var_values.spilled() {
         .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
         .                       // direct linear search of `var_values`.
         .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
         .                           // `kind` is already present in `var_values`.
         .                           BoundVar::new(idx)
         .                       } else {
         .                           // `kind` isn't present in `var_values`. Append it. Likewise
         .                           // for `info` and `variables`.
         .                           variables.push(info);
         .                           var_values.push(kind);
   496,330 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
         .           
         .                           // If `var_values` has become big enough to be heap-allocated,
         .                           // fill up `indices` to facilitate subsequent lookups.
    99,266 ( 0.00%)                  if var_values.spilled() {
        88 ( 0.00%)                      assert!(indices.is_empty());
       352 ( 0.00%)                      *indices = var_values
         .                                   .iter()
         .                                   .enumerate()
         .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
         .                                   .collect();
         .                           }
         .                           // The cv is the index of the appended element.
   198,532 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
         .                       }
         .                   } else {
         .                       // `var_values` is large. Do a hashmap search via `indices`.
     1,534 ( 0.00%)              *indices.entry(kind).or_insert_with(|| {
         .                           variables.push(info);
         .                           var_values.push(kind);
       648 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
       324 ( 0.00%)                  BoundVar::new(variables.len() - 1)
         .                       })
         .                   }
 1,352,493 ( 0.01%)      }
         .           
         .               /// Shorthand helper that creates a canonical region variable for
         .               /// `r` (always in the root universe). The reason that we always
         .               /// put these variables into the root universe is because this
         .               /// method is used during **query construction:** in that case, we
         .               /// are taking all the regions and just putting them into the most
         .               /// generic context we can. This may generate solutions that don't
         .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
         .           
         .               /// Creates a canonical variable (with the given `info`)
         .               /// representing the region `r`; return a region referencing it.
         .               fn canonical_var_for_region(
         .                   &mut self,
         .                   info: CanonicalVarInfo<'tcx>,
         .                   r: ty::Region<'tcx>,
         .               ) -> ty::Region<'tcx> {
   465,067 ( 0.00%)          let var = self.canonical_var(info, r.into());
         .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
    68,490 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
   479,430 ( 0.00%)          self.tcx().mk_region(region)
         .               }
         .           
         .               /// Given a type variable `ty_var` of the given kind, first check
         .               /// if `ty_var` is bound to anything; if so, canonicalize
         .               /// *that*. Otherwise, create a new canonical variable for
         .               /// `ty_var`.
   155,640 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
    19,455 ( 0.00%)          let infcx = self.infcx;
         .                   let bound_to = infcx.shallow_resolve(ty_var);
    19,455 ( 0.00%)          if bound_to != ty_var {
         8 ( 0.00%)              self.fold_ty(bound_to)
         .                   } else {
   136,178 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
    19,454 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
         .                   }
   116,724 ( 0.00%)      }
         .           
         .               /// Given a type variable `const_var` of the given kind, first check
         .               /// if `const_var` is bound to anything; if so, canonicalize
         .               /// *that*. Otherwise, create a new canonical variable for
         .               /// `const_var`.
         .               fn canonicalize_const_var(
         .                   &mut self,
         .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

 2,701,875 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
     4,347 ( 0.00%)          let old = self.replace(val);
    10,008 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
 1,576,293 ( 0.01%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
 2,615,715 ( 0.02%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
   414,829 ( 0.00%)          RefCell {
   306,756 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
    17,588 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    22,498 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    67,494 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
   106,867 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   320,601 ( 0.00%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
        22 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 3,897,840 ( 0.03%)          let b = borrow.get().wrapping_add(1);
 2,233,994 ( 0.02%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
 1,726,457 ( 0.01%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 3,442,633 ( 0.02%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
26,068,965 ( 0.19%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
51,018,892 ( 0.37%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
52,942,420 ( 0.38%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
     3,932 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
14,038,529 ( 0.10%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

36,458,449 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs
--------------------------------------------------------------------------------
Ir                  

-- line 41 ----------------------------------------
         .                           write!(fmt, "{}", x)
         .                       }
         .                       _ => write!(fmt, "{}", self.val),
         .                   }
         .               }
         .           }
         .           
         .           fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {
     2,328 ( 0.00%)      let (int, signed) = match *ty.kind() {
     5,432 ( 0.00%)          Int(ity) => (Integer::from_int_ty(&tcx, ity), true),
         .                   Uint(uty) => (Integer::from_uint_ty(&tcx, uty), false),
         .                   _ => bug!("non integer discriminant"),
         .               };
         .               (int.size(), signed)
         .           }
         .           
         .           impl<'tcx> Discr<'tcx> {
         .               /// Adds `1` to the value and wraps around if the maximum for the type is reached.
     3,700 ( 0.00%)      pub fn wrap_incr(self, tcx: TyCtxt<'tcx>) -> Self {
     5,288 ( 0.00%)          self.checked_add(tcx, 1).0
     1,480 ( 0.00%)      }
     6,984 ( 0.00%)      pub fn checked_add(self, tcx: TyCtxt<'tcx>, n: u128) -> (Self, bool) {
         .                   let (size, signed) = int_size_and_signed(tcx, self.ty);
         .                   let (val, oflo) = if signed {
         .                       let min = size.signed_int_min();
         .                       let max = size.signed_int_max();
         .                       let val = size.sign_extend(self.val) as i128;
     3,104 ( 0.00%)              assert!(n < (i128::MAX as u128));
         .                       let n = n as i128;
     5,432 ( 0.00%)              let oflo = val > max - n;
     3,104 ( 0.00%)              let val = if oflo { min + (n - (max - val) - 1) } else { val + n };
         .                       // zero the upper bits
         .                       let val = val as u128;
         .                       let val = size.truncate(val);
         .                       (val, oflo)
         .                   } else {
         .                       let max = size.unsigned_int_max();
         .                       let val = self.val;
         .                       let oflo = val > max - n;
         .                       let val = if oflo { n - (max - val) - 1 } else { val + n };
         .                       (val, oflo)
         .                   };
     3,104 ( 0.00%)          (Self { val, ty: self.ty }, oflo)
     6,984 ( 0.00%)      }
         .           }
         .           
         .           pub trait IntTypeExt {
         .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
         .               fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx>, val: Option<Discr<'tcx>>) -> Option<Discr<'tcx>>;
         .               fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Discr<'tcx>;
         .           }
         .           
         .           impl IntTypeExt for attr::IntType {
         .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     8,045 ( 0.00%)          match *self {
         .                       SignedInt(ast::IntTy::I8) => tcx.types.i8,
         .                       SignedInt(ast::IntTy::I16) => tcx.types.i16,
         .                       SignedInt(ast::IntTy::I32) => tcx.types.i32,
         .                       SignedInt(ast::IntTy::I64) => tcx.types.i64,
         .                       SignedInt(ast::IntTy::I128) => tcx.types.i128,
         .                       SignedInt(ast::IntTy::Isize) => tcx.types.isize,
         .                       UnsignedInt(ast::UintTy::U8) => tcx.types.u8,
         .                       UnsignedInt(ast::UintTy::U16) => tcx.types.u16,
         .                       UnsignedInt(ast::UintTy::U32) => tcx.types.u32,
         .                       UnsignedInt(ast::UintTy::U64) => tcx.types.u64,
         .                       UnsignedInt(ast::UintTy::U128) => tcx.types.u128,
         .                       UnsignedInt(ast::UintTy::Usize) => tcx.types.usize,
         .                   }
       885 ( 0.00%)      }
         .           
         .               fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Discr<'tcx> {
         .                   Discr { val: 0, ty: self.to_ty(tcx) }
     2,085 ( 0.00%)      }
         .           
        42 ( 0.00%)      fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx>, val: Option<Discr<'tcx>>) -> Option<Discr<'tcx>> {
        84 ( 0.00%)          if let Some(val) = val {
        28 ( 0.00%)              assert_eq!(self.to_ty(tcx), val.ty);
       126 ( 0.00%)              let (new, oflo) = val.checked_add(tcx, 1);
        14 ( 0.00%)              if oflo { None } else { Some(new) }
         .                   } else {
         .                       Some(self.initial_discriminant(tcx))
         .                   }
        42 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
         .               /// Creates a hash of the type `Ty` which will be the same no matter what crate
         .               /// context it's calculated within. This is used by the `type_id` intrinsic.
         .               pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {
         .                   let mut hasher = StableHasher::new();
         .                   let mut hcx = self.create_stable_hashing_context();
-- line 131 ----------------------------------------
-- line 138 ----------------------------------------
         .                   hcx.while_hashing_spans(false, |hcx| {
         .                       hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {
         .                           ty.hash_stable(hcx, &mut hasher);
         .                       });
         .                   });
         .                   hasher.finish()
         .               }
         .           
       455 ( 0.00%)      pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {
       260 ( 0.00%)          if let ty::Adt(def, substs) = *ty.kind() {
         .                       for field in def.all_fields() {
       453 ( 0.00%)                  let field_ty = field.ty(self, substs);
       453 ( 0.00%)                  if let Error(_) = field_ty.kind() {
         .                               return true;
         .                           }
         .                       }
         .                   }
         .                   false
       520 ( 0.00%)      }
         .           
         .               /// Attempts to returns the deeply last field of nested structures, but
         .               /// does not apply any normalization in its search. Returns the same type
         .               /// if input `ty` is not a structure at all.
    56,025 ( 0.00%)      pub fn struct_tail_without_normalization(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   let tcx = self;
         .                   tcx.struct_tail_with_normalize(ty, |ty| ty)
    49,800 ( 0.00%)      }
         .           
         .               /// Returns the deeply last field of nested structures, or the same type if
         .               /// not a structure at all. Corresponds to the only possible unsized field,
         .               /// and its type can be used to determine unsizing strategy.
         .               ///
         .               /// Should only be called if `ty` has no inference variables and does not
         .               /// need its lifetimes preserved (e.g. as part of codegen); otherwise
         .               /// normalization attempt may cause compiler bugs.
       286 ( 0.00%)      pub fn struct_tail_erasing_lifetimes(
         .                   self,
         .                   ty: Ty<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tcx = self;
         .                   tcx.struct_tail_with_normalize(ty, |ty| tcx.normalize_erasing_regions(param_env, ty))
       234 ( 0.00%)      }
         .           
         .               /// Returns the deeply last field of nested structures, or the same type if
         .               /// not a structure at all. Corresponds to the only possible unsized field,
         .               /// and its type can be used to determine unsizing strategy.
         .               ///
         .               /// This is parameterized over the normalization strategy (i.e. how to
         .               /// handle `<T as Trait>::Assoc` and `impl Trait`); pass the identity
         .               /// function to indicate no normalization should take place.
-- line 188 ----------------------------------------
-- line 189 ----------------------------------------
         .               ///
         .               /// See also `struct_tail_erasing_lifetimes`, which is suitable for use
         .               /// during codegen.
         .               pub fn struct_tail_with_normalize(
         .                   self,
         .                   mut ty: Ty<'tcx>,
         .                   mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
    31,255 ( 0.00%)          let recursion_limit = self.recursion_limit();
         .                   for iteration in 0.. {
     6,957 ( 0.00%)              if !recursion_limit.value_within_limit(iteration) {
         .                           return self.ty_error_with_message(
         .                               DUMMY_SP,
         .                               &format!("reached the recursion limit finding the struct tail for {}", ty),
         .                           );
         .                       }
    32,831 ( 0.00%)              match *ty.kind() {
     1,016 ( 0.00%)                  ty::Adt(def, substs) => {
     2,032 ( 0.00%)                      if !def.is_struct() {
         .                                   break;
         .                               }
       725 ( 0.00%)                      match def.non_enum_variant().fields.last() {
     2,094 ( 0.00%)                          Some(f) => ty = f.ty(self, substs),
         .                                   None => break,
         .                               }
         .                           }
         .           
        49 ( 0.00%)                  ty::Tuple(tys) if let Some((&last_ty, _)) = tys.split_last() => {
         .                               ty = last_ty.expect_ty();
         .                           }
         .           
         .                           ty::Tuple(_) => break,
         .           
         .                           ty::Projection(_) | ty::Opaque(..) => {
         .                               let normalized = normalize(ty);
         .                               if ty == normalized {
-- line 224 ----------------------------------------
-- line 240 ----------------------------------------
         .               /// keeps going as long as the two types are instances of the same
         .               /// structure definitions.
         .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
         .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
         .               ///
         .               /// Should only be called if the types have no inference variables and do
         .               /// not need their lifetimes preserved (e.g., as part of codegen); otherwise,
         .               /// normalization attempt may cause compiler bugs.
        30 ( 0.00%)      pub fn struct_lockstep_tails_erasing_lifetimes(
         .                   self,
         .                   source: Ty<'tcx>,
         .                   target: Ty<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> (Ty<'tcx>, Ty<'tcx>) {
         .                   let tcx = self;
         .                   tcx.struct_lockstep_tails_with_normalize(source, target, |ty| {
         .                       tcx.normalize_erasing_regions(param_env, ty)
         .                   })
        20 ( 0.00%)      }
         .           
         .               /// Same as applying `struct_tail` on `source` and `target`, but only
         .               /// keeps going as long as the two types are instances of the same
         .               /// structure definitions.
         .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
         .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
         .               ///
         .               /// See also `struct_lockstep_tails_erasing_lifetimes`, which is suitable for use
-- line 266 ----------------------------------------
-- line 268 ----------------------------------------
         .               pub fn struct_lockstep_tails_with_normalize(
         .                   self,
         .                   source: Ty<'tcx>,
         .                   target: Ty<'tcx>,
         .                   normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> (Ty<'tcx>, Ty<'tcx>) {
         .                   let (mut a, mut b) = (source, target);
         .                   loop {
        24 ( 0.00%)              match (&a.kind(), &b.kind()) {
         .                           (&Adt(a_def, a_substs), &Adt(b_def, b_substs))
         .                               if a_def == b_def && a_def.is_struct() =>
         .                           {
         .                               if let Some(f) = a_def.non_enum_variant().fields.last() {
         .                                   a = f.ty(self, a_substs);
         .                                   b = f.ty(self, b_substs);
         .                               } else {
         .                                   break;
-- line 284 ----------------------------------------
-- line 310 ----------------------------------------
         .           
         .                           _ => break,
         .                       }
         .                   }
         .                   (a, b)
         .               }
         .           
         .               /// Calculate the destructor of a given type.
     1,356 ( 0.00%)      pub fn calculate_dtor(
         .                   self,
         .                   adt_did: DefId,
         .                   validate: impl Fn(Self, DefId) -> Result<(), ErrorReported>,
         .               ) -> Option<ty::Destructor> {
       565 ( 0.00%)          let drop_trait = self.lang_items().drop_trait()?;
         .                   self.ensure().coherent_trait(drop_trait);
         .           
       113 ( 0.00%)          let ty = self.type_of(adt_did);
     1,090 ( 0.00%)          let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {
        39 ( 0.00%)              if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {
        15 ( 0.00%)                  if validate(self, impl_did).is_ok() {
        63 ( 0.00%)                      return Some((*item_id, self.impl_constness(impl_did)));
         .                           }
         .                       }
         .                       None
       117 ( 0.00%)          })?;
         .           
         .                   Some(ty::Destructor { did, constness })
     1,130 ( 0.00%)      }
         .           
         .               /// Returns the set of types that are required to be alive in
         .               /// order to run the destructor of `def` (see RFCs 769 and
         .               /// 1238).
         .               ///
         .               /// Note that this returns only the constraints for the
         .               /// destructor of `def` itself. For the destructors of the
         .               /// contents, you need `adt_dtorck_constraint`.
     1,221 ( 0.00%)      pub fn destructor_constraints(self, def: &'tcx ty::AdtDef) -> Vec<ty::subst::GenericArg<'tcx>> {
       573 ( 0.00%)          let dtor = match def.destructor(self) {
         .                       None => {
         .                           debug!("destructor_constraints({:?}) - no dtor", def.did);
         .                           return vec![];
         .                       }
         .                       Some(dtor) => dtor.did,
         .                   };
         .           
         .                   let impl_def_id = self.associated_item(dtor).container.id();
-- line 355 ----------------------------------------
-- line 371 ----------------------------------------
         .                   //
         .                   //     impl<#[may_dangle] P0, P1, P2> Drop for S<P1, P2, P0>
         .                   //
         .                   // We want to return the parameters (X, Y). For that, we match
         .                   // up the item-substs <X, Y, Z> with the substs on the impl ADT,
         .                   // <P1, P2, P0>, and then look up which of the impl substs refer to
         .                   // parameters marked as pure.
         .           
        18 ( 0.00%)          let impl_substs = match *self.type_of(impl_def_id).kind() {
        63 ( 0.00%)              ty::Adt(def_, substs) if def_ == def => substs,
         .                       _ => bug!(),
         .                   };
         .           
        18 ( 0.00%)          let item_substs = match *self.type_of(def.did).kind() {
        63 ( 0.00%)              ty::Adt(def_, substs) if def_ == def => substs,
         .                       _ => bug!(),
         .                   };
         .           
         .                   let result = iter::zip(item_substs, impl_substs)
         .                       .filter(|&(_, k)| {
        26 ( 0.00%)                  match k.unpack() {
         .                               GenericArgKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {
         3 ( 0.00%)                          !impl_generics.region_param(ebr, self).pure_wrt_drop
         .                               }
         .                               GenericArgKind::Type(&ty::TyS { kind: ty::Param(ref pt), .. }) => {
        36 ( 0.00%)                          !impl_generics.type_param(pt, self).pure_wrt_drop
         .                               }
         .                               GenericArgKind::Const(&ty::Const {
         .                                   val: ty::ConstKind::Param(ref pc), ..
         .                               }) => !impl_generics.const_param(pc, self).pure_wrt_drop,
         .                               GenericArgKind::Lifetime(_)
         .                               | GenericArgKind::Type(_)
         .                               | GenericArgKind::Const(_) => {
         .                                   // Not a type, const or region param: this should be reported
-- line 404 ----------------------------------------
-- line 405 ----------------------------------------
         .                                   // as an error.
         .                                   false
         .                               }
         .                           }
         .                       })
         .                       .map(|(item_param, _)| item_param)
         .                       .collect();
         .                   debug!("destructor_constraint({:?}) = {:?}", def.did, result);
        45 ( 0.00%)          result
     1,092 ( 0.00%)      }
         .           
         .               /// Returns `true` if `def_id` refers to a closure (e.g., `|x| x * 2`). Note
         .               /// that closures have a `DefId`, but the closure *expression* also
         .               /// has a `HirId` that is located within the context where the
         .               /// closure appears (and, sadly, a corresponding `NodeId`, since
         .               /// those are not yet phased out). The parent of the closure's
         .               /// `DefId` will also be the context where it appears.
     8,114 ( 0.00%)      pub fn is_closure(self, def_id: DefId) -> bool {
    40,570 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)
    16,228 ( 0.00%)      }
         .           
         .               /// Returns `true` if `def_id` refers to a definition that does not have its own
         .               /// type-checking context, i.e. closure, generator or inline const.
     5,000 ( 0.00%)      pub fn is_typeck_child(self, def_id: DefId) -> bool {
    86,832 ( 0.00%)          matches!(
    98,664 ( 0.00%)              self.def_kind(def_id),
         .                       DefKind::Closure | DefKind::Generator | DefKind::InlineConst
         .                   )
    10,000 ( 0.00%)      }
         .           
         .               /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).
     9,367 ( 0.00%)      pub fn is_trait(self, def_id: DefId) -> bool {
     9,367 ( 0.00%)          self.def_kind(def_id) == DefKind::Trait
    18,734 ( 0.00%)      }
         .           
         .               /// Returns `true` if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`),
         .               /// and `false` otherwise.
    61,251 ( 0.00%)      pub fn is_trait_alias(self, def_id: DefId) -> bool {
    61,251 ( 0.00%)          self.def_kind(def_id) == DefKind::TraitAlias
   122,502 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `DefId` refers to the implicit constructor for
         .               /// a tuple struct like `struct Foo(u32)`, and `false` otherwise.
       646 ( 0.00%)      pub fn is_constructor(self, def_id: DefId) -> bool {
    39,228 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Ctor(..))
     1,292 ( 0.00%)      }
         .           
         .               /// Given the `DefId`, returns the `DefId` of the innermost item that
         .               /// has its own type-checking context or "inference enviornment".
         .               ///
         .               /// For example, a closure has its own `DefId`, but it is type-checked
         .               /// with the containing item. Similarly, an inline const block has its
         .               /// own `DefId` but it is type-checked together with the containing item.
         .               ///
         .               /// Therefore, when we fetch the
         .               /// `typeck` the closure, for example, we really wind up
         .               /// fetching the `typeck` the enclosing fn item.
   203,670 ( 0.00%)      pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {
         .                   let mut def_id = def_id;
         .                   while self.is_typeck_child(def_id) {
         .                       def_id = self.parent(def_id).unwrap_or_else(|| {
         .                           bug!("closure {:?} has no parent", def_id);
         .                       });
         .                   }
         .                   def_id
   162,936 ( 0.00%)      }
         .           
         .               /// Given the `DefId` and substs a closure, creates the type of
         .               /// `self` argument that the closure expects. For example, for a
         .               /// `Fn` closure, this would return a reference type `&T` where
         .               /// `T = closure_ty`.
         .               ///
         .               /// Returns `None` if this closure's kind has not yet been inferred.
         .               /// This should only be possible during type checking.
         .               ///
         .               /// Note that the return value is a late-bound region and hence
         .               /// wrapped in a binder.
     6,012 ( 0.00%)      pub fn closure_env_ty(
         .                   self,
         .                   closure_def_id: DefId,
         .                   closure_substs: SubstsRef<'tcx>,
         .                   env_region: ty::RegionKind,
         .               ) -> Option<Ty<'tcx>> {
         .                   let closure_ty = self.mk_closure(closure_def_id, closure_substs);
         .                   let closure_kind_ty = closure_substs.as_closure().kind_ty();
     2,004 ( 0.00%)          let closure_kind = closure_kind_ty.to_opt_closure_kind()?;
     2,672 ( 0.00%)          let env_ty = match closure_kind {
         .                       ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),
     4,116 ( 0.00%)              ty::ClosureKind::FnMut => self.mk_mut_ref(self.mk_region(env_region), closure_ty),
         .                       ty::ClosureKind::FnOnce => closure_ty,
         .                   };
         .                   Some(env_ty)
     5,344 ( 0.00%)      }
         .           
         .               /// Returns `true` if the node pointed to by `def_id` is a `static` item.
     3,332 ( 0.00%)      pub fn is_static(self, def_id: DefId) -> bool {
         .                   self.static_mutability(def_id).is_some()
     3,808 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.
         .               pub fn is_thread_local_static(self, def_id: DefId) -> bool {
         .                   self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)
         .               }
         .           
         .               /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.
         .               pub fn is_mutable_static(self, def_id: DefId) -> bool {
-- line 510 ----------------------------------------
-- line 523 ----------------------------------------
         .                   } else if self.is_foreign_item(def_id) {
         .                       self.mk_imm_ptr(static_ty)
         .                   } else {
         .                       self.mk_imm_ref(self.lifetimes.re_erased, static_ty)
         .                   }
         .               }
         .           
         .               /// Expands the given impl trait type, stopping if the type is recursive.
        21 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        12 ( 0.00%)      pub fn try_expand_impl_trait_type(
         .                   self,
         .                   def_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> Result<Ty<'tcx>, Ty<'tcx>> {
        24 ( 0.00%)          let mut visitor = OpaqueTypeExpander {
         .                       seen_opaque_tys: FxHashSet::default(),
         .                       expanded_cache: FxHashMap::default(),
         .                       primary_def_id: Some(def_id),
         .                       found_recursion: false,
         .                       found_any_recursion: false,
         .                       check_recursion: true,
         .                       tcx: self,
         .                   };
         .           
         3 ( 0.00%)          let expanded_type = visitor.expand_opaque_ty(def_id, substs).unwrap();
         .                   trace!(?expanded_type);
         3 ( 0.00%)          if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }
         .               }
         .           }
         .           
         .           struct OpaqueTypeExpander<'tcx> {
         .               // Contains the DefIds of the opaque types that are currently being
         .               // expanded. When we expand an opaque type we insert the DefId of
         .               // that type, and when we finish expanding that type we remove the
         .               // its DefId.
-- line 557 ----------------------------------------
-- line 565 ----------------------------------------
         .               /// Whether or not to check for recursive opaque types.
         .               /// This is `true` when we're explicitly checking for opaque type
         .               /// recursion, and 'false' otherwise to avoid unnecessary work.
         .               check_recursion: bool,
         .               tcx: TyCtxt<'tcx>,
         .           }
         .           
         .           impl<'tcx> OpaqueTypeExpander<'tcx> {
        27 ( 0.00%)      fn expand_opaque_ty(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> Option<Ty<'tcx>> {
         6 ( 0.00%)          if self.found_any_recursion {
         .                       return None;
         .                   }
         .                   let substs = substs.fold_with(self);
        12 ( 0.00%)          if !self.check_recursion || self.seen_opaque_tys.insert(def_id) {
         .                       let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {
         .                           Some(expanded_ty) => expanded_ty,
         .                           None => {
         3 ( 0.00%)                      let generic_ty = self.tcx.type_of(def_id);
         3 ( 0.00%)                      let concrete_ty = generic_ty.subst(self.tcx, substs);
         .                               let expanded_ty = self.fold_ty(concrete_ty);
         9 ( 0.00%)                      self.expanded_cache.insert((def_id, substs), expanded_ty);
         .                               expanded_ty
         .                           }
         .                       };
         6 ( 0.00%)              if self.check_recursion {
         .                           self.seen_opaque_tys.remove(&def_id);
         .                       }
         .                       Some(expanded_ty)
         .                   } else {
         .                       // If another opaque type that we contain is recursive, then it
         .                       // will report the error, so we don't have to.
         .                       self.found_any_recursion = true;
         .                       self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();
         .                       None
         .                   }
        27 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
    10,634 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
    42,484 ( 0.00%)          if let ty::Opaque(def_id, substs) = t.kind {
         .                       self.expand_opaque_ty(def_id, substs).unwrap_or(t)
    21,242 ( 0.00%)          } else if t.has_opaque_types() {
         .                       t.super_fold_with(self)
         .                   } else {
         .                       t
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> ty::TyS<'tcx> {
-- line 619 ----------------------------------------
-- line 658 ----------------------------------------
         .           
         .               /// Checks whether values of this type `T` are *moved* or *copied*
         .               /// when referenced -- this amounts to a check for whether `T:
         .               /// Copy`, but note that we **don't** consider lifetimes when
         .               /// doing this check. This means that we may generate MIR which
         .               /// does copies even when the type actually doesn't satisfy the
         .               /// full requirements for the `Copy` trait (cc #29149) -- this
         .               /// winds up being reported as an error during NLL borrow check.
    67,160 ( 0.00%)      pub fn is_copy_modulo_regions(
         .                   &'tcx self,
         .                   tcx_at: TyCtxtAt<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> bool {
         .                   tcx_at.is_copy_raw(param_env.and(self))
    53,728 ( 0.00%)      }
         .           
         .               /// Checks whether values of this type `T` have a size known at
         .               /// compile time (i.e., whether `T: Sized`). Lifetimes are ignored
         .               /// for the purposes of this check, so it can be an
         .               /// over-approximation in generic contexts, where one can have
         .               /// strange rules like `<T as Foo<'static>>::Bar: Sized` that
         .               /// actually carry lifetime requirements.
   229,221 ( 0.00%)      pub fn is_sized(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
   127,345 ( 0.00%)          self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))
   152,814 ( 0.00%)      }
         .           
         .               /// Checks whether values of this type `T` implement the `Freeze`
         .               /// trait -- frozen types are those that do not contain an
         .               /// `UnsafeCell` anywhere. This is a language concept used to
         .               /// distinguish "true immutability", which is relevant to
         .               /// optimization as well as the rules around static values. Note
         .               /// that the `Freeze` trait is not exposed to end users and is
         .               /// effectively an implementation detail.
    11,178 ( 0.00%)      pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
     6,210 ( 0.00%)          self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))
     7,452 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Freeze`.
         .               ///
         .               /// Returning true means the type is known to be `Freeze`. Returning
         .               /// `false` means nothing -- could be `Freeze`, might not be.
         .               fn is_trivially_freeze(&self) -> bool {
         .                   match self.kind() {
         .                       ty::Int(_)
-- line 701 ----------------------------------------
-- line 731 ----------------------------------------
         .               pub fn is_unpin(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
         .                   self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))
         .               }
         .           
         .               /// Fast path helper for testing if a type is `Unpin`.
         .               ///
         .               /// Returning true means the type is known to be `Unpin`. Returning
         .               /// `false` means nothing -- could be `Unpin`, might not be.
     6,210 ( 0.00%)      fn is_trivially_unpin(&self) -> bool {
     6,220 ( 0.00%)          match self.kind() {
         .                       ty::Int(_)
         .                       | ty::Uint(_)
         .                       | ty::Float(_)
         .                       | ty::Bool
         .                       | ty::Char
         .                       | ty::Str
         .                       | ty::Never
         .                       | ty::Ref(..)
         .                       | ty::RawPtr(_)
         .                       | ty::FnDef(..)
         .                       | ty::Error(_)
         .                       | ty::FnPtr(_) => true,
         .                       ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_unpin),
         4 ( 0.00%)              ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_unpin(),
         .                       ty::Adt(..)
         .                       | ty::Bound(..)
         .                       | ty::Closure(..)
         .                       | ty::Dynamic(..)
         .                       | ty::Foreign(_)
         .                       | ty::Generator(..)
         .                       | ty::GeneratorWitness(_)
         .                       | ty::Infer(_)
         .                       | ty::Opaque(..)
         .                       | ty::Param(_)
         .                       | ty::Placeholder(_)
         .                       | ty::Projection(_) => false,
         .                   }
     8,694 ( 0.00%)      }
         .           
         .               /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely
         .               /// non-copy and *might* have a destructor attached; if it returns
         .               /// `false`, then `ty` definitely has no destructor (i.e., no drop glue).
         .               ///
         .               /// (Note that this implies that if `ty` has a destructor attached,
         .               /// then `needs_drop` will definitely return `true` for `ty`.)
         .               ///
         .               /// Note that this method is used to check eligible types in unions.
         .               #[inline]
   275,830 ( 0.00%)      pub fn needs_drop(&'tcx self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
         .                   // Avoid querying in simple cases.
   196,885 ( 0.00%)          match needs_drop_components(self, &tcx.data_layout) {
         .                       Err(AlwaysRequiresDrop) => true,
   112,868 ( 0.00%)              Ok(components) => {
         .                           let query_ty = match *components {
    72,338 ( 0.00%)                      [] => return false,
         .                               // If we've got a single component, call the query with that
         .                               // to increase the chance that we hit the query cache.
     7,699 ( 0.00%)                      [component_ty] => component_ty,
         .                               _ => self,
         .                           };
         .           
         .                           // This doesn't depend on regions, so try to minimize distinct
         .                           // query keys used.
         .                           // If normalization fails, we just use `query_ty`.
         .                           let query_ty =
         4 ( 0.00%)                      tcx.try_normalize_erasing_regions(param_env, query_ty).unwrap_or(query_ty);
         .           
         2 ( 0.00%)                  tcx.needs_drop_raw(param_env.and(query_ty))
         .                       }
         .                   }
   248,247 ( 0.00%)      }
         .           
         .               /// Checks if `ty` has has a significant drop.
         .               ///
         .               /// Note that this method can return false even if `ty` has a destructor
         .               /// attached; even if that is the case then the adt has been marked with
         .               /// the attribute `rustc_insignificant_dtor`.
         .               ///
         .               /// Note that this method is used to check for change in drop order for
-- line 809 ----------------------------------------
-- line 854 ----------------------------------------
         .               ///
         .               /// This function is "shallow" because it may return `true` for a composite type whose fields
         .               /// are not `StructuralEq`. For example, `[T; 4]` has structural equality regardless of `T`
         .               /// because equality for arrays is determined by the equality of each array element. If you
         .               /// want to know whether a given call to `PartialEq::eq` will proceed structurally all the way
         .               /// down, you will need to use a type visitor.
         .               #[inline]
         .               pub fn is_structural_eq_shallow(&'tcx self, tcx: TyCtxt<'tcx>) -> bool {
        40 ( 0.00%)          match self.kind() {
         .                       // Look for an impl of both `PartialStructuralEq` and `StructuralEq`.
         .                       Adt(..) => tcx.has_structural_eq_impls(self),
         .           
         .                       // Primitive types that satisfy `Eq`.
         .                       Bool | Char | Int(_) | Uint(_) | Str | Never => true,
         .           
         .                       // Composite types that satisfy `Eq` when all of their fields do.
         .                       //
-- line 870 ----------------------------------------
-- line 888 ----------------------------------------
         .                       // FIXME(ecstaticmorse): Maybe we should `bug` here? This should probably only be
         .                       // called for known, fully-monomorphized types.
         .                       Projection(_) | Opaque(..) | Param(_) | Bound(..) | Placeholder(_) | Infer(_) => false,
         .           
         .                       Foreign(_) | GeneratorWitness(..) | Error(_) => false,
         .                   }
         .               }
         .           
       335 ( 0.00%)      pub fn same_type(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {
       268 ( 0.00%)          match (&a.kind(), &b.kind()) {
         .                       (&Adt(did_a, substs_a), &Adt(did_b, substs_b)) => {
       335 ( 0.00%)                  if did_a != did_b {
         .                               return false;
         .                           }
         .           
         .                           substs_a.types().zip(substs_b.types()).all(|(a, b)| Self::same_type(a, b))
         .                       }
         .                       _ => a == b,
         .                   }
       402 ( 0.00%)      }
         .           
         .               /// Peel off all reference types in this type until there are none left.
         .               ///
         .               /// This method is idempotent, i.e. `ty.peel_refs().peel_refs() == ty.peel_refs()`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// - `u8` -> `u8`
         .               /// - `&'a mut u8` -> `u8`
         .               /// - `&'a &'b u8` -> `u8`
         .               /// - `&'a *const &'b u8 -> *const &'b u8`
     5,029 ( 0.00%)      pub fn peel_refs(&'tcx self) -> Ty<'tcx> {
         .                   let mut ty = self;
    16,204 ( 0.00%)          while let Ref(_, inner_ty, _) = ty.kind() {
     2,056 ( 0.00%)              ty = inner_ty;
         .                   }
         .                   ty
     5,029 ( 0.00%)      }
         .           
         .               pub fn outer_exclusive_binder(&'tcx self) -> DebruijnIndex {
     2,628 ( 0.00%)          self.outer_exclusive_binder
     2,628 ( 0.00%)      }
         .           }
         .           
         .           pub enum ExplicitSelf<'tcx> {
         .               ByValue,
         .               ByReference(ty::Region<'tcx>, hir::Mutability),
         .               ByRawPointer(hir::Mutability),
         .               ByBox,
         .               Other,
-- line 937 ----------------------------------------
-- line 976 ----------------------------------------
         .                       _ => Other,
         .                   }
         .               }
         .           }
         .           
         .           /// Returns a list of types such that the given type needs drop if and only if
         .           /// *any* of the returned types need drop. Returns `Err(AlwaysRequiresDrop)` if
         .           /// this type always needs drop.
   249,172 ( 0.00%)  pub fn needs_drop_components<'tcx>(
         .               ty: Ty<'tcx>,
         .               target_layout: &TargetDataLayout,
         .           ) -> Result<SmallVec<[Ty<'tcx>; 2]>, AlwaysRequiresDrop> {
   213,581 ( 0.00%)      match ty.kind() {
         .                   ty::Infer(ty::FreshIntTy(_))
         .                   | ty::Infer(ty::FreshFloatTy(_))
         .                   | ty::Bool
         .                   | ty::Int(_)
         .                   | ty::Uint(_)
         .                   | ty::Float(_)
         .                   | ty::Never
         .                   | ty::FnDef(..)
-- line 996 ----------------------------------------
-- line 1001 ----------------------------------------
         .                   | ty::Ref(..)
         .                   | ty::Str => Ok(SmallVec::new()),
         .           
         .                   // Foreign types can never have destructors.
         .                   ty::Foreign(..) => Ok(SmallVec::new()),
         .           
         .                   ty::Dynamic(..) | ty::Error(_) => Err(AlwaysRequiresDrop),
         .           
         1 ( 0.00%)          ty::Slice(ty) => needs_drop_components(ty, target_layout),
         .                   ty::Array(elem_ty, size) => {
     2,178 ( 0.00%)              match needs_drop_components(elem_ty, target_layout) {
     2,088 ( 0.00%)                  Ok(v) if v.is_empty() => Ok(v),
     1,088 ( 0.00%)                  res => match size.val.try_to_bits(target_layout.pointer_size) {
         .                               // Arrays of size zero don't need drop, even if their element
         .                               // type does.
        58 ( 0.00%)                      Some(0) => Ok(SmallVec::new()),
       428 ( 0.00%)                      Some(_) => res,
         .                               // We don't know which of the cases above we are in, so
         .                               // return the whole type and let the caller decide what to
         .                               // do.
         .                               None => Ok(smallvec![ty]),
         .                           },
         .                       }
         .                   }
         .                   // If any field needs drop, then the whole tuple does.
     4,158 ( 0.00%)          ty::Tuple(..) => ty.tuple_fields().try_fold(SmallVec::new(), move |mut acc, elem| {
    12,792 ( 0.00%)              acc.extend(needs_drop_components(elem, target_layout)?);
     8,528 ( 0.00%)              Ok(acc)
         .                   }),
         .           
         .                   // These require checking for `Copy` bounds or `Adt` destructors.
         .                   ty::Adt(..)
         .                   | ty::Projection(..)
         .                   | ty::Param(_)
         .                   | ty::Bound(..)
         .                   | ty::Placeholder(..)
         .                   | ty::Opaque(..)
         .                   | ty::Infer(_)
         .                   | ty::Closure(..)
    26,636 ( 0.00%)          | ty::Generator(..) => Ok(smallvec![ty]),
         .               }
   213,576 ( 0.00%)  }
         .           
     1,854 ( 0.00%)  pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {
     1,236 ( 0.00%)      match *ty.kind() {
         .                   ty::Bool
         .                   | ty::Char
         .                   | ty::Int(_)
         .                   | ty::Uint(_)
         .                   | ty::Float(_)
         .                   | ty::Infer(ty::IntVar(_))
         .                   | ty::Infer(ty::FloatVar(_))
         .                   | ty::Str
-- line 1053 ----------------------------------------
-- line 1070 ----------------------------------------
         .                   // Not trivial because they have components, and instead of looking inside,
         .                   // we'll just perform trait selection.
         .                   ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,
         .           
         .                   ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),
         .           
         .                   ty::Tuple(tys) => tys.iter().all(|ty| is_trivially_const_drop(ty.expect_ty())),
         .               }
     2,472 ( 0.00%)  }
         .           
         .           // Does the equivalent of
         .           // ```
         .           // let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();
         .           // folder.tcx().intern_*(&v)
         .           // ```
 2,134,127 ( 0.02%)  pub fn fold_list<'tcx, F, T>(
         .               list: &'tcx ty::List<T>,
         .               folder: &mut F,
         .               intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,
         .           ) -> Result<&'tcx ty::List<T>, F::Error>
         .           where
         .               F: FallibleTypeFolder<'tcx>,
         .               T: TypeFoldable<'tcx> + PartialEq + Copy,
         .           {
         .               let mut iter = list.iter();
         .               // Look for the first element that changed
14,506,543 ( 0.10%)      match iter.by_ref().enumerate().find_map(|(i, t)| match t.try_fold_with(folder) {
27,668,340 ( 0.20%)          Ok(new_t) if new_t == t => None,
         .                   new_t => Some((i, new_t)),
         .               }) {
         .                   Some((i, Ok(new_t))) => {
         .                       // An element changed, prepare to intern the resulting list
         .                       let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());
         .                       new_list.extend_from_slice(&list[..i]);
         .                       new_list.push(new_t);
         .                       for t in iter {
        84 ( 0.00%)                  new_list.push(t.try_fold_with(folder)?)
         .                       }
    77,194 ( 0.00%)              Ok(intern(folder.tcx(), &new_list))
         .                   }
         .                   Some((_, Err(err))) => {
         .                       return Err(err);
         .                   }
         .                   None => Ok(list),
         .               }
 2,163,906 ( 0.02%)  }
         .           
         .           #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct AlwaysRequiresDrop;
         .           
         .           /// Normalizes all opaque types in the given value, replacing them
         .           /// with their underlying types.
     1,000 ( 0.00%)  pub fn normalize_opaque_types<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               val: &'tcx List<ty::Predicate<'tcx>>,
         .           ) -> &'tcx List<ty::Predicate<'tcx>> {
     1,750 ( 0.00%)      let mut visitor = OpaqueTypeExpander {
         .                   seen_opaque_tys: FxHashSet::default(),
         .                   expanded_cache: FxHashMap::default(),
         .                   primary_def_id: None,
         .                   found_recursion: false,
         .                   found_any_recursion: false,
         .                   check_recursion: false,
         .                   tcx,
         .               };
         .               val.fold_with(&mut visitor)
     1,250 ( 0.00%)  }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      *providers = ty::query::Providers { normalize_opaque_types, ..*providers }
         .           }

 5,187,926 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/convert/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 494 ----------------------------------------
         .           // As lifts over &mut
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized, U: ?Sized> const AsRef<U> for &mut T
         .           where
         .               T: ~const AsRef<U>,
         .           {
         .               fn as_ref(&self) -> &U {
 1,264,786 ( 0.01%)          <T as AsRef<U>>::as_ref(*self)
         .               }
         .           }
         .           
         .           // FIXME (#45742): replace the above impls for &/&mut with the following more general one:
         .           // // As lifts over Deref
         .           // impl<D: ?Sized + Deref<Target: AsRef<U>>, U: ?Sized> AsRef<U> for D {
         .           //     fn as_ref(&self) -> &U {
         .           //         self.deref().as_ref()
-- line 510 ----------------------------------------
-- line 514 ----------------------------------------
         .           // AsMut lifts over &mut
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized, U: ?Sized> const AsMut<U> for &mut T
         .           where
         .               T: ~const AsMut<U>,
         .           {
         .               fn as_mut(&mut self) -> &mut U {
   242,873 ( 0.00%)          (*self).as_mut()
         .               }
         .           }
         .           
         .           // FIXME (#45742): replace the above impl for &mut with the following more general one:
         .           // // AsMut lifts over DerefMut
         .           // impl<D: ?Sized + Deref<Target: AsMut<U>>, U: ?Sized> AsMut<U> for D {
         .           //     fn as_mut(&mut self) -> &mut U {
         .           //         self.deref_mut().as_mut()
-- line 530 ----------------------------------------
-- line 533 ----------------------------------------
         .           
         .           // From implies Into
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, U> const Into<U> for T
         .           where
         .               U: ~const From<T>,
         .           {
   190,530 ( 0.00%)      fn into(self) -> U {
58,060,661 ( 0.42%)          U::from(self)
   209,984 ( 0.00%)      }
         .           }
         .           
         .           // From (and thus Into) is reflexive
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const From<T> for T {
         .               fn from(t: T) -> T {
         .                   t
-- line 551 ----------------------------------------

   335,984 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/convert/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     4,088 ( 0.00%)      fn clone(&self) -> Self {
    18,507 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     3,681 ( 0.00%)              table: self.table.clone(),
         .                   }
     4,599 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   418,405 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,523,257 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,702,584 ( 0.02%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
        12 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
 1,413,151 ( 0.01%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
        97 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    91,050 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   340,397 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       680 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       175 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
       675 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
       850 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,465,193 ( 0.03%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 4,258,349 ( 0.03%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 3,316,110 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 3,964,398 ( 0.03%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,073 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     6,219 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     4,146 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     2,073 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
20,173,006 ( 0.15%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     1,954 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       178 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 7,906,395 ( 0.06%)              self.table
 8,365,190 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   799,855 ( 0.01%)              None
         .                   }
18,088,327 ( 0.13%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   268,837 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,789,229 ( 0.02%)          match self.remove_entry(k) {
   136,038 ( 0.00%)              Some((_, v)) => Some(v),
   231,852 ( 0.00%)              None => None,
         .                   }
   607,728 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,379,314 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
20,208,382 ( 0.15%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
49,600,687 ( 0.36%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
54,498,584 ( 0.39%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 6,626,100 ( 0.05%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
35,204,351 ( 0.25%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,151,470 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 6,807,301 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 7,985,280 ( 0.06%)          self.from_hash(hash, equivalent(k))
12,240,271 ( 0.09%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
11,937,532 ( 0.09%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 1,930,652 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    10,101 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   180,429 ( 0.00%)          IntoIter {
    84,098 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    30,303 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   590,109 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     7,105 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        11 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
         3 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     5,526 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       791 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
     1,582 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
        27 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   207,670 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   170,358 ( 0.00%)          let iter = iter.into_iter();
    87,581 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
    13,567 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   474,571 ( 0.00%)              self.insert(k, v);
         .                   });
   134,254 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

17,373,698 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               PushRegionObligation,
        .           }
        .           
        .           macro_rules! impl_from {
        .               ($($ctor: ident ($ty: ty),)*) => {
        .                   $(
        .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
        .                       fn from(x: $ty) -> Self {
   96,837 ( 0.00%)                  UndoLog::$ctor(x.into())
        .                       }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           // Upcast from a single kind of "undoable action" to the general enum
        .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
        .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
        .           
        .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
        .               ProjectionCache(traits::UndoLog<'tcx>),
        .           }
        .           
        .           /// The Rollback trait defines how to rollback a particular action.
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
2,172,492 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
3,620,820 ( 0.03%)          match undo {
4,650,570 ( 0.03%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    3,130 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    7,088 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
        .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
        .                       UndoLog::RegionConstraintCollector(undo) => {
  899,164 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
        .                       }
        .                       UndoLog::RegionUnificationTable(undo) => {
  223,578 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
        .                       }
        .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
        .                       UndoLog::PushRegionObligation => {
        .                           self.region_obligations.pop();
        .                       }
        .                   }
2,896,656 ( 0.02%)      }
        .           }
        .           
        .           /// The combined undo log for all the various unification tables. For each change to the storage
        .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
        .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
        .               logs: Vec<UndoLog<'tcx>>,
        .               num_open_snapshots: usize,
        .           }
        .           
        .           impl Default for InferCtxtUndoLogs<'_> {
        .               fn default() -> Self {
  194,788 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
        .               }
        .           }
        .           
        .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
        .           /// action that is convertable into an UndoLog (per the From impls above).
        .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
        .           where
        .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
        .           {
        .               #[inline]
        .               fn num_open_snapshots(&self) -> usize {
        .                   self.num_open_snapshots
        .               }
        .           
        .               #[inline]
        .               fn push(&mut self, undo: T) {
  629,350 ( 0.00%)          if self.in_snapshot() {
  774,696 ( 0.01%)              self.logs.push(undo.into())
        .                   }
        .               }
        .           
        .               fn clear(&mut self) {
        .                   self.logs.clear();
        .                   self.num_open_snapshots = 0;
        .               }
        .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
        .               {
        .                   if self.in_snapshot() {
        .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
6,091,356 ( 0.04%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("rollback_to({})", snapshot.undo_len);
        .                   self.undo_log.assert_open_snapshot(&snapshot);
        .           
4,202,944 ( 0.03%)          while self.undo_log.logs.len() > snapshot.undo_len {
        .                       let undo = self.undo_log.logs.pop().unwrap();
8,689,968 ( 0.06%)              self.reverse(undo);
        .                   }
        .           
2,145,508 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
  463,870 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
3,277,613 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
7,106,582 ( 0.05%)      }
        .           
        .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("commit({})", snapshot.undo_len);
        .           
2,715,507 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
  555,266 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
2,993,140 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
        .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
7,681,580 ( 0.06%)          self.num_open_snapshots += 1;
        .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
        .               }
        .           
        .               pub(crate) fn region_constraints_in_snapshot(
        .                   &self,
        .                   s: &Snapshot<'tcx>,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
  360,835 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               pub(crate) fn region_constraints(
        .                   &self,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
    9,194 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
        .                   // Failures here may indicate a failure to follow a stack discipline.
3,045,678 ( 0.02%)          assert!(self.logs.len() >= snapshot.undo_len);
3,045,678 ( 0.02%)          assert!(self.num_open_snapshots > 0);
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
        .               type Output = UndoLog<'tcx>;
        .           
        .               fn index(&self, key: usize) -> &Self::Output {
        .                   &self.logs[key]
-- line 204 ----------------------------------------

2,735,104 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 208 ----------------------------------------
        .               /// There is no built-in impl. There may be some other
        .               /// candidate (a where-clause or user-defined impl).
        .               None,
        .               /// It is unknown whether there is an impl.
        .               Ambiguous,
        .           }
        .           
        .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
  625,632 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
7,317,987 ( 0.05%)          SelectionContext {
        .                       infcx,
1,201,079 ( 0.01%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
  521,360 ( 0.00%)      }
        .           
      324 ( 0.00%)      pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
  107,472 ( 0.00%)          SelectionContext {
        .                       infcx,
   13,380 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: true,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
      270 ( 0.00%)      }
        .           
        .               pub fn with_negative(
        .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
        .                   allow_negative_impls: bool,
        .               ) -> SelectionContext<'cx, 'tcx> {
        .                   debug!(?allow_negative_impls, "with_negative");
        .                   SelectionContext {
        .                       infcx,
-- line 244 ----------------------------------------
-- line 245 ----------------------------------------
        .                       freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls,
        .                       query_mode: TraitQueryMode::Standard,
        .                   }
        .               }
        .           
  148,472 ( 0.00%)      pub fn with_query_mode(
        .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
        .                   query_mode: TraitQueryMode,
        .               ) -> SelectionContext<'cx, 'tcx> {
        .                   debug!(?query_mode, "with_query_mode");
  296,944 ( 0.00%)          SelectionContext {
        .                       infcx,
   18,559 ( 0.00%)              freshener: infcx.freshener_keep_static(),
        .                       intercrate: false,
        .                       intercrate_ambiguity_causes: None,
        .                       allow_negative_impls: false,
        .                       query_mode,
        .                   }
  111,354 ( 0.00%)      }
        .           
        .               /// Enables tracking of intercrate ambiguity causes. These are
        .               /// used in coherence to give improved diagnostics. We don't do
        .               /// this until we detect a coherence error because it can lead to
        .               /// false overflow results (#47139) and because it costs
        .               /// computation time.
        .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
        .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
        .               /// was enabled and disables tracking at the same time. If
        .               /// tracking is not enabled, just returns an empty vector.
        .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
        .                   assert!(self.intercrate);
        .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
        .               }
        .           
        .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
4,217,601 ( 0.03%)          self.infcx
   98,915 ( 0.00%)      }
        .           
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
5,379,543 ( 0.04%)          self.infcx.tcx
        .               }
        .           
        .               pub fn is_intercrate(&self) -> bool {
  989,166 ( 0.01%)          self.intercrate
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Selection
        .               //
        .               // The selection phase tries to identify *how* an obligation will
        .               // be resolved. For example, it will identify which impl or
        .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
        .               // 1. If no applicable impl or parameter bound can be found.
        .               // 2. If the output type parameters in the obligation do not match
        .               //    those specified by the impl/bound. For example, if the obligation
        .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
        .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
        .           
        .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
        .               /// type environment by performing unification.
1,786,736 ( 0.01%)      #[instrument(level = "debug", skip(self))]
2,297,232 ( 0.02%)      pub fn select(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
1,813,760 ( 0.01%)          let candidate = match self.select_from_obligation(obligation) {
        .                       Err(SelectionError::Overflow) => {
        .                           // In standard mode, overflow must have been caught and reported
        .                           // earlier.
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           return Err(SelectionError::Overflow);
        .                       }
        .                       Err(SelectionError::Ambiguous(_)) => {
        .                           return Ok(None);
        .                       }
        .                       Err(e) => {
  161,938 ( 0.00%)                  return Err(e);
        .                       }
        .                       Ok(None) => {
   52,494 ( 0.00%)                  return Ok(None);
        .                       }
1,345,428 ( 0.01%)              Ok(Some(candidate)) => candidate,
        .                   };
        .           
2,242,910 ( 0.02%)          match self.confirm_candidate(obligation, candidate) {
        .                       Err(SelectionError::Overflow) => {
        .                           assert!(self.query_mode == TraitQueryMode::Canonical);
        .                           Err(SelectionError::Overflow)
        .                       }
    3,445 ( 0.00%)              Err(e) => Err(e),
        .                       Ok(candidate) => {
        .                           debug!(?candidate, "confirmed");
2,687,676 ( 0.02%)                  Ok(Some(candidate))
        .                       }
        .                   }
        .               }
        .           
2,552,480 ( 0.02%)      crate fn select_from_obligation(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
        .           
        .                   let pec = &ProvisionalEvaluationCache::default();
        .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
        .           
  510,496 ( 0.00%)          self.candidate_from_obligation(&stack)
2,297,232 ( 0.02%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // EVALUATION
        .               //
        .               // Tests whether an obligation can be selected or whether an impl
        .               // can be applied to particular types. It skips the "confirmation"
        .               // step and hence completely ignores output type parameters.
        .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
        .               // we can be sure it does not.
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
        .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
        .                   debug!(?obligation, "predicate_may_hold_fatal");
        .           
        .                   // This fatal query is a stopgap that should only be used in standard mode,
        .                   // where we do not expect overflow to be propagated.
    1,483 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
        .           
    7,415 ( 0.00%)          self.evaluate_root_obligation(obligation)
        .                       .expect("Overflow should be caught earlier in standard query mode")
        .                       .may_apply()
        .               }
        .           
        .               /// Evaluates whether the obligation `obligation` can be satisfied
        .               /// and returns an `EvaluationResult`. This is meant for the
        .               /// *initial* call.
   37,118 ( 0.00%)      pub fn evaluate_root_obligation(
        .                   &mut self,
        .                   obligation: &PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
   60,126 ( 0.00%)              this.evaluate_predicate_recursively(
        .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                           obligation.clone(),
        .                       )
        .                   })
   37,118 ( 0.00%)      }
        .           
        .               fn evaluation_probe(
        .                   &mut self,
        .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
        .               ) -> Result<EvaluationResult, OverflowError> {
1,349,904 ( 0.01%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
   40,084 ( 0.00%)              let result = op(self)?;
        .           
1,218,819 ( 0.01%)              match self.infcx.leak_check(true, snapshot) {
        .                           Ok(()) => {}
        .                           Err(_) => return Ok(EvaluatedToErr),
        .                       }
        .           
  870,585 ( 0.01%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
        .                           None => Ok(result),
        .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
        .                       }
        .                   })
        .               }
        .           
        .               /// Evaluates the predicates in `predicates` recursively. Note that
        .               /// this applies projections in the predicates, and therefore
        .               /// is run within an inference probe.
1,024,580 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
        .               fn evaluate_predicates_recursively<'o, I>(
        .                   &mut self,
        .                   stack: TraitObligationStackList<'o, 'tcx>,
        .                   predicates: I,
        .               ) -> Result<EvaluationResult, OverflowError>
        .               where
        .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
        .               {
        .                   let mut result = EvaluatedToOk;
  915,283 ( 0.01%)          for obligation in predicates {
  107,204 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
   53,602 ( 0.00%)              if let EvaluatedToErr = eval {
        .                           // fast-path - EvaluatedToErr is the top of the lattice,
        .                           // so we don't need to look on the other predicates.
        .                           return Ok(EvaluatedToErr);
        .                       } else {
        .                           result = cmp::max(result, eval);
        .                       }
        .                   }
        .                   Ok(result)
        .               }
        .           
  468,430 ( 0.00%)      #[instrument(
        .                   level = "debug",
        .                   skip(self, previous_stack),
        .                   fields(previous_stack = ?previous_stack.head())
  421,587 ( 0.00%)      )]
        .               fn evaluate_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: PredicateObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
        .                   // a `PredicateObligation`. These are distinct types, so we can't
        .                   // use any `Option` combinator method that would force them to be
        .                   // the same.
   93,686 ( 0.00%)          match previous_stack.head() {
   51,984 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
   20,851 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
        .                   }
        .           
  281,058 ( 0.00%)          let result = ensure_sufficient_stack(|| {
   46,843 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
  468,430 ( 0.00%)              match bound_predicate.skip_binder() {
        .                           ty::PredicateKind::Trait(t) => {
        .                               let t = bound_predicate.rebind(t);
        .                               debug_assert!(!t.has_escaping_bound_vars());
        .                               let obligation = obligation.with(t);
  633,435 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
        .                           }
        .           
        .                           ty::PredicateKind::Subtype(p) => {
        .                               let p = bound_predicate.rebind(p);
        .                               // Does this code ever run?
    1,515 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
        .                                   Some(Ok(InferOk { mut obligations, .. })) => {
        .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
        .                                       self.evaluate_predicates_recursively(
        .                                           previous_stack,
        .                                           obligations.into_iter(),
        .                                       )
        .                                   }
        .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
        .                               None => Ok(EvaluatedToAmbig),
        .                           },
        .           
        .                           ty::PredicateKind::TypeOutlives(pred) => {
        .                               // A global type with no late-bound regions can only
        .                               // contain the "'static" lifetime (any other lifetime
        .                               // would either be late-bound or local), so it is guaranteed
        .                               // to outlive any other lifetime
      149 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
        .                                   Ok(EvaluatedToOk)
        .                               } else {
        .                                   Ok(EvaluatedToOkModuloRegions)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::RegionOutlives(..) => {
        .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
        .                               } else {
        .                                   Ok(EvaluatedToErr)
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::Projection(data) => {
        .                               let data = bound_predicate.rebind(data);
        .                               let project_obligation = obligation.with(data);
   26,024 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
   12,875 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
        .                                       'compute_res: {
        .                                           // If we've previously marked this projection as 'complete', thne
        .                                           // use the final cached result (either `EvaluatedToOk` or
        .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
        .                                           // sub-obligations.
   10,300 ( 0.00%)                                  if let Some(key) =
   23,175 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
        .                                           {
   20,512 ( 0.00%)                                      if let Some(cached_res) = self
        .                                                   .infcx
        .                                                   .inner
        .                                                   .borrow_mut()
        .                                                   .projection_cache()
        .                                                   .is_complete(key)
        .                                               {
        .                                                   break 'compute_res Ok(cached_res);
        .                                               }
        .                                           }
        .           
    5,150 ( 0.00%)                                  self.add_depth(
        .                                               subobligations.iter_mut(),
    5,150 ( 0.00%)                                      obligation.recursion_depth,
        .                                           );
    5,150 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
    7,725 ( 0.00%)                                      previous_stack,
   12,875 ( 0.00%)                                      subobligations,
        .                                           );
   10,300 ( 0.00%)                                  if let Ok(res) = res {
    5,150 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
    9,660 ( 0.00%)                                          if let Some(key) =
    2,415 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
   16,905 ( 0.00%)                                                  self, data,
        .                                                       )
        .                                                   {
        .                                                       // If the result is something that we can cache, then mark this
        .                                                       // entry as 'complete'. This will allow us to skip evaluating the
        .                                                       // suboligations at all the next time we evaluate the projection
        .                                                       // predicate.
   16,828 ( 0.00%)                                              self.infcx
        .                                                           .inner
        .                                                           .borrow_mut()
        .                                                           .projection_cache()
        .                                                           .complete(key, res);
        .                                                   }
        .                                               }
        .                                           }
        .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
        .                                   }
        .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
        .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
        .                                   Err(_) => Ok(EvaluatedToErr),
        .                               }
        .                           }
        .           
        .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      160 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
        .                                   Some(closure_kind) => {
       96 ( 0.00%)                              if closure_kind.extends(kind) {
        .                                           Ok(EvaluatedToOk)
        .                                       } else {
        .                                           Ok(EvaluatedToErr)
        .                                       }
        .                                   }
        .                                   None => Ok(EvaluatedToAmbig),
        .                               }
        .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                               bug!("TypeWellFormedFromEnv is only used for chalk")
        .                           }
        .                       }
   46,843 ( 0.00%)          });
        .           
        .                   debug!("finished: {:?} from {:?}", result, obligation);
        .           
        .                   result
        .               }
        .           
  886,809 ( 0.01%)      #[instrument(skip(self, previous_stack), level = "debug")]
        .               fn evaluate_trait_predicate_recursively<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   mut obligation: TraitObligation<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   84,458 ( 0.00%)          if !self.intercrate
        .                       && obligation.is_global()
        .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
        .                   {
        .                       // If a param env has no global bounds, global obligations do not
        .                       // depend on its particular value in order to work, so we can clear
        .                       // out the param env and get better caching.
        .                       debug!("in global");
    3,964 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
        .                   }
        .           
        .                   let stack = self.push_stack(previous_stack, &obligation);
        .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
   84,458 ( 0.00%)          let mut param_env = obligation.param_env;
        .           
        .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
   42,229 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
  506,748 ( 0.00%)              pred
        .                   });
        .           
        .                   debug!(?fresh_trait_pred);
        .           
   48,942 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
        .                       debug!(?result, "CACHE HIT");
        .                       return Ok(result);
        .                   }
        .           
        .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
        .                       debug!(?result, "PROVISIONAL CACHE HIT");
        .                       stack.update_reached_depth(result.reached_depth);
        .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
        .                   // stack. If so, we don't want to insert the result into the
        .                   // main cache (it is cycle dependent) nor the provisional
        .                   // cache (which is meant for things that have completed but
        .                   // for a "backedge" -- this result *is* the backedge).
        .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
        .                       return Ok(cycle_result);
        .                   }
        .           
  229,959 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
   25,551 ( 0.00%)          let result = result?;
        .           
  127,755 ( 0.00%)          if !result.must_apply_modulo_regions() {
        .                       stack.cache().on_failure(stack.dfn);
        .                   }
        .           
   25,551 ( 0.00%)          let reached_depth = stack.reached_depth.get();
   51,102 ( 0.00%)          if reached_depth >= stack.depth {
        .                       debug!(?result, "CACHE MISS");
  485,469 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
        .           
        .                       stack.cache().on_completion(
   51,102 ( 0.00%)                  stack.dfn,
        .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
        .                               // Create a new `DepNode` that has dependencies on:
        .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
        .                               // entry being crated
        .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
        .                               // provisional caches entries and inserting them into the evaluation cache
        .                               //
        .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 835 ----------------------------------------
        .               /// `self.freshener`, we can be sure that (a) this will not
        .               /// affect the inferencer state and (b) that if we see two
        .               /// fresh regions with the same index, they refer to the same
        .               /// unbound type variable.
        .               fn check_evaluation_cycle(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'_, 'tcx>,
        .               ) -> Option<EvaluationResult> {
      394 ( 0.00%)          if let Some(cycle_depth) = stack
        .                       .iter()
        .                       .skip(1) // Skip top-most frame.
        .                       .find(|prev| {
   21,408 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
        .                       })
        .                       .map(|stack| stack.depth)
        .                   {
        .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
        .           
        .                       // If we have a stack like `A B C D E A`, where the top of
        .                       // the stack is the final `A`, then this will iterate over
        .                       // `A, E, D, C, B` -- i.e., all the participants apart
        .                       // from the cycle head. We mark them as participating in a
        .                       // cycle. This suppresses caching for those nodes. See
        .                       // `in_cycle` field for more details.
      394 ( 0.00%)              stack.update_reached_depth(cycle_depth);
        .           
        .                       // Subtle: when checking for a coinductive cycle, we do
        .                       // not compare using the "freshened trait refs" (which
        .                       // have erased regions) but rather the fully explicit
        .                       // trait refs. This is important because it's only a cycle
        .                       // if the regions match exactly.
      312 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
      197 ( 0.00%)              let tcx = self.tcx();
    1,379 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
    2,167 ( 0.00%)              if self.coinductive_match(cycle) {
        .                           debug!("evaluate_stack --> recursive, coinductive");
        .                           Some(EvaluatedToOk)
        .                       } else {
        .                           debug!("evaluate_stack --> recursive, inductive");
        .                           Some(EvaluatedToRecur)
        .                       }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
  229,959 ( 0.00%)      fn evaluate_stack<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   // In intercrate mode, whenever any of the generics are unbound,
        .                   // there can always be an impl. Even if there are no impls in
        .                   // this crate, perhaps the type would be unified with
        .                   // something from another crate that does provide an impl.
        .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
        .                   // imagine, this is just where we started. To avoid that, we
        .                   // check for unbound variables and return an ambiguous (hence possible)
        .                   // match if we've seen this trait before.
        .                   //
        .                   // This suffices to allow chains like `FnMut` implemented in
        .                   // terms of `Fn` etc, but we could probably make this more
        .                   // precise still.
        .                   let unbound_input_types =
   25,551 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
        .           
   76,653 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
        .                       // This check was an imperfect workaround for a bug in the old
        .                       // intercrate mode; it should be removed when that goes away.
  127,755 ( 0.00%)              if unbound_input_types && self.intercrate {
        .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
        .                           // Heuristics: show the diagnostics when there are no candidates in crate.
    1,023 ( 0.00%)                  if self.intercrate_ambiguity_causes.is_some() {
        .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
        .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
        .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
        .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
        .                                       let self_ty = trait_ref.self_ty();
        .                                       let cause = with_no_trimmed_paths(|| {
        .                                           IntercrateAmbiguityCause::DownstreamCrate {
        .                                               trait_desc: trait_ref.print_only_trait_path().to_string(),
-- line 927 ----------------------------------------
-- line 937 ----------------------------------------
        .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
        .                                   }
        .                               }
        .                           }
        .                           return Ok(EvaluatedToAmbig);
        .                       }
        .                   }
        .           
   49,056 ( 0.00%)          if unbound_input_types
        .                       && stack.iter().skip(1).any(|prev| {
    5,319 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
        .                               && self.match_fresh_trait_refs(
    7,092 ( 0.00%)                          stack.fresh_trait_pred,
    7,092 ( 0.00%)                          prev.fresh_trait_pred,
        .                                   prev.obligation.param_env,
        .                               )
        .                       })
        .                   {
        .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
        .                       return Ok(EvaluatedToUnknown);
        .                   }
        .           
  248,008 ( 0.00%)          match self.candidate_from_obligation(stack) {
   99,258 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
        .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
        .                       Ok(None) => Ok(EvaluatedToAmbig),
        .                       Err(Overflow) => Err(OverflowError::Canonical),
        .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
        .                       Err(..) => Ok(EvaluatedToErr),
        .                   }
  255,510 ( 0.00%)      }
        .           
        .               /// For defaulted traits, we use a co-inductive strategy to solve, so
        .               /// that recursion is ok. This routine returns `true` if the top of the
        .               /// stack (`cycle[0]`):
        .               ///
        .               /// - is a defaulted trait,
        .               /// - it also appears in the backtrace at some position `X`,
        .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
        .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
        .               where
        .                   I: Iterator<Item = ty::Predicate<'tcx>>,
        .               {
        .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
        .               }
        .           
        .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
      394 ( 0.00%)          let result = match predicate.kind().skip_binder() {
    1,773 ( 0.00%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
        .                       _ => false,
        .                   };
        .                   debug!(?predicate, ?result, "coinductive_predicate");
        .                   result
        .               }
        .           
        .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
        .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
        .                   skip(self, stack),
        .                   fields(depth = stack.obligation.recursion_depth)
        .               )]
        .               fn evaluate_candidate<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   candidate: &SelectionCandidate<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
   48,184 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
        .                       let candidate = (*candidate).clone();
  392,773 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
        .                           Ok(selection) => {
        .                               debug!(?selection);
   96,368 ( 0.00%)                      this.evaluate_predicates_recursively(
        .                                   stack.list(),
  313,196 ( 0.00%)                          selection.nested_obligations().into_iter(),
        .                               )
        .                           }
        .                           Err(..) => Ok(EvaluatedToErr),
        .                       }
        .                   })?;
        .           
        .                   // If we erased any lifetimes, then we want to use
        .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<EvaluationResult> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   84,458 ( 0.00%)          if self.intercrate {
        .                       return None;
        .                   }
        .           
        .                   let tcx = self.tcx();
        .                   if self.can_use_global_caches(param_env) {
  272,174 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
        .                           return Some(res);
        .                       }
        .                   }
   97,884 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
        .               }
        .           
  306,612 ( 0.00%)      fn insert_evaluation_cache(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   result: EvaluationResult,
        .               ) {
        .                   // Avoid caching results that depend on more than just the trait-ref
        .                   // - the stack can create recursion.
  102,204 ( 0.00%)          if result.is_stack_dependent() {
        .                       return;
        .                   }
        .           
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
   51,102 ( 0.00%)          if self.intercrate {
        .                       return;
        .                   }
        .           
        .                   if self.can_use_global_caches(param_env) {
        .                       if !trait_pred.needs_infer() {
        .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
        .                           // This may overwrite the cache with the same value
        .                           // FIXME: Due to #50507 this overwrites the different values
        .                           // This should be changed to use HashMapExt::insert_same
        .                           // when that is fixed
   22,234 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
        .                           return;
        .                       }
        .                   }
        .           
        .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
    8,064 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
  204,408 ( 0.00%)      }
        .           
        .               /// For various reasons, it's possible for a subobligation
        .               /// to have a *lower* recursion_depth than the obligation used to create it.
        .               /// Projection sub-obligations may be returned from the projection cache,
        .               /// which results in obligations with an 'old' `recursion_depth`.
        .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
        .               /// subobligations without taking in a 'parent' depth, causing the
        .               /// generated subobligations to have a `recursion_depth` of `0`.
        .               ///
        .               /// To ensure that obligation_depth never decreases, we force all subobligations
        .               /// to have at least the depth of the original obligation.
    2,575 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
        .                   &self,
        .                   it: I,
        .                   min_depth: usize,
        .               ) {
    4,476 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
    5,150 ( 0.00%)      }
        .           
        .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
        .                   &self,
        .                   depth: usize,
        .                   error_obligation: &Obligation<'tcx, T>,
        .               ) -> Result<(), OverflowError> {
1,306,476 ( 0.01%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
        .                       match self.query_mode {
        .                           TraitQueryMode::Standard => {
        .                               if self.infcx.is_tainted_by_errors() {
        .                                   return Err(OverflowError::ErrorReporting);
        .                               }
        .                               self.infcx.report_overflow_error(error_obligation, true);
        .                           }
        .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
        .               ) -> Result<(), OverflowError> {
        .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
        .               }
        .           
        .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
        .               where
        .                   OP: FnOnce(&mut Self) -> R,
        .               {
  794,118 ( 0.01%)          let (result, dep_node) =
  570,924 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
        .                   self.tcx().dep_graph.read_index(dep_node);
  733,032 ( 0.01%)          (result, dep_node)
        .               }
        .           
        .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
        .               /// for a negative goal and a negative impl for a positive goal
        .               #[instrument(level = "debug", skip(self))]
        .               fn filter_impls(
        .                   &mut self,
        .                   candidates: Vec<SelectionCandidate<'tcx>>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Vec<SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   let mut result = Vec::with_capacity(candidates.len());
        .           
  893,367 ( 0.01%)          for candidate in candidates {
        .                       // Respect const trait obligations
  164,871 ( 0.00%)              if obligation.is_const() {
       15 ( 0.00%)                  match candidate {
        .                               // const impl
        .                               ImplCandidate(def_id)
        .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
        .                               // const param
        .                               ParamCandidate(trait_pred)
        .                                   if trait_pred.skip_binder().constness
        .                                       == ty::BoundConstness::ConstIfConst => {}
        .                               // auto trait impl
-- line 1179 ----------------------------------------
-- line 1186 ----------------------------------------
        .                               ConstDropCandidate(_) => {}
        .                               _ => {
        .                                   // reject all other types of candidates
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
  109,904 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
   36,030 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
   17,996 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
        .                               || self.allow_negative_impls
        .                           {
        .                               result.push(candidate);
        .                           }
        .                       } else {
        .                           result.push(candidate);
        .                       }
        .                   }
        .           
  231,072 ( 0.00%)          result
        .               }
        .           
        .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
  825,367 ( 0.01%)      #[instrument(level = "debug", skip(self))]
        .               fn filter_reservation_impls(
        .                   &mut self,
        .                   candidate: SelectionCandidate<'tcx>,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        .                   let tcx = self.tcx();
        .                   // Treat reservation impls as ambiguity.
  121,138 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
   24,036 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
        .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
        .                               let attrs = tcx.get_attrs(def_id);
        .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
        .                               let value = attr.and_then(|a| a.value_str());
        .                               if let Some(value) = value {
        .                                   debug!(
        .                                       "filter_reservation_impls: \
        .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
        .                                           message: value.to_string(),
        .                                       },
        .                                   );
        .                               }
        .                           }
        .                           return Ok(None);
        .                       }
        .                   }
  291,306 ( 0.00%)          Ok(Some(candidate))
        .               }
        .           
        .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
        .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
        .           
  184,794 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
        .                       return None;
        .                   }
        .           
        .                   let obligation = &stack.obligation;
    1,536 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .           
        .                   // Okay to skip binder because of the nature of the
        .                   // trait-ref-is-knowable check, which does not care about
        .                   // bound regions.
        .                   let trait_ref = predicate.skip_binder().trait_ref;
        .           
    1,536 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
        .               }
        .           
        .               /// Returns `true` if the global caches can be used.
        .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
        .                   // If there are any inference variables in the `ParamEnv`, then we
        .                   // always use a cache local to this particular scope. Otherwise, we
        .                   // switch to a global cache.
        .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
  559,552 ( 0.00%)          if self.intercrate {
      512 ( 0.00%)              return None;
        .                   }
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
  558,528 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
  279,264 ( 0.00%)          if self.can_use_global_caches(param_env) {
2,740,770 ( 0.02%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
2,838,004 ( 0.02%)                  return Some(res);
        .                       }
        .                   }
  665,329 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
        .               }
        .           
        .               /// Determines whether can we safely cache the result
        .               /// of selecting an obligation. This is almost always `true`,
        .               /// except when dealing with certain `ParamCandidate`s.
        .               ///
        .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
        .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
        .               fn can_cache_candidate(
        .                   &self,
        .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) -> bool {
        .                   // Neither the global nor local cache is aware of intercrate
        .                   // mode, so don't do any caching. In particular, we might
        .                   // re-use the same `InferCtxt` with both an intercrate
        .                   // and non-intercrate `SelectionContext`
  122,172 ( 0.00%)          if self.intercrate {
        .                       return false;
        .                   }
  181,722 ( 0.00%)          match result {
        .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn insert_candidate_cache(
        .                   &mut self,
        .                   mut param_env: ty::ParamEnv<'tcx>,
        .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .                   dep_node: DepNodeIndex,
        .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
        .               ) {
        .                   let tcx = self.tcx();
        .                   let mut pred = cache_fresh_trait_pred.skip_binder();
        .           
  122,172 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
        .           
        .                   if !self.can_cache_candidate(&candidate) {
        .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
        .                       return;
        .                   }
        .           
   60,488 ( 0.00%)          if self.can_use_global_caches(param_env) {
  128,506 ( 0.00%)              if let Err(Overflow) = candidate {
        .                           // Don't cache overflow globally; we only produce this in certain modes.
        .                       } else if !pred.needs_infer() {
  223,076 ( 0.00%)                  if !candidate.needs_infer() {
        .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
        .                               // This may overwrite the cache with the same value.
1,505,763 ( 0.01%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
  108,537 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
        .               }
        .           
        .               /// Matches a predicate against the bounds of its self type.
        .               ///
        .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
        .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
        .               /// `Baz` bound. We return indexes into the list returned by
        .               /// `tcx.item_bounds` for any applicable bounds.
   21,123 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> smallvec::SmallVec<[usize; 2]> {
   30,511 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
        .                   let placeholder_trait_predicate =
   39,899 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
        .                   debug!(
        .                       ?placeholder_trait_predicate,
        .                       "match_projection_obligation_against_definition_bounds"
        .                   );
        .           
    2,347 ( 0.00%)          let tcx = self.infcx.tcx;
   14,488 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
    6,432 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
    1,015 ( 0.00%)              ty::Opaque(def_id, substs) => (def_id, substs),
        .                       _ => {
        .                           span_bug!(
        .                               obligation.cause.span,
        .                               "match_projection_obligation_against_definition_bounds() called \
        .                                but self-ty is not a projection: {:?}",
        .                               placeholder_trait_predicate.trait_ref.self_ty()
        .                           );
        .                       }
-- line 1405 ----------------------------------------
-- line 1411 ----------------------------------------
        .                   // unnecessary ambiguity.
        .                   let mut distinct_normalized_bounds = FxHashSet::default();
        .           
        .                   let matching_bounds = bounds
        .                       .iter()
        .                       .enumerate()
        .                       .filter_map(|(idx, bound)| {
        .                           let bound_predicate = bound.kind();
  160,966 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
        .                               let bound = bound_predicate.rebind(pred.trait_ref);
  641,406 ( 0.00%)                      if self.infcx.probe(|_| {
  256,620 ( 0.00%)                          match self.match_normalize_trait_ref(
        .                                       obligation,
  171,080 ( 0.00%)                              bound,
  171,080 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
        .                                   ) {
        .                                       Ok(None) => true,
        .                                       Ok(Some(normalized_trait))
        .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
        .                                       {
        .                                           true
        .                                       }
        .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
        .                               }
        .                           }
        .                           None
        .                       })
        .                       .collect();
        .           
        .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
        .                   matching_bounds
   21,123 ( 0.00%)      }
        .           
        .               /// Equates the trait in `obligation` with trait bound. If the two traits
        .               /// can be equated and the normalized trait bound doesn't contain inference
        .               /// variables or placeholders, the normalized bound is returned.
  556,114 ( 0.00%)      fn match_normalize_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   trait_bound: ty::PolyTraitRef<'tcx>,
        .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
        .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
        .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
  134,548 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
        .                       // Avoid unnecessary normalization
   79,342 ( 0.00%)              return Err(());
        .                   }
        .           
   37,284 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
        .                       project::normalize_with_depth(
        .                           self,
    3,107 ( 0.00%)                  obligation.param_env,
        .                           obligation.cause.clone(),
    9,321 ( 0.00%)                  obligation.recursion_depth + 1,
   12,428 ( 0.00%)                  trait_bound,
        .                       )
        .                   });
    9,321 ( 0.00%)          self.infcx
    6,214 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
        .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
        .                       .map(|InferOk { obligations: _, value: () }| {
        .                           // This method is called within a probe, so we can't have
        .                           // inference variables and placeholders escape.
        .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
    8,665 ( 0.00%)                      Some(trait_bound)
        .                           } else {
        .                               None
        .                           }
        .                       })
        .                       .map_err(|_| ())
  385,002 ( 0.00%)      }
        .           
        .               fn evaluate_where_clause<'o>(
        .                   &mut self,
        .                   stack: &TraitObligationStack<'o, 'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<EvaluationResult, OverflowError> {
        .                   self.evaluation_probe(|this| {
1,429,813 ( 0.01%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
  196,496 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
        .                           Err(()) => Ok(EvaluatedToErr),
        .                       }
        .                   })
        .               }
        .           
1,344,384 ( 0.01%)      pub(super) fn match_projection_projections(
        .                   &mut self,
        .                   obligation: &ProjectionTyObligation<'tcx>,
        .                   env_predicate: PolyProjectionPredicate<'tcx>,
        .                   potentially_unnormalized_candidates: bool,
        .               ) -> bool {
        .                   let mut nested_obligations = Vec::new();
  746,880 ( 0.01%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
  448,128 ( 0.00%)              obligation.cause.span,
        .                       LateBoundRegionConversionTime::HigherRankedType,
        .                       env_predicate,
        .                   );
  298,752 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
    9,424 ( 0.00%)              ensure_sufficient_stack(|| {
    4,712 ( 0.00%)                  project::normalize_with_depth_to(
        .                               self,
    1,178 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
    3,534 ( 0.00%)                      obligation.recursion_depth + 1,
    2,356 ( 0.00%)                      infer_predicate.projection_ty,
        .                               &mut nested_obligations,
        .                           )
        .                       })
        .                   } else {
  296,396 ( 0.00%)              infer_predicate.projection_ty
        .                   };
        .           
  149,376 ( 0.00%)          self.infcx
  298,752 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
  298,752 ( 0.00%)              .sup(obligation.predicate, infer_projection)
  866,616 ( 0.01%)              .map_or(false, |InferOk { obligations, value: () }| {
        .                           self.evaluate_predicates_recursively(
        .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
        .                               nested_obligations.into_iter().chain(obligations),
        .                           )
   79,824 ( 0.00%)                  .map_or(false, |res| res.may_apply())
        .                       })
1,344,384 ( 0.01%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // WINNOW
        .               //
        .               // Winnowing is the process of attempting to resolve ambiguity by
        .               // probing further. During the winnowing process, we unify all
        .               // type variables and then we also attempt to evaluate recursive
        .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
        .               /// See the comment for "SelectionCandidate" for more details.
        .               fn candidate_should_be_dropped_in_favor_of(
        .                   &mut self,
        .                   sized_predicate: bool,
        .                   victim: &EvaluatedCandidate<'tcx>,
        .                   other: &EvaluatedCandidate<'tcx>,
        .                   needs_infer: bool,
        .               ) -> bool {
    8,105 ( 0.00%)          if victim.candidate == other.candidate {
        .                       return true;
        .                   }
        .           
        .                   // Check if a bound would previously have been removed when normalizing
        .                   // the param_env so that it can be given the lowest priority. See
        .                   // #50825 for the motivation for this.
        .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
       10 ( 0.00%)              cand.is_global() && !cand.has_late_bound_regions()
        .                   };
        .           
        .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
        .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
        .                   //
        .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
        .                   // lifetime of a variable.
  158,520 ( 0.00%)          match (&other.candidate, &victim.candidate) {
        .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
        .                           bug!(
        .                               "default implementations shouldn't be recorded \
        .                               when there are other valid candidates"
        .                           );
        .                       }
        .           
        .                       // (*)
-- line 1582 ----------------------------------------
-- line 1591 ----------------------------------------
        .                           _,
        .                           BuiltinCandidate { has_nested: false }
        .                           | DiscriminantKindCandidate
        .                           | PointeeCandidate
        .                           | ConstDropCandidate(_),
        .                       ) => false,
        .           
        .                       (ParamCandidate(other), ParamCandidate(victim)) => {
    2,616 ( 0.00%)                  let same_except_bound_vars = other.skip_binder().trait_ref
    3,270 ( 0.00%)                      == victim.skip_binder().trait_ref
        .                               && other.skip_binder().constness == victim.skip_binder().constness
        .                               && other.skip_binder().polarity == victim.skip_binder().polarity
        .                               && !other.skip_binder().trait_ref.has_escaping_bound_vars();
        .                           if same_except_bound_vars {
        .                               // See issue #84398. In short, we can generate multiple ParamCandidates which are
        .                               // the same except for unused bound vars. Just pick the one with the fewest bound vars
        .                               // or the current one if tied (they should both evaluate to the same answer). This is
        .                               // probably best characterized as a "hack", since we might prefer to just do our
-- line 1608 ----------------------------------------
-- line 1621 ----------------------------------------
        .           
        .                       // Drop otherwise equivalent non-const fn pointer candidates
        .                       (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,
        .           
        .                       // If obligation is a sized predicate or the where-clause bound is
        .                       // global, prefer the projection or object candidate. See issue
        .                       // #50825 and #89352.
        .                       (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {
        4 ( 0.00%)                  sized_predicate || is_global(cand)
        .                       }
        4 ( 0.00%)              (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {
        8 ( 0.00%)                  !(sized_predicate || is_global(cand))
        .                       }
        .           
        .                       // Global bounds from the where clause should be ignored
        .                       // here (see issue #50825). Otherwise, we have a where
        .                       // clause so don't go around looking for impls.
        .                       // Arbitrarily give param candidates priority
        .                       // over projection and object candidates.
        .                       (
    1,863 ( 0.00%)                  ParamCandidate(ref cand),
        .                           ImplCandidate(..)
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
-- line 1649 ----------------------------------------
-- line 1654 ----------------------------------------
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { has_nested: true }
        .                           | TraitAliasCandidate(..),
       15 ( 0.00%)                  ParamCandidate(ref cand),
        .                       ) => {
        .                           // Prefer these to a global where-clause bound
        .                           // (see issue #50825).
        .                           is_global(cand) && other.evaluation.must_apply_modulo_regions()
        .                       }
        .           
        .                       (ProjectionCandidate(i), ProjectionCandidate(j))
        .                       | (ObjectCandidate(i), ObjectCandidate(j)) => {
        .                           // Arbitrarily pick the lower numbered candidate for backwards
        .                           // compatibility reasons. Don't let this affect inference.
       32 ( 0.00%)                  i < j && !needs_infer
        .                       }
        .                       (ObjectCandidate(_), ProjectionCandidate(_))
        .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
        .                           bug!("Have both object and projection candidate")
        .                       }
        .           
        .                       // Arbitrarily give projection and object candidates priority.
        .                       (
   16,260 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
       50 ( 0.00%)                  ImplCandidate(..)
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
        .                           | TraitAliasCandidate(..),
-- line 1691 ----------------------------------------
-- line 1696 ----------------------------------------
        .                           | ClosureCandidate
        .                           | GeneratorCandidate
        .                           | FnPointerCandidate { .. }
        .                           | BuiltinObjectCandidate
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { .. }
        .                           | TraitAliasCandidate(..),
   32,420 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
        .                       ) => false,
        .           
   81,050 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
        .                           // See if we can toss out `victim` based on specialization.
        .                           // This requires us to know *for sure* that the `other` impl applies
        .                           // i.e., `EvaluatedToOk`.
        .                           //
        .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
        .                           // to me but is required for `std` to compile, so I didn't change it
        .                           // for now.
        .                           let tcx = self.tcx();
   32,420 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
   46,064 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
        .                                   return true;
        .                               }
        .                           }
        .           
   40,525 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
   22,948 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
        .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
        .                                       // Subtle: If the predicate we are evaluating has inference
        .                                       // variables, do *not* allow discarding candidates due to
        .                                       // marker trait impls.
        .                                       //
        .                                       // Without this restriction, we could end up accidentally
        .                                       // constrainting inference variables based on an arbitrarily
        .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
        .                           | BuiltinUnsizeCandidate
        .                           | TraitUpcastingUnsizeCandidate(_)
        .                           | BuiltinCandidate { has_nested: true }
        .                           | TraitAliasCandidate(..),
        .                       ) => false,
        .                   }
        .               }
        .           
  143,600 ( 0.00%)      fn sized_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
        .                   // NOTE: binder moved to (*)
   43,080 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
   71,964 ( 0.00%)          match self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
        .                       | ty::Ref(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => {
        .                           // safe for everything
    3,460 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
        .                       }
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
        .           
        .                       ty::Tuple(tys) => Where(
        .                           obligation
        .                               .predicate
    5,585 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
        .                       ),
        .           
        .                       ty::Adt(def, substs) => {
    7,024 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
        .                           // (*) binder moved here
   17,560 ( 0.00%)                  Where(
        .                               obligation.predicate.rebind({
    3,512 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
        .                               }),
        .                           )
        .                       }
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
        .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
  114,880 ( 0.00%)      }
        .           
   54,104 ( 0.00%)      fn copy_clone_conditions(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> BuiltinImplConditions<'tcx> {
        .                   // NOTE: binder moved to (*)
   13,526 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
        .           
        .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
        .           
   35,019 ( 0.00%)          match *self_ty.kind() {
        .                       ty::Infer(ty::IntVar(_))
        .                       | ty::Infer(ty::FloatVar(_))
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
      160 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
        .           
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::Char
        .                       | ty::RawPtr(..)
        .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
        .                       ty::Dynamic(..)
        .                       | ty::Str
        .                       | ty::Slice(..)
        .                       | ty::Generator(..)
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Foreign(..)
        .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
        .           
      572 ( 0.00%)              ty::Tuple(tys) => {
        .                           // (*) binder moved here
    3,040 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
        .                       }
        .           
      586 ( 0.00%)              ty::Closure(_, substs) => {
        .                           // (*) binder moved here
    1,758 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
    1,172 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
        .                               // Not yet resolved.
        .                               Ambiguous
        .                           } else {
    4,102 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
        .                           }
        .                       }
        .           
        .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
        .                           // Fallback to whatever user-defined impls exist in this case.
        .                           None
        .                       }
        .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
        .                       }
        .           
        .                       ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
        .                       }
        .                   }
   40,578 ( 0.00%)      }
        .           
        .               /// For default impls, we need to break apart a type into its
        .               /// "constituent types" -- meaning, the types that it contains.
        .               ///
        .               /// Here are some (simple) examples:
        .               ///
        .               /// ```
        .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
        .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
        .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
        .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
        .               /// ```
        .               fn constituent_types_for_ty(
        .                   &self,
        .                   t: ty::Binder<'tcx, Ty<'tcx>>,
        .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
      995 ( 0.00%)          match *t.skip_binder().kind() {
        .                       ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::Str
        .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1968 ----------------------------------------
        .                       ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
        .                           t.rebind(vec![element_ty])
        .                       }
        .           
        .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
        .           
        .                       ty::Tuple(ref tys) => {
        .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
       15 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
        .                       }
        .           
        .                       ty::Closure(_, ref substs) => {
        .                           let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
        .                           t.rebind(vec![ty])
        .                       }
        .           
        .                       ty::Generator(_, ref substs, _) => {
-- line 1984 ----------------------------------------
-- line 1988 ----------------------------------------
        .                       }
        .           
        .                       ty::GeneratorWitness(types) => {
        .                           debug_assert!(!types.has_escaping_bound_vars());
        .                           types.map_bound(|types| types.to_vec())
        .                       }
        .           
        .                       // For `PhantomData<T>`, we pass `T`.
      168 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
        .           
       84 ( 0.00%)              ty::Adt(def, substs) => {
      249 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
        .                       }
        .           
        .                       ty::Opaque(def_id, substs) => {
        .                           // We can resolve the `impl Trait` to its concrete type,
        .                           // which enforces a DAG between the functions requiring
        .                           // the auto trait bounds in question.
        .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
        .                       }
        .                   }
        .               }
        .           
   32,616 ( 0.00%)      fn collect_predicates_for_types(
        .                   &mut self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   trait_def_id: DefId,
        .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
        .               ) -> Vec<PredicateObligation<'tcx>> {
        .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
        .                   // 2. Produce something like `&'0 i32 : Copy`
        .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
        .           
        .                   types
        .                       .as_ref()
        .                       .skip_binder() // binder moved -\
        .                       .iter()
        .                       .flat_map(|ty| {
    8,838 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
        .           
   35,352 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
    8,838 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
   14,730 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
   29,460 ( 0.00%)                          ensure_sufficient_stack(|| {
        .                                       project::normalize_with_depth(
        .                                           self,
    2,946 ( 0.00%)                                  param_env,
        .                                           cause.clone(),
    2,946 ( 0.00%)                                  recursion_depth,
    2,946 ( 0.00%)                                  placeholder_ty,
        .                                       )
        .                                   });
   32,406 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
        .                                   self.tcx(),
    2,946 ( 0.00%)                          param_env,
        .                                   cause.clone(),
    5,892 ( 0.00%)                          trait_def_id,
        .                                   recursion_depth,
        .                                   normalized_ty,
        .                                   &[],
        .                               );
   17,676 ( 0.00%)                      obligations.push(placeholder_obligation);
        .                               obligations
        .                           })
        .                       })
        .                       .collect()
   16,308 ( 0.00%)      }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Matching
        .               //
        .               // Matching is a common path used for both evaluation and
        .               // confirmation.  It basically unifies types that appear in impls
        .               // and traits. This does affect the surrounding environment;
        .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
        .               // run inside of a `probe()` so that their side-effects are
        .               // contained.
        .           
        .               fn rematch_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
  186,050 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
  148,840 ( 0.00%)              Ok(substs) => substs,
        .                       Err(()) => {
        .                           bug!(
        .                               "Impl {:?} was matchable against {:?} but now is not",
        .                               impl_def_id,
        .                               obligation
        .                           );
        .                       }
        .                   }
        .               }
        .           
2,667,904 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn match_impl(
        .                   &mut self,
        .                   impl_def_id: DefId,
        .                   obligation: &TraitObligation<'tcx>,
        .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
        .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
        .           
        .                   // Before we create the substitutions and everything, first
        .                   // consider a "quick reject". This avoids creating more types
        .                   // and so forth that we need to.
        .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
   69,910 ( 0.00%)              return Err(());
        .                   }
        .           
        .                   let placeholder_obligation =
  738,227 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
  316,383 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
        .           
  527,305 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
        .           
  210,922 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
        .           
        .                   debug!(?impl_trait_ref);
        .           
  632,766 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
  738,227 ( 0.01%)              ensure_sufficient_stack(|| {
        .                           project::normalize_with_depth(
        .                               self,
  105,461 ( 0.00%)                      obligation.param_env,
        .                               obligation.cause.clone(),
  316,383 ( 0.00%)                      obligation.recursion_depth + 1,
  210,922 ( 0.00%)                      impl_trait_ref,
        .                           )
        .                       });
        .           
        .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
        .           
        .                   let cause = ObligationCause::new(
  105,461 ( 0.00%)              obligation.cause.span,
  210,922 ( 0.00%)              obligation.cause.body_id,
  949,149 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
        .                   );
        .           
  210,922 ( 0.00%)          let InferOk { obligations, .. } = self
        .                       .infcx
  105,461 ( 0.00%)              .at(&cause, obligation.param_env)
        .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
        .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
        .                   nested_obligations.extend(obligations);
        .           
  165,640 ( 0.00%)          if !self.intercrate
        .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
        .                   {
        .                       debug!("match_impl: reservation impls only apply in intercrate mode");
        .                       return Err(());
        .                   }
        .           
        .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
  331,236 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
        .               }
        .           
        .               fn fast_reject_trait_refs(
        .                   &mut self,
        .                   obligation: &TraitObligation<'_>,
        .                   impl_trait_ref: &ty::TraitRef<'_>,
        .               ) -> bool {
        .                   // We can avoid creating type variables and doing the full
        .                   // substitution if we find that any of the input types, when
        .                   // simplified, do not match.
        .           
  421,248 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
        .                       |(obligation_arg, impl_arg)| {
1,475,554 ( 0.01%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
        .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
        .                                   // Note, we simplify parameters for the obligation but not the
        .                                   // impl so that we do not reject a blanket impl but do reject
        .                                   // more concrete impls if we're searching for `T: Trait`.
1,967,000 ( 0.01%)                          let simplified_obligation_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       obligation_ty,
        .                                       SimplifyParams::Yes,
        .                                       StripReferences::No,
        .                                   );
1,475,250 ( 0.01%)                          let simplified_impl_ty = fast_reject::simplify_type(
        .                                       self.tcx(),
        .                                       impl_ty,
        .                                       SimplifyParams::No,
        .                                       StripReferences::No,
        .                                   );
        .           
  737,625 ( 0.01%)                          simplified_obligation_ty.is_some()
        .                                       && simplified_impl_ty.is_some()
        .                                       && simplified_obligation_ty != simplified_impl_ty
        .                               }
        .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
        .                                   // Lifetimes can never cause a rejection.
        .                                   false
        .                               }
        .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
        .                           }
        .                       },
        .                   )
        .               }
        .           
        .               /// Normalize `where_clause_trait_ref` and try to match it against
        .               /// `obligation`. If successful, return any predicates that
        .               /// result from the normalization.
1,169,847 ( 0.01%)      fn match_where_clause_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
        .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
1,039,864 ( 0.01%)      }
        .           
        .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
        .               /// obligation is satisfied.
        .               #[instrument(skip(self), level = "debug")]
        .               fn match_poly_trait_ref(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
        .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
  307,312 ( 0.00%)          self.infcx
  129,983 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
  921,936 ( 0.01%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
        .                       .map(|InferOk { obligations, .. }| obligations)
        .                       .map_err(|_| ())
        .               }
        .           
        .               ///////////////////////////////////////////////////////////////////////////
        .               // Miscellany
        .           
        .               fn match_fresh_trait_refs(
        .                   &self,
        .                   previous: ty::PolyTraitPredicate<'tcx>,
        .                   current: ty::PolyTraitPredicate<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> bool {
    5,319 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
        .                   matcher.relate(previous, current).is_ok()
        .               }
        .           
        .               fn push_stack<'o>(
        .                   &mut self,
        .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
        .                   obligation: &'o TraitObligation<'tcx>,
        .               ) -> TraitObligationStack<'o, 'tcx> {
1,869,320 ( 0.01%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
        .           
        .                   let dfn = previous_stack.cache.next_dfn();
   84,458 ( 0.00%)          let depth = previous_stack.depth() + 1;
2,550,606 ( 0.02%)          TraitObligationStack {
        .                       obligation,
1,529,614 ( 0.01%)              fresh_trait_pred,
        .                       reached_depth: Cell::new(depth),
        .                       previous: previous_stack,
        .                       dfn,
        .                       depth,
        .                   }
        .               }
        .           
        .               #[instrument(skip(self), level = "debug")]
        .               fn closure_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::PolyTraitRef<'tcx> {
    4,602 ( 0.00%)          let closure_sig = substs.as_closure().sig();
        .           
        .                   debug!(?closure_sig);
        .           
        .                   // (1) Feels icky to skip the binder here, but OTOH we know
        .                   // that the self-type is an unboxed closure type and hence is
        .                   // in fact unparameterized (or at least does not reference any
        .                   // regions bound in the obligation). Still probably some
        .                   // refactoring could make this nicer.
   15,340 ( 0.00%)          closure_trait_ref_and_return_type(
        .                       self.tcx(),
    9,204 ( 0.00%)              obligation.predicate.def_id(),
    1,534 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
    6,136 ( 0.00%)              closure_sig,
        .                       util::TupleArgumentsFlag::No,
        .                   )
        .                   .map_bound(|(trait_ref, _)| trait_ref)
        .               }
        .           
        .               fn generator_trait_ref_unnormalized(
        .                   &mut self,
        .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
        .                   )
        .                   .map_bound(|(trait_ref, ..)| trait_ref)
        .               }
        .           
        .               /// Returns the obligations that are implied by instantiating an
        .               /// impl or trait. The obligations are substituted and fully
        .               /// normalized. This is used when confirming an impl or default
        .               /// impl.
  860,407 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
        .               fn impl_or_trait_obligations(
        .                   &mut self,
        .                   cause: ObligationCause<'tcx>,
        .                   recursion_depth: usize,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   def_id: DefId,           // of impl or trait
        .                   substs: SubstsRef<'tcx>, // for impl or trait
        .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
        .                   //    V: Iterator, V: Sized,
        .                   //    <U as Iterator>::Item: Copy
        .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
        .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
        .                   // `$1: Copy`, so we must ensure the obligations are emitted in
        .                   // that order.
        .                   let predicates = tcx.predicates_of(def_id);
        .                   debug!(?predicates);
   37,409 ( 0.00%)          assert_eq!(predicates.parent, None);
  112,227 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
        .                   for (predicate, _) in predicates.predicates {
        .                       debug!(?predicate);
  445,205 ( 0.00%)              let predicate = normalize_with_depth_to(
        .                           self,
        .                           param_env,
        .                           cause.clone(),
        .                           recursion_depth,
   89,041 ( 0.00%)                  predicate.subst(tcx, substs),
        .                           &mut obligations,
        .                       );
  890,410 ( 0.01%)              obligations.push(Obligation {
        .                           cause: cause.clone(),
        .                           recursion_depth,
        .                           param_env,
        .                           predicate,
        .                       });
        .                   }
        .           
        .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
        .                   // (#38528) from happening, but the real cause of the duplication is
        .                   // unknown. What we know is that the deduplication avoids exponential
        .                   // amount of predicates being propagated when processing deeply nested
        .                   // types.
        .                   //
        .                   // This code is hot enough that it's worth avoiding the allocation
        .                   // required for the FxHashSet when possible. Special-casing lengths 0,
        .                   // 1 and 2 covers roughly 75-80% of the cases.
   81,648 ( 0.00%)          if obligations.len() <= 1 {
        .                       // No possibility of duplicates.
   18,794 ( 0.00%)          } else if obligations.len() == 2 {
        .                       // Only two elements. Drop the second if they are equal.
        .                       if obligations[0] == obligations[1] {
        .                           obligations.truncate(1);
        .                       }
        .                   } else {
        .                       // Three or more elements. Use a general deduplication process.
        .                       let mut seen = FxHashSet::default();
   11,137 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
        .                   }
        .           
  149,636 ( 0.00%)          obligations
        .               }
        .           }
        .           
        .           trait TraitObligationExt<'tcx> {
        .               fn derived_cause(
        .                   &self,
        .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
        .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
        .                    */
        .           
        .                   let obligation = self;
        .           
        .                   // NOTE(flaper87): As of now, it keeps track of the whole error
        .                   // chain. Ideally, we should have a way to configure this either
        .                   // by using -Z verbose or just a CLI argument.
        .                   let derived_cause = DerivedObligationCause {
  160,584 ( 0.00%)              parent_trait_pred: obligation.predicate,
   77,754 ( 0.00%)              parent_code: obligation.cause.clone_code(),
        .                   };
        .                   let derived_code = variant(derived_cause);
  478,816 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
        .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   TraitObligationStackList::with(self)
        .               }
        .           
        .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
  110,594 ( 0.00%)          self.previous.cache
        .               }
        .           
        .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
        .                   self.list()
        .               }
        .           
        .               /// Indicates that attempting to evaluate this stack entry
        .               /// required accessing something from the stack at depth `reached_depth`.
      394 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
      197 ( 0.00%)          assert!(
      197 ( 0.00%)              self.depth >= reached_depth,
        .                       "invoked `update_reached_depth` with something under this stack: \
        .                        self.depth={} reached_depth={}",
        .                       self.depth,
        .                       reached_depth,
        .                   );
        .                   debug!(reached_depth, "update_reached_depth");
        .                   let mut p = self;
      591 ( 0.00%)          while reached_depth < p.depth {
        .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
      197 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
      197 ( 0.00%)              p = p.previous.head.unwrap();
        .                   }
      394 ( 0.00%)      }
        .           }
        .           
        .           /// The "provisional evaluation cache" is used to store intermediate cache results
        .           /// when solving auto traits. Auto traits are unusual in that they can support
        .           /// cycles. So, for example, a "proof tree" like this would be ok:
        .           ///
        .           /// - `Foo<T>: Send` :-
        .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
        .               /// evaluation. When we create an entry in the evaluation cache using this provisional
        .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
        .               /// the cache will have all of the necessary incr comp dependencies tracked.
        .               dep_node: DepNodeIndex,
        .           }
        .           
        .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
        .               fn default() -> Self {
  495,064 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
        .               }
        .           }
        .           
        .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
        .               /// Get the next DFN in sequence (basically a counter).
        .               fn next_dfn(&self) -> usize {
   42,229 ( 0.00%)          let result = self.dfn.get();
  168,916 ( 0.00%)          self.dfn.set(result + 1);
        .                   result
        .               }
        .           
        .               /// Check the provisional cache for any result for
        .               /// `fresh_trait_ref`. If there is a hit, then you must consider
        .               /// it an access to the stack slots at depth
        .               /// `reached_depth` (from the returned value).
        .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
        .               fn on_completion(
        .                   &self,
        .                   dfn: usize,
        .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
        .               ) {
        .                   debug!(?dfn, "on_completion");
        .           
        .                   for (fresh_trait_pred, eval) in
  178,857 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
        .                   {
        .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
        .           
        .                       op(fresh_trait_pred, eval.result, eval.dep_node);
        .                   }
        .               }
        .           }
        .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
        .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
        .               }
        .           
        .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
        .                   self.head
        .               }
        .           
        .               fn depth(&self) -> usize {
  107,688 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
        .               type Item = &'o TraitObligationStack<'o, 'tcx>;
        .           
        .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
  109,588 ( 0.00%)          let o = self.head?;
   17,650 ( 0.00%)          *self = o.previous;
        .                   Some(o)
        .               }
        .           }
        .           
        .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "TraitObligationStack({:?})", self.obligation)
        .               }
-- line 2717 ----------------------------------------

3,832,736 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 42 ----------------------------------------
        .           /// `stack_size` bytes.
        .           ///
        .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
        .           /// run on the current stack if there's space available.
        .           #[inline(always)]
        .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
        .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
        .               // the stack and then cache the new stack size (which we do know now because we allocated it.
2,900,346 ( 0.02%)      let enough_space = match remaining_stack() {
        .                   Some(remaining) => remaining >= red_zone,
        .                   None => false,
        .               };
4,162,266 ( 0.03%)      if enough_space {
  233,024 ( 0.00%)          callback()
        .               } else {
        .                   grow(stack_size, callback)
        .               }
        .           }
        .           
        .           /// Always creates a new stack for the passed closure to run on.
        .           /// The closure will still be on the same thread as the caller of `grow`.
        .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
        .               _grow(stack_size, dyn_callback);
        .               ret.unwrap()
        .           }
        .           
        .           /// Queries the amount of remaining stack as interpreted by this library.
        .           ///
        .           /// This function will return the amount of stack space left which will be used
        .           /// to determine whether a stack switch should be made or not.
2,774,844 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
        .               let current_ptr = current_stack_ptr();
2,774,844 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
5,549,688 ( 0.04%)  }
        .           
        .           psm_stack_information! (
        .               yes {
        .                   fn current_stack_ptr() -> usize {
2,774,844 ( 0.02%)              psm::stack_pointer() as usize
        .                   }
        .               }
        .               no {
        .                   #[inline(always)]
        .                   fn current_stack_ptr() -> usize {
        .                       unsafe {
        .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
        .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
        .                           x.as_ptr() as usize
        .                       }
        .                   }
        .               }
        .           );
        .           
        .           thread_local! {
        .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
        1 ( 0.00%)          guess_os_stack_limit()
        .               })
        .           }
        .           
        .           #[inline(always)]
        .           fn get_stack_limit() -> Option<usize> {
        .               STACK_LIMIT.with(|s| s.get())
        .           }
        .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
        .                       VirtualQuery(
        .                           psm::stack_pointer() as *const _,
        .                           mi.as_mut_ptr(),
        .                           std::mem::size_of::<QueryT>() as SIZE_T,
        .                       );
        .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
        .                   }
        .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
        2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
        .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
        7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
        .                                                           attr.as_mut_ptr()), 0);
        1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
        4 ( 0.00%)              let mut stacksize = 0;
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
        .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
        .                       ), 0);
        4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
        1 ( 0.00%)              Some(stackaddr as usize)
        3 ( 0.00%)          }
        .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
        .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
        .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
        .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
        .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
        .                       let mut stackaddr = std::ptr::null_mut();
        .                       let mut stacksize = 0;
        .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

1,987,679 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    285,666 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  2,219,616 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
         30 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    387,206 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  3,006,319 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    237,788 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
402,812,416 ( 2.91%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
         13 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  7,809,632 ( 0.06%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    121,420 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     18,626 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     13,666 ( 0.00%)                  while let Some(x) = self.next() {
     40,824 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
         80 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  1,685,949 ( 0.01%)                  while let Some(x) = self.next() {
  1,818,917 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
         80 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     69,025 ( 0.00%)                  while let Some(x) = self.next() {
    224,260 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
      1,203 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    923,098 ( 0.01%)                  while let Some(x) = self.next() {
  1,017,267 ( 0.01%)                      if let Some(y) = f(x) {
    160,910 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     27,572 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
    720,982 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
     49,598 ( 0.00%)                  while let Some(x) = self.next_back() {
    585,299 ( 0.00%)                      i -= 1;
    479,262 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
  2,127,132 ( 0.02%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
          7 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
         32 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  3,357,875 ( 0.02%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 51,115,015 ( 0.37%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .               const_freshen_count: u32,
        .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
        .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
        .               keep_static: bool,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
        .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
4,215,180 ( 0.03%)          TypeFreshener {
        .                       infcx,
        .                       ty_freshen_count: 0,
        .                       const_freshen_count: 0,
        .                       ty_freshen_map: Default::default(),
        .                       const_freshen_map: Default::default(),
        .                       keep_static,
        .                   }
        .               }
        .           
  824,080 ( 0.01%)      fn freshen_ty<F>(
        .                   &mut self,
        .                   opt_ty: Option<Ty<'tcx>>,
        .                   key: ty::InferTy,
        .                   freshener: F,
        .               ) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferTy,
        .               {
  206,020 ( 0.00%)          if let Some(ty) = opt_ty {
        .                       return ty.fold_with(self);
        .                   }
        .           
  148,662 ( 0.00%)          match self.ty_freshen_map.entry(key) {
   18,430 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
   55,901 ( 0.00%)                  let index = self.ty_freshen_count;
  223,604 ( 0.00%)                  self.ty_freshen_count += 1;
  111,802 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
        .                           entry.insert(t);
        .                           t
        .                       }
        .                   }
  668,979 ( 0.00%)      }
        .           
        .               fn freshen_const<F>(
        .                   &mut self,
        .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
        .                   key: ty::InferConst<'tcx>,
        .                   freshener: F,
        .                   ty: Ty<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferConst<'tcx>,
        .               {
       20 ( 0.00%)          if let Some(ct) = opt_ct {
        .                       return ct.fold_with(self);
        .                   }
        .           
       20 ( 0.00%)          match self.const_freshen_map.entry(key) {
        .                       Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
       10 ( 0.00%)                  let index = self.const_freshen_count;
       40 ( 0.00%)                  self.const_freshen_count += 1;
       20 ( 0.00%)                  let ct = self.infcx.tcx.mk_const_infer(freshener(index), ty);
        .                           entry.insert(ct);
        .                           ct
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  786,270 ( 0.01%)          self.infcx.tcx
  147,512 ( 0.00%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  382,656 ( 0.00%)          match *r {
        .                       ty::ReLateBound(..) => {
        .                           // leave bound regions alone
        .                           r
        .                       }
        .           
        .                       ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReVar(_)
        .                       | ty::RePlaceholder(..)
        .                       | ty::ReEmpty(_)
        .                       | ty::ReErased => {
        .                           // replace all free regions with 'erased
        .                           self.tcx().lifetimes.re_erased
        .                       }
        .                       ty::ReStatic => {
    2,070 ( 0.00%)                  if self.keep_static {
        .                               r
        .                           } else {
        .                               self.tcx().lifetimes.re_erased
        .                           }
        .                       }
        .                   }
      192 ( 0.00%)      }
        .           
6,427,962 ( 0.05%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
3,213,981 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
        .                       return t;
        .                   }
        .           
        .                   let tcx = self.infcx.tcx;
        .           
1,515,596 ( 0.01%)          match *t.kind() {
   98,657 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
  789,256 ( 0.01%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
  887,913 ( 0.01%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
        .                       }
        .           
   17,412 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
   34,824 ( 0.00%)                  self.infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .probe_value(v)
        .                               .map(|v| v.to_type(tcx)),
        .                           ty::IntVar(v),
        .                           ty::FreshIntTy,
        .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Closure(..)
        .                       | ty::GeneratorWitness(..)
1,294,656 ( 0.01%)              | ty::Opaque(..) => t.super_fold_with(self),
        .           
        .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
        .                   }
5,675,866 ( 0.04%)      }
        .           
    8,940 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    8,960 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
       80 ( 0.00%)                  let opt_ct = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .probe_value(v)
        .                               .val
        .                               .known();
        .                           return self.freshen_const(
-- line 235 ----------------------------------------
-- line 256 ----------------------------------------
        .                       }
        .           
        .                       ty::ConstKind::Param(_)
        .                       | ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Unevaluated(..)
        .                       | ty::ConstKind::Error(_) => {}
        .                   }
        .           
   11,840 ( 0.00%)          ct.super_fold_with(self)
       70 ( 0.00%)      }
        .           }

  941,303 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   66,461 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   33,494 ( 0.00%)              self.file = file;
   46,219 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   30,891 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  114,924 ( 0.00%)          self.line_number = line_index + 1;
  171,348 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  685,221 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   18,178 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    9,089 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   45,445 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   63,623 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   36,356 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
2,575,209 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
1,471,548 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  367,887 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  367,887 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  638,966 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  634,682 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
1,904,046 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  634,682 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  317,341 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  317,341 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  317,341 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
1,269,364 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   96,808 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  399,568 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   98,275 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  117,930 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        7 ( 0.00%)                  return None;
        .                       }
        .           
   78,592 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   92,673 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   92,673 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  252,695 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  121,329 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    4,270 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    6,405 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    7,961 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   15,922 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   31,844 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
  101,078 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   50,539 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  101,078 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   50,539 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  252,695 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  151,617 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  151,617 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  151,617 ( 0.00%)          Some((
   50,539 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   50,539 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
3,310,983 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
3,776,550 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  242,658 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
  101,629 ( 0.00%)              if idx != avoid_idx
   53,089 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   98,275 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   19,655 ( 0.00%)          if !self.source_map.files().is_empty() {
   39,310 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  157,240 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   98,275 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

4,840,860 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs
--------------------------------------------------------------------------------
Ir                 

-- line 2 ----------------------------------------
        .           
        .           use crate::infer::outlives::components::{push_outlives_components, Component};
        .           use crate::traits::{Obligation, ObligationCause, PredicateObligation};
        .           use rustc_data_structures::fx::{FxHashSet, FxIndexSet};
        .           use rustc_middle::ty::{self, ToPredicate, TyCtxt};
        .           use rustc_span::symbol::Ident;
        .           use rustc_span::Span;
        .           
4,058,055 ( 0.03%)  pub fn anonymize_predicate<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               pred: ty::Predicate<'tcx>,
        .           ) -> ty::Predicate<'tcx> {
  901,790 ( 0.01%)      let new = tcx.anonymize_late_bound_regions(pred.kind());
4,959,845 ( 0.04%)      tcx.reuse_or_mk_predicate(pred, new)
4,058,055 ( 0.03%)  }
        .           
        .           pub struct PredicateSet<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               set: FxHashSet<ty::Predicate<'tcx>>,
        .           }
        .           
        .           impl<'tcx> PredicateSet<'tcx> {
       15 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>) -> Self {
  132,719 ( 0.00%)          Self { tcx, set: Default::default() }
       15 ( 0.00%)      }
        .           
       60 ( 0.00%)      pub fn insert(&mut self, pred: ty::Predicate<'tcx>) -> bool {
        .                   // We have to be careful here because we want
        .                   //
        .                   //    for<'a> Foo<&'a i32>
        .                   //
        .                   // and
        .                   //
        .                   //    for<'b> Foo<&'b i32>
        .                   //
        .                   // to be considered equivalent. So normalize all late-bound
        .                   // regions before we throw things into the underlying set.
1,264,599 ( 0.01%)          self.set.insert(anonymize_predicate(self.tcx, pred))
       60 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Extend<ty::Predicate<'tcx>> for PredicateSet<'tcx> {
        .               fn extend<I: IntoIterator<Item = ty::Predicate<'tcx>>>(&mut self, iter: I) {
        .                   for pred in iter {
        .                       self.insert(pred);
        .                   }
        .               }
-- line 48 ----------------------------------------
-- line 66 ----------------------------------------
        .           /// if we know that `T: Ord`, the elaborator would deduce that `T: PartialOrd`
        .           /// holds as well. Similarly, if we have `trait Foo: 'static`, and we know that
        .           /// `T: Foo`, then we know that `T: 'static`.
        .           pub struct Elaborator<'tcx> {
        .               stack: Vec<PredicateObligation<'tcx>>,
        .               visited: PredicateSet<'tcx>,
        .           }
        .           
   13,890 ( 0.00%)  pub fn elaborate_trait_ref<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               trait_ref: ty::PolyTraitRef<'tcx>,
        .           ) -> Elaborator<'tcx> {
    4,630 ( 0.00%)      elaborate_predicates(tcx, std::iter::once(trait_ref.without_const().to_predicate(tcx)))
   13,890 ( 0.00%)  }
        .           
        .           pub fn elaborate_trait_refs<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
        .           ) -> Elaborator<'tcx> {
   84,189 ( 0.00%)      let predicates = trait_refs.map(|trait_ref| trait_ref.without_const().to_predicate(tcx));
        .               elaborate_predicates(tcx, predicates)
        .           }
        .           
        .           pub fn elaborate_predicates<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
        .           ) -> Elaborator<'tcx> {
        .               let obligations = predicates
        .                   .map(|predicate| {
  309,910 ( 0.00%)              predicate_obligation(predicate, ty::ParamEnv::empty(), ObligationCause::dummy())
        .                   })
        .                   .collect();
  117,882 ( 0.00%)      elaborate_obligations(tcx, obligations)
        .           }
        .           
        .           pub fn elaborate_predicates_with_span<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               predicates: impl Iterator<Item = (ty::Predicate<'tcx>, Span)>,
        .           ) -> Elaborator<'tcx> {
        .               let obligations = predicates
        .                   .map(|(predicate, span)| {
   30,150 ( 0.00%)              predicate_obligation(
        .                           predicate,
        .                           ty::ParamEnv::empty(),
   12,060 ( 0.00%)                  ObligationCause::dummy_with_span(span),
        .                       )
        .                   })
        .                   .collect();
   32,160 ( 0.00%)      elaborate_obligations(tcx, obligations)
        .           }
        .           
  116,454 ( 0.00%)  pub fn elaborate_obligations<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               mut obligations: Vec<PredicateObligation<'tcx>>,
        .           ) -> Elaborator<'tcx> {
        .               let mut visited = PredicateSet::new(tcx);
   41,133 ( 0.00%)      obligations.retain(|obligation| visited.insert(obligation.predicate));
  217,240 ( 0.00%)      Elaborator { stack: obligations, visited }
  116,454 ( 0.00%)  }
        .           
   82,633 ( 0.00%)  fn predicate_obligation<'tcx>(
        .               predicate: ty::Predicate<'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .           ) -> PredicateObligation<'tcx> {
3,110,058 ( 0.02%)      Obligation { cause, param_env, recursion_depth: 0, predicate }
   82,633 ( 0.00%)  }
        .           
        .           impl<'tcx> Elaborator<'tcx> {
    1,091 ( 0.00%)      pub fn filter_to_traits(self) -> FilterToTraits<Self> {
   27,224 ( 0.00%)          FilterToTraits::new(self)
    1,091 ( 0.00%)      }
        .           
        .               fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {
  781,792 ( 0.01%)          let tcx = self.visited.tcx;
        .           
  390,896 ( 0.00%)          let bound_predicate = obligation.predicate.kind();
2,141,486 ( 0.02%)          match bound_predicate.skip_binder() {
  862,251 ( 0.01%)              ty::PredicateKind::Trait(data) => {
        .                           // Get predicates declared on the trait.
1,437,085 ( 0.01%)                  let predicates = tcx.super_predicates_of(data.def_id());
        .           
        .                           let obligations = predicates.predicates.iter().map(|&(pred, _)| {
        .                               predicate_obligation(
2,169,966 ( 0.02%)                          pred.subst_supertrait(tcx, &bound_predicate.rebind(data.trait_ref)),
  361,661 ( 0.00%)                          obligation.param_env,
        .                                   obligation.cause.clone(),
        .                               )
        .                           });
        .                           debug!(?data, ?obligations, "super_predicates");
        .           
        .                           // Only keep those bounds that we haven't already seen.
        .                           // This is necessary to prevent infinite recursion in some
        .                           // cases. One common case is when people define
-- line 159 ----------------------------------------
-- line 206 ----------------------------------------
        .                           // We can basically ignore bound regions here. So for
        .                           // example `for<'c> Foo<'a,'c>: 'b` can be elaborated to
        .                           // `'a: 'b`.
        .           
        .                           // Ignore `for<'a> T: 'a` -- we might in the future
        .                           // consider this as evidence that `T: 'static`, but
        .                           // I'm a bit wary of such constructions and so for now
        .                           // I want to be conservative. --nmatsakis
      753 ( 0.00%)                  if r_min.is_late_bound() {
        .                               return;
        .                           }
        .           
        .                           let visited = &mut self.visited;
    1,506 ( 0.00%)                  let mut components = smallvec![];
    1,506 ( 0.00%)                  push_outlives_components(tcx, ty_max, &mut components);
        .                           self.stack.extend(
    3,765 ( 0.00%)                      components
        .                                   .into_iter()
    3,720 ( 0.00%)                          .filter_map(|component| match component {
       10 ( 0.00%)                              Component::Region(r) => {
       10 ( 0.00%)                                  if r.is_late_bound() {
        .                                               None
        .                                           } else {
        .                                               Some(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(
        .                                                   r, r_min,
        .                                               )))
        .                                           }
        .                                       }
        .           
    1,128 ( 0.00%)                              Component::Param(p) => {
      564 ( 0.00%)                                  let ty = tcx.mk_ty_param(p.index, p.name);
        .                                           Some(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(
        .                                               ty, r_min,
        .                                           )))
        .                                       }
        .           
        .                                       Component::UnresolvedInferenceVariable(_) => None,
        .           
        .                                       Component::Projection(projection) => {
-- line 244 ----------------------------------------
-- line 253 ----------------------------------------
        .           
        .                                       Component::EscapingProjection(_) => {
        .                                           // We might be able to do more here, but we don't
        .                                           // want to deal with escaping vars right now.
        .                                           None
        .                                       }
        .                                   })
        .                                   .map(ty::Binder::dummy)
      574 ( 0.00%)                          .map(|predicate_kind| predicate_kind.to_predicate(tcx))
        .                                   .filter(|&predicate| visited.insert(predicate))
        .                                   .map(|predicate| {
        .                                       predicate_obligation(
        .                                           predicate,
       40 ( 0.00%)                                  obligation.param_env,
        .                                           obligation.cause.clone(),
        .                                       )
        .                                   }),
        .                           );
        .                       }
        .                       ty::PredicateKind::TypeWellFormedFromEnv(..) => {
        .                           // Nothing to elaborate
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Iterator for Elaborator<'tcx> {
        .               type Item = PredicateObligation<'tcx>;
        .           
   10,482 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
   31,446 ( 0.00%)          (self.stack.len(), None)
   10,482 ( 0.00%)      }
        .           
3,300,840 ( 0.02%)      fn next(&mut self) -> Option<Self::Item> {
        .                   // Extract next item from top-most stack frame, if any.
3,518,064 ( 0.03%)          if let Some(obligation) = self.stack.pop() {
        .                       self.elaborate(&obligation);
2,345,376 ( 0.02%)              Some(obligation)
        .                   } else {
   43,418 ( 0.00%)              None
        .                   }
3,713,445 ( 0.03%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Supertrait iterator
        .           ///////////////////////////////////////////////////////////////////////////
        .           
        .           pub type Supertraits<'tcx> = FilterToTraits<Elaborator<'tcx>>;
        .           
    6,936 ( 0.00%)  pub fn supertraits<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               trait_ref: ty::PolyTraitRef<'tcx>,
        .           ) -> Supertraits<'tcx> {
   16,184 ( 0.00%)      elaborate_trait_ref(tcx, trait_ref).filter_to_traits()
    9,248 ( 0.00%)  }
        .           
        .           pub fn transitive_bounds<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
        .           ) -> Supertraits<'tcx> {
    3,273 ( 0.00%)      elaborate_trait_refs(tcx, bounds).filter_to_traits()
        .           }
        .           
        .           /// A specialized variant of `elaborate_trait_refs` that only elaborates trait references that may
        .           /// define the given associated type `assoc_name`. It uses the
        .           /// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that
        .           /// aren't related to `assoc_item`.  This is used when resolving types like `Self::Item` or
        .           /// `T::Item` and helps to avoid cycle errors (see e.g. #35237).
        .           pub fn transitive_bounds_that_define_assoc_type<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
        .               assoc_name: Ident,
        .           ) -> impl Iterator<Item = ty::PolyTraitRef<'tcx>> {
        .               let mut stack: Vec<_> = bounds.collect();
        .               let mut visited = FxIndexSet::default();
        .           
   11,319 ( 0.00%)      std::iter::from_fn(move || {
   14,808 ( 0.00%)          while let Some(trait_ref) = stack.pop() {
   24,063 ( 0.00%)              let anon_trait_ref = tcx.anonymize_late_bound_regions(trait_ref);
    7,404 ( 0.00%)              if visited.insert(anon_trait_ref) {
    3,574 ( 0.00%)                  let super_predicates = tcx.super_predicates_that_define_assoc_type((
    3,574 ( 0.00%)                      trait_ref.def_id(),
        .                               Some(assoc_name),
        .                           ));
        .                           for (super_predicate, _) in super_predicates.predicates {
      688 ( 0.00%)                      let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);
      860 ( 0.00%)                      if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {
      516 ( 0.00%)                          stack.push(binder.map_bound(|t| t.trait_ref));
        .                               }
        .                           }
        .           
   12,509 ( 0.00%)                  return Some(trait_ref);
        .                       }
        .                   }
        .           
        .                   return None;
        .               })
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
-- line 353 ----------------------------------------
-- line 364 ----------------------------------------
        .               fn new(base: I) -> FilterToTraits<I> {
        .                   FilterToTraits { base_iterator: base }
        .               }
        .           }
        .           
        .           impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToTraits<I> {
        .               type Item = ty::PolyTraitRef<'tcx>;
        .           
  276,640 ( 0.00%)      fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {
  305,252 ( 0.00%)          while let Some(obligation) = self.base_iterator.next() {
  156,200 ( 0.00%)              if let Some(data) = obligation.predicate.to_opt_poly_trait_pred() {
  121,380 ( 0.00%)                  return Some(data.map_bound(|t| t.trait_ref));
        .                       }
        .                   }
    3,388 ( 0.00%)          None
  248,976 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       13 ( 0.00%)          let (_, upper) = self.base_iterator.size_hint();
        .                   (0, upper)
        .               }
        .           }

2,219,773 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs
--------------------------------------------------------------------------------
Ir                  

-- line 31 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new(T::default)
         .               }
         .           }
         .           
         .           impl<T> Sharded<T> {
         .               #[inline]
         .               pub fn new(mut value: impl FnMut() -> T) -> Self {
         2 ( 0.00%)          Sharded { shards: [(); SHARDS].map(|()| CacheAligned(Lock::new(value()))) }
         .               }
         .           
         .               /// The shard is selected by hashing `val` with `FxHasher`.
         .               #[inline]
         .               pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {
         .                   if SHARDS == 1 { &self.shards[0].0 } else { self.get_shard_by_hash(make_hash(val)) }
         .               }
         .           
         .               #[inline]
         .               pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {
         .                   &self.shards[get_shard_index_by_hash(hash)].0
         .               }
         .           
         .               #[inline]
         .               pub fn get_shard_by_index(&self, i: usize) -> &Lock<T> {
   701,058 ( 0.01%)          &self.shards[i].0
         .               }
         .           
         .               pub fn lock_shards(&self) -> Vec<LockGuard<'_, T>> {
         .                   (0..SHARDS).map(|i| self.shards[i].0.lock()).collect()
         .               }
         .           
         .               pub fn try_lock_shards(&self) -> Option<Vec<LockGuard<'_, T>>> {
         .                   (0..SHARDS).map(|i| self.shards[i].0.try_lock()).collect()
-- line 63 ----------------------------------------
-- line 79 ----------------------------------------
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash(value);
         .                   let mut shard = self.get_shard_by_hash(hash).lock();
         .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, value);
         .           
         .                   match entry {
 2,845,021 ( 0.02%)              RawEntryMut::Occupied(e) => *e.key(),
         .                       RawEntryMut::Vacant(e) => {
         .                           let v = make();
         .                           e.insert_hashed_nocheck(hash, v, ());
         .                           v
         .                       }
         .                   }
         .               }
         .           
-- line 95 ----------------------------------------
-- line 99 ----------------------------------------
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash(&value);
         .                   let mut shard = self.get_shard_by_hash(hash).lock();
         .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, &value);
         .           
         .                   match entry {
 3,945,888 ( 0.03%)              RawEntryMut::Occupied(e) => *e.key(),
         .                       RawEntryMut::Vacant(e) => {
 1,178,820 ( 0.01%)                  let v = make(value);
         .                           e.insert_hashed_nocheck(hash, v, ());
         .                           v
         .                       }
         .                   }
        71 ( 0.00%)      }
         .           }
         .           
         .           pub trait IntoPointer {
         .               /// Returns a pointer which outlives `self`.
         .               fn into_pointer(&self) -> *const ();
         .           }
         .           
         .           impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {
-- line 122 ----------------------------------------
-- line 125 ----------------------------------------
         .                   let shard = self.get_shard_by_hash(hash).lock();
         .                   let value = value.into_pointer();
         .                   shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()
         .               }
         .           }
         .           
         .           #[inline]
         .           fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {
12,489,442 ( 0.09%)      let mut state = FxHasher::default();
 2,876,457 ( 0.02%)      val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is
         .           /// ever used in combination with `get_shard_by_hash` on a single `Sharded`
         .           /// instance, then `hash` must be computed with `FxHasher`. Otherwise,
         .           /// `hash` can be computed with any hasher, so long as that hasher is used
         .           /// consistently for each `Sharded` instance.
-- line 142 ----------------------------------------

 4,334,232 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       399 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           
         .               /// Contains the error value
         .               #[lang = "Err"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 534 ----------------------------------------
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn is_ok(&self) -> bool {
    27,830 ( 0.00%)          matches!(*self, Ok(_))
         .               }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ok(self) -> Option<T> {
   219,039 ( 0.00%)          match self {
    61,031 ( 0.00%)              Ok(x) => Some(x),
         .                       Err(_) => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
-- line 645 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
    17,299 ( 0.00%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
 4,802,793 ( 0.03%)          match self {
 3,708,127 ( 0.03%)              Ok(t) => Ok(op(t)),
 1,754,345 ( 0.01%)              Err(e) => Err(e),
         .                   }
     1,694 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
   449,164 ( 0.00%)          match self {
   119,761 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// let x: Result<u32, u32> = Ok(2);
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     2,049 ( 0.00%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
 3,304,925 ( 0.02%)          match self {
 4,529,201 ( 0.03%)              Ok(t) => Ok(t),
   245,873 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
    30,791 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
         .               pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
    51,765 ( 0.00%)          match self {
       881 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1051 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.unwrap(); // panics with `emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        38 ( 0.00%)      pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   172,740 ( 0.00%)          match self {
    12,657 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
        57 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
    14,572 ( 0.00%)          match self {
     9,483 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
     5,112 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
48,052,244 ( 0.35%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
    57,958 ( 0.00%)          match self {
    92,776 ( 0.00%)              Ok(t) => op(t),
    16,749 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
    11,986 ( 0.00%)          match self {
    39,779 ( 0.00%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
     3,987 ( 0.00%)          match self {
        36 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
   339,969 ( 0.00%)          match self {
   200,789 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
         7 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
         .               ///
         .               /// Calling this method on an [`Err`] is *[undefined behavior]*.
         .               ///
-- line 1426 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
    13,866 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
   226,607 ( 0.00%)      fn clone(&self) -> Self {
 1,730,827 ( 0.01%)          match self {
 1,228,037 ( 0.01%)              Ok(x) => Ok(x.clone()),
   310,574 ( 0.00%)              Err(x) => Err(x.clone()),
         .                   }
   464,722 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
    43,651 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
     7,354 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
18,351,613 ( 0.13%)          match self {
12,593,897 ( 0.09%)              Ok(v) => ControlFlow::Continue(v),
 3,570,642 ( 0.03%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
         .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
 2,100,285 ( 0.02%)              Err(e) => Err(From::from(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }
-- line 2060 ----------------------------------------

 8,579,148 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 180 ----------------------------------------
          .           /// assert_eq!(v, &[0.into()]);
          .           ///
          .           /// // Ensure that the last item was dropped.
          .           /// assert!(weak.upgrade().is_none());
          .           /// ```
          .           #[stable(feature = "drop_in_place", since = "1.8.0")]
          .           #[lang = "drop_in_place"]
          .           #[allow(unconditional_recursion)]
121,283,049 ( 0.88%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
          .               // Code here does not matter - this is replaced by the
          .               // real drop glue by the compiler.
          .           
          .               // SAFETY: see comment above
          .               unsafe { drop_in_place(to_drop) }
          .           }
          .           
          .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .           
          .               // Perform the swap
          .               // SAFETY: the caller must guarantee that `x` and `y` are
          .               // valid for writes and properly aligned. `tmp` cannot be
          .               // overlapping either `x` or `y` because `tmp` was just allocated
          .               // on the stack as a separate allocated object.
          .               unsafe {
        529 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        529 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
          .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
          .               }
          .           }
          .           
          .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
          .           /// beginning at `x` and `y`. The two regions must *not* overlap.
          .           ///
          .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
          .                       return;
          .                   }
          .               }
          .           
          .               // Direct swapping, for the cases not going through the block optimization.
          .               // SAFETY: the caller must guarantee that `x` and `y` are valid
          .               // for writes, properly aligned, and non-overlapping.
          .               unsafe {
         74 ( 0.00%)          let z = read(x);
          .                   copy_nonoverlapping(y, x, 1);
          .                   write(y, z);
          .               }
          .           }
          .           
          .           #[inline]
          .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
          .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .               // SAFETY: the caller must guarantee that `src` is valid for reads.
          .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
          .               // the stack as a separate allocated object.
          .               //
          .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
          .               // to be properly initialized.
          .               unsafe {
  3,049,493 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 23,859,771 ( 0.17%)          tmp.assume_init()
          .               }
          .           }
          .           
          .           /// Reads the value from `src` without moving it. This leaves the
          .           /// memory in `src` unchanged.
          .           ///
          .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
          .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
          .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
          .               // `dst` cannot overlap `src` because the caller has mutable access
          .               // to `dst` while `src` is owned by this function.
          .               unsafe {
162,248,712 ( 1.17%)          copy_nonoverlapping(&src as *const T, dst, 1);
          .                   intrinsics::forget(src);
          .               }
          .           }
          .           
          .           /// Overwrites a memory location with the given value without reading or
          .           /// dropping the old value.
          .           ///
          .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
          .               if stride == 1 {
          .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
          .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
          .                   //
          .                   //    round_up_to_next_alignment(p, a) - p
          .                   //
          .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
          .                   // for LLVM to be able to utilize the various optimizations it knows about.
     15,545 ( 0.00%)          return wrapping_sub(
     63,836 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
          .                       p as usize,
          .                   );
          .               }
          .           
          .               let pmoda = p as usize & a_minus_one;
          .               if pmoda == 0 {
          .                   // Already aligned. Yay!
          .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
          .           /// assert!(std::ptr::eq(
          .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
          .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
          .           /// ));
          .           /// ```
          .           #[stable(feature = "ptr_eq", since = "1.17.0")]
          .           #[inline]
          .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 52,959,107 ( 0.38%)      a == b
          .           }
          .           
          .           /// Hash a raw pointer.
          .           ///
          .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
          .           /// by its address rather than the value it points to
          .           /// (which is what the `Hash for &T` implementation does).
          .           ///
-- line 1364 ----------------------------------------

 17,797,526 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs
--------------------------------------------------------------------------------
Ir                   

-- line 685 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<(T, U), F::Error> {
     20,738 ( 0.00%)          Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.0.visit_with(visitor)?;
        476 ( 0.00%)          self.1.visit_with(visitor)
          .               }
          .           }
          .           
          .           impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>
          .               for (A, B, C)
          .           {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
-- line 706 ----------------------------------------
-- line 826 ----------------------------------------
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   self.try_map_id(|value| value.try_fold_with(folder))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     18,524 ( 0.00%)          (**self).visit_with(visitor)
          .               }
          .           }
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
    298,654 ( 0.00%)          self.try_map_id(|t| t.try_fold_with(folder))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     17,486 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
-- line 855 ----------------------------------------
-- line 857 ----------------------------------------
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {
    767,507 ( 0.01%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
 85,133,836 ( 0.61%)          self.try_map_bound(|ty| ty.try_fold_with(folder))
    959,251 ( 0.01%)      }
          .           
          .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  9,034,991 ( 0.07%)          folder.try_fold_binder(self)
          .               }
          .           
      1,440 ( 0.00%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     18,440 ( 0.00%)          self.as_ref().skip_binder().visit_with(visitor)
      1,280 ( 0.00%)      }
          .           
          .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   visitor.visit_binder(self)
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
      3,313 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.iter().try_for_each(|p| p.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
    329,002 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {
-- line 911 ----------------------------------------
-- line 949 ----------------------------------------
          .                           }
          .                       },
          .                   })
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   use crate::ty::InstanceDef::*;
          .                   self.substs.visit_with(visitor)?;
     10,015 ( 0.00%)          match self.def {
          .                       Item(def) => def.visit_with(visitor),
          .                       VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {
          .                           did.visit_with(visitor)
          .                       }
          .                       FnPtrShim(did, ty) | CloneShim(did, ty) => {
          .                           did.visit_with(visitor)?;
          .                           ty.visit_with(visitor)
          .                       }
-- line 965 ----------------------------------------
-- line 976 ----------------------------------------
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      5,028 ( 0.00%)          self.instance.visit_with(visitor)
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {
    563,162 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
 11,543,220 ( 0.08%)          let kind = match *self.kind() {
     91,716 ( 0.00%)              ty::RawPtr(tm) => ty::RawPtr(tm.try_fold_with(folder)?),
    132,005 ( 0.00%)              ty::Array(typ, sz) => ty::Array(typ.try_fold_with(folder)?, sz.try_fold_with(folder)?),
    102,436 ( 0.00%)              ty::Slice(typ) => ty::Slice(typ.try_fold_with(folder)?),
  3,743,388 ( 0.03%)              ty::Adt(tid, substs) => ty::Adt(tid, substs.try_fold_with(folder)?),
      2,654 ( 0.00%)              ty::Dynamic(trait_ty, region) => {
      5,259 ( 0.00%)                  ty::Dynamic(trait_ty.try_fold_with(folder)?, region.try_fold_with(folder)?)
          .                       }
    539,138 ( 0.00%)              ty::Tuple(ts) => ty::Tuple(ts.try_fold_with(folder)?),
    274,646 ( 0.00%)              ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.try_fold_with(folder)?),
    160,163 ( 0.00%)              ty::FnPtr(f) => ty::FnPtr(f.try_fold_with(folder)?),
  1,684,003 ( 0.01%)              ty::Ref(r, ty, mutbl) => {
  2,678,307 ( 0.02%)                  ty::Ref(r.try_fold_with(folder)?, ty.try_fold_with(folder)?, mutbl)
          .                       }
          .                       ty::Generator(did, substs, movability) => {
          .                           ty::Generator(did, substs.try_fold_with(folder)?, movability)
          .                       }
          .                       ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),
    160,224 ( 0.00%)              ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),
  1,793,809 ( 0.01%)              ty::Projection(data) => ty::Projection(data.try_fold_with(folder)?),
     22,583 ( 0.00%)              ty::Opaque(did, substs) => ty::Opaque(did, substs.try_fold_with(folder)?),
          .           
          .                       ty::Bool
          .                       | ty::Char
          .                       | ty::Str
          .                       | ty::Int(_)
          .                       | ty::Uint(_)
          .                       | ty::Float(_)
          .                       | ty::Error(_)
-- line 1021 ----------------------------------------
-- line 1022 ----------------------------------------
          .                       | ty::Infer(_)
          .                       | ty::Param(..)
          .                       | ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Never
          .                       | ty::Foreign(..) => return Ok(self),
          .                   };
          .           
  6,357,046 ( 0.05%)          Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })
    812,262 ( 0.01%)      }
          .           
          .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  2,751,773 ( 0.02%)          folder.try_fold_ty(self)
          .               }
          .           
  3,931,278 ( 0.03%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  3,791,784 ( 0.03%)          match self.kind() {
          .                       ty::RawPtr(ref tm) => tm.visit_with(visitor),
     13,000 ( 0.00%)              ty::Array(typ, sz) => {
     28,200 ( 0.00%)                  typ.visit_with(visitor)?;
    117,000 ( 0.00%)                  sz.visit_with(visitor)
          .                       }
          .                       ty::Slice(typ) => typ.visit_with(visitor),
          .                       ty::Adt(_, substs) => substs.visit_with(visitor),
         59 ( 0.00%)              ty::Dynamic(ref trait_ty, ref reg) => {
          .                           trait_ty.visit_with(visitor)?;
        590 ( 0.00%)                  reg.visit_with(visitor)
          .                       }
          .                       ty::Tuple(ts) => ts.visit_with(visitor),
          .                       ty::FnDef(_, substs) => substs.visit_with(visitor),
          .                       ty::FnPtr(ref f) => f.visit_with(visitor),
          .                       ty::Ref(r, ty, _) => {
     49,566 ( 0.00%)                  r.visit_with(visitor)?;
          .                           ty.visit_with(visitor)
          .                       }
          .                       ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),
          .                       ty::GeneratorWitness(ref types) => types.visit_with(visitor),
          .                       ty::Closure(_did, ref substs) => substs.visit_with(visitor),
        476 ( 0.00%)              ty::Projection(ref data) => data.visit_with(visitor),
          .                       ty::Opaque(_, ref substs) => substs.visit_with(visitor),
          .           
          .                       ty::Bool
          .                       | ty::Char
          .                       | ty::Str
          .                       | ty::Int(_)
          .                       | ty::Uint(_)
          .                       | ty::Float(_)
-- line 1068 ----------------------------------------
-- line 1069 ----------------------------------------
          .                       | ty::Error(_)
          .                       | ty::Infer(_)
          .                       | ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Param(..)
          .                       | ty::Never
          .                       | ty::Foreign(..) => ControlFlow::CONTINUE,
          .                   }
  3,520,233 ( 0.03%)      }
          .           
          .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 10,082,741 ( 0.07%)          visitor.visit_ty(self)
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   _folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   Ok(self)
          .               }
          .           
          .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
     87,378 ( 0.00%)          folder.try_fold_region(self)
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   ControlFlow::CONTINUE
          .               }
          .           
         74 ( 0.00%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    160,580 ( 0.00%)          visitor.visit_region(*self)
        186 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {
  1,144,332 ( 0.01%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
          .                   folder.try_fold_predicate(self)
    953,610 ( 0.01%)      }
          .           
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
 26,844,013 ( 0.19%)          let new = self.inner.kind.try_fold_with(folder)?;
108,197,720 ( 0.78%)          Ok(folder.tcx().reuse_or_mk_predicate(self, new))
    572,166 ( 0.00%)      }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.inner.kind.visit_with(visitor)
          .               }
          .           
          .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  1,514,376 ( 0.01%)          visitor.visit_predicate(*self)
          .               }
          .           
          .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
    353,304 ( 0.00%)          self.inner.outer_exclusive_binder > binder
    353,304 ( 0.00%)      }
          .           
          .               fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {
  1,447,972 ( 0.01%)          self.inner.flags.intersects(flags)
  1,447,972 ( 0.01%)      }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
    377,179 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      2,816 ( 0.00%)          self.iter().try_for_each(|p| p.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
-- line 1152 ----------------------------------------
-- line 1154 ----------------------------------------
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {
        279 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
     24,736 ( 0.00%)          let ty = self.ty.try_fold_with(folder)?;
    293,189 ( 0.00%)          let val = self.val.try_fold_with(folder)?;
     95,278 ( 0.00%)          if ty != self.ty || val != self.val {
     34,073 ( 0.00%)              Ok(folder.tcx().mk_const(ty::Const { ty, val }))
          .                   } else {
          .                       Ok(self)
          .                   }
        279 ( 0.00%)      }
          .           
          .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
    132,583 ( 0.00%)          folder.try_fold_const(self)
          .               }
          .           
          7 ( 0.00%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        556 ( 0.00%)          self.ty.visit_with(visitor)?;
          .                   self.val.visit_with(visitor)
          9 ( 0.00%)      }
          .           
     78,000 ( 0.00%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     23,749 ( 0.00%)          visitor.visit_const(self)
     91,000 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
    181,836 ( 0.00%)          Ok(match self {
          .                       ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),
          .                       ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),
      2,086 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.try_fold_with(folder)?),
          .                       ty::ConstKind::Value(_)
          .                       | ty::ConstKind::Bound(..)
          .                       | ty::ConstKind::Placeholder(..)
     60,808 ( 0.00%)              | ty::ConstKind::Error(_) => self,
          .                   })
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      5,648 ( 0.00%)          match *self {
          .                       ty::ConstKind::Infer(ic) => ic.visit_with(visitor),
          .                       ty::ConstKind::Param(p) => p.visit_with(visitor),
          .                       ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),
          .                       ty::ConstKind::Value(_)
          .                       | ty::ConstKind::Bound(..)
          .                       | ty::ConstKind::Placeholder(_)
          .                       | ty::ConstKind::Error(_) => ControlFlow::CONTINUE,
          .                   }
-- line 1214 ----------------------------------------
-- line 1230 ----------------------------------------
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   Ok(ty::Unevaluated {
          .                       def: self.def,
      7,019 ( 0.00%)              substs: self.substs.try_fold_with(folder)?,
          .                       promoted: self.promoted,
          .                   })
          .               }
          .           
          .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        290 ( 0.00%)          visitor.visit_unevaluated_const(*self)
          .               }
          .           
        144 ( 0.00%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
         68 ( 0.00%)          self.substs.visit_with(visitor)
        168 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   Ok(ty::Unevaluated {
          .                       def: self.def,
          .                       substs: self.substs.try_fold_with(folder)?,
          .                       promoted: self.promoted,
          .                   })
          .               }
          .           
          .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
         32 ( 0.00%)          visitor.visit_unevaluated_const(self.expand())
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   self.substs.visit_with(visitor)
          .               }
          .           }

  3,281,651 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
        .           
        .           /// See `simplify_type`
        .           ///
        .           /// Note that we keep this type generic over the type of identifier it uses
        .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
        .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
        .           /// the non-stable but fast to construct DefId-version is the better choice.
1,775,727 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
        .           pub enum SimplifiedTypeGen<D>
        .           where
        .               D: Copy + Debug + Eq,
        .           {
        .               BoolSimplifiedType,
        .               CharSimplifiedType,
        .               IntSimplifiedType(ty::IntTy),
        .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
        .           ///
        .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
        .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
        .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
        .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
        .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
        .           ///   this way so I am not going to change this until we actually find an issue as I am really
        .           ///   interesting in getting an actual test for this.
2,388,352 ( 0.02%)  pub fn simplify_type(
        .               tcx: TyCtxt<'_>,
        .               ty: Ty<'_>,
        .               can_simplify_params: SimplifyParams,
        .               strip_references: StripReferences,
        .           ) -> Option<SimplifiedType> {
3,582,528 ( 0.03%)      match *ty.kind() {
        .                   ty::Bool => Some(BoolSimplifiedType),
        .                   ty::Char => Some(CharSimplifiedType),
  139,956 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
  185,396 ( 0.00%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
   20,132 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
2,227,950 ( 0.02%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
        .                   ty::Str => Some(StrSimplifiedType),
        .                   ty::Array(..) => Some(ArraySimplifiedType),
        .                   ty::Slice(..) => Some(SliceSimplifiedType),
   14,732 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
       28 ( 0.00%)          ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
       35 ( 0.00%)              Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
       63 ( 0.00%)                  Some(TraitSimplifiedType(principal_def_id))
        .                       }
        .                       _ => Some(MarkerTraitObjectSimplifiedType),
        .                   },
  628,544 ( 0.00%)          ty::Ref(_, ty, mutbl) => {
  314,272 ( 0.00%)              if strip_references == StripReferences::Yes {
        .                           // For diagnostics, when recommending similar impls we want to
        .                           // recommend impls even when there is a reference mismatch,
        .                           // so we treat &T and T equivalently in that case.
        .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
        .                       } else {
        .                           Some(RefSimplifiedType(mutbl))
        .                       }
        .                   }
   13,237 ( 0.00%)          ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
        .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
        .                   ty::GeneratorWitness(ref tys) => {
        .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
        .                   }
        .                   ty::Never => Some(NeverSimplifiedType),
   36,042 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
    9,132 ( 0.00%)          ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
        .                   ty::Projection(_) | ty::Param(_) => {
  163,671 ( 0.00%)              if can_simplify_params == SimplifyParams::Yes {
        .                           // In normalized types, projections don't unify with
        .                           // anything. when lazy normalization happens, this
        .                           // will change. It would still be nice to have a way
        .                           // to deal with known-not-to-unify-with-anything
        .                           // projections (e.g., the likes of <__S as Encoder>::Error).
        .                           Some(ParameterSimplifiedType)
        .                       } else {
        .                           None
        .                       }
        .                   }
    1,350 ( 0.00%)          ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
        .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
        .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
        .               }
5,373,792 ( 0.04%)  }
        .           
        .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
        .               pub fn def(self) -> Option<D> {
        .                   match self {
        .                       AdtSimplifiedType(d)
        .                       | ForeignSimplifiedType(d)
        .                       | TraitSimplifiedType(d)
        .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

3,639,591 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/resolve.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .               #[inline]
         .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {
         .                   OpportunisticVarResolver { infcx }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   163,158 ( 0.00%)          self.infcx.tcx
         .               }
         .           
 8,240,878 ( 0.06%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 8,705,489 ( 0.06%)          if !t.has_infer_types_or_consts() {
         .                       t // micro-optimize -- if there is nothing in this type that this fold affects...
         .                   } else {
   894,745 ( 0.01%)              let t = self.infcx.shallow_resolve(t);
 3,525,256 ( 0.03%)              t.super_fold_with(self)
         .                   }
22,907,094 ( 0.17%)      }
         .           
         5 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx Const<'tcx>) -> &'tcx Const<'tcx> {
     9,667 ( 0.00%)          if !ct.has_infer_types_or_consts() {
         .                       ct // micro-optimize -- if there is nothing in this const that this fold affects...
         .                   } else {
     2,275 ( 0.00%)              let ct = self.infcx.shallow_resolve(ct);
    11,570 ( 0.00%)              ct.super_fold_with(self)
         .                   }
         .               }
         .           
         .               fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   constant.super_fold_with(self)
         .               }
         .           }
         .           
-- line 55 ----------------------------------------
-- line 60 ----------------------------------------
         .           ///
         .           /// If you want to resolve type and const variables as well, call
         .           /// [InferCtxt::resolve_vars_if_possible] first.
         .           pub struct OpportunisticRegionResolver<'a, 'tcx> {
         .               infcx: &'a InferCtxt<'a, 'tcx>,
         .           }
         .           
         .           impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {
     1,387 ( 0.00%)      pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {
         .                   OpportunisticRegionResolver { infcx }
     1,387 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 8,797,881 ( 0.06%)          self.infcx.tcx
 4,397,476 ( 0.03%)      }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
     4,364 ( 0.00%)          if !t.has_infer_regions() {
         .                       t // micro-optimize -- if there is nothing in this type that this fold affects...
         .                   } else {
     6,149 ( 0.00%)              t.super_fold_with(self)
         .                   }
         .               }
         .           
     7,445 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
     2,978 ( 0.00%)          match *r {
         .                       ty::ReVar(rid) => {
     1,489 ( 0.00%)                  let resolved = self
         .                               .infcx
         .                               .inner
         .                               .borrow_mut()
         .                               .unwrap_region_constraints()
         .                               .opportunistic_resolve_var(rid);
     4,467 ( 0.00%)                  self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))
         .                       }
         .                       _ => r,
         .                   }
     8,934 ( 0.00%)      }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         .                   if !ct.has_infer_regions() {
         .                       ct // micro-optimize -- if there is nothing in this const that this fold affects...
         .                   } else {
         .                       ct.super_fold_with(self)
         .                   }
         .               }
-- line 107 ----------------------------------------
-- line 165 ----------------------------------------
         .           
         .           /// Full type resolution replaces all type and region variables with
         .           /// their concrete results. If any variable cannot be replaced (never unified, etc)
         .           /// then an `Err` result is returned.
         .           pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>, value: T) -> FixupResult<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
   313,975 ( 0.00%)      value.try_fold_with(&mut FullTypeResolver { infcx })
         .           }
         .           
         .           // N.B. This type is not public because the protocol around checking the
         .           // `err` field is not enforceable otherwise.
         .           struct FullTypeResolver<'a, 'tcx> {
         .               infcx: &'a InferCtxt<'a, 'tcx>,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {
         .               type Error = FixupError<'tcx>;
         .           
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   105,040 ( 0.00%)          self.infcx.tcx
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {
 1,044,912 ( 0.01%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
   522,456 ( 0.00%)          if !t.needs_infer() {
         .                       Ok(t) // micro-optimize -- if there is nothing in this type that this fold affects...
         .                   } else {
   124,550 ( 0.00%)              let t = self.infcx.shallow_resolve(t);
   124,550 ( 0.00%)              match *t.kind() {
         .                           ty::Infer(ty::TyVar(vid)) => Err(FixupError::UnresolvedTy(vid)),
         .                           ty::Infer(ty::IntVar(vid)) => Err(FixupError::UnresolvedIntTy(vid)),
         .                           ty::Infer(ty::FloatVar(vid)) => Err(FixupError::UnresolvedFloatTy(vid)),
         .                           ty::Infer(_) => {
         .                               bug!("Unexpected type in full type resolver: {:?}", t);
         .                           }
   435,925 ( 0.00%)                  _ => t.try_super_fold_with(self),
         .                       }
         .                   }
 3,657,192 ( 0.03%)      }
         .           
    48,554 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
    48,554 ( 0.00%)          match *r {
    21,486 ( 0.00%)              ty::ReVar(rid) => Ok(self
         .                           .infcx
         .                           .lexical_region_resolutions
         .                           .borrow()
         .                           .as_ref()
         .                           .expect("region resolution not performed")
         .                           .resolve_var(rid)),
         .                       _ => Ok(r),
         .                   }
   121,385 ( 0.00%)      }
         .           
     4,485 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
       897 ( 0.00%)          if !c.needs_infer() {
         .                       Ok(c) // micro-optimize -- if there is nothing in this const that this fold affects...
         .                   } else {
         .                       let c = self.infcx.shallow_resolve(c);
         .                       match c.val {
         .                           ty::ConstKind::Infer(InferConst::Var(vid)) => {
         .                               return Err(FixupError::UnresolvedConst(vid));
         .                           }
         .                           ty::ConstKind::Infer(InferConst::Fresh(_)) => {
         .                               bug!("Unexpected const in full const resolver: {:?}", c);
         .                           }
         .                           _ => {}
         .                       }
         .                       c.try_super_fold_with(self)
         .                   }
     7,176 ( 0.00%)      }
         .           }

 1,714,747 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/resolve.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 157 ----------------------------------------
          .               pub fn opt_fn_def_id(self) -> Option<DefId> {
          .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
          .               }
          .           }
          .           
          .           /// The "header" of an impl is everything outside the body: a Self type, a trait
          .           /// ref (in the case of a trait impl), and a set of predicates (from the
          .           /// bounds / where-clauses).
    134,396 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
          .           pub struct ImplHeader<'tcx> {
          .               pub impl_def_id: DefId,
          .               pub self_ty: Ty<'tcx>,
          .               pub trait_ref: Option<TraitRef<'tcx>>,
          .               pub predicates: Vec<Predicate<'tcx>>,
          .           }
          .           
          .           #[derive(
          .               Copy,
          .               Clone,
  1,284,212 ( 0.01%)      PartialEq,
          .               Eq,
          .               Hash,
          .               TyEncodable,
     30,804 ( 0.00%)      TyDecodable,
          .               HashStable,
          .               Debug,
          .               TypeFoldable
          .           )]
          .           pub enum ImplPolarity {
          .               /// `impl Trait for Type`
          .               Positive,
          .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
          .                   match self {
          .                       Self::Positive => f.write_str("positive"),
          .                       Self::Negative => f.write_str("negative"),
          .                       Self::Reservation => f.write_str("reservation"),
          .                   }
          .               }
          .           }
          .           
    355,763 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
          .           pub enum Visibility {
          .               /// Visible everywhere (including in other crates).
          .               Public,
          .               /// Visible only in the given crate-local module.
          .               Restricted(DefId),
          .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
          .               Invisible,
          .           }
          .           
  7,176,878 ( 0.05%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
          .           pub enum BoundConstness {
          .               /// `T: Trait`
          .               NotConst,
          .               /// `T: ~const Trait`
          .               ///
          .               /// Requires resolving to const only when we are in a const context.
          .               ConstIfConst,
          .           }
          .           
          .           impl BoundConstness {
          .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    189,976 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
    284,964 ( 0.00%)          match (constness, self) {
          .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
          .                       (_, this) => {
    477,286 ( 0.00%)                  *this = BoundConstness::NotConst;
          .                           hir::Constness::NotConst
          .                       }
          .                   }
     94,988 ( 0.00%)      }
          .           }
          .           
          .           impl fmt::Display for BoundConstness {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   match self {
          .                       Self::NotConst => f.write_str("normal"),
          .                       Self::ConstIfConst => f.write_str("`~const`"),
          .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
          .               pub before_feature_tys: Ty<'tcx>,
          .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
          .               pub after_feature_tys: Ty<'tcx>,
          .           }
          .           
          .           pub trait DefIdTree: Copy {
          .               fn parent(self, id: DefId) -> Option<DefId>;
          .           
        245 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
        388 ( 0.00%)          if descendant.krate != ancestor.krate {
          .                       return false;
          .                   }
          .           
     37,833 ( 0.00%)          while descendant != ancestor {
     47,717 ( 0.00%)              match self.parent(descendant) {
          .                           Some(parent) => descendant = parent,
          .                           None => return false,
          .                       }
          .                   }
          .                   true
        280 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
     27,654 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
          .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
     41,481 ( 0.00%)      }
          .           }
          .           
          .           impl Visibility {
        976 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
      2,928 ( 0.00%)          match visibility.node {
          .                       hir::VisibilityKind::Public => Visibility::Public,
          .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
          .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
          .                           // If there is no resolution, `resolve` will have already reported an error, so
          .                           // assume that the visibility is public to avoid reporting more privacy errors.
          .                           Res::Err => Visibility::Public,
          .                           def => Visibility::Restricted(def.def_id()),
          .                       },
          .                       hir::VisibilityKind::Inherited => {
      1,360 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
          .                       }
          .                   }
        976 ( 0.00%)      }
          .           
          .               /// Returns `true` if an item with this visibility is accessible from the given block.
    178,092 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
    830,684 ( 0.01%)          let restriction = match self {
          .                       // Public items are visible everywhere.
          .                       Visibility::Public => return true,
          .                       // Private items from other crates are visible nowhere.
          .                       Visibility::Invisible => return false,
          .                       // Restricted items are visible in an arbitrary local module.
     17,093 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
          .                       Visibility::Restricted(module) => module,
          .                   };
          .           
         70 ( 0.00%)          tree.is_descendant_of(module, restriction)
    178,092 ( 0.00%)      }
          .           
          .               /// Returns `true` if this visibility is at least as accessible as the given visibility
     38,178 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    119,060 ( 0.00%)          let vis_restriction = match vis {
          .                       Visibility::Public => return self == Visibility::Public,
          .                       Visibility::Invisible => return true,
          .                       Visibility::Restricted(module) => module,
          .                   };
          .           
          .                   self.is_accessible_from(vis_restriction, tree)
     38,178 ( 0.00%)      }
          .           
          .               // Returns `true` if this item is visible anywhere in the local crate.
          .               pub fn is_visible_locally(self) -> bool {
          .                   match self {
          .                       Visibility::Public => true,
          .                       Visibility::Restricted(def_id) => def_id.is_local(),
          .                       Visibility::Invisible => false,
          .                   }
          .               }
          .           
          .               pub fn is_public(self) -> bool {
     24,644 ( 0.00%)          matches!(self, Visibility::Public)
     12,322 ( 0.00%)      }
          .           }
          .           
          .           /// The crate variances map is computed during typeck and contains the
          .           /// variance of every item in the local crate. You should not use it
          .           /// directly, because to do so will make your pass dependent on the
          .           /// HIR of every item in the local crate. Instead, use
          .           /// `tcx.variances_of()` to get the variance for a *particular*
          .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
          .           }
          .           
          .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
          .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
          .           static_assert_size!(TyS<'_>, 40);
          .           
          .           impl<'tcx> Ord for TyS<'tcx> {
          .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
         18 ( 0.00%)          self.kind().cmp(other.kind())
          .               }
          .           }
          .           
          .           impl<'tcx> PartialOrd for TyS<'tcx> {
          .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
          .                   Some(self.kind().cmp(other.kind()))
          .               }
          .           }
-- line 450 ----------------------------------------
-- line 509 ----------------------------------------
          .           #[derive(Clone, Copy, Lift)]
          .           pub struct Predicate<'tcx> {
          .               inner: &'tcx PredicateInner<'tcx>,
          .           }
          .           
          .           impl<'tcx> PartialEq for Predicate<'tcx> {
          .               fn eq(&self, other: &Self) -> bool {
          .                   // `self.kind` is always interned.
  9,363,033 ( 0.07%)          ptr::eq(self.inner, other.inner)
  8,006,011 ( 0.06%)      }
          .           }
          .           
          .           impl Hash for Predicate<'_> {
          .               fn hash<H: Hasher>(&self, s: &mut H) {
          .                   (self.inner as *const PredicateInner<'_>).hash(s)
          .               }
          .           }
          .           
          .           impl<'tcx> Eq for Predicate<'tcx> {}
          .           
          .           impl<'tcx> Predicate<'tcx> {
          .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
          .               #[inline]
          .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 58,963,379 ( 0.43%)          self.inner.kind
          .               }
          .           
          .               /// Flips the polarity of a Predicate.
          .               ///
          .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
          .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
          .                   let kind = self
          .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
          .                       flags: _,
          .                       outer_exclusive_binder: _,
          .                   } = self.inner;
          .           
          .                   kind.hash_stable(hcx, hasher);
          .               }
          .           }
          .           
 95,594,599 ( 0.69%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
175,091,110 ( 1.26%)  #[derive(HashStable, TypeFoldable)]
          .           pub enum PredicateKind<'tcx> {
          .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
          .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
          .               /// would be the type parameters.
          .               Trait(TraitPredicate<'tcx>),
          .           
          .               /// `where 'a: 'b`
          .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
          .               WellFormed(GenericArg<'tcx>),
          .           
          .               /// Trait must be object-safe.
          .               ObjectSafe(DefId),
          .           
          .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
          .               /// for some substitutions `...` and `T` being a closure type.
          .               /// Satisfied (or refuted) once we know the closure's kind.
      5,472 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
          .           
          .               /// `T1 <: T2`
          .               ///
          .               /// This obligation is created most often when we have two
          .               /// unresolved type variables and hence don't have enough
          .               /// information to process the subtyping obligation yet.
      2,459 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
          .           
          .               /// `T1` coerced to `T2`
          .               ///
          .               /// Like a subtyping obligation, this is created most often
          .               /// when we have two unresolved type variables and hence
          .               /// don't have enough information to process the coercion
          .               /// obligation yet. At the moment, we actually process coercions
          .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> Predicate<'tcx> {
          .               /// Performs a substitution suitable for going from a
          .               /// poly-trait-ref to supertraits that must hold if that
          .               /// poly-trait-ref holds. This is slightly different from a normal
          .               /// substitution in terms of what happens with bound regions. See
          .               /// lengthy comment below for details.
  3,256,713 ( 0.02%)      pub fn subst_supertrait(
          .                   self,
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_ref: &ty::PolyTraitRef<'tcx>,
          .               ) -> Predicate<'tcx> {
          .                   // The interaction between HRTB and supertraits is not entirely
          .                   // obvious. Let me walk you (and myself) through an example.
          .                   //
          .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
          .                   //    ['x, 'b]
          .                   let bound_pred = self.kind();
          .                   let pred_bound_vars = bound_pred.bound_vars();
          .                   let trait_bound_vars = trait_ref.bound_vars();
          .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
          .                   let shifted_pred =
          .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
          .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    361,857 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
          .                   // 3) ['x] + ['b] -> ['x, 'b]
          .                   let bound_vars =
          .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
  3,256,713 ( 0.02%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
  2,532,999 ( 0.02%)      }
          .           }
          .           
    759,917 ( 0.01%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 13,993,650 ( 0.10%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct TraitPredicate<'tcx> {
          .               pub trait_ref: TraitRef<'tcx>,
          .           
 11,112,303 ( 0.08%)      pub constness: BoundConstness,
          .           
 20,776,803 ( 0.15%)      pub polarity: ImplPolarity,
          .           }
          .           
          .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
          .           
          .           impl<'tcx> TraitPredicate<'tcx> {
  3,060,632 ( 0.02%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
  2,678,615 ( 0.02%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
          .                       // remap without changing constness of this predicate.
          .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
        562 ( 0.00%)              param_env.remap_constness_with(self.constness)
          .                   } else {
    382,298 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
          .                   }
  2,295,474 ( 0.02%)      }
          .           
          .               /// Remap the constness of this predicate before emitting it for diagnostics.
          .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
          .                   // this is different to `remap_constness` that callees want to print this predicate
          .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
          .                   // param_env is not const because we it is always satisfied in non-const contexts.
          .                   if let hir::Constness::NotConst = param_env.constness() {
          .                       self.constness = ty::BoundConstness::NotConst;
          .                   }
          .               }
          .           
          .               pub fn def_id(self) -> DefId {
  1,033,542 ( 0.01%)          self.trait_ref.def_id
    516,771 ( 0.00%)      }
          .           
    428,475 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
  1,285,425 ( 0.01%)          self.trait_ref.self_ty()
    856,950 ( 0.01%)      }
          .           }
          .           
          .           impl<'tcx> PolyTraitPredicate<'tcx> {
          .               pub fn def_id(self) -> DefId {
          .                   // Ok to skip binder since trait `DefId` does not care about regions.
          .                   self.skip_binder().def_id()
  5,229,037 ( 0.04%)      }
          .           
        199 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
        796 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
        398 ( 0.00%)      }
          .           
          .               /// Remap the constness of this predicate before emitting it for diagnostics.
          .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
          .                   *self = self.map_bound(|mut p| {
          .                       p.remap_constness_diag(param_env);
          .                       p
          .                   });
          .               }
          .           }
          .           
        618 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    157,904 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
    175,875 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
          .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
          .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
          .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
          .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
          .           
          .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
          .           /// whether the `a` type is the type that we should label as "expected" when
          .           /// presenting user diagnostics.
          .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      5,497 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct SubtypePredicate<'tcx> {
     11,905 ( 0.00%)      pub a_is_expected: bool,
          .               pub a: Ty<'tcx>,
          .               pub b: Ty<'tcx>,
          .           }
          .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
          .           
          .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
          .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        169 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct CoercePredicate<'tcx> {
          .               pub a: Ty<'tcx>,
          .               pub b: Ty<'tcx>,
          .           }
          .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
          .           
 10,060,368 ( 0.07%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
  6,686,972 ( 0.05%)  #[derive(HashStable, TypeFoldable)]
          .           pub enum Term<'tcx> {
        839 ( 0.00%)      Ty(Ty<'tcx>),
          .               Const(&'tcx Const<'tcx>),
          .           }
          .           
          .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
          .               fn from(ty: Ty<'tcx>) -> Self {
          .                   Term::Ty(ty)
     16,086 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
          .               fn from(c: &'tcx Const<'tcx>) -> Self {
          .                   Term::Const(c)
          .               }
          .           }
          .           
          .           impl<'tcx> Term<'tcx> {
          .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    262,504 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    131,252 ( 0.00%)      }
          .           }
          .           
          .           /// This kind of predicate has no *direct* correspondent in the
          .           /// syntax, but it roughly corresponds to the syntactic forms:
          .           ///
          .           /// 1. `T: TraitRef<..., Item = Type>`
          .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
          .           ///
          .           /// In particular, form #1 is "desugared" to the combination of a
          .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
          .           /// predicates. Form #2 is a broader form in that it also permits
          .           /// equality between arbitrary types. Processing an instance of
          .           /// Form #2 eventually yields one of these `ProjectionPredicate`
          .           /// instances to normalize the LHS.
      2,128 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    797,531 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ProjectionPredicate<'tcx> {
          .               pub projection_ty: ProjectionTy<'tcx>,
  7,728,562 ( 0.06%)      pub term: Term<'tcx>,
          .           }
          .           
          .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
          .           
          .           impl<'tcx> PolyProjectionPredicate<'tcx> {
          .               /// Returns the `DefId` of the trait of the associated item being projected.
          .               #[inline]
          .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      1,332 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
          .               }
          .           
          .               /// Get the [PolyTraitRef] required for this projection to be well formed.
          .               /// Note that for generic associated types the predicates of the associated
          .               /// type also need to be checked.
          .               #[inline]
          .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
          .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
          .                   // `self.0.trait_ref` is permitted to have escaping regions.
          .                   // This is because here `self` has a `Binder` and so does our
          .                   // return value, so we are preserving the number of binding
          .                   // levels.
        737 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
          .               }
          .           
          .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
          .                   self.map_bound(|predicate| predicate.term)
          .               }
          .           
          .               /// The `DefId` of the `TraitItem` for the associated type.
          .               ///
          .               /// Note that this is not the `DefId` of the `TraitRef` containing this
          .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
          .               pub fn projection_def_id(&self) -> DefId {
          .                   // Ok to skip binder since trait `DefId` does not care about regions.
  2,288,170 ( 0.02%)          self.skip_binder().projection_ty.item_def_id
  1,144,085 ( 0.01%)      }
          .           }
          .           
          .           pub trait ToPolyTraitRef<'tcx> {
          .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
          .           }
          .           
          .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    311,557 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    311,557 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    311,557 ( 0.00%)      }
          .           }
          .           
          .           pub trait ToPredicate<'tcx> {
          .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
          .           }
          .           
          .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
          .               #[inline(always)]
          .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
          .                   tcx.mk_predicate(self)
          .               }
          .           }
          .           
          .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
     78,633 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    393,165 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    157,266 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
          .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
          .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
          .               }
          .           }
          .           
          .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
        135 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        270 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
        270 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      3,571 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     17,855 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      7,142 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Predicate<'tcx> {
  6,870,224 ( 0.05%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
          .                   let predicate = self.kind();
 20,610,672 ( 0.15%)          match predicate.skip_binder() {
 12,528,755 ( 0.09%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
          .                       PredicateKind::Projection(..)
          .                       | PredicateKind::Subtype(..)
          .                       | PredicateKind::Coerce(..)
          .                       | PredicateKind::RegionOutlives(..)
          .                       | PredicateKind::WellFormed(..)
          .                       | PredicateKind::ObjectSafe(..)
          .                       | PredicateKind::ClosureKind(..)
          .                       | PredicateKind::TypeOutlives(..)
          .                       | PredicateKind::ConstEvaluatable(..)
          .                       | PredicateKind::ConstEquate(..)
    929,361 ( 0.01%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
          .                   }
  6,870,224 ( 0.05%)      }
          .           
  1,492,321 ( 0.01%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
          .                   let predicate = self.kind();
  2,984,642 ( 0.02%)          match predicate.skip_binder() {
      7,938 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
          .                       PredicateKind::Trait(..)
          .                       | PredicateKind::Projection(..)
          .                       | PredicateKind::Subtype(..)
          .                       | PredicateKind::Coerce(..)
          .                       | PredicateKind::RegionOutlives(..)
          .                       | PredicateKind::WellFormed(..)
          .                       | PredicateKind::ObjectSafe(..)
          .                       | PredicateKind::ClosureKind(..)
          .                       | PredicateKind::ConstEvaluatable(..)
          .                       | PredicateKind::ConstEquate(..)
  1,489,675 ( 0.01%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
          .                   }
  1,492,321 ( 0.01%)      }
          .           }
          .           
          .           /// Represents the bounds declared on a particular set of type
          .           /// parameters. Should eventually be generalized into a flag list of
          .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
          .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
          .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
          .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
          .           /// Example:
          .           ///
          .           ///     struct Foo<T, U: Bar<T>> { ... }
          .           ///
          .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
          .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
          .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
          .           /// [usize:Bar<isize>]]`.
    342,694 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
          .           pub struct InstantiatedPredicates<'tcx> {
          .               pub predicates: Vec<Predicate<'tcx>>,
          .               pub spans: Vec<Span>,
          .           }
          .           
          .           impl<'tcx> InstantiatedPredicates<'tcx> {
        687 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
    202,766 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
        687 ( 0.00%)      }
          .           
          .               pub fn is_empty(&self) -> bool {
          .                   self.predicates.is_empty()
        739 ( 0.00%)      }
          .           }
          .           
         21 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
          .           pub struct OpaqueTypeKey<'tcx> {
          .               pub def_id: DefId,
          .               pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           rustc_index::newtype_index! {
          .               /// "Universes" are used during type- and trait-checking in the
          .               /// presence of `for<..>` binders to control what sets of names are
-- line 1043 ----------------------------------------
-- line 1091 ----------------------------------------
          .               /// ```
          .               /// for<'a> fn(&'a u32)
          .               /// ```
          .               ///
          .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
          .               /// new universe that extends `U` -- in this new universe, we can
          .               /// name the region `'a`, but that region was not nameable from
          .               /// `U` because it was not in scope there.
    505,322 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
          .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
  1,515,966 ( 0.01%)      }
          .           
          .               /// Returns `true` if `self` can name a name from `other` -- in other words,
          .               /// if the set of names in `self` is a superset of those in
          .               /// `other` (`self >= other`).
          .               pub fn can_name(self, other: UniverseIndex) -> bool {
    207,732 ( 0.00%)          self.private >= other.private
    103,866 ( 0.00%)      }
          .           
          .               /// Returns `true` if `self` cannot name some names from `other` -- in other
          .               /// words, if the set of names in `self` is a strict subset of
          .               /// those in `other` (`self < other`).
          .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     23,390 ( 0.00%)          self.private < other.private
     11,695 ( 0.00%)      }
          .           }
          .           
          .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
          .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
          .           /// regions/types/consts within the same universe simply have an unknown relationship to one
          .           /// another.
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
          .           pub struct Placeholder<T> {
    153,350 ( 0.00%)      pub universe: UniverseIndex,
     79,393 ( 0.00%)      pub name: T,
          .           }
          .           
          .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
          .           where
          .               T: HashStable<StableHashingContext<'a>>,
          .           {
          .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
          .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
          .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
          .           /// trivial to compute.
          .           ///
          .           /// If we now want to use that constant in a place which potentionally needs its type
          .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
          .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
          .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
          .           /// to get the type of `did`.
      4,415 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
          .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
          .           #[derive(Hash, HashStable)]
          .           pub struct WithOptConstParam<T> {
     25,441 ( 0.00%)      pub did: T,
          .               /// The `DefId` of the corresponding generic parameter in case `did` is
          .               /// a const argument.
          .               ///
          .               /// Note that even if `did` is a const argument, this may still be `None`.
          .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
          .               /// to potentially update `param_did` in the case it is `None`.
     38,722 ( 0.00%)      pub const_param_did: Option<DefId>,
          .           }
          .           
          .           impl<T> WithOptConstParam<T> {
          .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
          .               #[inline(always)]
          .               pub fn unknown(did: T) -> WithOptConstParam<T> {
          .                   WithOptConstParam { did, const_param_did: None }
     51,368 ( 0.00%)      }
          .           }
          .           
          .           impl WithOptConstParam<LocalDefId> {
          .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
          .               /// `None` otherwise.
          .               #[inline(always)]
          .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
          .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
          .               }
          .           
          .               /// In case `self` is unknown but `self.did` is a const argument, this returns
          .               /// a `WithOptConstParam` with the correct `const_param_did`.
          .               #[inline(always)]
          .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
      7,803 ( 0.00%)          if self.const_param_did.is_none() {
     12,803 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
          .                           return Some(WithOptConstParam { did: self.did, const_param_did });
          .                       }
          .                   }
          .           
          .                   None
          .               }
          .           
          .               pub fn to_global(self) -> WithOptConstParam<DefId> {
          .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
        178 ( 0.00%)      }
          .           
      1,208 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      3,306 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        302 ( 0.00%)      }
          .           }
          .           
          .           impl WithOptConstParam<DefId> {
      5,172 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
          .                   self.did
          .                       .as_local()
          .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
      5,172 ( 0.00%)      }
          .           
          .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
     10,256 ( 0.00%)          if let Some(param_did) = self.const_param_did {
      4,821 ( 0.00%)              if let Some(did) = self.did.as_local() {
          .                           return Some((did, param_did));
          .                       }
          .                   }
          .           
          .                   None
      1,608 ( 0.00%)      }
          .           
          .               pub fn is_local(self) -> bool {
          .                   self.did.is_local()
          .               }
          .           
      1,821 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
          .                   self.const_param_did.unwrap_or(self.did)
      1,821 ( 0.00%)      }
          .           }
          .           
          .           /// When type checking, we use the `ParamEnv` to track
          .           /// details about the set of where-clauses that are in scope at this
          .           /// particular point.
          .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
          .           pub struct ParamEnv<'tcx> {
          .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
          .               reveal: traits::Reveal,
          .               constness: hir::Constness,
          .           }
          .           
          .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
          .               const BITS: usize = 2;
          .               #[inline]
          .               fn into_usize(self) -> usize {
    418,032 ( 0.00%)          match self {
          .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
          .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
          .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
          .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
          .                   }
          .               }
          .               #[inline]
          .               unsafe fn from_usize(ptr: usize) -> Self {
  6,396,155 ( 0.05%)          match ptr {
          .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
          .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
          .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
          .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
          .                       _ => std::hint::unreachable_unchecked(),
          .                   }
          .               }
          .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
          .               pub fn new(
          .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
          .                   reveal: Reveal,
          .                   constness: hir::Constness,
          .               ) -> Self {
          .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
          .               }
          .           
         86 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
          .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
          .                   self
         86 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
          .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
          .                   self
          .               }
          .           
          .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
          .               #[inline]
          .               pub fn without_const(mut self) -> Self {
          .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
          .                   self
          .               }
          .           
          .               #[inline]
          .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    144,969 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
          .               }
          .           
          .               /// Returns a new parameter environment with the same clauses, but
          .               /// which "reveals" the true results of projections in all cases
          .               /// (even for associated types that are specializable). This is
          .               /// the desired behavior during codegen and certain other special
          .               /// contexts; normally though we want to use `Reveal::UserFacing`,
          .               /// which is the default.
          .               /// All opaque types in the caller_bounds of the `ParamEnv`
          .               /// will be normalized to their underlying types.
          .               /// See PR #65989 and issue #65918 for more details
     15,480 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
          .                   if self.packed.tag().reveal == traits::Reveal::All {
          .                       return self;
          .                   }
          .           
          .                   ParamEnv::new(
          .                       tcx.normalize_opaque_types(self.caller_bounds()),
          .                       Reveal::All,
          .                       self.constness(),
          .                   )
     17,415 ( 0.00%)      }
          .           
          .               /// Returns this same environment but with no caller bounds.
          .               #[inline]
          .               pub fn without_caller_bounds(self) -> Self {
          .                   Self::new(List::empty(), self.reveal(), self.constness())
          .               }
          .           
          .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
          .               /// pair it with the empty environment. This improves caching and is generally
          .               /// invisible.
          .               ///
          .               /// N.B., we preserve the environment when type-checking because it
          .               /// is possible for the user to have wacky where-clauses like
          .               /// `where Box<u32>: Copy`, which are clearly never
          .               /// satisfiable. We generally want to behave as if they were true,
          .               /// although the surrounding function is never reachable.
    642,246 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
          .                   match self.reveal() {
          .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
          .           
          .                       Reveal::All => {
      3,200 ( 0.00%)                  if value.is_global() {
          .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
          .                           } else {
          .                               ParamEnvAnd { param_env: self, value }
          .                           }
          .                       }
          .                   }
    623,848 ( 0.00%)      }
          .           }
          .           
          .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
          .           // the constness of trait bounds is being propagated correctly.
          .           impl<'tcx> PolyTraitRef<'tcx> {
          .               #[inline]
          .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
     79,762 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
          .                       trait_ref,
          .                       constness,
          .                       polarity: ty::ImplPolarity::Positive,
          .                   })
          .               }
          .               #[inline]
          .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
          .                   self.with_constness(BoundConstness::NotConst)
          .               }
          .           }
          .           
     11,277 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
          .           pub struct ParamEnvAnd<'tcx, T> {
    263,414 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
  3,254,197 ( 0.02%)      pub value: T,
          .           }
          .           
          .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
          .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
          .                   (self.param_env, self.value)
          .               }
          .           
          .               #[inline]
          .               pub fn without_const(mut self) -> Self {
          .                   self.param_env = self.param_env.without_const();
     14,653 ( 0.00%)          self
          .               }
          .           }
          .           
          .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
          .           where
          .               T: HashStable<StableHashingContext<'a>>,
          .           {
          .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
          .           #[derive(Copy, Clone, Debug, HashStable)]
          .           pub struct Destructor {
          .               /// The `DefId` of the destructor method
          .               pub did: DefId,
          .               /// The constness of the destructor method
          .               pub constness: hir::Constness,
          .           }
          .           
      5,331 ( 0.00%)  bitflags! {
     10,989 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
          .               pub struct VariantFlags: u32 {
          .                   const NO_VARIANT_FLAGS        = 0;
          .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
          .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
          .                   /// Indicates whether this variant was obtained as part of recovering from
          .                   /// a syntactic error. May be incomplete or bogus.
          .                   const IS_RECOVERED = 1 << 1;
          .               }
          .           }
          .           
          .           /// Definition of a variant -- a struct's fields or an enum variant.
    158,413 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
          .           pub struct VariantDef {
          .               /// `DefId` that identifies the variant itself.
          .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
          .               pub def_id: DefId,
          .               /// `DefId` that identifies the variant's constructor.
          .               /// If this variant is a struct variant, then this is `None`.
          .               pub ctor_def_id: Option<DefId>,
          .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
          .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
          .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
          .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
          .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
          .               /// built-in trait), and we do not want to load attributes twice.
          .               ///
          .               /// If someone speeds up attribute loading to not be a performance concern, they can
          .               /// remove this hack and use the constructor `DefId` everywhere.
      1,096 ( 0.00%)      pub fn new(
          .                   name: Symbol,
          .                   variant_did: Option<DefId>,
          .                   ctor_def_id: Option<DefId>,
          .                   discr: VariantDiscr,
          .                   fields: Vec<FieldDef>,
          .                   ctor_kind: CtorKind,
          .                   adt_kind: AdtKind,
          .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
          .               ) -> Self {
          .                   debug!(
          .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
          .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
          .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
          .                   );
          .           
          .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
        137 ( 0.00%)          if is_field_list_non_exhaustive {
          .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
          .                   }
          .           
        411 ( 0.00%)          if recovered {
          .                       flags |= VariantFlags::IS_RECOVERED;
          .                   }
          .           
      1,233 ( 0.00%)          VariantDef {
          .                       def_id: variant_did.unwrap_or(parent_did),
          .                       ctor_def_id,
          .                       name,
          .                       discr,
        548 ( 0.00%)              fields,
          .                       ctor_kind,
          .                       flags,
          .                   }
        548 ( 0.00%)      }
          .           
          .               /// Is this field list non-exhaustive?
          .               #[inline]
          .               pub fn is_field_list_non_exhaustive(&self) -> bool {
          .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
          .               }
          .           
          .               /// Was this variant obtained as part of recovering from a syntactic error?
          .               #[inline]
          .               pub fn is_recovered(&self) -> bool {
          .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
          .               }
          .           
          .               /// Computes the `Ident` of this variant by looking up the `Span`
      5,019 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
      2,868 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
      6,453 ( 0.00%)      }
          .           }
          .           
     90,060 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
          .           pub enum VariantDiscr {
          .               /// Explicit value for this variant, i.e., `X = 123`.
          .               /// The `DefId` corresponds to the embedded constant.
          .               Explicit(DefId),
          .           
          .               /// The previous variant's discriminant plus one.
          .               /// For efficiency reasons, the distance from the
          .               /// last `Explicit` discriminant is being stored,
          .               /// or `0` for the first variant, if it has none.
          .               Relative(u32),
          .           }
          .           
    223,091 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
          .           pub struct FieldDef {
          .               pub did: DefId,
          .               pub name: Symbol,
          .               pub vis: Visibility,
          .           }
          .           
        298 ( 0.00%)  bitflags! {
          .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
          .               pub struct ReprFlags: u8 {
          .                   const IS_C               = 1 << 0;
          .                   const IS_SIMD            = 1 << 1;
          .                   const IS_TRANSPARENT     = 1 << 2;
          .                   // Internal only for now. If true, don't reorder fields.
          .                   const IS_LINEAR          = 1 << 3;
          .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
          .                   // Any of these flags being set prevent field reordering optimisation.
          .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
          .                                            | ReprFlags::IS_SIMD.bits
          .                                            | ReprFlags::IS_LINEAR.bits;
          .               }
          .           }
          .           
          .           /// Represents the repr options provided by the user,
    133,590 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
          .           pub struct ReprOptions {
          .               pub int: Option<attr::IntType>,
          .               pub align: Option<Align>,
          .               pub pack: Option<Align>,
          .               pub flags: ReprFlags,
          .               /// The seed to be used for randomizing a type's layout
          .               ///
          .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
          .               /// be the "most accurate" hash as it'd encompass the item and crate
          .               /// hash without loss, but it does pay the price of being larger.
          .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
          .               /// purposes (primarily `-Z randomize-layout`)
          .               pub field_shuffle_seed: u64,
          .           }
          .           
          .           impl ReprOptions {
        845 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
          .                   let mut flags = ReprFlags::empty();
          .                   let mut size = None;
          .                   let mut max_align: Option<Align> = None;
          .                   let mut min_pack: Option<Align> = None;
          .           
          .                   // Generate a deterministically-derived seed from the item's path hash
          .                   // to allow for cross-crate compilation to actually work
          .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
          .           
          .                   // If the user defined a custom seed for layout randomization, xor the item's
          .                   // path hash with the user defined seed, this will allowing determinism while
          .                   // still allowing users to further randomize layout generation for e.g. fuzzing
        195 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
          .                       field_shuffle_seed ^= user_seed;
          .                   }
          .           
        260 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
      6,707 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
          .                           flags.insert(match r {
          .                               attr::ReprC => ReprFlags::IS_C,
          .                               attr::ReprPacked(pack) => {
          .                                   let pack = Align::from_bytes(pack as u64).unwrap();
          .                                   min_pack = Some(if let Some(min_pack) = min_pack {
          .                                       min_pack.min(pack)
          .                                   } else {
          .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
          .                                   ReprFlags::empty()
          .                               }
          .                           });
          .                       }
          .                   }
          .           
          .                   // If `-Z randomize-layout` was enabled for the type definition then we can
          .                   // consider performing layout randomization
        520 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
          .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
          .                   }
          .           
          .                   // This is here instead of layout because the choice must make it into metadata.
        390 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
          .                       flags.insert(ReprFlags::IS_LINEAR);
          .                   }
          .           
        130 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
      1,820 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn simd(&self) -> bool {
          .                   self.flags.contains(ReprFlags::IS_SIMD)
          .               }
          .           
          .               #[inline]
          .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
          .               #[inline]
          .               pub fn hide_niche(&self) -> bool {
          .                   self.flags.contains(ReprFlags::HIDE_NICHE)
          .               }
          .           
          .               /// Returns the discriminant type, given these `repr` options.
          .               /// This must only be called on enums!
          .               pub fn discr_type(&self) -> attr::IntType {
      1,640 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
      1,005 ( 0.00%)      }
          .           
          .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
          .               /// layout" optimizations, such as representing `Foo<&T>` as a
          .               /// single pointer.
          .               pub fn inhibit_enum_layout_opt(&self) -> bool {
         35 ( 0.00%)          self.c() || self.int.is_some()
          .               }
          .           
          .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
          .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
          .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
         51 ( 0.00%)          if let Some(pack) = self.pack {
          .                       if pack.bytes() == 1 {
          .                           return true;
          .                       }
          .                   }
          .           
        104 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
          .               }
          .           
          .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
          .               /// was enabled for its declaration crate
          .               pub fn can_randomize_type_layout(&self) -> bool {
         25 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
          .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
          .               }
          .           
          .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
          .               pub fn inhibit_union_abi_opt(&self) -> bool {
          .                   self.c()
          .               }
          .           }
          .           
          .           impl<'tcx> FieldDef {
          .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
          .               /// typically obtained via the second field of [`TyKind::Adt`].
     97,118 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
     27,748 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
    110,992 ( 0.00%)      }
          .           
          .               /// Computes the `Ident` of this variant by looking up the `Span`
     28,994 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     16,568 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
     37,278 ( 0.00%)      }
          .           }
          .           
          .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
          .           
          .           #[derive(Debug, PartialEq, Eq)]
          .           pub enum ImplOverlapKind {
          .               /// These impls are always allowed to overlap.
          .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
          .               /// marker traits.
          .               /// 4. Neither of the impls can have any where-clauses.
          .               ///
          .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
          .               Issue33140,
          .           }
          .           
          .           impl<'tcx> TyCtxt<'tcx> {
    116,728 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
     29,182 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    116,728 ( 0.00%)      }
          .           
          .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
          .                   self.associated_items(id)
          .                       .in_definition_order()
          .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
          .               }
          .           
          .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
          .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
          .               }
          .           
        180 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
         20 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
          .                       Some(self.crate_name(def_id.krate))
          .                   } else {
         60 ( 0.00%)              let def_key = self.def_key(def_id);
        100 ( 0.00%)              match def_key.disambiguated_data.data {
          .                           // The name of a constructor is that of its parent.
          .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
          .                               krate: def_id.krate,
          .                               index: def_key.parent.unwrap(),
          .                           }),
         40 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
          .                       }
          .                   }
        160 ( 0.00%)      }
          .           
          .               /// Look up the name of an item across crates. This does not look at HIR.
          .               ///
          .               /// When possible, this function should be used for cross-crate lookups over
          .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
          .               /// need to handle items without a name, or HIR items that will not be
          .               /// serialized cross-crate, or if you need the span of the item, use
          .               /// [`opt_item_name`] instead.
          .               ///
          .               /// [`opt_item_name`]: Self::opt_item_name
        140 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
          .                   // Look at cross-crate items first to avoid invalidating the incremental cache
          .                   // unless we have to.
         20 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
          .                       bug!("item_name: no name for {:?}", self.def_path(id));
          .                   })
        100 ( 0.00%)      }
          .           
          .               /// Look up the name and span of an item or [`Node`].
          .               ///
          .               /// See [`item_name`][Self::item_name] for more information.
          .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
          .                   // Look at the HIR first so the span will be correct if this is a local item.
          .                   self.item_name_from_hir(def_id)
          .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
          .               }
          .           
  1,181,120 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
    472,448 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
          .                       Some(self.associated_item(def_id))
          .                   } else {
          .                       None
          .                   }
  1,063,008 ( 0.01%)      }
          .           
      4,840 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
          .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
      9,680 ( 0.00%)      }
          .           
         54 ( 0.00%)      pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
          .                   variant
          .                       .fields
          .                       .iter()
        198 ( 0.00%)              .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         54 ( 0.00%)      }
          .           
          .               /// Returns `true` if the impls are the same polarity and the trait either
          .               /// has no items or is annotated `#[marker]` and prevents item overrides.
     57,370 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
          .                   self,
          .                   def_id1: DefId,
          .                   def_id2: DefId,
          .               ) -> Option<ImplOverlapKind> {
          .                   // If either trait impl references an error, they're allowed to overlap,
          .                   // as one of them essentially doesn't exist.
          .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     11,474 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
          .                   {
          .                       return Some(ImplOverlapKind::Permitted { marker: false });
          .                   }
          .           
     57,370 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
          .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
          .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
          .                           debug!(
          .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
          .                               def_id1, def_id2
          .                           );
          .                           return Some(ImplOverlapKind::Permitted { marker: false });
          .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
          .                           );
          .                           return None;
          .                       }
          .                       (ImplPolarity::Positive, ImplPolarity::Positive)
          .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
          .                   };
          .           
          .                   let is_marker_overlap = {
     57,370 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     17,211 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     17,211 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
     45,896 ( 0.00%)              };
     22,948 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
          .                   };
          .           
          .                   if is_marker_overlap {
          .                       debug!(
          .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
          .                           def_id1, def_id2
          .                       );
          .                       Some(ImplOverlapKind::Permitted { marker: true })
          .                   } else {
     22,948 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
          .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
          .                               if self_ty1 == self_ty2 {
          .                                   debug!(
          .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
          .                                       def_id1, def_id2
          .                                   );
          .                                   return Some(ImplOverlapKind::Issue33140);
          .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
          .                                   );
          .                               }
          .                           }
          .                       }
          .           
          .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
          .                       None
          .                   }
     45,896 ( 0.00%)      }
          .           
          .               /// Returns `ty::VariantDef` if `res` refers to a struct,
          .               /// or variant or their constructors, panics otherwise.
      1,659 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
      2,844 ( 0.00%)          match res {
          .                       Res::Def(DefKind::Variant, did) => {
          .                           let enum_did = self.parent(did).unwrap();
          .                           self.adt_def(enum_did).variant_with_id(did)
          .                       }
          .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
          .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
          .                           let variant_did = self.parent(variant_ctor_did).unwrap();
          .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
          .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
          .                       }
          .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
          .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
          .                           self.adt_def(struct_did).non_enum_variant()
          .                       }
          .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
          .                   }
      1,896 ( 0.00%)      }
          .           
          .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
          .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
          .                   match instance {
          .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
          .                           DefKind::Const
          .                           | DefKind::Static
          .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
          .                       | ty::InstanceDef::Virtual(..)
          .                       | ty::InstanceDef::ClosureOnceShim { .. }
          .                       | ty::InstanceDef::DropGlue(..)
          .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
          .                   }
          .               }
          .           
          .               /// Gets the attributes of a definition.
    803,500 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
    241,050 ( 0.00%)          if let Some(did) = did.as_local() {
    223,254 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
          .                   } else {
          .                       self.item_attrs(did)
          .                   }
    642,800 ( 0.00%)      }
          .           
          .               /// Determines whether an item is annotated with an attribute.
     84,956 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
    258,381 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
          .               }
          .           
          .               /// Determines whether an item is annotated with `doc(hidden)`.
      3,619 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
        517 ( 0.00%)          self.get_attrs(did)
          .                       .iter()
        284 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         42 ( 0.00%)              .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
      4,136 ( 0.00%)      }
          .           
          .               /// Returns `true` if this is an `auto trait`.
     79,478 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
     11,354 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
     90,832 ( 0.00%)      }
          .           
          .               /// Returns layout of a generator. Layout might be unavailable if the
          .               /// generator is tainted by errors.
          .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
          .                   self.optimized_mir(def_id).generator_layout()
          .               }
          .           
          .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
          .               /// If it implements no trait, returns `None`.
     66,969 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
          .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
     86,103 ( 0.00%)      }
          .           
          .               /// If the given defid describes a method belonging to an impl, returns the
          .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
      2,486 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
      9,944 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
          .                       TraitContainer(_) => None,
          .                       ImplContainer(def_id) => Some(def_id),
          .                   })
      4,972 ( 0.00%)      }
          .           
          .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
          .               /// with the name of the crate containing the impl.
          .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
          .                   if let Some(impl_did) = impl_did.as_local() {
          .                       Ok(self.def_span(impl_did))
          .                   } else {
          .                       Err(self.crate_name(impl_did.krate))
          .                   }
          .               }
          .           
          .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
          .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
          .               /// definition's parent/scope to perform comparison.
    133,376 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
          .                   // We could use `Ident::eq` here, but we deliberately don't. The name
          .                   // comparison fails frequently, and we want to avoid the expensive
          .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
     16,672 ( 0.00%)          use_name.name == def_name.name
     49,746 ( 0.00%)              && use_name
          .                           .span
          .                           .ctxt()
          .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    133,376 ( 0.00%)      }
          .           
      8,424 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      1,872 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      1,872 ( 0.00%)          ident
      7,488 ( 0.00%)      }
          .           
    130,716 ( 0.00%)      pub fn adjust_ident_and_get_scope(
          .                   self,
          .                   mut ident: Ident,
          .                   scope: DefId,
          .                   block: hir::HirId,
          .               ) -> (Ident, DefId) {
     14,524 ( 0.00%)          let scope = ident
          .                       .span
          .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         28 ( 0.00%)              .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
     58,040 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
     87,144 ( 0.00%)          (ident, scope)
    130,716 ( 0.00%)      }
          .           
        847 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
          .                   self.object_safety_violations(key).is_empty()
        968 ( 0.00%)      }
          .           }
          .           
          .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
     21,444 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
     21,444 ( 0.00%)      let def_id = def_id.as_local()?;
     23,608 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
      5,292 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        358 ( 0.00%)              return match opaque_ty.origin {
          .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
          .                               Some(parent)
          .                           }
          .                           hir::OpaqueTyOrigin::TyAlias => None,
          .                       };
          .                   }
          .               }
          .               None
     28,592 ( 0.00%)  }
          .           
          .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
          .               match ity {
          .                   ast::IntTy::Isize => IntTy::Isize,
          .                   ast::IntTy::I8 => IntTy::I8,
          .                   ast::IntTy::I16 => IntTy::I16,
          .                   ast::IntTy::I32 => IntTy::I32,
          .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
          .                   ast::UintTy::U8 => UintTy::U8,
          .                   ast::UintTy::U16 => UintTy::U16,
          .                   ast::UintTy::U32 => UintTy::U32,
          .                   ast::UintTy::U64 => UintTy::U64,
          .                   ast::UintTy::U128 => UintTy::U128,
          .               }
          .           }
          .           
        290 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
          .               match fty {
          .                   ast::FloatTy::F32 => FloatTy::F32,
          .                   ast::FloatTy::F64 => FloatTy::F64,
          .               }
        290 ( 0.00%)  }
          .           
      3,548 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
          .               match ity {
          .                   IntTy::Isize => ast::IntTy::Isize,
          .                   IntTy::I8 => ast::IntTy::I8,
          .                   IntTy::I16 => ast::IntTy::I16,
          .                   IntTy::I32 => ast::IntTy::I32,
          .                   IntTy::I64 => ast::IntTy::I64,
          .                   IntTy::I128 => ast::IntTy::I128,
          .               }
      3,548 ( 0.00%)  }
          .           
          .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
          .               match uty {
          .                   UintTy::Usize => ast::UintTy::Usize,
          .                   UintTy::U8 => ast::UintTy::U8,
          .                   UintTy::U16 => ast::UintTy::U16,
          .                   UintTy::U32 => ast::UintTy::U32,
          .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
          .               closure::provide(providers);
          .               context::provide(providers);
          .               erase_regions::provide(providers);
          .               layout::provide(providers);
          .               util::provide(providers);
          .               print::provide(providers);
          .               super::util::bug::provide(providers);
          .               super::middle::provide(providers);
          8 ( 0.00%)      *providers = ty::query::Providers {
          .                   trait_impls_of: trait_def::trait_impls_of_provider,
          .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
          .                   const_param_default: consts::const_param_default,
          .                   vtable_allocation: vtable::vtable_allocation_provider,
          .                   ..*providers
          .               };
          1 ( 0.00%)  }
          .           
          .           /// A map for the local crate mapping each type to a vector of its
          .           /// inherent impls. This is not meant to be used outside of coherence;
          .           /// rather, you should request the vector for a specific type via
          .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
          .           /// (constructing this map requires touching the entire crate).
          .           #[derive(Clone, Debug, Default, HashStable)]
          .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
          .           pub struct SymbolName<'tcx> {
          .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
          .               pub name: &'tcx str,
          .           }
          .           
          .           impl<'tcx> SymbolName<'tcx> {
          6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
          .                   SymbolName {
          .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
          .                   }
          8 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
          .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   fmt::Display::fmt(&self.name, fmt)
          .               }
          .           }
          .           
-- line 2308 ----------------------------------------

116,807,756 ( 0.84%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   217,587 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   235,350 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   505,446 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    48,602 ( 0.00%)          i += 2
         .               }
         .           
   235,350 ( 0.00%)      if i < count {
   186,142 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 3,209,745 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
21,591,001 ( 0.16%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 6,684,027 ( 0.05%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
 1,090,823 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   332,984 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   332,984 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 3,329,840 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 2,663,872 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 2,996,856 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 1,562,516 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 1,331,936 ( 0.01%)          self.processed += BUFFER_SIZE;
   665,968 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    27,611 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   674,583 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   244,782 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
   125,146 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    80,473 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    48,885 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     9,777 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    29,331 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     9,777 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    19,554 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    75,390 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    85,167 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
   150,780 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    19,554 ( 0.00%)          let input_left = length - processed;
     9,855 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
     5,910 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     5,910 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
     5,910 ( 0.00%)              self.state.v0 ^= elem;
    11,820 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     9,777 ( 0.00%)          self.nbuf = extra_bytes_left;
    48,885 ( 0.00%)          self.processed += nbuf + processed;
    58,662 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   120,318 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   160,424 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
   114,380 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   114,380 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
   114,380 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    80,212 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    34,316 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
   114,528 ( 0.00%)          let length = self.processed + self.nbuf;
    80,210 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    40,105 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    40,105 ( 0.00%)          state.v0 ^= b;
         .           
    40,105 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   132,514 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    52,302 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    52,302 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
11,960,943 ( 0.09%)          compress!(state);
12,823,750 ( 0.09%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   265,024 ( 0.00%)          compress!(state);
   265,024 ( 0.00%)          compress!(state);
   265,024 ( 0.00%)          compress!(state);
   224,920 ( 0.00%)          compress!(state);
         .               }
         .           }

 2,544,189 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     3,462 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     1,731 ( 0.00%)              from_str_radix(src, radix)
     5,193 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   540,780 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 2,765,370 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 2,255,684 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
68,239,264 ( 0.49%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
     1,681 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 4,913,149 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   350,126 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,060,549 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    39,730 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
27,823,495 ( 0.20%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 9,736,747 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
50,631,795 ( 0.37%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        27 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 4,999,428 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        54 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       535 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   910,947 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,070 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 9,610,554 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       210 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    35,894 ( 0.00%)              if self <= 1 { return 0; }
         .           
   133,709 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   398,506 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   136,114 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   231,416 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   716,308 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
11,416,915 ( 0.08%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    23,256 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               pub const fn is_some(&self) -> bool {
 9,432,676 ( 0.07%)          matches!(*self, Some(_))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Option<&T> {
16,597,567 ( 0.12%)          match *self {
         .                       Some(ref x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn as_mut(&mut self) -> Option<&mut T> {
 7,683,093 ( 0.06%)          match *self {
         .                       Some(ref mut x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
 5,721,527 ( 0.04%)          match self {
 1,245,734 ( 0.01%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn unwrap(self) -> T {
11,467,978 ( 0.08%)          match self {
 6,242,094 ( 0.05%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 3,315,879 ( 0.02%)          match self {
         .                       Some(x) => x,
    23,520 ( 0.00%)              None => default,
         .                   }
     5,693 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       559 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 3,408,805 ( 0.02%)          match self {
   269,307 ( 0.00%)              Some(x) => x,
    24,334 ( 0.00%)              None => f(),
         .                   }
     1,103 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
    29,276 ( 0.00%)          match self {
    34,820 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    20,503 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
14,069,646 ( 0.10%)          match self {
20,738,413 ( 0.15%)              Some(x) => Some(f(x)),
   319,198 ( 0.00%)              None => None,
         .                   }
   337,803 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
 3,244,285 ( 0.02%)          match self {
   160,936 ( 0.00%)              Some(t) => f(t),
   340,128 ( 0.00%)              None => default,
         .                   }
         .               }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
   215,858 ( 0.00%)          match self {
     1,797 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
 1,628,155 ( 0.01%)          match self {
    10,184 ( 0.00%)              Some(v) => Ok(v),
     5,092 ( 0.00%)              None => Err(err),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   237,488 ( 0.00%)          match self {
   199,896 ( 0.00%)              Some(v) => Ok(v),
    66,955 ( 0.00%)              None => Err(err()),
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
   139,568 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     3,169 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   685,342 ( 0.00%)          match self {
    76,720 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
   109,045 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
    20,074 ( 0.00%)          if let Some(x) = self {
     9,767 ( 0.00%)              if predicate(&x) {
         .                           return Some(x);
         .                       }
         .                   }
         .                   None
     2,706 ( 0.00%)      }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
         .               ///
         .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
    36,734 ( 0.00%)          match self {
     3,227 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
   123,826 ( 0.00%)          match self {
    81,913 ( 0.00%)              Some(x) => Some(x),
         .                       None => f(),
         .                   }
         .               }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
   183,465 ( 0.00%)          if let None = *self {
   421,469 ( 0.00%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 1,582,716 ( 0.01%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
        30 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
    14,172 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
   439,824 ( 0.00%)          match self {
13,946,089 ( 0.10%)              Some(&v) => Some(v),
    87,319 ( 0.00%)              None => None,
         .                   }
        79 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    73,144 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   591,731 ( 0.00%)          match self {
 1,295,539 ( 0.01%)              Some(t) => Some(t.clone()),
    62,406 ( 0.00%)              None => None,
         .                   }
   187,344 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
         .               fn clone(&self) -> Self {
14,784,733 ( 0.11%)          match self {
   810,596 ( 0.01%)              Some(x) => Some(x.clone()),
    11,008 ( 0.00%)              None => None,
         .                   }
 2,776,381 ( 0.02%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   223,318 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
         .                       None => (0, Some(0)),
         .                   }
         .               }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.inner.next()
         .               }
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       334 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
    17,715 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 5,346,212 ( 0.04%)          match self {
   173,076 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
         .                       None => ControlFlow::Break(None),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
         .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   597,826 ( 0.00%)              None => None,
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
-- line 2274 ----------------------------------------
-- line 2297 ----------------------------------------
         .               /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));
         .               /// assert_eq!(Some(Some(6)), x.flatten());
         .               /// assert_eq!(Some(6), x.flatten().flatten());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_flattening", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn flatten(self) -> Option<T> {
        28 ( 0.00%)          match self {
       154 ( 0.00%)              Some(inner) => inner,
         3 ( 0.00%)              None => None,
         .                   }
         .               }
         .           }

13,966,230 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .           pub enum ProjectionTyError<'tcx> {
        .               /// ...we found multiple sources of information and couldn't resolve the ambiguity.
        .               TooManyCandidates,
        .           
        .               /// ...an error occurred matching `T : TraitRef`
        .               TraitSelectionError(SelectionError<'tcx>),
        .           }
        .           
    2,949 ( 0.00%)  #[derive(PartialEq, Eq, Debug)]
        .           enum ProjectionTyCandidate<'tcx> {
        .               /// From a where-clause in the env or object type
   39,196 ( 0.00%)      ParamEnv(ty::PolyProjectionPredicate<'tcx>),
        .           
        .               /// From the definition of `Trait` when you have something like <<A as Trait>::B as Trait2>::C
      702 ( 0.00%)      TraitDef(ty::PolyProjectionPredicate<'tcx>),
        .           
        .               /// Bounds specified on an object type
       14 ( 0.00%)      Object(ty::PolyProjectionPredicate<'tcx>),
        .           
        .               /// From an "impl" (or a "pseudo-impl" returned by select)
        .               Select(Selection<'tcx>),
        .           }
        .           
        .           enum ProjectionTyCandidateSet<'tcx> {
        .               None,
        .               Single(ProjectionTyCandidate<'tcx>),
        .               Ambiguous,
        .               Error(SelectionError<'tcx>),
        .           }
        .           
        .           impl<'tcx> ProjectionTyCandidateSet<'tcx> {
        .               fn mark_ambiguous(&mut self) {
   11,869 ( 0.00%)          *self = ProjectionTyCandidateSet::Ambiguous;
        .               }
        .           
        .               fn mark_error(&mut self, err: SelectionError<'tcx>) {
    1,540 ( 0.00%)          *self = ProjectionTyCandidateSet::Error(err);
        .               }
        .           
        .               // Returns true if the push was successful, or false if the candidate
        .               // was discarded -- this could be because of ambiguity, or because
        .               // a higher-priority candidate is already there.
  302,754 ( 0.00%)      fn push_candidate(&mut self, candidate: ProjectionTyCandidate<'tcx>) -> bool {
        .                   use self::ProjectionTyCandidate::*;
        .                   use self::ProjectionTyCandidateSet::*;
        .           
        .                   // This wacky variable is just used to try and
        .                   // make code readable and avoid confusing paths.
        .                   // It is assigned a "value" of `()` only on those
        .                   // paths in which we wish to convert `*self` to
        .                   // ambiguous (and return false, because the candidate
        .                   // was not used). On other paths, it is not assigned,
        .                   // and hence if those paths *could* reach the code that
        .                   // comes after the match, this fn would not compile.
        .                   let convert_to_ambiguous;
        .           
  302,174 ( 0.00%)          match self {
        .                       None => {
  639,418 ( 0.00%)                  *self = Single(candidate);
        .                           return true;
        .                       }
        .           
        .                       Single(current) => {
        .                           // Duplicates can happen inside ParamEnv. In the case, we
        .                           // perform a lazy deduplication.
      769 ( 0.00%)                  if current == &candidate {
        .                               return false;
        .                           }
        .           
        .                           // Prefer where-clauses. As in select, if there are multiple
        .                           // candidates, we prefer where-clause candidates over impls.  This
        .                           // may seem a bit surprising, since impls are the source of
        .                           // "truth" in some sense, but in fact some of the impls that SEEM
        .                           // applicable are not, because of nested obligations. Where
        .                           // clauses are the safer choice. See the comment on
        .                           // `select::SelectionCandidate` and #21974 for more details.
   15,648 ( 0.00%)                  match (current, candidate) {
        .                               (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),
        .                               (ParamEnv(..), _) => return false,
        .                               (_, ParamEnv(..)) => unreachable!(),
        .                               (_, _) => convert_to_ambiguous = (),
        .                           }
        .                       }
        .           
        .                       Ambiguous | Error(..) => {
        .                           return false;
        .                       }
        .                   }
        .           
        .                   // We only ever get here when we moved from a single candidate
        .                   // to ambiguous.
        .                   let () = convert_to_ambiguous;
      253 ( 0.00%)          *self = Ambiguous;
        .                   false
  353,213 ( 0.00%)      }
        .           }
        .           
        .           /// Evaluates constraints of the form:
        .           ///
        .           ///     for<...> <T as Trait>::U == V
        .           ///
        .           /// If successful, this may result in additional obligations. Also returns
        .           /// the projection cache key used to track these additional obligations.
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
        .           pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &PolyProjectionObligation<'tcx>,
        .           ) -> Result<
        .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
        .               MismatchedProjectionTypes<'tcx>,
        .           > {
        .               let infcx = selcx.infcx();
  291,170 ( 0.00%)      infcx.commit_if_ok(|_snapshot| {
        .                   let placeholder_predicate =
  286,818 ( 0.00%)              infcx.replace_bound_vars_with_placeholders(obligation.predicate);
        .           
        .                   let placeholder_obligation = obligation.with(placeholder_predicate);
   95,606 ( 0.00%)          let result = project_and_unify_type(selcx, &placeholder_obligation)?;
   47,781 ( 0.00%)          Ok(result)
        .               })
        .           }
        .           
        .           /// Evaluates constraints of the form:
        .           ///
        .           ///     <T as Trait>::U == V
        .           ///
        .           /// If successful, this may result in additional obligations.
        .           ///
        .           /// See [poly_project_and_unify_type] for an explanation of the return value.
  478,030 ( 0.00%)  fn project_and_unify_type<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionObligation<'tcx>,
        .           ) -> Result<
        .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
        .               MismatchedProjectionTypes<'tcx>,
        .           > {
        .               debug!(?obligation, "project_and_unify_type");
        .           
        .               let mut obligations = vec![];
  382,424 ( 0.00%)      let normalized_ty = match opt_normalize_projection_type(
        .                   selcx,
   47,803 ( 0.00%)          obligation.param_env,
   95,606 ( 0.00%)          obligation.predicate.projection_ty,
        .                   obligation.cause.clone(),
   95,606 ( 0.00%)          obligation.recursion_depth,
        .                   &mut obligations,
        .               ) {
        .                   Ok(Some(n)) => n,
   18,672 ( 0.00%)          Ok(None) => return Ok(Ok(None)),
        .                   Err(InProgress) => return Ok(Err(InProgress)),
        .               };
        .           
        .               debug!(?normalized_ty, ?obligations, "project_and_unify_type result");
        .           
        .               let infcx = selcx.infcx();
        .               // FIXME(associated_const_equality): Handle consts here as well as types.
   86,270 ( 0.00%)      let obligation_pred_ty = obligation.predicate.term.ty().unwrap();
  129,405 ( 0.00%)      match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {
        .                   Ok(InferOk { obligations: inferred_obligations, value: () }) => {
        .                       obligations.extend(inferred_obligations);
  301,791 ( 0.00%)              Ok(Ok(Some(obligations)))
        .                   }
        .                   Err(err) => {
        .                       debug!("project_and_unify_type: equating types encountered error {:?}", err);
      132 ( 0.00%)              Err(MismatchedProjectionTypes { err })
        .                   }
        .               }
  430,227 ( 0.00%)  }
        .           
        .           /// Normalizes any associated type projections in `value`, replacing
        .           /// them with a fully resolved type where possible. The return value
        .           /// combines the normalized result and any additional obligations that
        .           /// were incurred as result.
1,314,110 ( 0.01%)  pub fn normalize<'a, 'b, 'tcx, T>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               value: T,
        .           ) -> Normalized<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               let mut obligations = Vec::new();
        .               let value = normalize_to(selcx, param_env, cause, value, &mut obligations);
  944,094 ( 0.01%)      Normalized { value, obligations }
1,182,699 ( 0.01%)  }
        .           
        .           pub fn normalize_to<'a, 'b, 'tcx, T>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               value: T,
        .               obligations: &mut Vec<PredicateObligation<'tcx>>,
        .           ) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
1,119,431 ( 0.01%)      normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)
        .           }
        .           
        .           /// As `normalize`, but with a custom depth.
   23,950 ( 0.00%)  pub fn normalize_with_depth<'a, 'b, 'tcx, T>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               depth: usize,
        .               value: T,
        .           ) -> Normalized<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               let mut obligations = Vec::new();
1,278,289 ( 0.01%)      let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);
  705,640 ( 0.01%)      Normalized { value, obligations }
   20,694 ( 0.00%)  }
        .           
4,691,670 ( 0.03%)  #[instrument(level = "info", skip(selcx, param_env, cause, obligations))]
6,556,784 ( 0.05%)  pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               depth: usize,
        .               value: T,
        .               obligations: &mut Vec<PredicateObligation<'tcx>>,
        .           ) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!(obligations.len = obligations.len());
4,131,666 ( 0.03%)      let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);
2,966,582 ( 0.02%)      let result = ensure_sufficient_stack(|| normalizer.fold(value));
        .               debug!(?result, obligations.len = normalizer.obligations.len());
        .               debug!(?normalizer.obligations,);
  422,004 ( 0.00%)      result
1,276,348 ( 0.01%)  }
        .           
        .           pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {
        .               match reveal {
        .                   Reveal::UserFacing => value
        .                       .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),
        .                   Reveal::All => value.has_type_flags(
        .                       ty::TypeFlags::HAS_TY_PROJECTION
        .                           | ty::TypeFlags::HAS_TY_OPAQUE
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
        .               param_env: ty::ParamEnv<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               obligations: &'a mut Vec<PredicateObligation<'tcx>>,
        .               depth: usize,
        .               universes: Vec<Option<ty::UniverseIndex>>,
        .           }
        .           
        .           impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {
   98,915 ( 0.00%)      fn new(
        .                   selcx: &'a mut SelectionContext<'b, 'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .                   depth: usize,
        .                   obligations: &'a mut Vec<PredicateObligation<'tcx>>,
        .               ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {
3,749,735 ( 0.03%)          AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }
   98,915 ( 0.00%)      }
        .           
4,181,590 ( 0.03%)      fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {
2,398,357 ( 0.02%)          let value = self.selcx.infcx().resolve_vars_if_possible(value);
        .                   debug!(?value);
        .           
  758,016 ( 0.01%)          assert!(
        .                       !value.has_escaping_bound_vars(),
        .                       "Normalizing {:?} without wrapping in a `Binder`",
        .                       value
        .                   );
        .           
1,397,365 ( 0.01%)          if !needs_normalization(&value, self.param_env.reveal()) {
  309,574 ( 0.00%)              value
        .                   } else {
   54,547 ( 0.00%)              value.fold_with(self)
        .                   }
3,979,987 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {
        .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
  282,249 ( 0.00%)          self.selcx.tcx()
   55,798 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
        .                   self.universes.push(None);
  208,546 ( 0.00%)          let t = t.super_fold_with(self);
        .                   self.universes.pop();
        .                   t
        .               }
        .           
6,110,944 ( 0.04%)      fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
1,527,736 ( 0.01%)          if !needs_normalization(&ty, self.param_env.reveal()) {
        .                       return ty;
        .                   }
        .           
        .                   // We try to be a little clever here as a performance optimization in
        .                   // cases where there are nested projections under binders.
        .                   // For example:
        .                   // ```
        .                   // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
        .                   //
        .                   // This is possible because the inner `'a` will already be a placeholder
        .                   // when we need to normalize the inner projection
        .                   //
        .                   // On the other hand, this does add a bit of complexity, since we only
        .                   // replace bound vars if the current type is a `Projection` and we need
        .                   // to make sure we don't forget to fold the substs regardless.
        .           
  489,798 ( 0.00%)          match *ty.kind() {
        .                       // This is really important. While we *can* handle this, this has
        .                       // severe performance implications for large opaque types with
        .                       // late-bound regions. See `issue-88862` benchmark.
        .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
        .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
        .                           match self.param_env.reveal() {
        .                               Reveal::UserFacing => ty.super_fold_with(self),
        .           
-- line 397 ----------------------------------------
-- line 421 ----------------------------------------
        .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
        .                           // This branch is *mostly* just an optimization: when we don't
        .                           // have escaping bound vars, we don't need to replace them with
        .                           // placeholders (see branch below). *Also*, we know that we can
        .                           // register an obligation to *later* project, since we know
        .                           // there won't be bound vars there.
        .           
        .                           let data = data.super_fold_with(self);
  801,246 ( 0.01%)                  let normalized_ty = normalize_projection_type(
  133,541 ( 0.00%)                      self.selcx,
  133,541 ( 0.00%)                      self.param_env,
        .                               data,
        .                               self.cause.clone(),
  133,541 ( 0.00%)                      self.depth,
  133,541 ( 0.00%)                      &mut self.obligations,
        .                           );
        .                           debug!(
        .                               ?self.depth,
        .                               ?ty,
        .                               ?normalized_ty,
        .                               obligations.len = ?self.obligations.len(),
        .                               "AssocTypeNormalizer: normalized type"
        .                           );
-- line 443 ----------------------------------------
-- line 490 ----------------------------------------
        .                               obligations.len = ?self.obligations.len(),
        .                               "AssocTypeNormalizer: normalized type"
        .                           );
        .                           normalized_ty
        .                       }
        .           
        .                       _ => ty.super_fold_with(self),
        .                   }
6,874,812 ( 0.05%)      }
        .           
    7,875 ( 0.00%)      fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    1,750 ( 0.00%)          if self.selcx.tcx().lazy_normalization() {
        .                       constant
        .                   } else {
    3,500 ( 0.00%)              let constant = constant.super_fold_with(self);
        .                       constant.eval(self.selcx.tcx(), self.param_env)
        .                   }
    7,875 ( 0.00%)      }
        .           }
        .           
        .           pub struct BoundVarReplacer<'me, 'tcx> {
        .               infcx: &'me InferCtxt<'me, 'tcx>,
        .               // These three maps track the bound variable that were replaced by placeholders. It might be
        .               // nice to remove these since we already have the `kind` in the placeholder; we really just need
        .               // the `var` (but we *could* bring that into scope if we were to track them as we pass them).
        .               mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,
-- line 515 ----------------------------------------
-- line 781 ----------------------------------------
        .           }
        .           
        .           /// The guts of `normalize`: normalize a specific projection like `<T
        .           /// as Trait>::Item`. The result is always a type (and possibly
        .           /// additional obligations). If ambiguity arises, which implies that
        .           /// there are unresolved type variables in the projection, we will
        .           /// substitute a fresh type variable `$X` and generate a new
        .           /// obligation `<T as Trait>::Item == $X` for later.
1,356,730 ( 0.01%)  pub fn normalize_projection_type<'a, 'b, 'tcx>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               projection_ty: ty::ProjectionTy<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               depth: usize,
        .               obligations: &mut Vec<PredicateObligation<'tcx>>,
        .           ) -> Ty<'tcx> {
1,085,384 ( 0.01%)      opt_normalize_projection_type(
        .                   selcx,
        .                   param_env,
        .                   projection_ty,
        .                   cause.clone(),
        .                   depth,
        .                   obligations,
        .               )
        .               .ok()
        .               .flatten()
        .               .unwrap_or_else(move || {
        .                   // if we bottom out in ambiguity, create a type variable
        .                   // and a deferred predicate to resolve this when more type
        .                   // information is available.
        .           
   25,186 ( 0.00%)          selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)
        .               })
1,221,057 ( 0.01%)  }
        .           
        .           /// The guts of `normalize`: normalize a specific projection like `<T
        .           /// as Trait>::Item`. The result is always a type (and possibly
        .           /// additional obligations). Returns `None` in the case of ambiguity,
        .           /// which indicates that there are unbound type variables.
        .           ///
        .           /// This function used to return `Option<NormalizedTy<'tcx>>`, which contains a
        .           /// `Ty<'tcx>` and an obligations vector. But that obligation vector was very
        .           /// often immediately appended to another obligations vector. So now this
        .           /// function takes an obligations vector and appends to it directly, which is
        .           /// slightly uglier but avoids the need for an extra short-lived allocation.
4,650,664 ( 0.03%)  #[instrument(level = "debug", skip(selcx, param_env, cause, obligations))]
        .           fn opt_normalize_projection_type<'a, 'b, 'tcx>(
        .               selcx: &'a mut SelectionContext<'b, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               projection_ty: ty::ProjectionTy<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               depth: usize,
        .               obligations: &mut Vec<PredicateObligation<'tcx>>,
        .           ) -> Result<Option<Ty<'tcx>>, InProgress> {
        .               let infcx = selcx.infcx();
        .               // Don't use the projection cache in intercrate mode -
        .               // the `infcx` may be re-used between intercrate in non-intercrate
        .               // mode, which could lead to using incorrect cache results.
        .               let use_cache = !selcx.is_intercrate();
        .           
        .               let projection_ty = infcx.resolve_vars_if_possible(projection_ty);
  550,428 ( 0.00%)      let cache_key = ProjectionCacheKey::new(projection_ty);
        .           
        .               // FIXME(#20304) For now, I am caching here, which is good, but it
        .               // means we don't capture the type variables that are created in
        .               // the case of ambiguity. Which means we may create a large stream
        .               // of such variables. OTOH, if we move the caching up a level, we
        .               // would not benefit from caching when proving `T: Trait<U=Foo>`
        .               // bounds. It might be the case that we want two distinct caches,
        .               // or else another kind of cache entry.
        .           
  183,476 ( 0.00%)      let cache_result = if use_cache {
1,099,452 ( 0.01%)          infcx.inner.borrow_mut().projection_cache().try_start(cache_key)
        .               } else {
      234 ( 0.00%)          Ok(())
        .               };
1,099,452 ( 0.01%)      match cache_result {
        .                   Ok(()) => debug!("no cache"),
        .                   Err(ProjectionCacheEntry::Ambiguous) => {
        .                       // If we found ambiguity the last time, that means we will continue
        .                       // to do so until some type in the key changes (and we know it
        .                       // hasn't, because we just fully resolved it).
        .                       debug!("found cache entry: ambiguous");
        .                       return Ok(None);
        .                   }
-- line 865 ----------------------------------------
-- line 882 ----------------------------------------
        .                           infcx.inner.borrow_mut().projection_cache().recur(cache_key);
        .                       }
        .                       return Err(InProgress);
        .                   }
        .                   Err(ProjectionCacheEntry::Recur) => {
        .                       debug!("recur cache");
        .                       return Err(InProgress);
        .                   }
  219,812 ( 0.00%)          Err(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {
        .                       // This is the hottest path in this function.
        .                       //
        .                       // If we find the value in the cache, then return it along
        .                       // with the obligations that went along with it. Note
        .                       // that, when using a fulfillment context, these
        .                       // obligations could in principle be ignored: they have
        .                       // already been registered when the cache entry was
        .                       // created (and hence the new ones will quickly be
-- line 898 ----------------------------------------
-- line 908 ----------------------------------------
        .                       let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
        .                       obligations.extend(result.obligations);
        .                       return Ok(Some(result.value));
        .                   }
        .               }
        .           
        .               let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);
        .           
  646,074 ( 0.00%)      match project_type(selcx, &obligation) {
        .                   Ok(ProjectedTy::Progress(Progress {
        .                       ty: projected_ty,
  191,912 ( 0.00%)              obligations: mut projected_obligations,
        .                   })) => {
        .                       // if projection succeeded, then what we get out of this
        .                       // is also non-normalized (consider: it was derived from
        .                       // an impl, where-clause etc) and hence we must
        .                       // re-normalize it
        .           
        .                       let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);
        .                       debug!(?projected_ty, ?depth, ?projected_obligations);
        .           
   47,978 ( 0.00%)              let mut result = if projected_ty.has_projections() {
        .                           let mut normalizer = AssocTypeNormalizer::new(
        .                               selcx,
        .                               param_env,
   31,084 ( 0.00%)                      cause,
   15,542 ( 0.00%)                      depth + 1,
        .                               &mut projected_obligations,
        .                           );
   15,542 ( 0.00%)                  let normalized_ty = normalizer.fold(projected_ty);
        .           
        .                           debug!(?normalized_ty, ?depth);
        .           
   38,855 ( 0.00%)                  Normalized { value: normalized_ty, obligations: projected_obligations }
        .                       } else {
  241,242 ( 0.00%)                  Normalized { value: projected_ty, obligations: projected_obligations }
        .                       };
        .           
        .                       let mut deduped: SsoHashSet<_> = Default::default();
   47,978 ( 0.00%)              result.obligations.drain_filter(|projected_obligation| {
        .                           if !deduped.insert(projected_obligation.clone()) {
        .                               return true;
        .                           }
        .                           false
        .                       });
        .           
   47,978 ( 0.00%)              if use_cache {
  143,922 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
        .                       }
        .                       obligations.extend(result.obligations);
   47,978 ( 0.00%)              Ok(Some(result.value))
        .                   }
        .                   Ok(ProjectedTy::NoProgress(projected_ty)) => {
        .                       debug!(?projected_ty, "opt_normalize_projection_type: no progress");
   38,030 ( 0.00%)              let result = Normalized { value: projected_ty, obligations: vec![] };
   19,015 ( 0.00%)              if use_cache {
   57,045 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
        .                       }
        .                       // No need to extend `obligations`.
   19,015 ( 0.00%)              Ok(Some(result.value))
        .                   }
        .                   Err(ProjectionTyError::TooManyCandidates) => {
        .                       debug!("opt_normalize_projection_type: too many candidates");
    4,683 ( 0.00%)              if use_cache {
   26,718 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);
        .                       }
        .                       Ok(None)
        .                   }
        .                   Err(ProjectionTyError::TraitSelectionError(_)) => {
        .                       debug!("opt_normalize_projection_type: ERROR");
        .                       // if we got an error processing the `T as Trait` part,
        .                       // just return `ty::err` but add the obligation `T :
        .                       // Trait`, which when processed will cause the error to be
        .                       // reported later
        .           
      110 ( 0.00%)              if use_cache {
      660 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().error(cache_key);
        .                       }
    1,540 ( 0.00%)              let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
        .                       obligations.extend(result.obligations);
      330 ( 0.00%)              Ok(Some(result.value))
        .                   }
        .               }
        .           }
        .           
        .           /// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not
        .           /// hold. In various error cases, we cannot generate a valid
        .           /// normalized projection. Therefore, we create an inference variable
        .           /// return an associated obligation that, when fulfilled, will lead to
-- line 996 ----------------------------------------
-- line 1004 ----------------------------------------
        .           /// paths you want to take. To make things worse, it was possible for
        .           /// cycles to arise, where you basically had a setup like `<MyType<$0>
        .           /// as Trait>::Foo == $0`. Here, normalizing `<MyType<$0> as
        .           /// Trait>::Foo> to `[type error]` would lead to an obligation of
        .           /// `<MyType<[type error]> as Trait>::Foo`. We are supposed to report
        .           /// an error for this obligation, but we legitimately should not,
        .           /// because it contains `[type error]`. Yuck! (See issue #29857 for
        .           /// one case where this arose.)
    1,320 ( 0.00%)  fn normalize_to_error<'a, 'tcx>(
        .               selcx: &mut SelectionContext<'a, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               projection_ty: ty::ProjectionTy<'tcx>,
        .               cause: ObligationCause<'tcx>,
        .               depth: usize,
        .           ) -> NormalizedTy<'tcx> {
      110 ( 0.00%)      let trait_ref = ty::Binder::dummy(projection_ty.trait_ref(selcx.tcx()));
      880 ( 0.00%)      let trait_obligation = Obligation {
      440 ( 0.00%)          cause,
        .                   recursion_depth: depth,
        .                   param_env,
      110 ( 0.00%)          predicate: trait_ref.without_const().to_predicate(selcx.tcx()),
        .               };
      110 ( 0.00%)      let tcx = selcx.infcx().tcx;
        .               let def_id = projection_ty.item_def_id;
      550 ( 0.00%)      let new_value = selcx.infcx().next_ty_var(TypeVariableOrigin {
        .                   kind: TypeVariableOriginKind::NormalizeProjectionType,
        .                   span: tcx.def_span(def_id),
        .               });
    1,210 ( 0.00%)      Normalized { value: new_value, obligations: vec![trait_obligation] }
      880 ( 0.00%)  }
        .           
        .           enum ProjectedTy<'tcx> {
        .               Progress(Progress<'tcx>),
        .               NoProgress(Ty<'tcx>),
        .           }
        .           
        .           struct Progress<'tcx> {
        .               ty: Ty<'tcx>,
-- line 1041 ----------------------------------------
-- line 1042 ----------------------------------------
        .               obligations: Vec<PredicateObligation<'tcx>>,
        .           }
        .           
        .           impl<'tcx> Progress<'tcx> {
        .               fn error(tcx: TyCtxt<'tcx>) -> Self {
        .                   Progress { ty: tcx.ty_error(), obligations: vec![] }
        .               }
        .           
   17,220 ( 0.00%)      fn with_addl_obligations(mut self, mut obligations: Vec<PredicateObligation<'tcx>>) -> Self {
        .                   debug!(
        .                       self.obligations.len = ?self.obligations.len(),
        .                       obligations.len = obligations.len(),
        .                       "with_addl_obligations"
        .                   );
        .           
        .                   debug!(?self.obligations, ?obligations, "with_addl_obligations");
        .           
    1,722 ( 0.00%)          self.obligations.append(&mut obligations);
   10,332 ( 0.00%)          self
    7,640 ( 0.00%)      }
        .           }
        .           
        .           /// Computes the result of a projection type (if we can).
        .           ///
        .           /// IMPORTANT:
        .           /// - `obligation` must be fully normalized
1,292,148 ( 0.01%)  #[tracing::instrument(level = "info", skip(selcx))]
        .           fn project_type<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .           ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {
  215,358 ( 0.00%)      if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {
        .                   debug!("project: overflow!");
        .                   // This should really be an immediate error, but some existing code
        .                   // relies on being able to recover from this.
        .                   return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));
        .               }
        .           
        .               if obligation.predicate.references_error() {
        .                   return Ok(ProjectedTy::Progress(Progress::error(selcx.tcx())));
        .               }
        .           
   71,786 ( 0.00%)      let mut candidates = ProjectionTyCandidateSet::None;
        .           
        .               // Make sure that the following procedures are kept in order. ParamEnv
        .               // needs to be first because it has highest priority, and Select checks
        .               // the return value of push_candidate which assumes it's ran at last.
  143,572 ( 0.00%)      assemble_candidates_from_param_env(selcx, obligation, &mut candidates);
        .           
  137,570 ( 0.00%)      assemble_candidates_from_trait_def(selcx, obligation, &mut candidates);
        .           
  143,572 ( 0.00%)      assemble_candidates_from_object_ty(selcx, obligation, &mut candidates);
        .           
  212,712 ( 0.00%)      if let ProjectionTyCandidateSet::Single(ProjectionTyCandidate::Object(_)) = candidates {
        .                   // Avoid normalization cycle from selection (see
        .                   // `assemble_candidates_from_object_ty`).
        .                   // FIXME(lazy_normalization): Lazy normalization should save us from
        .                   // having to special case this.
        .               } else {
  143,544 ( 0.00%)          assemble_candidates_from_impls(selcx, obligation, &mut candidates);
        .               };
        .           
  358,860 ( 0.00%)      match candidates {
        .                   ProjectionTyCandidateSet::Single(candidate) => {
1,055,516 ( 0.01%)              Ok(ProjectedTy::Progress(confirm_candidate(selcx, obligation, candidate)))
        .                   }
   95,075 ( 0.00%)          ProjectionTyCandidateSet::None => Ok(ProjectedTy::NoProgress(
        .                       selcx
        .                           .tcx()
   38,030 ( 0.00%)                  .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs),
        .                   )),
        .                   // Error occurred while trying to processing impls.
    1,760 ( 0.00%)          ProjectionTyCandidateSet::Error(e) => Err(ProjectionTyError::TraitSelectionError(e)),
        .                   // Inherent ambiguity that prevents us from even enumerating the
        .                   // candidates.
   18,732 ( 0.00%)          ProjectionTyCandidateSet::Ambiguous => Err(ProjectionTyError::TooManyCandidates),
        .               }
  167,380 ( 0.00%)  }
        .           
        .           /// The first thing we have to do is scan through the parameter
        .           /// environment to see whether there are any projection predicates
        .           /// there that can answer this question.
        .           fn assemble_candidates_from_param_env<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
        .           ) {
        .               debug!("assemble_candidates_from_param_env(..)");
        .               assemble_candidates_from_predicates(
        .                   selcx,
        .                   obligation,
        .                   candidate_set,
        .                   ProjectionTyCandidate::ParamEnv,
   71,786 ( 0.00%)          obligation.param_env.caller_bounds().iter(),
        .                   false,
        .               );
        .           }
        .           
        .           /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find
        .           /// that the definition of `Foo` has some clues:
        .           ///
        .           /// ```
-- line 1143 ----------------------------------------
-- line 1152 ----------------------------------------
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
        .           ) {
        .               debug!("assemble_candidates_from_trait_def(..)");
        .           
        .               let tcx = selcx.tcx();
        .               // Check whether the self-type is itself a projection.
        .               // If so, extract what we know from the trait and try to come up with a good answer.
  853,836 ( 0.01%)      let bounds = match *obligation.predicate.self_ty().kind() {
    2,349 ( 0.00%)          ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),
      360 ( 0.00%)          ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),
        .                   ty::Infer(ty::TyVar(_)) => {
        .                       // If the self-type is an inference variable, then it MAY wind up
        .                       // being a projected type, so induce an ambiguity.
        .                       candidate_set.mark_ambiguous();
        .                       return;
        .                   }
        .                   _ => return,
        .               };
-- line 1170 ----------------------------------------
-- line 1192 ----------------------------------------
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
        .           ) {
        .               debug!("assemble_candidates_from_object_ty(..)");
        .           
        .               let tcx = selcx.tcx();
        .           
  143,572 ( 0.00%)      let self_ty = obligation.predicate.self_ty();
        .               let object_ty = selcx.infcx().shallow_resolve(self_ty);
  358,930 ( 0.00%)      let data = match object_ty.kind() {
        .                   ty::Dynamic(data, ..) => data,
        .                   ty::Infer(ty::TyVar(_)) => {
        .                       // If the self-type is an inference variable, then it MAY wind up
        .                       // being an object type, so induce an ambiguity.
        .                       candidate_set.mark_ambiguous();
        .                       return;
        .                   }
        .                   _ => return,
        .               };
       14 ( 0.00%)      let env_predicates = data
        .                   .projection_bounds()
       28 ( 0.00%)          .filter(|bound| bound.item_def_id() == obligation.predicate.item_def_id)
      126 ( 0.00%)          .map(|p| p.with_self_ty(tcx, object_ty).to_predicate(tcx));
        .           
        .               assemble_candidates_from_predicates(
        .                   selcx,
        .                   obligation,
        .                   candidate_set,
        .                   ProjectionTyCandidate::Object,
        .                   env_predicates,
        .                   false,
-- line 1223 ----------------------------------------
-- line 1232 ----------------------------------------
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
        .               ctor: fn(ty::PolyProjectionPredicate<'tcx>) -> ProjectionTyCandidate<'tcx>,
        .               env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
        .               potentially_unnormalized_candidates: bool,
        .           ) {
        .               let infcx = selcx.infcx();
   12,616 ( 0.00%)      for predicate in env_predicates {
        .                   debug!(?predicate);
        .                   let bound_predicate = predicate.kind();
8,588,669 ( 0.06%)          if let ty::PredicateKind::Projection(data) = predicate.kind().skip_binder() {
4,576,328 ( 0.03%)              let data = bound_predicate.rebind(data);
2,288,164 ( 0.02%)              let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;
        .           
1,442,834 ( 0.01%)              let is_match = same_def_id
        .                           && infcx.probe(|_| {
  448,142 ( 0.00%)                      selcx.match_projection_projections(
        .                                   obligation,
1,344,356 ( 0.01%)                          data,
        .                                   potentially_unnormalized_candidates,
        .                               )
        .                           });
        .           
        .                       debug!(?data, ?is_match, ?same_def_id);
        .           
  298,752 ( 0.00%)              if is_match {
  438,316 ( 0.00%)                  candidate_set.push_candidate(ctor(data));
        .           
        .                           if potentially_unnormalized_candidates
        .                               && !obligation.predicate.has_infer_types_or_consts()
        .                           {
        .                               // HACK: Pick the first trait def candidate for a fully
        .                               // inferred predicate. This is to allow duplicates that
        .                               // differ only in normalization.
        .                               return;
-- line 1267 ----------------------------------------
-- line 1274 ----------------------------------------
        .           #[tracing::instrument(level = "debug", skip(selcx, obligation, candidate_set))]
        .           fn assemble_candidates_from_impls<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
        .           ) {
        .               // If we are resolving `<T as TraitRef<...>>::Item == Type`,
        .               // start out by selecting the predicate `T as TraitRef<...>`:
  215,316 ( 0.00%)      let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));
  143,544 ( 0.00%)      let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());
  645,948 ( 0.00%)      let _ = selcx.infcx().commit_if_ok(|_| {
  430,412 ( 0.00%)          let impl_source = match selcx.select(&trait_obligation) {
  669,790 ( 0.00%)              Ok(Some(impl_source)) => impl_source,
        .                       Ok(None) => {
        .                           candidate_set.mark_ambiguous();
        .                           return Err(());
        .                       }
        .                       Err(e) => {
        .                           debug!(error = ?e, "selection error");
        .                           candidate_set.mark_error(e);
        .                           return Err(());
        .                       }
        .                   };
        .           
  334,895 ( 0.00%)          let eligible = match &impl_source {
        .                       super::ImplSource::Closure(_)
        .                       | super::ImplSource::Generator(_)
        .                       | super::ImplSource::FnPointer(_)
        .                       | super::ImplSource::TraitAlias(_) => {
        .                           debug!(?impl_source);
        .                           true
        .                       }
        .                       super::ImplSource::UserDefined(impl_data) => {
-- line 1306 ----------------------------------------
-- line 1322 ----------------------------------------
        .                           //
        .                           // In either case, we handle this by not adding a
        .                           // candidate for an impl if it contains a `default`
        .                           // type.
        .                           //
        .                           // NOTE: This should be kept in sync with the similar code in
        .                           // `rustc_ty_utils::instance::resolve_associated_item()`.
        .                           let node_item =
   87,111 ( 0.00%)                      assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)
        .                                   .map_err(|ErrorReported| ())?;
        .           
   29,037 ( 0.00%)                  if node_item.is_final() {
        .                               // Non-specializable items are always projectable.
        .                               true
        .                           } else {
        .                               // Only reveal a specializable default if we're past type-checking
        .                               // and the obligation is monomorphic, otherwise passes such as
        .                               // transmute checking and polymorphic MIR optimizations could
        .                               // get a result which isn't correct for all monomorphizations.
        .                               if obligation.param_env.reveal() == Reveal::All {
-- line 1341 ----------------------------------------
-- line 1353 ----------------------------------------
        .                               }
        .                           }
        .                       }
        .                       super::ImplSource::DiscriminantKind(..) => {
        .                           // While `DiscriminantKind` is automatically implemented for every type,
        .                           // the concrete discriminant may not be known yet.
        .                           //
        .                           // Any type with multiple potential discriminant types is therefore not eligible.
       21 ( 0.00%)                  let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());
        .           
       21 ( 0.00%)                  match self_ty.kind() {
        .                               ty::Bool
        .                               | ty::Char
        .                               | ty::Int(_)
        .                               | ty::Uint(_)
        .                               | ty::Float(_)
        .                               | ty::Adt(..)
        .                               | ty::Foreign(_)
        .                               | ty::Str
-- line 1371 ----------------------------------------
-- line 1495 ----------------------------------------
        .                               obligation.cause.span,
        .                               &format!("Cannot project an associated type from `{:?}`", impl_source),
        .                           );
        .                           return Err(());
        .                       }
        .                   };
        .           
        .                   if eligible {
  147,658 ( 0.00%)              if candidate_set.push_candidate(ProjectionTyCandidate::Select(impl_source)) {
        .                           Ok(())
        .                       } else {
        .                           Err(())
        .                       }
        .                   } else {
        .                       Err(())
        .                   }
  112,864 ( 0.00%)      });
        .           }
        .           
        .           fn confirm_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               candidate: ProjectionTyCandidate<'tcx>,
        .           ) -> Progress<'tcx> {
        .               debug!(?obligation, ?candidate, "confirm_candidate");
  239,890 ( 0.00%)      let mut progress = match candidate {
        .                   ProjectionTyCandidate::ParamEnv(poly_projection)
        .                   | ProjectionTyCandidate::Object(poly_projection) => {
  524,356 ( 0.00%)              confirm_param_env_candidate(selcx, obligation, poly_projection, false)
        .                   }
        .           
        .                   ProjectionTyCandidate::TraitDef(poly_projection) => {
    9,126 ( 0.00%)              confirm_param_env_candidate(selcx, obligation, poly_projection, true)
        .                   }
        .           
        .                   ProjectionTyCandidate::Select(impl_source) => {
   98,220 ( 0.00%)              confirm_select_candidate(selcx, obligation, impl_source)
        .                   }
        .               };
        .               // When checking for cycle during evaluation, we compare predicates with
        .               // "syntactic" equality. Since normalization generally introduces a type
        .               // with new region variables, we need to resolve them to existing variables
        .               // when possible for this to work. See `auto-trait-projection-recursion.rs`
        .               // for a case where this matters.
   86,129 ( 0.00%)      if progress.ty.has_infer_regions() {
    8,322 ( 0.00%)          progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);
        .               }
        .               progress
        .           }
        .           
        .           fn confirm_select_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               impl_source: Selection<'tcx>,
        .           ) -> Progress<'tcx> {
   49,110 ( 0.00%)      match impl_source {
   44,770 ( 0.00%)          super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),
        .                   super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),
    4,602 ( 0.00%)          super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),
      470 ( 0.00%)          super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),
        .                   super::ImplSource::DiscriminantKind(data) => {
        .                       confirm_discriminant_kind_candidate(selcx, obligation, data)
        .                   }
        .                   super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),
        .                   super::ImplSource::Object(_)
        .                   | super::ImplSource::AutoImpl(..)
        .                   | super::ImplSource::Param(..)
        .                   | super::ImplSource::Builtin(..)
-- line 1562 ----------------------------------------
-- line 1625 ----------------------------------------
        .           
        .           fn confirm_discriminant_kind_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               _: ImplSourceDiscriminantKindData,
        .           ) -> Progress<'tcx> {
        .               let tcx = selcx.tcx();
        .           
       14 ( 0.00%)      let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());
        .               // We get here from `poly_project_and_unify_type` which replaces bound vars
        .               // with placeholders
        .               debug_assert!(!self_ty.has_escaping_bound_vars());
        7 ( 0.00%)      let substs = tcx.mk_substs([self_ty.into()].iter());
        .           
       35 ( 0.00%)      let discriminant_def_id = tcx.require_lang_item(LangItem::Discriminant, None);
        .           
        .               let predicate = ty::ProjectionPredicate {
        .                   projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },
       21 ( 0.00%)          term: self_ty.discriminant_ty(tcx).into(),
        .               };
        .           
        .               // We get here from `poly_project_and_unify_type` which replaces bound vars
        .               // with placeholders, so dummy is okay here.
       84 ( 0.00%)      confirm_param_env_candidate(selcx, obligation, ty::Binder::dummy(predicate), false)
        .           }
        .           
        .           fn confirm_pointee_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               _: ImplSourcePointeeData,
        .           ) -> Progress<'tcx> {
        .               let tcx = selcx.tcx();
-- line 1656 ----------------------------------------
-- line 1680 ----------------------------------------
        .                   .with_addl_obligations(obligations)
        .           }
        .           
        .           fn confirm_fn_pointer_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               fn_pointer_impl_source: ImplSourceFnPointerData<'tcx, PredicateObligation<'tcx>>,
        .           ) -> Progress<'tcx> {
       94 ( 0.00%)      let fn_type = selcx.infcx().shallow_resolve(fn_pointer_impl_source.fn_ty);
      188 ( 0.00%)      let sig = fn_type.fn_sig(selcx.tcx());
      940 ( 0.00%)      let Normalized { value: sig, obligations } = normalize_with_depth(
        .                   selcx,
       94 ( 0.00%)          obligation.param_env,
        .                   obligation.cause.clone(),
      282 ( 0.00%)          obligation.recursion_depth + 1,
      752 ( 0.00%)          sig,
        .               );
        .           
      282 ( 0.00%)      confirm_callable_candidate(selcx, obligation, sig, util::TupleArgumentsFlag::Yes)
      658 ( 0.00%)          .with_addl_obligations(fn_pointer_impl_source.nested)
      658 ( 0.00%)          .with_addl_obligations(obligations)
        .           }
        .           
        .           fn confirm_closure_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               impl_source: ImplSourceClosureData<'tcx, PredicateObligation<'tcx>>,
        .           ) -> Progress<'tcx> {
    3,068 ( 0.00%)      let closure_sig = impl_source.substs.as_closure().sig();
    7,670 ( 0.00%)      let Normalized { value: closure_sig, obligations } = normalize_with_depth(
        .                   selcx,
      767 ( 0.00%)          obligation.param_env,
        .                   obligation.cause.clone(),
    2,301 ( 0.00%)          obligation.recursion_depth + 1,
    6,136 ( 0.00%)          closure_sig,
        .               );
        .           
        .               debug!(?obligation, ?closure_sig, ?obligations, "confirm_closure_candidate");
        .           
    2,301 ( 0.00%)      confirm_callable_candidate(selcx, obligation, closure_sig, util::TupleArgumentsFlag::No)
    5,369 ( 0.00%)          .with_addl_obligations(impl_source.nested)
    5,369 ( 0.00%)          .with_addl_obligations(obligations)
        .           }
        .           
        .           fn confirm_callable_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               fn_sig: ty::PolyFnSig<'tcx>,
        .               flag: util::TupleArgumentsFlag,
        .           ) -> Progress<'tcx> {
        .               let tcx = selcx.tcx();
        .           
        .               debug!(?obligation, ?fn_sig, "confirm_callable_candidate");
        .           
    4,305 ( 0.00%)      let fn_once_def_id = tcx.require_lang_item(LangItem::FnOnce, None);
    4,305 ( 0.00%)      let fn_once_output_def_id = tcx.require_lang_item(LangItem::FnOnceOutput, None);
        .           
    8,610 ( 0.00%)      let predicate = super::util::closure_trait_ref_and_return_type(
        .                   tcx,
        .                   fn_once_def_id,
    1,722 ( 0.00%)          obligation.predicate.self_ty(),
    3,444 ( 0.00%)          fn_sig,
        .                   flag,
        .               )
        .               .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {
        .                   projection_ty: ty::ProjectionTy {
        .                       substs: trait_ref.substs,
        .                       item_def_id: fn_once_output_def_id,
        .                   },
        .                   term: ret_type.into(),
        .               });
        .           
   10,332 ( 0.00%)      confirm_param_env_candidate(selcx, obligation, predicate, true)
        .           }
        .           
  468,288 ( 0.00%)  fn confirm_param_env_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,
        .               potentially_unnormalized_candidate: bool,
        .           ) -> Progress<'tcx> {
        .               let infcx = selcx.infcx();
        .               let cause = &obligation.cause;
   78,048 ( 0.00%)      let param_env = obligation.param_env;
        .           
  156,096 ( 0.00%)      let (cache_entry, _) = infcx.replace_bound_vars_with_fresh_vars(
  117,072 ( 0.00%)          cause.span,
        .                   LateBoundRegionConversionTime::HigherRankedType,
        .                   poly_cache_entry,
        .               );
        .           
   78,048 ( 0.00%)      let cache_projection = cache_entry.projection_ty;
        .               let mut nested_obligations = Vec::new();
  117,072 ( 0.00%)      let obligation_projection = obligation.predicate;
  312,192 ( 0.00%)      let obligation_projection = ensure_sufficient_stack(|| {
  156,096 ( 0.00%)          normalize_with_depth_to(
        .                       selcx,
   39,024 ( 0.00%)              obligation.param_env,
        .                       obligation.cause.clone(),
  117,072 ( 0.00%)              obligation.recursion_depth + 1,
   78,048 ( 0.00%)              obligation_projection,
        .                       &mut nested_obligations,
        .                   )
        .               });
   78,048 ( 0.00%)      let cache_projection = if potentially_unnormalized_candidate {
   10,941 ( 0.00%)          ensure_sufficient_stack(|| {
    6,252 ( 0.00%)              normalize_with_depth_to(
        .                           selcx,
    1,563 ( 0.00%)                  obligation.param_env,
        .                           obligation.cause.clone(),
    4,689 ( 0.00%)                  obligation.recursion_depth + 1,
    3,126 ( 0.00%)                  cache_projection,
        .                           &mut nested_obligations,
        .                       )
        .                   })
        .               } else {
   74,922 ( 0.00%)          cache_projection
        .               };
        .           
        .               debug!(?cache_projection, ?obligation_projection);
        .           
   78,048 ( 0.00%)      match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {
        .                   Ok(InferOk { value: _, obligations }) => {
        .                       nested_obligations.extend(obligations);
   78,048 ( 0.00%)              assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);
        .                       // FIXME(associated_const_equality): Handle consts here as well? Maybe this progress type should just take
        .                       // a term instead.
  312,192 ( 0.00%)              Progress { ty: cache_entry.term.ty().unwrap(), obligations: nested_obligations }
        .                   }
        .                   Err(e) => {
        .                       let msg = format!(
        .                           "Failed to unify obligation `{:?}` with poly_projection `{:?}`: {:?}",
        .                           obligation, poly_cache_entry, e,
        .                       );
        .                       debug!("confirm_param_env_candidate: {}", msg);
        .                       let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);
        .                       Progress { ty: err, obligations: vec![] }
        .                   }
        .               }
  312,192 ( 0.00%)  }
        .           
        .           fn confirm_impl_candidate<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,
        .           ) -> Progress<'tcx> {
        .               let tcx = selcx.tcx();
        .           
   35,816 ( 0.00%)      let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;
   26,862 ( 0.00%)      let assoc_item_id = obligation.predicate.item_def_id;
   35,816 ( 0.00%)      let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();
        .           
   35,816 ( 0.00%)      let param_env = obligation.param_env;
   62,678 ( 0.00%)      let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {
   89,540 ( 0.00%)          Ok(assoc_ty) => assoc_ty,
        .                   Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },
        .               };
        .           
   35,816 ( 0.00%)      if !assoc_ty.item.defaultness.has_value() {
        .                   // This means that the impl is missing a definition for the
        .                   // associated type. This error will be reported by the type
        .                   // checker method `check_impl_items_against_trait`, so here we
        .                   // just return Error.
        .                   debug!(
        .                       "confirm_impl_candidate: no associated type {:?} for {:?}",
        .                       assoc_ty.item.name, obligation.predicate
        .                   );
-- line 1846 ----------------------------------------
-- line 1847 ----------------------------------------
        .                   return Progress { ty: tcx.ty_error(), obligations: nested };
        .               }
        .               // If we're trying to normalize `<Vec<u32> as X>::A<S>` using
        .               //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:
        .               //
        .               // * `obligation.predicate.substs` is `[Vec<u32>, S]`
        .               // * `substs` is `[u32]`
        .               // * `substs` ends up as `[u32, S]`
   53,724 ( 0.00%)      let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);
        .               let substs =
   98,494 ( 0.00%)          translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);
    8,954 ( 0.00%)      let ty = tcx.type_of(assoc_ty.item.def_id);
   26,862 ( 0.00%)      if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {
        .                   let err = tcx.ty_error_with_message(
        .                       obligation.cause.span,
        .                       "impl item and trait item have different parameter counts",
        .                   );
        .                   Progress { ty: err, obligations: nested }
        .               } else {
   17,908 ( 0.00%)          assoc_ty_own_obligations(selcx, obligation, &mut nested);
        .                   Progress { ty: ty.subst(tcx, substs), obligations: nested }
        .               }
        .           }
        .           
        .           // Get obligations corresponding to the predicates from the where-clause of the
        .           // associated type itself.
        .           // Note: `feature(generic_associated_types)` is required to write such
        .           // predicates, even for non-generic associcated types.
  431,802 ( 0.00%)  fn assoc_ty_own_obligations<'cx, 'tcx>(
        .               selcx: &mut SelectionContext<'cx, 'tcx>,
        .               obligation: &ProjectionTyObligation<'tcx>,
        .               nested: &mut Vec<PredicateObligation<'tcx>>,
        .           ) {
        .               let tcx = selcx.tcx();
  431,802 ( 0.00%)      for predicate in tcx
   95,956 ( 0.00%)          .predicates_of(obligation.predicate.item_def_id)
  143,934 ( 0.00%)          .instantiate_own(tcx, obligation.predicate.substs)
        .                   .predicates
        .               {
        .                   let normalized = normalize_with_depth_to(
        .                       selcx,
        .                       obligation.param_env,
        .                       obligation.cause.clone(),
        .                       obligation.recursion_depth + 1,
        .                       predicate,
-- line 1891 ----------------------------------------
-- line 1893 ----------------------------------------
        .                   );
        .                   nested.push(Obligation::with_depth(
        .                       obligation.cause.clone(),
        .                       obligation.recursion_depth + 1,
        .                       obligation.param_env,
        .                       normalized,
        .                   ));
        .               }
  383,824 ( 0.00%)  }
        .           
        .           /// Locate the definition of an associated type in the specialization hierarchy,
        .           /// starting from the given impl.
        .           ///
        .           /// Based on the "projection mode", this lookup may in fact only examine the
        .           /// topmost impl. See the comments for `Reveal` for more details.
  167,697 ( 0.00%)  fn assoc_ty_def(
        .               selcx: &SelectionContext<'_, '_>,
        .               impl_def_id: DefId,
        .               assoc_ty_def_id: DefId,
        .           ) -> Result<specialization_graph::LeafDef, ErrorReported> {
        .               let tcx = selcx.tcx();
   37,266 ( 0.00%)      let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;
        .               let trait_def = tcx.trait_def(trait_def_id);
        .           
        .               // This function may be called while we are still building the
        .               // specialization graph that is queried below (via TraitDef::ancestors()),
        .               // so, in order to avoid unnecessary infinite recursion, we manually look
        .               // for the associated item at the given impl.
        .               // If there is no such item in that impl, this function will fail with a
        .               // cycle error if the specialization graph is currently being built.
   37,266 ( 0.00%)      if let Some(&impl_item_id) = tcx.impl_item_implementor_ids(impl_def_id).get(&assoc_ty_def_id) {
        .                   let item = tcx.associated_item(impl_item_id);
        .                   let impl_node = specialization_graph::Node::Impl(impl_def_id);
  223,596 ( 0.00%)          return Ok(specialization_graph::LeafDef {
  111,798 ( 0.00%)              item: *item,
        .                       defining_node: impl_node,
   93,165 ( 0.00%)              finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },
        .                   });
        .               }
        .           
        .               let ancestors = trait_def.ancestors(tcx, impl_def_id)?;
        .               if let Some(assoc_item) = ancestors.leaf_def(tcx, assoc_ty_def_id) {
        .                   Ok(assoc_item)
        .               } else {
        .                   // This is saying that neither the trait nor
-- line 1937 ----------------------------------------
-- line 1941 ----------------------------------------
        .                   // if the user wrote a bad item name, it
        .                   // should have failed in astconv.
        .                   bug!(
        .                       "No associated type `{}` for {}",
        .                       tcx.item_name(assoc_ty_def_id),
        .                       tcx.def_path_str(impl_def_id)
        .                   )
        .               }
  167,697 ( 0.00%)  }
        .           
        .           crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {
        .               fn from_poly_projection_predicate(
        .                   selcx: &mut SelectionContext<'cx, 'tcx>,
        .                   predicate: ty::PolyProjectionPredicate<'tcx>,
        .               ) -> Option<Self>;
        .           }
        .           
        .           impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {
   73,437 ( 0.00%)      fn from_poly_projection_predicate(
        .                   selcx: &mut SelectionContext<'cx, 'tcx>,
        .                   predicate: ty::PolyProjectionPredicate<'tcx>,
        .               ) -> Option<Self> {
        .                   let infcx = selcx.infcx();
        .                   // We don't do cross-snapshot caching of obligations with escaping regions,
        .                   // so there's no cache key to use
   62,946 ( 0.00%)          predicate.no_bound_vars().map(|predicate| {
   20,938 ( 0.00%)              ProjectionCacheKey::new(
        .                           // We don't attempt to match up with a specific type-variable state
        .                           // from a specific call to `opt_normalize_projection_type` - if
        .                           // there's no precise match, the original cache entry is "stranded"
        .                           // anyway.
        .                           infcx.resolve_vars_if_possible(predicate.projection_ty),
        .                       )
        .                   })
   83,928 ( 0.00%)      }
        .           }

7,284,663 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_type_ir/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[macro_use]
         .           extern crate rustc_macros;
         .           
         .           use rustc_data_structures::stable_hasher::{HashStable, StableHasher};
         .           use rustc_data_structures::unify::{EqUnifyValue, UnifyKey};
         .           use std::fmt;
         .           use std::mem::discriminant;
         .           
68,528,392 ( 0.49%)  bitflags! {
         .               /// Flags that we track on types. These flags are propagated upwards
         .               /// through the type during type construction, so that we can quickly check
         .               /// whether the type has various kinds of types in it without recursing
         .               /// over the type itself.
         .               pub struct TypeFlags: u32 {
         .                   // Does this have parameters? Used to determine whether substitution is
         .                   // required.
         .                   /// Does this have `Param`?
-- line 21 ----------------------------------------
-- line 163 ----------------------------------------
         .               ///    for<'a> fn(&'a x)
         .               ///
         .               /// and you wanted to change it to
         .               ///
         .               ///    for<'a> fn(for<'b> fn(&'a x))
         .               ///
         .               /// you would need to shift the index for `'a` into a new binder.
         .               #[must_use]
     9,582 ( 0.00%)      pub fn shifted_in(self, amount: u32) -> DebruijnIndex {
 7,831,712 ( 0.06%)          DebruijnIndex::from_u32(self.as_u32() + amount)
    28,746 ( 0.00%)      }
         .           
         .               /// Update this index in place by shifting it "in" through
         .               /// `amount` number of binders.
 3,906,274 ( 0.03%)      pub fn shift_in(&mut self, amount: u32) {
 3,906,274 ( 0.03%)          *self = self.shifted_in(amount);
 7,812,548 ( 0.06%)      }
         .           
         .               /// Returns the resulting index when this value is moved out from
         .               /// `amount` number of new binders.
         .               #[must_use]
     8,092 ( 0.00%)      pub fn shifted_out(self, amount: u32) -> DebruijnIndex {
 7,828,732 ( 0.06%)          DebruijnIndex::from_u32(self.as_u32() - amount)
    24,276 ( 0.00%)      }
         .           
         .               /// Update in place by shifting out from `amount` binders.
 3,906,274 ( 0.03%)      pub fn shift_out(&mut self, amount: u32) {
 7,812,548 ( 0.06%)          *self = self.shifted_out(amount);
 7,812,548 ( 0.06%)      }
         .           
         .               /// Adjusts any De Bruijn indices so as to make `to_binder` the
         .               /// innermost binder. That is, if we have something bound at `to_binder`,
         .               /// it will now be bound at INNERMOST. This is an appropriate thing to do
         .               /// when moving a region out from inside binders:
         .               ///
         .               /// ```
         .               ///             for<'a>   fn(for<'b>   for<'c>   fn(&'a u32), _)
-- line 199 ----------------------------------------
-- line 210 ----------------------------------------
         .               /// If we invoke `shift_out_to_binder` and the region is in fact
         .               /// bound by one of the binders we are shifting out of, that is an
         .               /// error (and should fail an assertion failure).
         .               pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {
         .                   self.shifted_out(to_binder.as_u32() - INNERMOST.as_u32())
         .               }
         .           }
         .           
     1,068 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     9,806 ( 0.00%)  #[derive(Encodable, Decodable)]
         .           pub enum IntTy {
         .               Isize,
         .               I8,
         .               I16,
         .               I32,
         .               I64,
         .               I128,
         .           }
-- line 227 ----------------------------------------
-- line 244 ----------------------------------------
         .                       IntTy::I8 => 8,
         .                       IntTy::I16 => 16,
         .                       IntTy::I32 => 32,
         .                       IntTy::I64 => 64,
         .                       IntTy::I128 => 128,
         .                   })
         .               }
         .           
       178 ( 0.00%)      pub fn normalize(&self, target_width: u32) -> Self {
       534 ( 0.00%)          match self {
       306 ( 0.00%)              IntTy::Isize => match target_width {
         .                           16 => IntTy::I16,
         .                           32 => IntTy::I32,
         .                           64 => IntTy::I64,
         .                           _ => unreachable!(),
         .                       },
         .                       _ => *self,
         .                   }
       356 ( 0.00%)      }
         .           }
         .           
     1,082 ( 0.00%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]
    15,522 ( 0.00%)  #[derive(Encodable, Decodable)]
         .           pub enum UintTy {
         .               Usize,
         .               U8,
         .               U16,
         .               U32,
         .               U64,
         .               U128,
         .           }
-- line 274 ----------------------------------------
-- line 291 ----------------------------------------
         .                       UintTy::U8 => 8,
         .                       UintTy::U16 => 16,
         .                       UintTy::U32 => 32,
         .                       UintTy::U64 => 64,
         .                       UintTy::U128 => 128,
         .                   })
         .               }
         .           
     1,306 ( 0.00%)      pub fn normalize(&self, target_width: u32) -> Self {
     3,918 ( 0.00%)          match self {
     2,580 ( 0.00%)              UintTy::Usize => match target_width {
         .                           16 => UintTy::U16,
         .                           32 => UintTy::U32,
         .                           64 => UintTy::U64,
         .                           _ => unreachable!(),
         .                       },
         .                       _ => *self,
         .                   }
     2,612 ( 0.00%)      }
         .           }
         .           
       109 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     1,268 ( 0.00%)  #[derive(Encodable, Decodable)]
         .           pub enum FloatTy {
         .               F32,
         .               F64,
         .           }
         .           
         .           impl FloatTy {
         .               pub fn name_str(self) -> &'static str {
         .                   match self {
-- line 321 ----------------------------------------
-- line 327 ----------------------------------------
         .               pub fn bit_width(self) -> u64 {
         .                   match self {
         .                       FloatTy::F32 => 32,
         .                       FloatTy::F64 => 64,
         .                   }
         .               }
         .           }
         .           
         2 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq)]
         .           pub enum IntVarValue {
         .               IntType(IntTy),
         .               UintType(UintTy),
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq)]
         .           pub struct FloatVarValue(pub FloatTy);
         .           
-- line 343 ----------------------------------------
-- line 346 ----------------------------------------
         .               pub struct TyVid {
         .                   DEBUG_FORMAT = "_#{}t"
         .               }
         .           }
         .           
         .           /// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
         .           pub struct IntVid {
    29,250 ( 0.00%)      pub index: u32,
         .           }
         .           
         .           /// An **float**ing-point (`f32` or `f64`) type **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
         .           pub struct FloatVid {
         .               pub index: u32,
         .           }
         .           
         .           /// A placeholder for a type that hasn't been inferred yet.
         .           ///
         .           /// E.g., if we have an empty array (`[]`), then we create a fresh
         .           /// type variable for the element type since we won't know until it's
         .           /// used what the element type is supposed to be.
 3,182,907 ( 0.02%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
         .           pub enum InferTy {
         .               /// A type variable.
         .               TyVar(TyVid),
         .               /// An integral type variable (`{integer}`).
         .               ///
         .               /// These are created when the compiler sees an integer literal like
         .               /// `1` that could be several different types (`u8`, `i32`, `u32`, etc.).
         .               /// We don't know until it's used what type it's supposed to be, so
-- line 376 ----------------------------------------
-- line 396 ----------------------------------------
         .               FreshFloatTy(u32),
         .           }
         .           
         .           /// Raw `TyVid` are used as the unification key for `sub_relations`;
         .           /// they carry no values.
         .           impl UnifyKey for TyVid {
         .               type Value = ();
         .               fn index(&self) -> u32 {
   207,078 ( 0.00%)          self.as_u32()
   207,078 ( 0.00%)      }
         .               fn from_index(i: u32) -> TyVid {
         .                   TyVid::from_u32(i)
   338,588 ( 0.00%)      }
         .               fn tag() -> &'static str {
         .                   "TyVid"
         .               }
         .           }
         .           
         .           impl EqUnifyValue for IntVarValue {}
         .           
         .           impl UnifyKey for IntVid {
         .               type Value = Option<IntVarValue>;
         .               #[inline] // make this function eligible for inlining - it is quite hot.
         .               fn index(&self) -> u32 {
         .                   self.index
         .               }
    19,021 ( 0.00%)      fn from_index(i: u32) -> IntVid {
         .                   IntVid { index: i }
    19,021 ( 0.00%)      }
         .               fn tag() -> &'static str {
         .                   "IntVid"
         .               }
         .           }
         .           
         .           impl EqUnifyValue for FloatVarValue {}
         .           
         .           impl UnifyKey for FloatVid {
-- line 432 ----------------------------------------
-- line 437 ----------------------------------------
         .               fn from_index(i: u32) -> FloatVid {
         .                   FloatVid { index: i }
         .               }
         .               fn tag() -> &'static str {
         .                   "FloatVid"
         .               }
         .           }
         .           
   117,828 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash)]
         .           pub enum Variance {
         .               Covariant,     // T<A> <: T<B> iff A <: B -- e.g., function return type
         .               Invariant,     // T<A> <: T<B> iff B == A -- e.g., type of mutable cell
         .               Contravariant, // T<A> <: T<B> iff B <: A -- e.g., function param type
         .               Bivariant,     // T<A> <: T<B>            -- e.g., unused type parameter
         .           }
         .           
         .           impl Variance {
-- line 453 ----------------------------------------
-- line 482 ----------------------------------------
         .               /// `Contravariant.xform(Covariant)` or `Contravariant`. The same
         .               /// is true for its `i32` argument. In the `*mut T` case, the
         .               /// variance of `Vec<i32>` is `Contravariant.xform(Invariant)`,
         .               /// and hence the outermost type is `Invariant` with respect to
         .               /// `Vec<i32>` (and its `i32` argument).
         .               ///
         .               /// Source: Figure 1 of "Taming the Wildcards:
         .               /// Combining Definition- and Use-Site Variance" published in PLDI'11.
   222,212 ( 0.00%)      pub fn xform(self, v: Variance) -> Variance {
 1,413,804 ( 0.01%)          match (self, v) {
         .                       // Figure 1, column 1.
         .                       (Variance::Covariant, Variance::Covariant) => Variance::Covariant,
         .                       (Variance::Covariant, Variance::Contravariant) => Variance::Contravariant,
         .                       (Variance::Covariant, Variance::Invariant) => Variance::Invariant,
         .                       (Variance::Covariant, Variance::Bivariant) => Variance::Bivariant,
         .           
         .                       // Figure 1, column 2.
         .                       (Variance::Contravariant, Variance::Covariant) => Variance::Contravariant,
-- line 499 ----------------------------------------
-- line 502 ----------------------------------------
         .                       (Variance::Contravariant, Variance::Bivariant) => Variance::Bivariant,
         .           
         .                       // Figure 1, column 3.
         .                       (Variance::Invariant, _) => Variance::Invariant,
         .           
         .                       // Figure 1, column 4.
         .                       (Variance::Bivariant, _) => Variance::Bivariant,
         .                   }
   222,212 ( 0.00%)      }
         .           }
         .           
         .           impl<CTX> HashStable<CTX> for DebruijnIndex {
         .               fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
         .                   self.as_u32().hash_stable(ctx, hasher);
         .               }
         .           }
         .           
-- line 518 ----------------------------------------

 6,164,298 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_type_ir/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   65,376 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
  215,721 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
    8,307 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
    6,394 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
    3,680 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
    9,591 ( 0.00%)      pub prev_token: Token,
    4,163 ( 0.00%)      pub capture_cfg: bool,
    8,809 ( 0.00%)      restrictions: Restrictions,
    7,360 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
    7,360 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
    7,360 ( 0.00%)      unmatched_angle_bracket_count: u32,
   11,040 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
    3,680 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
    3,680 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
   16,150 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
   14,720 ( 0.00%)      capturing: Capturing,
    3,680 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   24,571 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  540,093 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
  122,840 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   39,105 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  241,841 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   60,185 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
  120,370 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   20,535 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   39,881 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
3,527,592 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
1,685,311 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   31,223 ( 0.00%)                  self.frame.open_delim = true;
  156,115 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
3,420,414 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  134,676 ( 0.00%)              } else if !self.frame.close_delim {
   30,796 ( 0.00%)                  self.frame.close_delim = true;
  153,980 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   61,586 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  400,309 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
  103,482 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  649,490 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
2,351,728 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
2,351,728 ( 0.02%)      }
        .           
  455,040 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  137,400 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
    1,332 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
  225,300 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
   96,120 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
       58 ( 0.00%)                  '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
    1,776 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
    2,220 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
    5,328 ( 0.00%)              [
    3,108 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
    1,776 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    3,552 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
      444 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
      444 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
    5,328 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
    1,332 ( 0.00%)          self.next()
  409,536 ( 0.00%)      }
        .           }
        .           
  200,200 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
  160,160 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
    1,350 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,456 ( 0.00%)      Some(match token.kind {
    2,912 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    2,912 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    2,912 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    5,096 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,456 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    5,096 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    3,640 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   57,498 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    4,107 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    8,214 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
  127,317 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    4,107 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    4,107 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   24,642 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    8,214 ( 0.00%)          parser.bump();
        .           
        .                   parser
   36,963 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
1,639,164 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
  182,016 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  683,070 ( 0.00%)                  self.token_cursor.next()
        .                       };
1,092,776 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  273,194 ( 0.00%)              self.token_cursor.break_last_token = false;
1,092,776 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   17,296 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  911,990 ( 0.01%)              if matches!(
  546,388 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
1,089,224 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  205,749 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   22,861 ( 0.00%)          if self.expected_tokens.is_empty() {
   10,794 ( 0.00%)              if self.token == *t {
    8,995 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  252,744 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  342,915 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  300,924 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   50,154 ( 0.00%)          if edible.contains(&self.token.kind) {
   65,076 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  376,155 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  205,636 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  156,123 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  363,209 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   51,887 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  311,322 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
  207,548 ( 0.00%)          self.bump();
        .                   Ok(ident)
  518,870 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
4,616,255 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
2,051,696 ( 0.01%)          let is_present = self.token == *tok;
1,388,530 ( 0.01%)          if !is_present {
3,016,985 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
4,616,255 ( 0.03%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    2,232 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
1,007,545 ( 0.01%)          let is_present = self.check(tok);
  663,004 ( 0.00%)          if is_present {
  125,904 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
    2,790 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
  203,625 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   47,400 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
1,410,600 ( 0.01%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  343,665 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  262,204 ( 0.00%)          if self.check_keyword(kw) {
   26,888 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  343,665 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   82,196 ( 0.00%)          if self.token.is_keyword(kw) {
   16,247 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    6,450 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    5,160 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  170,416 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   85,208 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  191,718 ( 0.00%)      }
        .           
  428,190 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  152,864 ( 0.00%)          if ok {
        .                       true
        .                   } else {
  101,092 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  428,190 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   56,746 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
  117,092 ( 0.00%)      fn check_path(&mut self) -> bool {
  265,789 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  146,365 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
   76,602 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
   59,376 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   42,066 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   23,370 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   42,066 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   58,452 ( 0.00%)          self.check_or_expected(
   29,226 ( 0.00%)              self.token.is_like_plus(),
   29,226 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  556,164 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  324,429 ( 0.00%)          if self.token.kind == expected {
   28,158 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
  161,340 ( 0.00%)          match self.token.kind.break_two_token_op() {
    4,446 ( 0.00%)              Some((first, second)) if first == expected => {
    2,520 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
    3,150 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
    5,670 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
      630 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
    8,820 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   94,914 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  543,687 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
   10,656 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   12,468 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
    2,700 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
   32,710 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  114,404 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   75,394 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
   23,840 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
   25,090 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
   32,710 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
   34,860 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
   17,430 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
   11,620 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   70,764 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    8,022 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   74,786 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   50,927 ( 0.00%)              if let Some(ref t) = sep.sep {
   61,569 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   39,410 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   26,608 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   21,692 ( 0.00%)              let t = f(self)?;
   14,684 ( 0.00%)              v.push(t);
        .                   }
        .           
   43,952 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   46,013 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   66,910 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   27,889 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   14,263 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   73,020 ( 0.00%)          Ok((val, trailing))
   53,528 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   24,204 ( 0.00%)          self.expect(bra)?;
   53,528 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    9,720 ( 0.00%)              &token::OpenDelim(delim),
   12,759 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
3,548,168 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
1,637,616 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
1,091,744 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  272,936 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  272,936 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
2,178,448 ( 0.02%)      pub fn bump(&mut self) {
1,089,224 ( 0.01%)          let next_token = self.next_tok(self.token.span);
1,633,836 ( 0.01%)          self.bump_with(next_token);
2,178,448 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
    1,232 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   24,226 ( 0.00%)          if dist == 0 {
    8,978 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   79,467 ( 0.00%)          let frame = &self.token_cursor.frame;
   85,934 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  206,564 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  271,935 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  337,676 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  119,291 ( 0.00%)                      Some(tree) => match tree {
   54,959 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   35,511 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   51,876 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
   19,530 ( 0.00%)          let mut token = Token::dummy();
   37,383 ( 0.00%)          while i < dist {
  157,624 ( 0.00%)              token = cursor.next().0;
   65,557 ( 0.00%)              if matches!(
   40,677 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
   18,695 ( 0.00%)              i += 1;
        .                   }
      401 ( 0.00%)          return looker(&token);
    1,386 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   86,562 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   24,771 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   86,562 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    6,288 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
    1,325 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
   25,152 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   62,784 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
   19,538 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      140 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
  109,872 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
      656 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    4,984 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
      918 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
      918 ( 0.00%)      }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      888 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    1,332 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    5,366 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    3,531 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   29,385 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   26,120 ( 0.00%)          Ok(
   19,485 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    2,418 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    2,322 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
   10,548 ( 0.00%)                  match self.parse_token_tree() {
   13,185 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    5,274 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
    1,256 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
      245 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
      245 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
      245 ( 0.00%)                      let span = expr.span;
        .           
    1,225 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    2,205 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   22,855 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   65,988 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   37,320 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   67,000 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   43,505 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  194,552 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
  143,300 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    7,560 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    7,560 ( 0.00%)                  let span = frame.span;
    3,780 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    7,560 ( 0.00%)                  self.bump();
   18,900 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
    9,190 ( 0.00%)                  self.bump();
   22,975 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   58,625 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
        .               }
        .           
      264 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
        .                   let mut result = Vec::new();
        .                   loop {
    1,511 ( 0.00%)              match self.token.kind {
        .                           token::Eof | token::CloseDelim(..) => break,
      768 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
        .                       }
        .                   }
      198 ( 0.00%)          TokenStream::new(result)
      264 ( 0.00%)      }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   22,809 ( 0.00%)          let old = self.restrictions;
   29,389 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   28,291 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   86,128 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   53,830 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   96,894 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   73,680 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   14,886 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    7,368 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   29,472 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    6,646 ( 0.00%)              return Ok(Visibility {
   19,938 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      722 ( 0.00%)          let lo = self.prev_token.span;
        .           
    3,610 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
    1,270 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
      414 ( 0.00%)                  self.bump(); // `(`
      276 ( 0.00%)                  self.bump(); // `crate`
      414 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      138 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
      414 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
       28 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
       12 ( 0.00%)                  self.bump(); // `(`
       12 ( 0.00%)                  self.bump(); // `in`
        4 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `path`
       12 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       44 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
       16 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
        .                           && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
        .                       {
        .                           // Parse `pub(self)` or `pub(super)`.
        .                           self.bump(); // `(`
-- line 1329 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    1,740 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   66,312 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
    1,927 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
   22,730 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
    2,593 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
   22,730 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  332,432 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  166,216 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   61,870 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  343,674 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
   62,296 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   31,148 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   31,148 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
   62,296 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

1,720,012 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
     2,166 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
     2,166 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
     4,332 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
   486,970 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 3,311,396 ( 0.02%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
   292,182 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
   584,364 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   265,263 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 2,695,851 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    45,530 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    71,234 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   678,659 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
   776,637 ( 0.01%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
   720,424 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   972,326 ( 0.01%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    53,856 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
     9,946 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     7,184 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
     9,902 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    97,394 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   292,182 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    97,394 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
    55,674 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    68,046 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    30,930 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    43,302 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
     5,006 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     2,503 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    17,378 ( 0.00%)          self
     7,509 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
   207,448 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
   331,194 ( 0.00%)              let (value, subst) =
    18,440 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   501,721 ( 0.00%)              f(infcx, value, subst)
         .                   })
   224,389 ( 0.00%)      }
         .           
   378,684 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   275,620 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 3,996,128 ( 0.03%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
    97,394 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
    97,394 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
   418,203 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
     6,995 ( 0.00%)          let InferOk { value, obligations } = self;
    24,870 ( 0.00%)          for obligation in obligations {
     2,158 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
    66,153 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   264,612 ( 0.00%)          self.obligations
    66,153 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
   290,323 ( 0.00%)      }
         .           
 2,238,208 ( 0.02%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 2,517,984 ( 0.02%)          t.fold_with(&mut self.freshener())
 2,517,984 ( 0.02%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     2,402 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     4,804 ( 0.00%)          match *ty.kind() {
     1,199 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     4,796 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         2 ( 0.00%)              _ => None,
         .                   }
     4,804 ( 0.00%)      }
         .           
   279,776 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   279,776 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   563,260 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   563,260 ( 0.00%)      }
         .           
    10,708 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     5,354 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     5,354 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     2,386 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
     2,510 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         2 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
    18,739 ( 0.00%)      }
         .           
   755,741 ( 0.01%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
 3,050,500 ( 0.02%)          CombineFields {
         .                       infcx: self,
 7,626,250 ( 0.06%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
   755,741 ( 0.01%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
         .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
    27,360 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
         .               }
         .           
 3,840,790 ( 0.03%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
11,522,370 ( 0.08%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
 1,920,395 ( 0.01%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
 7,681,580 ( 0.06%)      }
         .           
11,167,486 ( 0.08%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
 1,015,226 ( 0.01%)              undo_snapshot,
 1,015,226 ( 0.01%)              region_constraints_snapshot,
 1,015,226 ( 0.01%)              universe,
 1,015,226 ( 0.01%)              was_in_snapshot,
 2,030,452 ( 0.01%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
 1,015,226 ( 0.01%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
13,577,535 ( 0.10%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   905,169 ( 0.01%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
   905,169 ( 0.01%)              was_in_snapshot,
 1,810,338 ( 0.01%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
   412,169 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   515,295 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    46,845 ( 0.00%)          let snapshot = self.start_snapshot();
   168,643 ( 0.00%)          let r = f(&snapshot);
   327,915 ( 0.00%)          self.commit_from(snapshot);
   323,156 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
10,850,485 ( 0.08%)      #[instrument(skip(self, f), level = "debug")]
13,295,406 ( 0.10%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
 1,429,730 ( 0.01%)          let snapshot = self.start_snapshot();
 6,069,225 ( 0.04%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   921,424 ( 0.01%)          match r {
         .                       Ok(_) => {
 6,669,329 ( 0.05%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
 4,773,895 ( 0.03%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
 7,221,581 ( 0.05%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
 2,682,776 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
 3,059,944 ( 0.02%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
 1,222,974 ( 0.01%)          let snapshot = self.start_snapshot();
 1,346,423 ( 0.01%)          let r = f(&snapshot);
 4,866,235 ( 0.04%)          self.rollback_to("probe", snapshot);
   120,961 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    60,453 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    80,604 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    13,434 ( 0.00%)          let snapshot = self.start_snapshot();
     6,717 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
    13,434 ( 0.00%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
    26,868 ( 0.00%)          let r = f(&snapshot);
    60,453 ( 0.00%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
    80,604 ( 0.00%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   348,234 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
   696,468 ( 0.01%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   522,351 ( 0.00%)      }
         .           
        14 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        28 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        21 ( 0.00%)      }
         .           
     1,140 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
       855 ( 0.00%)      }
         .           
    30,816 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
    23,112 ( 0.00%)      }
         .           
   120,040 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
   108,036 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
       507 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
       338 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
       845 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       676 ( 0.00%)      }
         .           
     8,808 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
       734 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       734 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     5,192 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     1,134 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     1,134 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       167 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
       334 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
     6,606 ( 0.00%)      }
         .           
    34,716 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    28,930 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    23,144 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       511 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
     1,022 ( 0.00%)      }
         .           
    84,160 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   420,800 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   126,240 ( 0.00%)      }
         .           
    79,808 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   292,384 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   119,712 ( 0.00%)      }
         .           
    15,028 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
    82,654 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     7,514 ( 0.00%)          self.tcx.mk_ty_var(vid)
    22,542 ( 0.00%)      }
         .           
         .               pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
         .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
         .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                       origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
         .               }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
     3,905 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
     2,343 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
     3,124 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
    36,813 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   838,432 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
    73,626 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
   360,452 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
 2,342,938 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   901,130 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
   540,678 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
    36,458 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    54,687 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
    20,668 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    31,002 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    45,529 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    91,058 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     3,676 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
    26,832 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     7,352 ( 0.00%)      }
         .           
 1,429,920 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   776,314 ( 0.01%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    58,693 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
   473,716 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
   592,145 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   118,429 ( 0.00%)                              param.name,
   118,429 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
   118,429 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
    17,798 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
     1,618 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
    12,944 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
   376,011 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 1,597,362 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   250,674 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
     6,748 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
   171,770 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    10,122 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   172,844 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   469,148 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    24,692 ( 0.00%)              assert!(
    74,076 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    24,692 ( 0.00%)          };
         .           
         .                   let region_rels =
    24,692 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
   222,228 ( 0.00%)          let (lexical_region_resolutions, errors) =
   592,608 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
    98,768 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    24,692 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
   222,228 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   246,920 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    49,384 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
    74,076 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    49,384 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
   123,460 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
         .               /// region constraints as normal, but then we take them and
         .               /// translate them into the form that the NLL solver
         .               /// understands. See the NLL module for mode details.
        18 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
         6 ( 0.00%)          assert!(
         .                       self.inner.borrow().region_obligations.is_empty(),
         .                       "region_obligations not empty: {:#?}",
         .                       self.inner.borrow().region_obligations
         .                   );
         .           
        24 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
        30 ( 0.00%)      }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
   120,456 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
    12,500 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
    47,500 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
     2,500 ( 0.00%)              .into_infos_and_data();
     2,500 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
    20,000 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
    49,076 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   147,228 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   171,766 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,075,927 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
    51,768 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
    77,652 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
   144,604 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,214,308 ( 0.01%)          if !value.needs_infer() {
 2,465,962 ( 0.02%)              return value; // Avoid duplicated subst-folding.
         .                   }
   827,037 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 1,094,681 ( 0.01%)          value.fold_with(&mut r)
   133,736 ( 0.00%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
    42,687 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
   494,862 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
 9,329,446 ( 0.07%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    28,458 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   120,808 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
    45,303 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
   256,717 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   105,707 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
     7,224 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    14,448 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    10,836 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 3,450,152 ( 0.02%)          self.universe.get()
   906,131 ( 0.01%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
    33,176 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    34,002 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
    33,176 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
         .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
         .               /// returned.
         .               ///
         .               /// This handles inferences variables within both `param_env` and `substs` by
         .               /// performing the operation on their respective canonical forms.
       208 ( 0.00%)      pub fn const_eval_resolve(
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   unevaluated: ty::Unevaluated<'tcx>,
         .                   span: Option<Span>,
         .               ) -> EvalToConstValueResult<'tcx> {
        16 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
         .           
         .                   // Postpone the evaluation of constants whose substs depend on inference
         .                   // variables
         .                   if substs.has_infer_types_or_consts() {
         .                       return Err(ErrorHandled::TooGeneric);
         .                   }
         .           
        16 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
         .                   let substs_erased = self.tcx.erase_regions(substs);
         .           
         .                   let unevaluated = ty::Unevaluated {
         .                       def: unevaluated.def,
         .                       substs: substs_erased,
        32 ( 0.00%)              promoted: unevaluated.promoted,
         .                   };
         .           
         .                   // The return value is the evaluated value which doesn't contain any reference to inference
         .                   // variables, thus we don't need to substitute back the original values.
       192 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
       144 ( 0.00%)      }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
11,793,248 ( 0.09%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 6,160,199 ( 0.04%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
 3,129,020 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
    66,180 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
    21,888 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
13,267,404 ( 0.10%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 1,147,193 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
     3,244 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    25,891 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
    25,891 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
       932 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   236,049 ( 0.00%)          match *ty.kind() {
    51,668 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       626 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
       932 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 2,252,340 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
    13,384 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    11,242 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    11,375 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
     6,825 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
    16,730 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
       214 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
       535 ( 0.00%)          match *self {
       107 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
    81,884 ( 0.00%)          match *cause.code() {
    14,634 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    73,170 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

10,505,103 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
3,640,922 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      163 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,202 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    4,455 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
      152 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      608 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    3,320 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       77 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       76 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       76 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    9,540 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    8,245 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      532 ( 0.00%)      fn from(p: PathBuf) -> Self {
      152 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      456 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      532 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
      304 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      456 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      456 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      380 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,350 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       76 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
      152 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
      942 ( 0.00%)      pub lo: BytePos,
      942 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
    2,808 ( 0.00%)      pub ctxt: SyntaxContext,
      936 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
1,223,256 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    3,114 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
  151,320 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  113,490 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  151,320 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  292,644 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  195,096 ( 0.00%)      }
        .               #[inline]
   15,120 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   15,120 ( 0.00%)      }
        .               #[inline]
   60,588 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   40,392 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   24,325 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   14,595 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
      144 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       96 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       12 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
        8 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
    1,467 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      978 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    9,342 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    6,228 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// the macro callsite that expanded to it.
        .               pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
        .               }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
      120 ( 0.00%)      pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
       48 ( 0.00%)          if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      288 ( 0.00%)      }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    5,350 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    2,675 ( 0.00%)          while !outer.contains(self) {
      120 ( 0.00%)              self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    5,885 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   88,650 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   59,100 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   16,346 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
   12,685 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   14,694 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    6,190 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
    1,238 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    4,952 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   35,994 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   30,852 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   25,710 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
    1,290 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    1,548 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
    1,032 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
    1,884 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
      471 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
    1,884 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
2,140,138 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  385,809 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    3,307 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    2,894 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
1,342,565 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
1,751,022 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
   11,935 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    7,595 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    8,680 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
   17,523 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    3,186 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   11,151 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   14,337 ( 0.00%)      }
        .           
    1,749 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
    1,113 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    4,900 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      310 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   31,260 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   18,235 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
  866,385 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  284,796 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  189,864 ( 0.00%)          let mut span = self.data();
  154,182 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  284,796 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  312,402 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
    3,656 ( 0.00%)          let mut span = self.data();
    5,484 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
   14,624 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   22,185 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
   16,226 ( 0.00%)          let mut span = self.data();
   15,197 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
   27,929 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   24,650 ( 0.00%)      }
        .           
        .               #[inline]
  346,280 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  302,995 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
       25 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
   10,540 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
       25 ( 0.00%)      }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      190 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
       60 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
       20 ( 0.00%)          self.span_labels.push((span, label));
       50 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      728 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
   10,515 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
   10,515 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      190 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      152 ( 0.00%)          MultiSpan::from_spans(spans)
      190 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
   16,742 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      402 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
        .           
        .           impl NonNarrowChar {
        .               fn new(pos: BytePos, width: usize) -> Self {
       20 ( 0.00%)          match width {
        .                       0 => NonNarrowChar::ZeroWidth(pos),
        .                       2 => NonNarrowChar::Wide(pos),
        .                       4 => NonNarrowChar::Tab(pos),
        .                       _ => panic!("width {} given for non-narrow character", width),
        .                   }
        .               }
        .           
        .               /// Returns the absolute offset of the character in the `SourceMap`.
-- line 1188 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      468 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
      228 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    3,790 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,220 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      456 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,440 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
      234 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
      234 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    4,408 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       76 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       76 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       76 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      304 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
      150 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
      152 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
      228 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      836 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,490 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      610 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  934,046 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,220 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,710 ( 0.00%)              SourceFile {
    4,880 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,440 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,440 ( 0.00%)                  lines,
    2,440 ( 0.00%)                  multibyte_chars,
    2,440 ( 0.00%)                  non_narrow_chars,
    2,440 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,490 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      858 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
      234 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
      156 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
      156 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
      234 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      936 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
      156 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
    1,326 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      858 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      312 ( 0.00%)              lines,
      312 ( 0.00%)              multibyte_chars,
      312 ( 0.00%)              non_narrow_chars,
      312 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      702 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
   17,822 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    2,546 ( 0.00%)          if matches!(
    5,092 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    2,546 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   22,914 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      675 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   60,048 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   71,443 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  179,309 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
  122,885 ( 0.00%)          assert!(line_index < self.lines.len());
  172,386 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      760 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
  114,338 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      780 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      702 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       78 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       78 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  276,813 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   18,111 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  367,012 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,599,118 ( 0.02%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
4,864,404 ( 0.04%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1939 ----------------------------------------
        .               /// Because of multibyte UTF-8 characters, a byte offset
        .               /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]
        .               /// values to `CharPos` values as necessary.
        .               #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
        .               pub struct CharPos(pub usize);
        .           }
        .           
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
       50 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
       60 ( 0.00%)      }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  567,340 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        2 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      874 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      437 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
2,623,341 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  517,761 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
2,105,580 ( 0.02%)          let span = self.data_untracked();
  695,315 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
1,124,289 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  756,402 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  735,774 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
1,471,541 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  735,760 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  367,880 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  367,880 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
2,998,104 ( 0.02%)      }
        .           }

6,954,529 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                  

-- line 267 ----------------------------------------
         .           macro_rules! bitor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitOr for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
    11,691 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
         .           macro_rules! bitxor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitXor for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
29,516,910 ( 0.21%)              fn bitxor(self, other: $t) -> $t { self ^ other }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 384 ----------------------------------------
-- line 468 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const Shl<$f> for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn shl(self, other: $f) -> $t {
       372 ( 0.00%)                  self << other
         .                       }
         .                   }
         .           
         .                   forward_ref_binop! { impl const Shl, shl for $t, $f }
         .               };
         .           }
         .           
         .           macro_rules! shl_impl_all {
-- line 484 ----------------------------------------

10,876,895 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 223 ----------------------------------------
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ne(&self, other: &Rhs) -> bool {
   145,073 ( 0.00%)          !self.eq(other)
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
     6,071 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
     6,760 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
   324,808 ( 0.00%)          max_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
    11,962 ( 0.00%)          min_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
   260,062 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
 2,348,406 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn gt(&self, other: &Rhs) -> bool {
57,511,310 ( 0.42%)          matches!(self.partial_cmp(other), Some(Greater))
         .               }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ge(&self, other: &Rhs) -> bool {
       397 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 1,507,489 ( 0.01%)      match compare(&v1, &v2) {
         .                   Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
         2 ( 0.00%)  }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
         .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        12 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
         8 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
         8 ( 0.00%)  }
         .           
         .           /// Compares and returns the maximum of two values.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// Internally uses an alias to [`Ord::max`].
         .           ///
         .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1273 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 2,690,815 ( 0.02%)      match compare(&v1, &v2) {
     2,645 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
         .                   Ordering::Greater => v1,
         .               }
         .           }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
    60,776 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
   127,775 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
17,793,938 ( 0.13%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
   272,492 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
        40 ( 0.00%)                  fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
         .                           fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 7,594,431 ( 0.05%)                      if *self < *other { Less }
         .                               else if *self == *other { Equal }
         .                               else { Greater }
         .                           }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
     1,283 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
   132,396 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 6,336,397 ( 0.05%)              PartialEq::eq(*self, *other)
   916,110 ( 0.01%)          }
         .                   #[inline]
        25 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
        72 ( 0.00%)              PartialEq::ne(*self, *other)
   170,362 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
         .                   fn cmp(&self, other: &Self) -> Ordering {
         .                       Ord::cmp(*self, *other)
    61,623 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

11,577,729 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  456,815 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
4,757,104 ( 0.03%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
  504,061 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
2,123,216 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  407,072 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
  296,912 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   63,419 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
       64 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   62,862 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  754,344 ( 0.01%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   62,862 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
3,774,199 ( 0.03%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
4,759,645 ( 0.03%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  865,390 ( 0.01%)          let cache_key = obligation.as_cache_key();
  865,390 ( 0.01%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
2,237,526 ( 0.02%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
  151,204 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  151,204 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
  119,595 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
  226,806 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  891,957 ( 0.01%)              Entry::Vacant(v) => {
1,783,914 ( 0.01%)                  let obligation_tree_id = match parent {
  137,828 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
  297,319 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
3,894,255 ( 0.03%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  685,503 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
  195,858 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  587,574 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
      123 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
       63 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
        9 ( 0.00%)          self.error_cache
       27 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
       72 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
1,831,824 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
  757,921 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
1,108,770 ( 0.01%)              if node.state.get() != NodeState::Pending {
   37,836 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
1,558,465 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
1,187,632 ( 0.01%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
1,472,376 ( 0.01%)                      for child in children {
2,420,324 ( 0.02%)                          let st = self.register_obligation_at(child, Some(index));
  284,744 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
      132 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
1,033,098 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   63,419 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   81,898 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
1,831,824 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
       28 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
        9 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
       18 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
        5 ( 0.00%)                  index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
        .                       }
        .                   }
        .           
        .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
       32 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
  896,156 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  381,990 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   21,162 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
   21,162 ( 0.00%)              let state = node.state.get();
   21,162 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
   36,570 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
   85,330 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
   97,520 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   40,949 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  381,990 ( 0.00%)              if node.state.get() == NodeState::Success {
1,445,295 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  327,592 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
3,559,671 ( 0.03%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  791,038 ( 0.01%)          if node.state.get() == NodeState::Success {
   16,224 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
  106,460 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  425,840 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
        .                               processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
3,164,152 ( 0.02%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
1,013,095 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  138,878 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
2,073,746 ( 0.01%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  170,156 ( 0.00%)                      if dead_nodes > 0 {
   85,710 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  142,850 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
1,147,902 ( 0.01%)                      if let Some((predicate, _)) =
  890,709 ( 0.01%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
  593,806 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  593,806 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
       27 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
       18 ( 0.00%)                      self.insert_into_error_cache(index);
       18 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
       18 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   80,466 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   40,233 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  555,512 ( 0.00%)          self.reused_node_vec = node_rewrites;
1,111,024 ( 0.01%)      }
        .           
        .               #[inline(never)]
  362,097 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
   95,035 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   72,068 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   36,034 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   18,017 ( 0.00%)                      *dependent = new_index;
   36,034 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
  466,912 ( 0.00%)              let new_index = node_rewrites[*index];
  233,456 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
   77,018 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  321,864 ( 0.00%)      }
        .           }

5,412,739 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                   

-- line 46 ----------------------------------------
          .           ///
          .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
          .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
          .               /// Consumers may find this more convenient to use with infallible folders than
          .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
          .               /// provided default definition delegates.  Implementors **should not** override
          .               /// this provided default definition, to ensure that the two methods are coherent
          .               /// (provide a definition of `try_super_fold_with` instead).
 44,726,966 ( 0.32%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  6,474,445 ( 0.05%)          self.try_super_fold_with(folder).into_ok()
 51,148,432 ( 0.37%)      }
          .               /// Consumers may find this more convenient to use with infallible folders than
          .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
          .               /// default definition delegates.  Implementors **should not** override this
          .               /// provided default definition, to ensure that the two methods are coherent
          .               /// (provide a definition of `try_fold_with` instead).
  1,896,320 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  4,361,097 ( 0.03%)          self.try_fold_with(folder).into_ok()
  1,788,372 ( 0.01%)      }
          .           
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error>;
          .           
164,718,157 ( 1.19%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
 68,073,592 ( 0.49%)          self.try_super_fold_with(folder)
174,042,844 ( 1.26%)      }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  2,650,787 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  4,184,765 ( 0.03%)          self.super_visit_with(visitor)
  1,437,883 ( 0.01%)      }
          .           
          .               /// Returns `true` if `self` has any late-bound regions that are either
          .               /// bound by `binder` or bound by some binder outside of `binder`.
          .               /// If `binder` is `ty::INNERMOST`, this indicates whether
          .               /// there are any late-bound regions that appear free.
          .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  4,330,812 ( 0.03%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
          .               }
          .           
          .               /// Returns `true` if this `self` has any regions that escape `binder` (and
          .               /// hence are not bound by it).
          .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
        999 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
          .               }
          .           
 17,441,080 ( 0.13%)      fn has_escaping_bound_vars(&self) -> bool {
  1,068,591 ( 0.01%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
 17,452,955 ( 0.13%)      }
          .           
    538,439 ( 0.00%)      #[instrument(level = "trace")]
          .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
    463,051 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
          .               }
          .               fn has_projections(&self) -> bool {
     79,904 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
          .               }
          .               fn has_opaque_types(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
          .               }
    110,720 ( 0.00%)      fn references_error(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    110,720 ( 0.00%)      }
          .               fn has_param_types_or_consts(&self) -> bool {
     18,090 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
          .               }
          .               fn has_infer_regions(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
          .               }
          .               fn has_infer_types(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
          .               }
          .               fn has_infer_types_or_consts(&self) -> bool {
  1,315,666 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
          .               }
    454,972 ( 0.00%)      fn needs_infer(&self) -> bool {
    858,208 ( 0.01%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    456,736 ( 0.00%)      }
          .               fn has_placeholders(&self) -> bool {
          .                   self.has_type_flags(
          .                       TypeFlags::HAS_RE_PLACEHOLDER
          .                           | TypeFlags::HAS_TY_PLACEHOLDER
          .                           | TypeFlags::HAS_CT_PLACEHOLDER,
          .                   )
          .               }
          .               fn needs_subst(&self) -> bool {
        120 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_SUBST)
          .               }
          .               /// "Free" regions in this context means that it has any region
          .               /// that is not (a) erased or (b) late-bound.
          .               fn has_free_regions(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
          .               }
          .           
          .               fn has_erased_regions(&self) -> bool {
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
          .               /// True if there are any un-erased free regions.
          .               fn has_erasable_regions(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
          .               }
          .           
          .               /// Indicates whether this value references only 'global'
          .               /// generic parameters that are the same regardless of what fn we are
          .               /// in. This is used for caching.
         10 ( 0.00%)      fn is_global(&self) -> bool {
    622,481 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
         12 ( 0.00%)      }
          .           
          .               /// True if there are any late-bound regions
          .               fn has_late_bound_regions(&self) -> bool {
          .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
          .               }
          .           
          .               /// Indicates whether this value still has parameters/placeholders/inference variables
          .               /// which could be replaced later, in a way that would change the results of `impl`
-- line 164 ----------------------------------------
-- line 194 ----------------------------------------
          .           
          .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
          .           
          .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
 40,408,930 ( 0.29%)          t.super_fold_with(self)
          .               }
          .           
          .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
          .               where
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
    563,057 ( 0.00%)          t.super_fold_with(self)
          .               }
          .           
          .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
          .               where
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
          .                   r.super_fold_with(self)
          .               }
          .           
          .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
          .               where
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
     25,386 ( 0.00%)          c.super_fold_with(self)
          .               }
          .           
          .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
          .               where
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
    135,859 ( 0.00%)          p.super_fold_with(self)
          .               }
          .           
          .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
          .               where
          .                   Self: TypeFolder<'tcx, Error = !>,
          .               {
          .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
          .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
          .           /// A blanket implementation of this trait (that defers to the relevant
          .           /// method of [`TypeFolder`]) is provided for all infallible folders in
          .           /// order to ensure the two APIs are coherent.
          .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
          .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,913,745 ( 0.01%)          t.try_super_fold_with(self)
          .               }
          .           
          .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
          .                   t.try_super_fold_with(self)
          .               }
          .           
          .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
          .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
          .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
          .                   c.try_super_fold_with(self)
          .               }
          .           
          .               fn try_fold_predicate(
          .                   &mut self,
          .                   p: ty::Predicate<'tcx>,
          .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    406,239 ( 0.00%)          p.try_super_fold_with(self)
          .               }
          .           
          .               fn try_fold_mir_const(
          .                   &mut self,
          .                   c: mir::ConstantKind<'tcx>,
          .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
          .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
          .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
          .           }
          .           
          .           // Blanket implementation of fallible trait for infallible folders
          .           // delegates to infallible methods to prevent incoherence
          .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
          .           where
          .               F: TypeFolder<'tcx, Error = !>,
          .           {
  4,749,722 ( 0.03%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  6,551,855 ( 0.05%)          Ok(self.fold_binder(t))
  5,577,484 ( 0.04%)      }
          .           
    829,065 ( 0.01%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
 47,337,064 ( 0.34%)          Ok(self.fold_ty(t))
    556,500 ( 0.00%)      }
          .           
     44,064 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  1,448,243 ( 0.01%)          Ok(self.fold_region(r))
     44,064 ( 0.00%)      }
          .           
     44,285 ( 0.00%)      fn try_fold_const(
          .                   &mut self,
          .                   c: &'tcx ty::Const<'tcx>,
          .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
  2,329,030 ( 0.02%)          Ok(self.fold_const(c))
     38,115 ( 0.00%)      }
          .           
          .               fn try_fold_predicate(
          .                   &mut self,
          .                   p: ty::Predicate<'tcx>,
          .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
          .                   Ok(self.fold_predicate(p))
          .               }
          .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
          .           
          .           pub trait TypeVisitor<'tcx>: Sized {
          .               type BreakTy = !;
          .           
          .               fn visit_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: &Binder<'tcx, T>,
          .               ) -> ControlFlow<Self::BreakTy> {
        474 ( 0.00%)          t.super_visit_with(self)
          .               }
          .           
          .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
     12,224 ( 0.00%)          t.super_visit_with(self)
          .               }
          .           
          .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   r.super_visit_with(self)
          .               }
          .           
        576 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   c.super_visit_with(self)
        504 ( 0.00%)      }
          .           
          .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
         48 ( 0.00%)          uv.super_visit_with(self)
          .               }
          .           
          .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   p.super_visit_with(self)
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
-- line 362 ----------------------------------------
-- line 376 ----------------------------------------
          .           
          .           impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>
          .           where
          .               F: FnMut(Ty<'tcx>) -> Ty<'tcx>,
          .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
          .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
          .           {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         81 ( 0.00%)          self.tcx
          .               }
          .           
          .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     19,285 ( 0.00%)          let t = ty.super_fold_with(self);
          .                   (self.ty_op)(t)
          .               }
          .           
          .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
          .                   let r = r.super_fold_with(self);
          .                   (self.lt_op)(r)
          .               }
          .           
          .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         14 ( 0.00%)          let ct = ct.super_fold_with(self);
          .                   (self.ct_op)(ct)
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Region folder
          .           
          .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
          .               ) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
          .               }
          .           
          .               /// Invoke `callback` on every region appearing free in `value`.
     10,914 ( 0.00%)      pub fn for_each_free_region(
          .                   self,
          .                   value: &impl TypeFoldable<'tcx>,
          .                   mut callback: impl FnMut(ty::Region<'tcx>),
          .               ) {
          .                   self.any_free_region_meets(value, |r| {
     74,150 ( 0.00%)              callback(r);
          .                       false
          .                   });
      9,481 ( 0.00%)      }
          .           
          .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
          .               pub fn all_free_regions_meet(
          .                   self,
          .                   value: &impl TypeFoldable<'tcx>,
          .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
          .               ) -> bool {
     14,721 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
          .               }
          .           
          .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
          .               pub fn any_free_region_meets(
          .                   self,
          .                   value: &impl TypeFoldable<'tcx>,
          .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
          .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
          .                       F: FnMut(ty::Region<'tcx>) -> bool,
          .                   {
          .                       type BreakTy = ();
          .           
          .                       fn visit_binder<T: TypeFoldable<'tcx>>(
          .                           &mut self,
          .                           t: &Binder<'tcx, T>,
          .                       ) -> ControlFlow<Self::BreakTy> {
      5,740 ( 0.00%)                  self.outer_index.shift_in(1);
        528 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
        396 ( 0.00%)                  self.outer_index.shift_out(1);
          .                           result
          .                       }
          .           
     66,670 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    119,195 ( 0.00%)                  match *r {
        670 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
          .                                   ControlFlow::CONTINUE
          .                               }
          .                               _ => {
          .                                   if (self.callback)(r) {
          .                                       ControlFlow::BREAK
          .                                   } else {
          .                                       ControlFlow::CONTINUE
          .                                   }
          .                               }
          .                           }
     93,338 ( 0.00%)              }
          .           
          .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                           // We're only interested in types involving regions
    116,731 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    125,637 ( 0.00%)                      ty.super_visit_with(self)
          .                           } else {
          .                               ControlFlow::CONTINUE
          .                           }
          .                       }
          .                   }
          .           
    203,461 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
          .               }
          .           }
          .           
          .           /// Folds over the substructure of a type, visiting its component
          .           /// types and all regions that occur *free* within it.
          .           ///
          .           /// That is, `Ty` can contain function or method types that bind
          .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
          .           
          .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
          .               #[inline]
          .               pub fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   skipped_regions: &'a mut bool,
          .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
          .               ) -> RegionFolder<'a, 'tcx> {
    916,446 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
          .               }
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    511,577 ( 0.00%)          self.tcx
    511,577 ( 0.00%)      }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
     14,390 ( 0.00%)          self.current_index.shift_in(1);
      1,742 ( 0.00%)          let t = t.super_fold_with(self);
     12,291 ( 0.00%)          self.current_index.shift_out(1);
          .                   t
          .               }
          .           
      6,114 ( 0.00%)      #[instrument(skip(self), level = "debug")]
          .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    140,410 ( 0.00%)          match *r {
      6,114 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
          .                           debug!(?self.current_index, "skipped bound region");
      6,114 ( 0.00%)                  *self.skipped_regions = true;
          .                           r
          .                       }
          .                       _ => {
          .                           debug!(?self.current_index, "folding free region");
    402,888 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Bound vars replacer
          .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
          .               current_index: ty::DebruijnIndex,
          .           
          .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
          .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
          .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
          .           }
          .           
          .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
    395,422 ( 0.00%)      fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
          .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
          .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
          .               ) -> Self {
  1,762,577 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    197,711 ( 0.00%)      }
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  1,463,464 ( 0.01%)          self.tcx
  1,222,729 ( 0.01%)      }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
  3,541,540 ( 0.03%)          self.current_index.shift_in(1);
 10,347,980 ( 0.07%)          let t = t.super_fold_with(self);
  3,493,238 ( 0.03%)          self.current_index.shift_out(1);
          .                   t
          .               }
          .           
 12,204,010 ( 0.09%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  5,470,998 ( 0.04%)          match *t.kind() {
     42,690 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      8,634 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
          .                               let ty = fld_t(bound_ty);
      8,634 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
          .                           }
          .                       }
  5,453,730 ( 0.04%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
  1,404,624 ( 0.01%)                  return t.super_fold_with(self);
          .                       }
          .                       _ => {}
          .                   }
          .                   t
 13,935,966 ( 0.10%)      }
          .           
    525,948 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    583,118 ( 0.00%)          match *r {
    581,104 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    289,937 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
          .                               let region = fld_r(br);
    694,936 ( 0.01%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
          .                                   // If the callback returns a late-bound region,
          .                                   // that region should always use the INNERMOST
          .                                   // debruijn index. Then we adjust it to the
          .                                   // correct depth.
     57,531 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    575,067 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
          .                               } else {
          .                                   region
          .                               };
          .                           }
          .                       }
          .                       _ => {}
          .                   }
          .                   r
    525,948 ( 0.00%)      }
          .           
          .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        495 ( 0.00%)          match *ct {
          .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
          .                           if debruijn == self.current_index =>
          .                       {
          .                           if let Some(fld_c) = self.fld_c.as_mut() {
          .                               let ct = fld_c(bound_const, ty);
          .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
          .                           }
          .                       }
        165 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
          .                           return ct.super_fold_with(self);
          .                       }
          .                       _ => {}
          .                   }
          .                   ct
          .               }
          .           }
          .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
          .                   mut fld_r: F,
          .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
          .               where
          .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   let mut region_map = BTreeMap::new();
          .                   let mut real_fld_r =
  2,789,023 ( 0.02%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
     21,437 ( 0.00%)          let value = value.skip_binder();
  1,897,563 ( 0.01%)          let value = if !value.has_escaping_bound_vars() {
  3,506,046 ( 0.03%)              value
          .                   } else {
    251,228 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
    382,173 ( 0.00%)              value.fold_with(&mut replacer)
          .                   };
  5,379,698 ( 0.04%)          (value, region_map)
          .               }
          .           
          .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
          .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
          .               /// closure replaces escaping bound consts.
  1,046,598 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
          .                   self,
          .                   value: T,
          .                   mut fld_r: F,
          .                   mut fld_t: G,
          .                   mut fld_c: H,
          .               ) -> T
          .               where
          .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
          .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
          .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,243,653 ( 0.01%)          if !value.has_escaping_bound_vars() {
  2,517,838 ( 0.02%)              value
          .                   } else {
          .                       let mut replacer =
  1,963,685 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    409,824 ( 0.00%)              value.fold_with(&mut replacer)
          .                   }
    719,909 ( 0.01%)      }
          .           
          .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
          .               /// closure replaces bound regions while the `fld_t` closure replaces bound
          .               /// types.
 11,491,995 ( 0.08%)      pub fn replace_bound_vars<T, F, G, H>(
          .                   self,
          .                   value: Binder<'tcx, T>,
          .                   mut fld_r: F,
          .                   fld_t: G,
          .                   fld_c: H,
          .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
          .               where
          .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
          .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
          .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   let mut region_map = BTreeMap::new();
  1,017,047 ( 0.01%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 10,842,862 ( 0.08%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  8,143,463 ( 0.06%)          (value, region_map)
  8,944,985 ( 0.06%)      }
          .           
          .               /// Replaces any late-bound regions bound in `value` with
          .               /// free variants attached to `all_outlive_scope`.
     77,154 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
          .                   self,
          .                   all_outlive_scope: DefId,
          .                   value: ty::Binder<'tcx, T>,
          .               ) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   self.replace_late_bound_regions(value, |br| {
     69,797 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     10,738 ( 0.00%)                  scope: all_outlive_scope,
          .                           bound_region: br.kind,
          .                       }))
          .                   })
          .                   .0
     42,084 ( 0.00%)      }
          .           
          .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   self.replace_escaping_bound_vars(
  5,427,855 ( 0.04%)              value,
     21,858 ( 0.00%)              |r| {
    153,006 ( 0.00%)                  self.mk_region(ty::ReLateBound(
          .                               ty::INNERMOST,
          .                               ty::BoundRegion {
     87,432 ( 0.00%)                          var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
          .                                   kind: r.kind,
          .                               },
          .                           ))
     43,716 ( 0.00%)              },
          .                       |t| {
          .                           self.mk_ty(ty::Bound(
          .                               ty::INNERMOST,
          .                               ty::BoundTy {
          .                                   var: ty::BoundVar::from_usize(t.var.as_usize() + bound_vars),
          .                                   kind: t.kind,
          .                               },
          .                           ))
-- line 804 ----------------------------------------
-- line 843 ----------------------------------------
          .               fn collect_late_bound_regions<T>(
          .                   self,
          .                   value: &Binder<'tcx, T>,
          .                   just_constraint: bool,
          .               ) -> FxHashSet<ty::BoundRegionKind>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
     13,872 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
          .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
          .                   assert!(result.is_continue()); // should never have stopped early
     23,656 ( 0.00%)          collector.regions
          .               }
          .           
          .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
          .               /// method lookup and a few other places where precise region relationships are not required.
          .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
     18,140 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
          .               }
          .           
          .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
          .               /// assigned starting at 0 and increasing monotonically in the order traversed
          .               /// by the fold operation.
          .               ///
          .               /// The chief purpose of this function is to canonicalize regions so that two
          .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
          .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
          .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
  4,189,513 ( 0.03%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  3,109,110 ( 0.02%)          let mut counter = 0;
    504,759 ( 0.00%)          let inner = self
          .                       .replace_late_bound_regions(sig, |_| {
          .                           let br = ty::BoundRegion {
     71,346 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
          .                               kind: ty::BrAnon(counter),
          .                           };
    285,384 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    178,365 ( 0.00%)                  counter += 1;
          .                           r
          .                       })
          .                       .0;
    621,822 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
  1,865,466 ( 0.01%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
          .                   );
  3,714,744 ( 0.03%)          Binder::bind_with_vars(inner, bound_vars)
  3,568,466 ( 0.03%)      }
          .           }
          .           
          .           pub struct ValidateBoundVars<'tcx> {
          .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
          .               binder_index: ty::DebruijnIndex,
          .               // We may encounter the same variable at different levels of binding, so
          .               // this can't just be `Ty`
          .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
          .               tcx: TyCtxt<'tcx>,
          .               current_index: ty::DebruijnIndex,
          .               amount: u32,
          .           }
          .           
          .           impl<'tcx> Shifter<'tcx> {
          .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
          .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
     17,736 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        418 ( 0.00%)          self.tcx
          .               }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
          .                   self.current_index.shift_in(1);
          .                   let t = t.super_fold_with(self);
          .                   self.current_index.shift_out(1);
          .                   t
          .               }
          .           
          .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        588 ( 0.00%)          match *r {
          .                       ty::ReLateBound(debruijn, br) => {
      1,136 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
          .                               r
          .                           } else {
        284 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
          .                               let shifted = ty::ReLateBound(debruijn, br);
      2,840 ( 0.00%)                      self.tcx.mk_region(shifted)
          .                           }
          .                       }
          .                       _ => r,
          .                   }
          .               }
          .           
          .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     18,524 ( 0.00%)          match *ty.kind() {
          .                       ty::Bound(debruijn, bound_ty) => {
          .                           if self.amount == 0 || debruijn < self.current_index {
          .                               ty
          .                           } else {
          .                               let debruijn = debruijn.shifted_in(self.amount);
          .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
          .                           }
          .                       }
          .           
     29,226 ( 0.00%)              _ => ty.super_fold_with(self),
          .                   }
          .               }
          .           
          .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
          .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
          .                       if self.amount == 0 || debruijn < self.current_index {
          .                           ct
          .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
          .           
          .           pub fn shift_region<'tcx>(
          .               tcx: TyCtxt<'tcx>,
          .               region: ty::Region<'tcx>,
          .               amount: u32,
          .           ) -> ty::Region<'tcx> {
          .               match region {
          .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
      6,604 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
          .                   }
          .                   _ => region,
          .               }
          .           }
          .           
          .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
          .           where
          .               T: TypeFoldable<'tcx>,
          .           {
          .               debug!("shift_vars(value={:?}, amount={})", value, amount);
          .           
     19,656 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
          .           }
          .           
          .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
          .           struct FoundEscapingVars;
          .           
          .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
          .           /// bound region or a bound type.
          .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
          .           
          .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
          .               type BreakTy = FoundEscapingVars;
          .           
          .               fn visit_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: &Binder<'tcx, T>,
          .               ) -> ControlFlow<Self::BreakTy> {
     97,565 ( 0.00%)          self.outer_index.shift_in(1);
          .                   let result = t.super_visit_with(self);
    134,618 ( 0.00%)          self.outer_index.shift_out(1);
          .                   result
          .               }
          .           
          .               #[inline]
          .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   // If the outer-exclusive-binder is *strictly greater* than
          .                   // `outer_index`, that means that `t` contains some content
          .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
          .                   // visited.
          .                   if r.bound_at_or_above_binder(self.outer_index) {
          .                       ControlFlow::Break(FoundEscapingVars)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
          .               }
          .           
         72 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   // we don't have a `visit_infer_const` callback, so we have to
          .                   // hook in here to catch this case (annoying...), but
          .                   // otherwise we do want to remember to visit the rest of the
          .                   // const, as it has types/regions embedded in a lot of other
          .                   // places.
        689 ( 0.00%)          match ct.val {
          .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
          .                           ControlFlow::Break(FoundEscapingVars)
          .                       }
          3 ( 0.00%)              _ => ct.super_visit_with(self),
          .                   }
         72 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
          .                       ControlFlow::Break(FoundEscapingVars)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
          .               #[instrument(level = "trace")]
          .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
          .                   debug!(
          .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
          .                       t,
          .                       t.flags(),
          .                       self.flags
          .                   );
  3,232,623 ( 0.02%)          if t.flags().intersects(self.flags) {
          .                       ControlFlow::Break(FoundFlags)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
          .               }
          .           
          .               #[inline]
          .               #[instrument(skip(self), level = "trace")]
          .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     47,630 ( 0.00%)          let flags = r.type_flags();
          .                   trace!(r.flags=?flags);
          .                   if flags.intersects(self.flags) {
          .                       ControlFlow::Break(FoundFlags)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
          .               }
          .           
          .               #[inline]
          .               #[instrument(level = "trace")]
          .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
     23,835 ( 0.00%)          let flags = FlagComputation::for_const(c);
          .                   trace!(r.flags=?flags);
      4,480 ( 0.00%)          if flags.intersects(self.flags) {
          .                       ControlFlow::Break(FoundFlags)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
          .               }
          .           
          .               #[inline]
          .               #[instrument(level = "trace")]
          .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
     35,507 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
          .                   trace!(r.flags=?flags);
          .                   if flags.intersects(self.flags) {
          .                       ControlFlow::Break(FoundFlags)
          .                   } else {
          .                       ControlFlow::CONTINUE
          .                   }
          .               }
          .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
          .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
          .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
          .               /// types may mean that `'a` and `'b` don't appear in the results,
          .               /// so they are not considered *constrained*.
          .               just_constrained: bool,
          .           }
          .           
          .           impl LateBoundRegionsCollector {
      5,914 ( 0.00%)      fn new(just_constrained: bool) -> Self {
     41,398 ( 0.00%)          LateBoundRegionsCollector {
          .                       current_index: ty::INNERMOST,
          .                       regions: Default::default(),
          .                       just_constrained,
          .                   }
      5,914 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
          .               fn visit_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: &Binder<'tcx, T>,
          .               ) -> ControlFlow<Self::BreakTy> {
          6 ( 0.00%)          self.current_index.shift_in(1);
          6 ( 0.00%)          let result = t.super_visit_with(self);
          6 ( 0.00%)          self.current_index.shift_out(1);
          .                   result
          .               }
          .           
     22,254 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   // if we are only looking for "constrained" region, we have to
          .                   // ignore the inputs to a projection, as they may not appear
          .                   // in the normalized form
     32,430 ( 0.00%)          if self.just_constrained {
     36,689 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
          .                           return ControlFlow::CONTINUE;
          .                       }
          .                   }
          .           
     39,479 ( 0.00%)          t.super_visit_with(self)
     15,800 ( 0.00%)      }
          .           
          .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
          .                   // if we are only looking for "constrained" region, we have to
          .                   // ignore the inputs of an unevaluated const, as they may not appear
          .                   // in the normalized form
        964 ( 0.00%)          if self.just_constrained {
        668 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
          .                           return ControlFlow::CONTINUE;
          .                       }
          .                   }
          .           
          .                   c.super_visit_with(self)
          .               }
          .           
          .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     10,175 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      1,719 ( 0.00%)              if debruijn == self.current_index {
          .                           self.regions.insert(br.kind);
          .                       }
          .                   }
          .                   ControlFlow::CONTINUE
          .               }
          .           }

  4,483,705 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .           
          .           /// An entity in the Rust type system, which can be one of
          .           /// several kinds (types, lifetimes, and consts).
          .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
          .           /// with the lowest 2 bits being reserved for a tag to
          .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
          .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
          .           pub struct GenericArg<'tcx> {
  4,347,230 ( 0.03%)      ptr: NonZeroUsize,
 23,209,963 ( 0.17%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
          .           }
          .           
          .           const TAG_MASK: usize = 0b11;
          .           const TYPE_TAG: usize = 0b00;
          .           const REGION_TAG: usize = 0b01;
          .           const CONST_TAG: usize = 0b10;
          .           
    104,976 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
          .           pub enum GenericArgKind<'tcx> {
          .               Lifetime(ty::Region<'tcx>),
          .               Type(Ty<'tcx>),
          .               Const(&'tcx ty::Const<'tcx>),
          .           }
          .           
          .           impl<'tcx> GenericArgKind<'tcx> {
     26,176 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
     26,176 ( 0.00%)          let (tag, ptr) = match self {
          .                       GenericArgKind::Lifetime(lt) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
          .                           (REGION_TAG, lt as *const _ as usize)
          .                       }
          .                       GenericArgKind::Type(ty) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
          .                       }
          .                       GenericArgKind::Const(ct) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
          .                           (CONST_TAG, ct as *const _ as usize)
          .                       }
          .                   };
          .           
    604,413 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
     26,176 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
          .                       GenericArgKind::Type(ty) => ty.fmt(f),
          .                       GenericArgKind::Const(ct) => ct.fmt(f),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> Ord for GenericArg<'tcx> {
         27 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
         18 ( 0.00%)          self.unpack().cmp(&other.unpack())
          .               }
          .           }
          .           
          .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
          .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
          .                   Some(self.cmp(&other))
          .               }
          .           }
          .           
          .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
    473,058 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Lifetime(r).pack()
    473,058 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 17,906,324 ( 0.13%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Type(ty).pack()
 17,906,324 ( 0.13%)      }
          .           }
          .           
          .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      2,761 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Const(c).pack()
      2,761 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> GenericArg<'tcx> {
          .               #[inline]
          .               pub fn unpack(self) -> GenericArgKind<'tcx> {
          .                   let ptr = self.ptr.get();
          .                   unsafe {
127,799,167 ( 0.92%)              match ptr & TAG_MASK {
    427,962 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 34,193,788 ( 0.25%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     11,187 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
          .                           _ => intrinsics::unreachable(),
          .                       }
          .                   }
          .               }
          .           
          .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
          .               /// This is true in cases where `Substs` is used in places where the kinds are known
          .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
          .               pub fn expect_ty(self) -> Ty<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Type(ty) => ty,
          .                       _ => bug!("expected a type, but found another kind"),
          .                   }
    143,500 ( 0.00%)      }
          .           
          .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
          .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Const(c) => c,
          .                       _ => bug!("expected a const, but found another kind"),
          .                   }
          .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
          .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
          .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
          .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     39,630 ( 0.00%)          self.unpack().encode(e)
          .               }
          .           }
          .           
          .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
    130,880 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
    130,880 ( 0.00%)          GenericArgKind::decode(d).pack()
          .               }
          .           }
          .           
          .           /// A substitution mapping generic parameters to new values.
          .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
          .           
          .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
          .           
          .           impl<'a, 'tcx> InternalSubsts<'tcx> {
          .               /// Interpret these substitutions as the substitutions of a closure type.
          .               /// Closure substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and closure kind;
          .               /// see `ty::ClosureSubsts` struct for more comments.
     13,006 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
          .                   ClosureSubsts { substs: self }
     13,006 ( 0.00%)      }
          .           
          .               /// Interpret these substitutions as the substitutions of a generator type.
          .               /// Generator substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and generator kind;
          .               /// see `ty::GeneratorSubsts` struct for more comments.
          .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
          .                   GeneratorSubsts { substs: self }
          .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
          .               /// Inline const substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the inferred type;
          .               /// see `ty::InlineConstSubsts` struct for more comments.
          .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
          .                   InlineConstSubsts { substs: self }
          .               }
          .           
          .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
     83,690 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
     70,128 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
     75,321 ( 0.00%)      }
          .           
          .               /// Creates an `InternalSubsts` for generic parameter definitions,
          .               /// by calling closures to obtain each kind.
          .               /// The closures get to observe the `InternalSubsts` as they're
          .               /// being built, which can be used to correctly
          .               /// substitute defaults of generic parameters.
  1,261,145 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   let defs = tcx.generics_of(def_id);
          .                   let count = defs.count();
          .                   let mut substs = SmallVec::with_capacity(count);
    451,343 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
    281,840 ( 0.00%)          tcx.intern_substs(&substs)
  1,268,307 ( 0.01%)      }
          .           
          .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   Self::for_item(tcx, def_id, |param, substs| {
          .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
          .                   })
          .               }
          .           
  1,626,757 ( 0.01%)      pub fn fill_item<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   tcx: TyCtxt<'tcx>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
    665,720 ( 0.00%)          if let Some(def_id) = defs.parent {
          .                       let parent_defs = tcx.generics_of(def_id);
     60,701 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
          .                   }
          .                   Self::fill_single(substs, defs, mk_kind)
  1,297,360 ( 0.01%)      }
          .           
      5,912 ( 0.00%)      pub fn fill_single<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   substs.reserve(defs.params.len());
          .                   for param in &defs.params {
          .                       let kind = mk_kind(param, substs);
  1,129,893 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
          .                       substs.push(kind);
          .                   }
      5,912 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
          .                   self.iter()
          .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
          .               }
          .           
          .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
          .                   self.iter().filter_map(|k| match k.unpack() {
          .                       GenericArgKind::Lifetime(_) => None,
          .                       generic => Some(generic),
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  2,268,255 ( 0.02%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
          .                       ty
          .                   } else {
          .                       bug!("expected type for param #{} in {:?}", i, self);
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
          .               /// impl<U> X<U> for U { fn f<V>() {} }
          .               /// ```
          .               ///
          .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
          .               /// * If `source_ancestor` is the def_id of the trait.
          .               /// * If `target_substs` is `[U]`, the substs for the impl.
          .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
          .               ///   are needed for it to match the trait.
     91,189 ( 0.00%)      pub fn rebase_onto(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   source_ancestor: DefId,
          .                   target_substs: SubstsRef<'tcx>,
          .               ) -> SubstsRef<'tcx> {
          .                   let defs = tcx.generics_of(source_ancestor);
     26,054 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    104,216 ( 0.00%)      }
          .           
          .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
          .                   tcx.mk_substs(self.iter().take(generics.count()))
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
  2,758,203 ( 0.02%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   // This code is hot enough that it's worth specializing for the most
          .                   // common length lists, to avoid the overhead of `SmallVec` creation.
          .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
          .                   // typically hit in 90--99.99% of cases. When folding doesn't change
          .                   // the substs, it's faster to reuse the existing substs rather than
          .                   // calling `intern_substs`.
 59,887,808 ( 0.43%)          match self.len() {
          .                       1 => {
  4,301,409 ( 0.03%)                  let param0 = self[0].try_fold_with(folder)?;
 11,181,556 ( 0.08%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
          .                       }
          .                       2 => {
  8,189,493 ( 0.06%)                  let param0 = self[0].try_fold_with(folder)?;
 22,878,515 ( 0.17%)                  let param1 = self[1].try_fold_with(folder)?;
 28,127,705 ( 0.20%)                  if param0 == self[0] && param1 == self[1] {
          .                               Ok(self)
          .                           } else {
  3,783,469 ( 0.03%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
          .                           }
          .                       }
          .                       0 => Ok(self),
          .                       _ => {
          .                           let params: SmallVec<[_; 8]> =
    302,768 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
     21,327 ( 0.00%)                  if params[..] == self[..] {
          .                               Ok(self)
          .                           } else {
     71,525 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
          .                           }
          .                       }
          .                   }
  3,799,704 ( 0.03%)      }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  2,057,750 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Public trait `Subst`
          .           //
          .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
          .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
          .               fn subst_spanned(
          .                   self,
          .                   tcx: TyCtxt<'tcx>,
          .                   substs: &[GenericArg<'tcx>],
          .                   span: Option<Span>,
          .               ) -> T {
  6,154,115 ( 0.04%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
          .                   self.fold_with(&mut folder)
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // The actual substitution engine itself is a type folder.
          .           
          .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
          .               span: Option<Span>,
          .           
          .               /// Number of region binders we have passed through while doing the substitution
          .               binders_passed: u32,
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  1,805,336 ( 0.01%)          self.tcx
          .               }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
  2,122,216 ( 0.02%)          self.binders_passed += 1;
    518,154 ( 0.00%)          let t = t.super_fold_with(self);
  2,122,216 ( 0.02%)          self.binders_passed -= 1;
          .                   t
          .               }
          .           
  1,005,648 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
          .                   // Note: This routine only handles regions that are bound on
          .                   // type declarations and other outer declarations, not those
          .                   // bound in *fn types*. Region substitution of the bound
          .                   // regions that appear in a function signature is done using
          .                   // the specialized routine `ty::replace_late_regions()`.
    335,216 ( 0.00%)          match *r {
    198,356 ( 0.00%)              ty::ReEarlyBound(data) => {
    198,356 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
          .                           match rk {
     99,178 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
          .                               _ => {
          .                                   let span = self.span.unwrap_or(DUMMY_SP);
          .                                   let msg = format!(
          .                                       "Region parameter out of range \
          .                                        when substituting in region {} (index={})",
          .                                       data.name, data.index
          .                                   );
          .                                   span_bug!(span, "{}", msg);
          .                               }
          .                           }
          .                       }
          .                       _ => r,
          .                   }
  1,173,256 ( 0.01%)      }
          .           
  8,072,391 ( 0.06%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  2,690,797 ( 0.02%)          if !t.needs_subst() {
          .                       return t;
          .                   }
          .           
  4,541,382 ( 0.03%)          match *t.kind() {
  8,530,380 ( 0.06%)              ty::Param(p) => self.ty_for_param(p, t),
  3,387,690 ( 0.02%)              _ => t.super_fold_with(self),
          .                   }
 10,630,910 ( 0.08%)      }
          .           
     35,952 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     22,952 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
          .                       self.const_for_param(p, c)
          .                   } else {
     23,400 ( 0.00%)              c.super_fold_with(self)
          .                   }
     20,288 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
          .                   c.super_fold_with(self)
          .               }
          .           }
          .           
          .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
          .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
          .                   // Look up the type in the substitutions. It really should be in there.
  3,412,152 ( 0.02%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ty = match opt_ty {
          .                       Some(GenericArgKind::Type(ty)) => ty,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
          .               }
          .           
          .               fn const_for_param(
          .                   &self,
          .                   p: ParamConst,
          .                   source_ct: &'tcx ty::Const<'tcx>,
          .               ) -> &'tcx ty::Const<'tcx> {
          .                   // Look up the const in the substitutions. It really should be in there.
      5,072 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ct = match opt_ct {
          .                       Some(GenericArgKind::Const(ct)) => ct,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
          .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
          .                   debug!(
          .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
          .                       val,
          .                       self.binders_passed,
          .                       val.has_escaping_bound_vars()
          .                   );
          .           
  5,975,257 ( 0.04%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
          .                       return val;
          .                   }
          .           
          .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
          .                   debug!("shift_vars: shifted result = {:?}", result);
          .           
          .                   result
          .               }
          .           
          .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    216,025 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
          .                       return region;
          .                   }
          .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
          .               }
          .           }
          .           
          .           /// Stores the user-given substs to reach some fully qualified path
          .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     17,441 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSubsts<'tcx> {
          .               /// The substitutions for the item as given by the user.
          .               pub substs: SubstsRef<'tcx>,
          .           
          .               /// The self type, in the case of a `<T>::Item` path (when applied
          .               /// to an inherent impl). See `UserSelfTy` below.
      7,653 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
          .           }
          .           
          .           /// Specifies the user-given self type. In the case of a path that
          .           /// refers to a member in an inherent impl, this self type is
          .           /// sometimes needed to constrain the type parameters on the impl. For
          .           /// example, in this code:
          .           ///
          .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
          .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
          .           /// the impl (with the substs from `UserSubsts`) and apply those to
          .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
          .           /// the self type here, which contains `?A` to be `&'static u32`
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
          .           #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSelfTy<'tcx> {
          .               pub impl_def_id: DefId,
      2,166 ( 0.00%)      pub self_ty: Ty<'tcx>,
          .           }

 59,514,586 ( 0.43%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
7,971,770,994 (57.53%)  events annotated

