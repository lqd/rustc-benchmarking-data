--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name remove_dir_all --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=c61910593d3d3e9f -C extra-filename=-c61910593d3d3e9f --out-dir /usr/home/liquid/tmp/.tmpOGCRv6/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpOGCRv6/target/debug/deps --extern libc=/usr/home/liquid/tmp/.tmpOGCRv6/target/debug/deps/liblibc-6af22c5d4ed4fc5c.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-remove_dir_all-0.7.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
91,954,276 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 (11.21%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 4,835,679 ( 5.26%)  ./elf/dl-lookup.c:do_lookup_x
 4,141,271 ( 4.50%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 2,913,985 ( 3.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,596,068 ( 2.82%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,461,237 ( 2.68%)  ./malloc/malloc.c:_int_malloc
 2,435,468 ( 2.65%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,139,033 ( 2.33%)  ./elf/do-rel.h:_dl_relocate_object
 1,670,596 ( 1.82%)  ./malloc/malloc.c:_int_free
 1,405,875 ( 1.53%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 1,362,217 ( 1.48%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,181,352 ( 1.28%)  ./malloc/malloc.c:malloc
 1,124,033 ( 1.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,119,728 ( 1.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,116,463 ( 1.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,050,269 ( 1.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   864,856 ( 0.94%)  ./elf/dl-lookup.c:check_match
   853,910 ( 0.93%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   819,743 ( 0.89%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   793,024 ( 0.86%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   782,102 ( 0.85%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   745,219 ( 0.81%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   529,040 ( 0.58%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   471,772 ( 0.51%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   459,321 ( 0.50%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   443,536 ( 0.48%)  ./malloc/malloc.c:free
   435,164 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor>::build_reduced_graph_for_external_crate_res
   430,209 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   406,069 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::try_define
   395,551 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   370,374 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   370,374 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   370,374 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   367,741 ( 0.40%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   336,704 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   311,634 ( 0.34%)  ./malloc/malloc.c:malloc_consolidate
   309,868 ( 0.34%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   275,076 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::insert::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   261,936 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::Resolver>::define::<(rustc_hir::def::Res<rustc_ast::node_id::NodeId>, rustc_middle::ty::Visibility, rustc_span::span_encoding::Span, rustc_span::hygiene::LocalExpnId)>
   252,560 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   251,988 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   238,280 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::hygiene::SyntaxContext as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   221,553 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   221,269 ( 0.24%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   220,711 ( 0.24%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   219,654 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   213,872 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   211,657 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   196,251 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   192,132 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   191,302 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   186,104 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   183,235 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   173,855 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolution
   168,592 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   167,966 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>::{closure#0}>
   167,860 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::entry
   165,920 ( 0.18%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   164,703 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs:<rustc_hir::def::Res<!> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   164,325 ( 0.18%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   161,767 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   157,456 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::symbol::Ident>::normalize_to_macros_2_0
   149,310 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   148,550 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::Resolver>::resolutions
   142,797 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs:<rustc_hir::def::DefKind as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   139,124 ( 0.15%)  ./malloc/malloc.c:realloc
   134,780 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs:<core::lazy::OnceCell<alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile>>>::get_or_init::<<rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}>
   134,720 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   131,553 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs:<rustc_resolve::Resolver>::check_reserved_macro_name
   127,176 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Ident>::normalize_to_macros_2_0
   125,994 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   121,446 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolutions
   119,186 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   118,734 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   118,340 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<u128 as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   113,369 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::opt_item_ident
   113,246 ( 0.12%)  ./stdio-common/vfscanf-internal.c:__vfscanf_internal
   110,868 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::IndexMapCore<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::entry
   110,621 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   110,560 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   110,371 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   109,470 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   109,035 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   106,335 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   104,830 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   101,183 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   100,884 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
    98,793 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
    97,529 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::try_define
    97,133 ( 0.11%)  ./malloc/malloc.c:_int_realloc
    94,863 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
    94,673 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
    94,614 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::def_key
    94,612 ( 0.10%)  ???:llvm::PassRegistry::registerPass(llvm::PassInfo const&, bool)
    93,725 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_seq::<[u8; 32], <[u8; 32] as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
  373,310 ( 0.41%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
        2 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
    7,414 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
   49,543 ( 0.05%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
1,263,386 ( 1.37%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
       20 ( 0.00%)          return wrapping_sub(
      186 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   11,288 ( 0.01%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

   85,649 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    238 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    119 ( 0.00%)      Spanned { node: t, span: sp }
  5,550 ( 0.01%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     16 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     16 ( 0.00%)      }
      .           
      6 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      9 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     50 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,150 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  2,890 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    578 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,468 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      5 ( 0.00%)          &self.path_mapping
      5 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     20 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     33 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
     12 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     54 ( 0.00%)          Ok(self.new_source_file(filename, src))
     27 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     11 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     33 ( 0.00%)      }
      .           
     12 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     15 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    578 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    578 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,734 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     24 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     36 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     27 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     39 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      6 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     18 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     18 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     27 ( 0.00%)                      filename,
      9 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,600 ( 0.01%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
370,374 ( 0.40%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    798 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,725 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,600 ( 0.01%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,175 ( 0.01%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    264 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
     96 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
     96 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
     48 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
     48 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    216 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
      7 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
      7 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
      2 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
      1 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
      4 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
      3 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
     12 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
      9 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
     11 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
      4 ( 0.00%)          match self.span_to_snippet(sp) {
      4 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
      2 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
      5 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
      9 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
      2 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
     48 ( 0.00%)      pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
     20 ( 0.00%)              let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
      .                       let src = local_begin.sf.external_src.borrow();
      .           
     12 ( 0.00%)              let snippet = if let Some(ref src) = local_begin.sf.src {
      .                           Some(&src[start_index..])
      .                       } else if let Some(src) = src.get_source() {
      .                           Some(&src[start_index..])
      .                       } else {
      .                           None
      .                       };
      .           
      4 ( 0.00%)              match snippet {
      .                           None => 1,
      .                           Some(snippet) => match snippet.chars().next() {
      .                               None => 1,
      .                               Some(c) => c.len_utf8(),
      .                           },
      .                       }
      .                   };
      .           
     48 ( 0.00%)          sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  1,284 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    428 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  1,070 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
      .               pub fn next_point(&self, sp: Span) -> Span {
      .                   if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
-- line 805 ----------------------------------------
-- line 812 ----------------------------------------
      .                       start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
      .                   let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
      .               }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  1,284 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    107 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
    749 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
    963 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    214 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    428 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    107 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    428 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    321 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
    642 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    428 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    428 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
    963 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  1,100 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    220 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    440 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  1,100 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
    933 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
    612 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  1,244 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
      7 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     81 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     45 ( 0.00%)          (path, false)
     81 ( 0.00%)      }
      .           
     24 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      6 ( 0.00%)          match file {
      6 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     42 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      3 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     30 ( 0.00%)                  (FileName::Real(realfile), mapped)
     12 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

  4,621 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      .               fn clone(&self) -> Self {
      9 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
      2 ( 0.00%)              table: self.table.clone(),
      .                   }
      .               }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 15,826 ( 0.02%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  5,956 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
  1,591 ( 0.00%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  2,595 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     61 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    273 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  1,409 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    224 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    270 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    280 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  8,412 ( 0.01%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 20,653 ( 0.02%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  4,128 ( 0.00%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
  5,278 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      7 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     21 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     14 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      7 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
202,649 ( 0.22%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      .                   if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
117,350 ( 0.13%)              self.table
 98,902 ( 0.11%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  4,095 ( 0.00%)              None
      .                   }
164,875 ( 0.18%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    673 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 17,499 ( 0.02%)          match self.remove_entry(k) {
     68 ( 0.00%)              Some((_, v)) => Some(v),
    599 ( 0.00%)              None => None,
      .                   }
  1,596 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  4,658 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 16,620 ( 0.02%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 40,178 ( 0.04%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
 44,503 ( 0.05%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
  3,960 ( 0.00%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 21,113 ( 0.02%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
  5,962 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 14,095 ( 0.02%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 17,162 ( 0.02%)          self.from_hash(hash, equivalent(k))
 25,058 ( 0.03%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
 22,945 ( 0.02%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
  9,747 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     12 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    993 ( 0.00%)          IntoIter {
    933 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
     36 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  1,468 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
      8 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     22 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     26 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
    406 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
    323 ( 0.00%)          let iter = iter.into_iter();
    249 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 13,771 ( 0.01%)              self.insert(k, v);
      .                   });
    214 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

 31,699 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
  3,090 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
    148 ( 0.00%)      base_or_index: u32,
     68 ( 0.00%)      len_or_tag: u16,
     85 ( 0.00%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
 25,896 ( 0.03%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
 51,792 ( 0.06%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
210,611 ( 0.23%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
     20 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
 77,077 ( 0.08%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
      .                   if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
 64,587 ( 0.07%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
 62,477 ( 0.07%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
      .                       let index = self.base_or_index;
      .                       with_span_interner(|interner| interner.spans[index as usize])
      .                   }
  5,713 ( 0.01%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
      6 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
      8 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
      8 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

126,601 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir               

-- line 267 ----------------------------------------
      .           macro_rules! bitor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitOr for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
     97 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
      .           macro_rules! bitxor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitXor for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
191,715 ( 0.21%)              fn bitxor(self, other: $t) -> $t { self ^ other }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 384 ----------------------------------------

 10,516 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
   50,497 ( 0.05%)          Vec { buf: RawVec::NEW, len: 0 }
       15 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   23,590 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    1,059 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
    9,624 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
    4,758 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      434 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
      569 ( 0.00%)          if self.capacity() > self.len {
       51 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      102 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
    5,072 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
    3,719 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
    3,195 ( 0.00%)              self.len = len;
       98 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
    6,086 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
   79,404 ( 0.09%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  437,712 ( 0.48%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
    9,346 ( 0.01%)          self.len = new_len;
       26 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      105 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       15 ( 0.00%)          let len = self.len();
       44 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
       62 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
       93 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
       62 ( 0.00%)              self.set_len(len + 1);
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       20 ( 0.00%)          let len = self.len();
       71 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      144 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
       40 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       23 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,682 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
       48 ( 0.00%)          self.retain_mut(|elem| f(elem));
    4,640 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      581 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
      600 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      538 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
    4,703 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
      948 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       26 ( 0.00%)                      g.processed_len += 1;
        4 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       10 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      114 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
       76 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
       21 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        3 ( 0.00%)          let len = self.len();
       42 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1699 ----------------------------------------
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1720 ----------------------------------------
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,249,668 ( 1.36%)          if self.len == self.buf.capacity() {
   12,300 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
    4,805 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,289,735 ( 1.40%)              self.len += 1;
        .                   }
        .               }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
-- line 1742 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   14,671 ( 0.02%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   10,067 ( 0.01%)                  self.len -= 1;
    2,366 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
        7 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
      940 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
    6,655 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
      268 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       27 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
    9,020 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
    6,516 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
       12 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
       12 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
      239 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
       31 ( 0.00%)          let len = self.len();
       62 ( 0.00%)          if new_len > len {
      542 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      208 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       24 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2193 ----------------------------------------
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
        .               pub fn resize(&mut self, new_len: usize, value: T) {
        .                   let len = self.len();
        .           
        .                   if new_len > len {
      186 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        .               }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
-- line 2209 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
    3,340 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      168 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
    3,683 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
    2,659 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        4 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
      450 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
    4,164 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
      603 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  109,902 ( 0.12%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   25,993 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
    3,040 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
    3,847 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    3,249 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        8 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   23,487 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
    8,953 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
    3,365 ( 0.00%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,150 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       88 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
    9,687 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       88 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    1,201 ( 0.00%)          while let Some(element) = iterator.next() {
      228 ( 0.00%)              let len = self.len();
    5,060 ( 0.01%)              if len == self.capacity() {
       24 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
    3,315 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
       70 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
       58 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      144 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   12,124 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
    6,235 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   14,238 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

   31,904 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs
--------------------------------------------------------------------------------
Ir              

-- line 48 ----------------------------------------
     .                   }
     .               }
     .           }
     .           
     .           #[unstable(feature = "once_cell", issue = "74465")]
     .           impl<T: Clone> Clone for OnceCell<T> {
     .               fn clone(&self) -> OnceCell<T> {
     .                   let res = OnceCell::new();
    30 ( 0.00%)          if let Some(value) = self.get() {
     .                       match res.set(value.clone()) {
     .                           Ok(()) => (),
     .                           Err(_) => unreachable!(),
     .                       }
     .                   }
     .                   res
     .               }
     .           }
-- line 64 ----------------------------------------
-- line 80 ----------------------------------------
     .               }
     .           }
     .           
     .           impl<T> OnceCell<T> {
     .               /// Creates a new empty cell.
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               #[must_use]
     .               pub const fn new() -> OnceCell<T> {
     7 ( 0.00%)          OnceCell { inner: UnsafeCell::new(None) }
     .               }
     .           
     .               /// Gets the reference to the underlying value.
     .               ///
     .               /// Returns `None` if the cell is empty.
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn get(&self) -> Option<&T> {
     .                   // SAFETY: Safe due to `inner`'s invariant
-- line 96 ----------------------------------------
-- line 126 ----------------------------------------
     .               /// assert_eq!(cell.set(62), Err(62));
     .               ///
     .               /// assert!(cell.get().is_some());
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn set(&self, value: T) -> Result<(), T> {
     .                   // SAFETY: Safe because we cannot have overlapping mutable borrows
     .                   let slot = unsafe { &*self.inner.get() };
    22 ( 0.00%)          if slot.is_some() {
     .                       return Err(value);
     .                   }
     .           
     .                   // SAFETY: This is the only place where we set the slot, no races
     .                   // due to reentrancy/concurrency are possible, and we've
     .                   // checked that slot is currently `None`, so this write
     .                   // maintains the `inner`'s invariant.
     .                   let slot = unsafe { &mut *self.inner.get() };
    69 ( 0.00%)          *slot = Some(value);
     4 ( 0.00%)          Ok(())
     .               }
     .           
     .               /// Gets the contents of the cell, initializing it with `f`
     .               /// if the cell was empty.
     .               ///
     .               /// # Panics
     .               ///
     .               /// If `f` panics, the panic is propagated to the caller, and the cell
-- line 152 ----------------------------------------
-- line 164 ----------------------------------------
     .               ///
     .               /// let cell = OnceCell::new();
     .               /// let value = cell.get_or_init(|| 92);
     .               /// assert_eq!(value, &92);
     .               /// let value = cell.get_or_init(|| unreachable!());
     .               /// assert_eq!(value, &92);
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
50,950 ( 0.06%)      pub fn get_or_init<F>(&self, f: F) -> &T
     .               where
     .                   F: FnOnce() -> T,
     .               {
    70 ( 0.00%)          match self.get_or_try_init(|| Ok::<T, !>(f())) {
     .                       Ok(val) => val,
     .                   }
67,921 ( 0.07%)      }
     .           
     .               /// Gets the contents of the cell, initializing it with `f` if
     .               /// the cell was empty. If the cell was empty and `f` failed, an
     .               /// error is returned.
     .               ///
     .               /// # Panics
     .               ///
     .               /// If `f` panics, the panic is propagated to the caller, and the cell
-- line 187 ----------------------------------------
-- line 206 ----------------------------------------
     .               /// assert_eq!(value, Ok(&92));
     .               /// assert_eq!(cell.get(), Some(&92))
     .               /// ```
     .               #[unstable(feature = "once_cell", issue = "74465")]
     .               pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
     .               where
     .                   F: FnOnce() -> Result<T, E>,
     .               {
16,995 ( 0.02%)          if let Some(val) = self.get() {
     .                       return Ok(val);
     .                   }
     .                   /// Avoid inlining the initialization closure into the common path that fetches
     .                   /// the already initialized value
     .                   #[cold]
    77 ( 0.00%)          fn outlined_call<F, T, E>(f: F) -> Result<T, E>
     .                   where
     .                       F: FnOnce() -> Result<T, E>,
     .                   {
    23 ( 0.00%)              f()
    75 ( 0.00%)          }
    81 ( 0.00%)          let val = outlined_call(f)?;
     .                   // Note that *some* forms of reentrant initialization might lead to
     .                   // UB (see `reentrant_init` test). I believe that just removing this
     .                   // `assert`, while keeping `set/get` would be sound, but it seems
     .                   // better to panic, rather than to silently use an old value.
     2 ( 0.00%)          assert!(self.set(val).is_ok(), "reentrant init");
     .                   Ok(self.get().unwrap())
     .               }
     .           
     .               /// Consumes the cell, returning the wrapped value.
     .               ///
     .               /// Returns `None` if the cell was empty.
     .               ///
     .               /// # Examples
-- line 239 ----------------------------------------

    13 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/lazy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir              

-- line 15 ----------------------------------------
     .           use std::str;
     .           
     .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
     .           
     .           #[cfg(test)]
     .           mod tests;
     .           
     .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
     8 ( 0.00%)  symbols! {
     .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
     .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
     .               Keywords {
     .                   // Special reserved identifiers used internally for elided lifetimes,
     .                   // unnamed method parameters, crate root module, error recovery etc.
     .                   Empty:              "",
     .                   PathRoot:           "{{root}}",
     .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
     .                   write_str,
     .                   writeln_macro,
     .                   x87_reg,
     .                   xer,
     .                   xmm_reg,
     .                   ymm_reg,
     .                   zmm_reg,
     .               }
    10 ( 0.00%)  }
     .           
 1,251 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
     .           pub struct Ident {
     .               pub name: Symbol,
     .               pub span: Span,
     .           }
     .           
     .           impl Ident {
     .               #[inline]
     .               /// Constructs a new identifier from a symbol and a span.
     .               pub const fn new(name: Symbol, span: Span) -> Ident {
     .                   Ident { name, span }
34,139 ( 0.04%)      }
     .           
     .               /// Constructs a new identifier with a dummy span.
     .               #[inline]
     .               pub const fn with_dummy_span(name: Symbol) -> Ident {
     .                   Ident::new(name, DUMMY_SP)
     .               }
     .           
     .               #[inline]
     .               pub fn empty() -> Ident {
     .                   Ident::with_dummy_span(kw::Empty)
     .               }
     .           
     .               /// Maps a string to an identifier with a dummy span.
     3 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
     3 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
    12 ( 0.00%)      }
     .           
     .               /// Maps a string and a span to an identifier.
     .               pub fn from_str_and_span(string: &str, span: Span) -> Ident {
     .                   Ident::new(Symbol::intern(string), span)
     .               }
     .           
     .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
    24 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
     .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
    15 ( 0.00%)      }
     .           
     .               pub fn without_first_quote(self) -> Ident {
     .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     .               }
     .           
     .               /// "Normalize" ident for use in comparisons using "item hygiene".
     .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
     .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
     .               /// different macro 2.0 macros.
     .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
54,504 ( 0.06%)      pub fn normalize_to_macros_2_0(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
42,392 ( 0.05%)      }
     .           
     .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
     .               /// Identifiers with same string value become same if they came from the same non-transparent
     .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
     .               /// non-transparent macros.
     .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
   135 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
   105 ( 0.00%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. See
     .               /// `Symbol::as_str()` for details.
     .               pub fn as_str(&self) -> &str {
     2 ( 0.00%)          self.name.as_str()
     .               }
     .           }
     .           
     .           impl PartialEq for Ident {
 2,367 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 3,114 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 3,156 ( 0.00%)      }
     .           }
     .           
     .           impl Hash for Ident {
     .               fn hash<H: Hasher>(&self, state: &mut H) {
     3 ( 0.00%)          self.name.hash(state);
   376 ( 0.00%)          self.span.ctxt().hash(state);
     .               }
     .           }
     .           
     .           impl fmt::Debug for Ident {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Display::fmt(self, f)?;
     .                   fmt::Debug::fmt(&self.span.ctxt(), f)
     .               }
     .           }
     .           
     .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
     .           /// to printing the original identifier token written in source code (`token_to_string`),
     .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
     .           impl fmt::Display for Ident {
    16 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    20 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
    16 ( 0.00%)      }
     .           }
     .           
     .           /// This is the most general way to print identifiers.
     .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
     .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
     .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
     .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
     .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
     .               is_raw: bool,
     .               /// Span used for retrieving the crate name to which `$crate` refers to,
     .               /// if this field is `None` then the `$crate` conversion doesn't happen.
     .               convert_dollar_crate: Option<Span>,
     .           }
     .           
     .           impl IdentPrinter {
     .               /// The most general `IdentPrinter` constructor. Do not use this.
    22 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
   188 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    22 ( 0.00%)      }
     .           
     .               /// This implementation is supposed to be used when printing identifiers
     .               /// as a part of pretty-printing for larger AST pieces.
     .               /// Do not use this either.
    40 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
    40 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
    20 ( 0.00%)      }
     .           }
     .           
     .           impl fmt::Display for IdentPrinter {
   230 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    92 ( 0.00%)          if self.is_raw {
     .                       f.write_str("r#")?;
    46 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
     .                       if let Some(span) = self.convert_dollar_crate {
     .                           let converted = span.ctxt().dollar_crate_name();
     .                           if !converted.is_path_segment_keyword() {
     .                               f.write_str("::")?;
     .                           }
     .                           return fmt::Display::fmt(&converted, f);
     .                       }
     .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
     .               }
     .           }
     .           
     .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
     .           /// construction.
     .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
     .           // `ModernIdent` struct and use that as well.
     .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
    10 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
     .           
     .           impl MacroRulesNormalizedIdent {
     .               pub fn new(ident: Ident) -> Self {
     5 ( 0.00%)          Self(ident.normalize_to_macro_rules())
     .               }
     .           }
     .           
     .           impl fmt::Debug for MacroRulesNormalizedIdent {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.0, f)
     .               }
     .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
     .           /// Internally, a `Symbol` is implemented as an index, and all operations
     .           /// (including hashing, equality, and ordering) operate on that index. The use
     .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
     .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
     .           ///
     .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
     .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
     .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 1,225 ( 0.00%)  pub struct Symbol(SymbolIndex);
     .           
     .           rustc_index::newtype_index! {
     .               struct SymbolIndex { .. }
     .           }
     .           
     .           impl Symbol {
     .               const fn new(n: u32) -> Self {
     .                   Symbol(SymbolIndex::from_u32(n))
    18 ( 0.00%)      }
     .           
     .               /// Maps a string to its interned representation.
96,372 ( 0.10%)      pub fn intern(string: &str) -> Self {
     .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
96,372 ( 0.10%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. It's not the same
     .               /// as `&self`, but actually tied to the lifetime of the underlying
     .               /// interner. Interners are long-lived, and there are very few of them, and
     .               /// this function is typically used for short-lived things, so in practice
     .               /// it works out ok.
 2,409 ( 0.00%)      pub fn as_str(&self) -> &str {
   803 ( 0.00%)          with_session_globals(|session_globals| unsafe {
     .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
     .                   })
 3,212 ( 0.00%)      }
     .           
     .               pub fn as_u32(self) -> u32 {
     .                   self.0.as_u32()
     .               }
     .           
     .               pub fn is_empty(self) -> bool {
     .                   self == kw::Empty
     .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
     .           
     .           impl fmt::Debug for Symbol {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl fmt::Display for Symbol {
   174 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   936 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl<S: Encoder> Encodable<S> for Symbol {
     .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
   631 ( 0.00%)          s.emit_str(self.as_str())
     .               }
     .           }
     .           
     .           impl<D: Decoder> Decodable<D> for Symbol {
     .               #[inline]
15,308 ( 0.02%)      fn decode(d: &mut D) -> Symbol {
21,487 ( 0.02%)          Symbol::intern(&d.read_str())
     .               }
     .           }
     .           
     .           impl<CTX> HashStable<CTX> for Symbol {
     .               #[inline]
     6 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   384 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
     .               }
     .           }
     .           
     .           impl<CTX> ToStableHashKey<CTX> for Symbol {
     .               type KeyType = String;
     .               #[inline]
     .               fn to_stable_hash_key(&self, _: &CTX) -> String {
     .                   self.as_str().to_string()
-- line 1777 ----------------------------------------
-- line 1785 ----------------------------------------
     .           //
     .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
     .           // found that to regress performance up to 2% in some cases. This might be
     .           // revisited after further improvements to `indexmap`.
     .           //
     .           // This type is private to prevent accidentally constructing more than one
     .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
     .           // between `Interner`s.
     2 ( 0.00%)  #[derive(Default)]
     .           struct InternerInner {
     .               arena: DroplessArena,
     .               names: FxHashMap<&'static str, Symbol>,
     .               strings: Vec<&'static str>,
     .           }
     .           
     .           impl Interner {
     .               fn prefill(init: &[&'static str]) -> Self {
    30 ( 0.00%)          Interner(Lock::new(InternerInner {
     .                       strings: init.into(),
     .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
     .                       ..Default::default()
     .                   }))
     .               }
     .           
     .               #[inline]
     .               fn intern(&self, string: &str) -> Symbol {
     .                   let mut inner = self.0.lock();
 6,636 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
     .                       return name;
     .                   }
     .           
 7,390 ( 0.01%)          let name = Symbol::new(inner.strings.len() as u32);
     .           
     .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
     .                   // and immediately convert the clone back to `&[u8], all because there
     .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
     .                   let string: &str =
     .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
     .           
     .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
     .                   // #91445 for details.
     .                   inner.names.insert(string, name);
     .                   name
     .               }
     .           
     .               // Get the symbol as a string. `Symbol::as_str()` should be used in
     .               // preference to this function.
     .               fn get(&self, symbol: Symbol) -> &str {
 2,409 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
     .               }
     .           }
     .           
     .           // This module has a very short name because it's used a lot.
     .           /// This module contains all the defined keyword `Symbol`s.
     .           ///
     .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
     .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
     .           
     .               // Used from a macro in `librustc_feature/accepted.rs`
     .               pub use super::kw::MacroRules as macro_rules;
     .           
     .               /// Get the symbol for an integer.
     .               ///
     .               /// The first few non-negative integers each have a static symbol and therefore
     .               /// are fast.
    27 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
    27 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
     .                       if idx < 10 {
    36 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
     .                       }
     .                   }
     .                   Symbol::intern(&n.to_string())
     .               }
     .           }
     .           
     .           impl Symbol {
     .               fn is_special(self) -> bool {
     .                   self <= kw::Underscore
     .               }
     .           
     .               fn is_used_keyword_always(self) -> bool {
    66 ( 0.00%)          self >= kw::As && self <= kw::While
     .               }
     .           
     .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
 1,464 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
     .               }
     .           
     .               fn is_unused_keyword_always(self) -> bool {
    66 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
     .               }
     .           
     .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    22 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
     .               }
     .           
     .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 2,370 ( 0.00%)          self.is_special()
     .                       || self.is_used_keyword_always()
     .                       || self.is_unused_keyword_always()
     .                       || self.is_used_keyword_conditional(edition)
     .                       || self.is_unused_keyword_conditional(edition)
     .               }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
 4,690 ( 0.01%)          self == kw::Super
     .                       || self == kw::SelfLower
     .                       || self == kw::SelfUpper
     .                       || self == kw::Crate
     .                       || self == kw::PathRoot
     .                       || self == kw::DollarCrate
     .               }
     .           
     .               /// Returns `true` if the symbol is `true` or `false`.
     .               pub fn is_bool_lit(self) -> bool {
    91 ( 0.00%)          self == kw::True || self == kw::False
    91 ( 0.00%)      }
     .           
     .               /// Returns `true` if this symbol can be a raw identifier.
     .               pub fn can_be_raw(self) -> bool {
    56 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
     .               }
     .           }
     .           
     .           impl Ident {
     .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
     .               // unnamed method parameters, crate root module, error recovery etc.
     .               pub fn is_special(self) -> bool {
     .                   self.name.is_special()
    22 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword used in the language.
    22 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    22 ( 0.00%)          self.name.is_used_keyword_always()
     .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    44 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword reserved for possible future use.
    22 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    22 ( 0.00%)          self.name.is_unused_keyword_always()
     .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    44 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is either a special identifier or a keyword.
   446 ( 0.00%)      pub fn is_reserved(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     .                   self.name.is_reserved(|| self.span.edition())
   892 ( 0.00%)      }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
     .                   self.name.is_path_segment_keyword()
   670 ( 0.00%)      }
     .           
     .               /// We see this identifier in a normal identifier position, like variable name or a type.
     .               /// How was it written originally? Did it use the raw form? Let's try to guess.
    24 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
     .                   self.name.can_be_raw() && self.is_reserved()
    48 ( 0.00%)      }
     .           }

21,911 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
      306 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
    5,623 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       21 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      175 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
    4,595 ( 0.00%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
       48 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       20 ( 0.00%)          self.position += bytes;
       20 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      576 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      684 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   21,894 ( 0.02%)      fn read_u32(&mut self) -> u32 {
   85,783 ( 0.09%)          read_leb128!(self, read_u32_leb128)
   43,788 ( 0.05%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.61%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.09%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.17%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,915,406 ( 2.08%)          let value = self.data[self.position];
  366,278 ( 0.40%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   67,487 ( 0.07%)      fn read_usize(&mut self) -> usize {
   67,497 ( 0.07%)          read_leb128!(self, read_usize_leb128)
  134,974 ( 0.15%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    2,378 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   12,472 ( 0.01%)          let len = self.read_usize();
   88,634 ( 0.10%)          let sentinel = self.data[self.position + len];
   22,166 ( 0.02%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   55,415 ( 0.06%)          self.position += len + 1;
    4,197 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       33 ( 0.00%)          let start = self.position;
      303 ( 0.00%)          self.position += s.len();
       33 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  238,490 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
 44,392 ( 0.05%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    575 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 35,890 ( 0.04%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
505,274 ( 0.55%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 70,618 ( 0.08%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 70,618 ( 0.08%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 78,927 ( 0.09%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 18,367 ( 0.02%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,156 ( 0.00%)          self.hash = hash.hash;
    575 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
      .                   self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      9 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
 41,000 ( 0.04%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 111 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
108,200 ( 0.12%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
      .           /// Checks whether a special control value is EMPTY (just check 1 bit).
      .           #[inline]
      .           fn special_is_empty(ctrl: u8) -> bool {
      .               debug_assert!(is_special(ctrl));
  5,605 ( 0.01%)      ctrl & 0x01 != 0
      .           }
      .           
      .           /// Primary hash function, used to select the initial bucket to probe from.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h1(hash: u64) -> usize {
      .               // On 32-bit platforms we simply ignore the higher hash bits.
      .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
486,921 ( 0.53%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
 11,026 ( 0.01%)          self.stride += Group::WIDTH;
 11,026 ( 0.01%)          self.pos += self.stride;
  9,050 ( 0.01%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  3,834 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  7,340 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  2,694 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous division).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  9,759 ( 0.01%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
  3,408 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  8,115 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
 10,706 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn drop(&self) {
      .                   self.as_ptr().drop_in_place();
      .               }
      .               #[inline]
      .               pub unsafe fn read(&self) -> T {
     18 ( 0.00%)          self.as_ptr().read()
      .               }
      .               #[inline]
      .               pub unsafe fn write(&self, val: T) {
      .                   self.as_ptr().write(val);
      .               }
      .               #[inline]
      .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
      .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
      .               /// Creates a new empty hash table without allocating any memory, using the
      .               /// given allocator.
      .               ///
      .               /// In effect this returns a table with exactly 1 bucket. However we can
      .               /// leave the data pointer dangling since that bucket is never written to
      .               /// due to our load factor forcing us to always have at least 1 free bucket.
      .               #[inline]
      .               pub fn new_in(alloc: A) -> Self {
      3 ( 0.00%)          Self {
      .                       table: RawTableInner::new_in(alloc),
      .                       marker: PhantomData,
      .                   }
      .               }
      .           
      .               /// Allocates a new hash table with the given number of buckets.
      .               ///
      .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
      .               unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   Ok(Self {
     10 ( 0.00%)              table: RawTableInner::new_uninitialized(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           buckets,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
    328 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
      .                   debug_assert_ne!(self.table.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               /// Erases an element from the table without dropping it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    294 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    294 ( 0.00%)          let index = self.bucket_index(item);
      .                   self.table.erase(index);
    588 ( 0.00%)      }
      .           
      .               /// Erases an element from the table, dropping it in place.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
      .                   // Erase the element from the table first since drop might panic.
    240 ( 0.00%)          self.erase_no_drop(&item);
      .                   item.drop();
      .               }
      .           
      .               /// Finds and erases an element from the table, dropping it in place.
      .               /// Returns true if an element was found.
      .               #[cfg(feature = "raw")]
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::needless_pass_by_value)]
      .               #[allow(deprecated)]
      .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    348 ( 0.00%)          self.erase_no_drop(&item);
      .                   item.read()
      .               }
      .           
      .               /// Finds and removes an element from the table, returning it.
      .               #[cfg_attr(feature = "inline-more", inline)]
 13,417 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      8 ( 0.00%)          match self.find(hash, eq) {
    121 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  2,298 ( 0.00%)              None => None,
      .                   }
 20,090 ( 0.02%)      }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear_no_drop(&mut self) {
      .                   self.table.clear_no_drop();
      .               }
      .           
      .               /// Removes all elements from the table without freeing the backing memory.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn clear(&mut self) {
      .                   // Ensure that the table is reset even if one of the drops panic
      .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
      .                   unsafe {
      1 ( 0.00%)              self_.drop_elements();
      .                   }
      .               }
      .           
      7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    240 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
      .                       for item in self.iter() {
      .                           item.drop();
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
      .                   // Calculate the minimal number of elements that we need to reserve
      .                   // space for.
      .                   let min_size = usize::max(self.table.items, min_size);
      .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
 12,482 ( 0.01%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  6,768 ( 0.01%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
 15,332 ( 0.02%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       self.table.reserve_rehash_inner(
      .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
      .                           TableLayout::new::<T>(),
      .                           if mem::needs_drop::<T>() {
      .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
      .                           } else {
      .                               None
      .                           },
      .                       )
      .                   }
  9,464 ( 0.01%)      }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
      .               /// current table into it.
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
209,274 ( 0.23%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
    174 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
105,861 ( 0.12%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
      .                       let bucket = self.bucket(index);
      2 ( 0.00%)              bucket.write(value);
      .                       bucket
      .                   }
153,065 ( 0.17%)      }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
      .               /// table.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns a mutable reference to it.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
 14,008 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
     83 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
 10,506 ( 0.01%)      }
      .           
      .               /// Inserts a new element into the table, without growing the table.
      .               ///
      .               /// There must be enough space in the table to insert the new element.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
    135 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
 16,499 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    265 ( 0.00%)          let bucket = self.table.bucket(index);
      .           
      .                   // If we are replacing a DELETED entry then we don't need to update
      .                   // the load counter.
 33,646 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
      .           
      .                   bucket.write(value);
 27,118 ( 0.03%)          self.table.items += 1;
      .                   bucket
    265 ( 0.00%)      }
      .           
      .               /// Temporary removes a bucket, applying the given function to the removed
      .               /// element and optionally put back the returned value in the same bucket.
      .               ///
      .               /// Returns `true` if the bucket still contains an element
      .               ///
      .               /// This does not check if the given bucket is actually occupied.
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 814 ----------------------------------------
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
      .               pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     20 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    249 ( 0.00%)              eq(self.bucket(index).as_ref())
      1 ( 0.00%)          });
      .           
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match result {
      1 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    180 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 845 ----------------------------------------
-- line 920 ----------------------------------------
      .               #[inline]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns `true` if the table contains no elements.
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
 20,894 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[inline]
      .               pub fn buckets(&self) -> usize {
      .                   self.table.bucket_mask + 1
      .               }
      .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[inline]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
      .                   let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
  1,981 ( 0.00%)              items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
      .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
      .               /// return items that have a hash value different than the one provided. You
      .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
      .               /// Iteration starts at the provided iterator's current location.
      .               ///
      .               /// It is up to the caller to ensure that the iterator is valid for this
      .               /// `RawTable` and covers all items that remain in the table.
      .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
      .                   debug_assert_eq!(iter.len(), self.len());
      .           
      .                   let alloc = self.table.alloc.clone();
    444 ( 0.00%)          let allocation = self.into_allocation();
    333 ( 0.00%)          RawIntoIter {
    555 ( 0.00%)              iter,
      .                       allocation,
      .                       marker: PhantomData,
      .                       alloc,
      .                   }
      .               }
      .           
      .               /// Converts the table into a raw allocation. The contents of the table
      .               /// should be dropped using a `RawIter` before freeing the allocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    123 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
      .                       None
      .                   } else {
      .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
      .                           Some(lco) => lco,
      .                           None => unsafe { hint::unreachable_unchecked() },
      .                       };
      .                       Some((
     65 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
      .                           layout,
      .                       ))
      .                   };
      .                   mem::forget(self);
      .                   alloc
      .               }
      .           }
      .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<A> RawTableInner<A> {
      .               #[inline]
      .               const fn new_in(alloc: A) -> Self {
 11,014 ( 0.01%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
      .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Allocator + Clone> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 12,208 ( 0.01%)      unsafe fn new_uninitialized(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   buckets: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
      .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
      .                   // such allocations will never succeed anyways.
      .                   //
      .                   // This mirrors what Vec does in the standard library.
      .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
      .                       return Err(fallibility.capacity_overflow());
      .                   }
      .           
  3,442 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  7,644 ( 0.01%)          Ok(Self {
      .                       ctrl,
  3,193 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
  8,988 ( 0.01%)      }
      .           
      .               #[inline]
  2,268 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    570 ( 0.00%)          if capacity == 0 {
    221 ( 0.00%)              Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
  5,630 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  1,440 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  2,268 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
  5,475 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
  5,475 ( 0.01%)          let old_ctrl = *self.ctrl(index);
      .                   self.set_ctrl_h2(index, hash);
      .                   (index, old_ctrl)
 10,950 ( 0.01%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 69,583 ( 0.08%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
202,962 ( 0.22%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the beginning of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 94,116 ( 0.10%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
      .           
      .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
      .               /// code generated, but it is eliminated by LLVM optimizations.
      .               #[inline]
      .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
      .                   let h2_hash = h2(hash);
      .                   let mut probe_seq = self.probe_seq(hash);
      .           
    704 ( 0.00%)          loop {
      .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
      .           
 83,154 ( 0.09%)              for bit in group.match_byte(h2_hash) {
 89,793 ( 0.10%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
      .           
 53,883 ( 0.06%)                  if likely(eq(index)) {
      .                               return Some(index);
      .                           }
      .                       }
      .           
 51,232 ( 0.06%)              if likely(group.match_empty().any_bit_set()) {
      .                           return None;
      .                       }
      .           
      .                       probe_seq.move_next(self.bucket_mask);
      .                   }
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
      .                   Bucket::from_base_index(self.data_end(), index)
      .               }
      .           
      .               #[inline]
      .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
      .                   debug_assert_ne!(self.bucket_mask, 0);
      .                   debug_assert!(index < self.buckets());
      .                   let base: *mut u8 = self.data_end().as_ptr();
274,456 ( 0.30%)          base.sub((index + 1) * size_of)
      .               }
      .           
      .               #[inline]
      .               unsafe fn data_end<T>(&self) -> NonNull<T> {
      .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
      .               }
      .           
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
722,671 ( 0.79%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
132,315 ( 0.14%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
105,852 ( 0.12%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
199,125 ( 0.22%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 66,375 ( 0.07%)          *self.ctrl(index) = ctrl;
 66,378 ( 0.07%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  7,441 ( 0.01%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
  6,815 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
 34,779 ( 0.04%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
      .               unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
    606 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  4,090 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
      .                   Ok(guard(new_table, move |self_| {
  1,879 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
      .               }
      .           
      .               /// Reserves or rehashes to make room for `additional` more elements.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .                   drop: Option<fn(*mut u8)>,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  3,758 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  3,758 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  7,949 ( 0.01%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher, layout.size, drop);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize_inner(
  1,879 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                           layout,
      .                       )
      .                   }
      .               }
      .           
      .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
      .               #[inline(always)]
      .               unsafe fn resize_inner(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
      .                   fallibility: Fallibility,
      .                   layout: TableLayout,
      .               ) -> Result<(), TryReserveError> {
  1,497 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
      .           
      .                   // Copy all elements to the new table.
      .                   for i in 0..self.buckets() {
 40,547 ( 0.04%)              if !is_full(*self.ctrl(i)) {
      .                           continue;
      .                       }
      .           
      .                       // This may panic.
      .                       let hash = hasher(self, i);
      .           
      .                       // We can use a simpler version of insert() here since:
      .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
      .                   }
      .           
      .                   // We successfully copied all elements without panicking. Now replace
      .                   // self with the new table. The old table will have its memory freed but
      .                   // the items will not be dropped (since they have been moved into the
      .                   // new table).
      .                   mem::swap(self, &mut new_table);
      .           
  1,879 ( 0.00%)          Ok(())
      .               }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               ///
      .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
  1,122 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
     68 ( 0.00%)          if !self.is_empty_singleton() {
      .                       unsafe {
      .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
      .                       }
      .                   }
     85 ( 0.00%)          self.items = 0;
     68 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
      .               }
      .           
      .               #[inline]
      .               unsafe fn erase(&mut self, index: usize) {
      .                   debug_assert!(is_full(*self.ctrl(index)));
  2,939 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
      .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
      .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
      .           
      .                   // If we are inside a continuous block of Group::WIDTH full or deleted
      .                   // cells then a probe window may have seen a full block when trying to
      .                   // insert. We therefore need to keep that block non-empty so that
      .                   // lookups will continue searching to the next probe window.
      .                   //
      .                   // Note that in this context `leading_zeros` refers to the bytes at the
      .                   // end of a group, while `trailing_zeros` refers to the bytes at the
      .                   // beginning of a group.
 11,756 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
      .                       DELETED
      .                   } else {
 14,695 ( 0.02%)              self.growth_left += 1;
      .                       EMPTY
      .                   };
      .                   self.set_ctrl(index, ctrl);
 11,756 ( 0.01%)          self.items -= 1;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     24 ( 0.00%)      fn clone(&self) -> Self {
      3 ( 0.00%)          if self.table.is_empty_singleton() {
      .                       Self::new_in(self.table.alloc.clone())
      .                   } else {
      .                       unsafe {
      .                           let mut new_table = ManuallyDrop::new(
      .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
      .                               match Self::new_uninitialized(
      .                                   self.table.alloc.clone(),
      .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
      .                               // We need to free the memory allocated for the new table.
      .                               new_table.free_buckets();
      .                           });
      .           
      .                           // Return the newly created table.
      .                           ManuallyDrop::into_inner(new_table)
      .                       }
      .                   }
     27 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   if source.table.is_empty_singleton() {
      .                       *self = Self::new_in(self.table.alloc.clone());
      .                   } else {
      .                       unsafe {
      .                           // First, drop all our elements without clearing the control bytes.
      .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
      .                       .table
      .                       .ctrl(0)
      .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
      .                   source
      .                       .data_start()
      .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
      .           
      .                   self.table.items = source.table.items;
      4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
      .               }
      .           }
      .           
      .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
      .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
      .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
      .               fn default() -> Self {
      .                   Self::new_in(Default::default())
      .               }
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
 11,153 ( 0.01%)      fn drop(&mut self) {
 15,119 ( 0.02%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
 11,850 ( 0.01%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
      .               type Item = T;
      .               type IntoIter = RawIntoIter<T, A>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
    444 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
      .                   unsafe {
      .                       let iter = self.iter();
      .                       self.into_iter_from(iter)
      .                   }
    555 ( 0.00%)      }
      .           }
      .           
      .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
      .           /// not track an item count.
      .           pub(crate) struct RawIterRange<T> {
      .               // Mask of full buckets in the current group. Bits are cleared from this
      .               // mask as each element is processed.
      .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  5,941 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    451 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    653 ( 0.00%)                      return Some(self.data.next_n(index));
      .                           }
      .           
  4,128 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
    167 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     48 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    351 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   // We don't have an item count, so just guess based on the range size.
      .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
      .                           }
      .                       } else {
      .                           // We must have already iterated past the removed item.
      .                       }
      .                   }
      .               }
      .           
      .               unsafe fn drop_elements(&mut self) {
    254 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
      .                       for item in self {
      .                           item.drop();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
    496 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
  2,262 ( 0.00%)          if let Some(b) = self.iter.next() {
  7,729 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
    992 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (self.items, Some(self.items))
      .               }
      .           }
      .           
      .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
    484 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
      .           
      .                       // Free the table
    545 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
      .                           self.alloc.deallocate(ptr, layout);
      .                       }
      .                   }
    174 ( 0.00%)      }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements
      .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     12 ( 0.00%)      fn next(&mut self) -> Option<T> {
      6 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     24 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.iter.size_hint()
      .               }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
      .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
      .           
      .           /// Iterator which consumes elements without freeing the table storage.
      .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
      .           where
      .               T: Sync,
      .               A: Sync,
      .           {
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)      fn drop(&mut self) {
      .                   unsafe {
      .                       // Drop all remaining elements. Note that this may panic.
      .                       self.iter.drop_elements();
      .           
      .                       // Reset the contents of the table now that all elements have been
      .                       // dropped.
      .                       self.table.clear_no_drop();
      .           
      .                       // Move the now empty table back to its original location.
      1 ( 0.00%)              self.orig_table
      .                           .as_ptr()
      .                           .copy_from_nonoverlapping(&*self.table, 1);
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
      .               type Item = T;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<T> {
      .                   unsafe {
-- line 2289 ----------------------------------------

385,302 ( 0.42%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 14,400 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
     73 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     48 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    245 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
  4,619 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  7,121 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
  7,716 ( 0.01%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      3 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    222 ( 0.00%)          let _ = &self[a];
    402 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
     72 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    494 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    109 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      4 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  5,393 ( 0.01%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  2,362 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
147,158 ( 0.16%)          while left < right {
217,202 ( 0.24%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
132,921 ( 0.14%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 71,366 ( 0.08%)              if cmp == Less {
 54,390 ( 0.06%)                  left = mid + 1;
 45,142 ( 0.05%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
195,772 ( 0.21%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  2,330 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
     40 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
     40 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
     40 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

 83,033 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,140 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
556,847 ( 0.61%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
  2,745 ( 0.00%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  4,459 ( 0.00%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    228 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
    330 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
    214 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    441 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     63 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    548 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

 68,811 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 25,276 ( 0.03%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 17,578 ( 0.02%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  2,450 ( 0.00%)          self.stride += Group::WIDTH;
  2,450 ( 0.00%)          self.pos += self.stride;
  1,225 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
    400 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
    570 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
    516 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  1,541 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    390 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
    878 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  1,078 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
     16 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,026 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  1,661 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    400 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
    400 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
    800 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    200 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  1,800 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  1,579 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 11,289 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 11,289 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    200 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     16 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 31,912 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
  7,982 ( 0.01%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
    522 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
 63,338 ( 0.07%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
  3,767 ( 0.00%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
    696 ( 0.00%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    268 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
    402 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     12 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    200 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
    808 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
    418 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
    400 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    219 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  1,192 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      8 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
    716 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
    960 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 20,074 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 58,401 ( 0.06%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 27,449 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
102,230 ( 0.11%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 39,910 ( 0.04%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 31,928 ( 0.03%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
 57,813 ( 0.06%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 19,271 ( 0.02%)          *self.ctrl(index) = ctrl;
 19,271 ( 0.02%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
    400 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  1,216 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
    209 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
    600 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
    400 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    152 ( 0.00%)          Ok(guard(new_table, move |self_| {
    200 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    152 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
     59 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
    423 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  1,018 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  1,848 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 22,578 ( 0.02%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
  8,922 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
     48 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
     24 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
     48 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
  4,650 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
  8,657 ( 0.01%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  1,854 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

 76,750 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 91 ----------------------------------------
     .           mod late;
     .           mod macros;
     .           
     .           enum Weak {
     .               Yes,
     .               No,
     .           }
     .           
    60 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
     .           pub enum Determinacy {
     .               Determined,
     .               Undetermined,
     .           }
     .           
     .           impl Determinacy {
     .               fn determined(determined: bool) -> Determinacy {
     .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
    40 ( 0.00%)      }
     .           }
     .           
     .           /// A specific scope in which a name can be looked up.
     .           /// This enum is currently used only for early resolution (imports and macros),
     .           /// but not for late resolution yet.
     .           #[derive(Clone, Copy)]
     .           enum Scope<'a> {
     .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
     .               macro_rules: MacroRulesScopeRef<'a>,
     .               derives: &'a [ast::Path],
     .           }
     .           
     .           impl<'a> ParentScope<'a> {
     .               /// Creates a parent scope with the passed argument used as the module scope component,
     .               /// and other scope components set to default empty values.
     .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
     8 ( 0.00%)          ParentScope {
     .                       module,
     .                       expansion: LocalExpnId::ROOT,
 5,706 ( 0.01%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
     .                       derives: &[],
     .                   }
     .               }
     .           }
     .           
     .           #[derive(Copy, Debug, Clone)]
     .           enum ImplTraitContext {
     .               Existential,
-- line 176 ----------------------------------------
-- line 303 ----------------------------------------
     .           
     .               fn names_to_string(segments: &[Segment]) -> String {
     .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
     .               }
     .           }
     .           
     .           impl<'a> From<&'a ast::PathSegment> for Segment {
     .               fn from(seg: &'a ast::PathSegment) -> Segment {
    50 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
     .               }
     .           }
     .           
     .           struct UsePlacementFinder {
     .               target_module: NodeId,
     .               span: Option<Span>,
     .               found_use: bool,
     .           }
-- line 319 ----------------------------------------
-- line 418 ----------------------------------------
     .               /// Virtual module that denotes resolution in current scope.
     .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
     .               /// are always split into two parts, the first of which should be some kind of module.
     .               CurrentScope,
     .           }
     .           
     .           impl ModuleOrUniformRoot<'_> {
     .               fn same_def(lhs: Self, rhs: Self) -> bool {
    40 ( 0.00%)          match (lhs, rhs) {
     .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
     .                           ptr::eq(lhs, rhs)
     .                       }
     .                       (
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
     .                       )
     .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
     .           /// A key that identifies a binding in a given `Module`.
     .           ///
     .           /// Multiple bindings in the same module can have the same key (in a valid
     .           /// program) if all but one of them come from glob imports.
     .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
     .           struct BindingKey {
     .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
     .               /// identifier.
 8,436 ( 0.01%)      ident: Ident,
 1,778 ( 0.00%)      ns: Namespace,
     .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
     .               /// `_` in the expanded AST that introduced this binding.
   558 ( 0.00%)      disambiguator: u32,
     .           }
     .           
     .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
     .           
     .           /// One node in the tree of modules.
     .           ///
     .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
     .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
     .           impl<'a> ModuleData<'a> {
     .               fn new(
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expansion: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Self {
 1,729 ( 0.00%)          let is_foreign = match kind {
     .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
     .                       ModuleKind::Block(_) => false,
     .                   };
 5,681 ( 0.01%)          ModuleData {
     .                       parent,
     .                       kind,
     .                       lazy_resolutions: Default::default(),
     .                       populate_on_access: Cell::new(is_foreign),
     .                       unexpanded_invocations: Default::default(),
     .                       no_implicit_prelude,
     .                       glob_importers: RefCell::new(Vec::new()),
     .                       globs: RefCell::new(Vec::new()),
     .                       traits: RefCell::new(None),
     .                       span,
     .                       expansion,
     .                   }
     .               }
     .           
    51 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
     .               {
    22 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
 1,480 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
    48 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
     .                       }
     .                   }
    40 ( 0.00%)      }
     .           
     .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
     .               fn ensure_traits<R>(&'a self, resolver: &mut R)
     .               where
     .                   R: AsMut<Resolver<'a>>,
     .               {
     .                   let mut traits = self.traits.borrow_mut();
     6 ( 0.00%)          if traits.is_none() {
     .                       let mut collected_traits = Vec::new();
     .                       self.for_each_child(resolver, |_, name, ns, binding| {
    88 ( 0.00%)                  if ns != TypeNS {
     .                               return;
     .                           }
   178 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
     .                               collected_traits.push((name, binding))
     .                           }
     .                       });
    18 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
     .                   }
     .               }
     .           
     .               fn res(&self) -> Option<Res> {
   822 ( 0.00%)          match self.kind {
 1,115 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // Public for rustdoc.
     .               pub fn def_id(&self) -> DefId {
     .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
     .               }
     .           
     .               fn opt_def_id(&self) -> Option<DefId> {
   813 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               // `self` resolves to the first module ancestor that `is_normal`.
     .               fn is_normal(&self) -> bool {
   105 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
     .               }
     .           
     .               fn is_trait(&self) -> bool {
     1 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
     .               }
     .           
     .               fn nearest_item_scope(&'a self) -> Module<'a> {
   213 ( 0.00%)          match self.kind {
     .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
     .                           self.parent.expect("enum or trait module without a parent")
     .                       }
     .                       _ => self,
     .                   }
     .               }
     .           
     .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
     .               /// This may be the crate root.
   106 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
   424 ( 0.00%)          match self.kind {
   212 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
     .                       _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
     .                   }
   212 ( 0.00%)      }
     .           
     .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
     .                   while !ptr::eq(self, other) {
     .                       if let Some(parent) = other.parent {
     .                           other = parent;
     .                       } else {
     .                           return false;
     .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
     .               b1: &'a NameBinding<'a>,
     .               b2: &'a NameBinding<'a>,
     .               misc1: AmbiguityErrorMisc,
     .               misc2: AmbiguityErrorMisc,
     .           }
     .           
     .           impl<'a> NameBinding<'a> {
     .               fn module(&self) -> Option<Module<'a>> {
   810 ( 0.00%)          match self.kind {
   128 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
    15 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               fn res(&self) -> Res {
30,062 ( 0.03%)          match self.kind {
27,678 ( 0.03%)              NameBindingKind::Res(res, _) => res,
   403 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
    62 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
     .                   }
     .               }
     .           
     .               fn is_ambiguity(&self) -> bool {
    20 ( 0.00%)          self.ambiguity.is_some()
    20 ( 0.00%)              || match self.kind {
    10 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
     .                           _ => false,
     .                       }
     .               }
     .           
     .               fn is_possibly_imported_variant(&self) -> bool {
     .                   match self.kind {
     .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
     .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
     .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
     .                           ..
     .                       }) => def_id.index == CRATE_DEF_INDEX,
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_import(&self) -> bool {
    32 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
     .               }
     .           
     .               fn is_glob_import(&self) -> bool {
17,241 ( 0.02%)          match self.kind {
    20 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               fn is_importable(&self) -> bool {
    30 ( 0.00%)          !matches!(
     .                       self.res(),
     .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
     .                   )
     .               }
     .           
     .               fn is_macro_def(&self) -> bool {
     7 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
     .               }
     .           
     .               fn macro_kind(&self) -> Option<MacroKind> {
     .                   self.res().macro_kind()
     .               }
     .           
     .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
     .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
     .               /// they are declared in the static array generated by proc_macro_harness.
     .               proc_macros: Vec<NodeId>,
     .               confused_type_with_std_module: FxHashMap<Span, Span>,
     .           
     .               access_levels: AccessLevels,
     .           }
     .           
     .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
     7 ( 0.00%)  #[derive(Default)]
     .           pub struct ResolverArenas<'a> {
     .               modules: TypedArena<ModuleData<'a>>,
     .               local_modules: RefCell<Vec<Module<'a>>>,
     .               imports: TypedArena<Import<'a>>,
     .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
     .               ast_paths: TypedArena<ast::Path>,
     .               dropless: DroplessArena,
     .           }
     .           
     .           impl<'a> ResolverArenas<'a> {
 3,211 ( 0.00%)      fn new_module(
     .                   &'a self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
     .               ) -> Module<'a> {
     .                   let module =
     .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
     .                   let def_id = module.opt_def_id();
   741 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
     .                       self.local_modules.borrow_mut().push(module);
     .                   }
   247 ( 0.00%)          if let Some(def_id) = def_id {
     .                       module_map.insert(def_id, module);
     .                   }
     .                   module
 2,223 ( 0.00%)      }
     .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
     .                   self.local_modules.borrow()
     .               }
     .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
     .                   self.dropless.alloc(name_binding)
     .               }
    14 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
   268 ( 0.00%)          self.imports.alloc(import)
    14 ( 0.00%)      }
     .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
 5,809 ( 0.01%)          self.name_resolutions.alloc(Default::default())
     .               }
     .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
     .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
     .               }
     .               fn alloc_macro_rules_binding(
     .                   &'a self,
     .                   binding: MacroRulesBinding<'a>,
     .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
     .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
     .               fn as_mut(&mut self) -> &mut Resolver<'a> {
     .                   self
     .               }
     .           }
     .           
     .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
     .               fn parent(self, id: DefId) -> Option<DefId> {
    29 ( 0.00%)          match id.as_local() {
     .                       Some(id) => self.definitions.def_key(id).parent,
     .                       None => self.cstore().def_key(id).parent,
     .                   }
     .                   .map(|index| DefId { index, ..id })
     .               }
     .           }
     .           
     .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
-- line 1149 ----------------------------------------
-- line 1157 ----------------------------------------
     .                   }
     .               }
     .           
     .               #[inline]
     .               fn def_span(&self, id: LocalDefId) -> Span {
     .                   self.definitions.def_span(id)
     .               }
     .           
    78 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
    13 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
     .                       self.item_generics_num_lifetimes[&def_id]
     .                   } else {
   104 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
     .                   }
     .               }
     .           
    20 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    10 ( 0.00%)          self.legacy_const_generic_args(expr)
    30 ( 0.00%)      }
     .           
   142 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
     .                   self.partial_res_map.get(&id).cloned()
   426 ( 0.00%)      }
     .           
    72 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
    18 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
    90 ( 0.00%)      }
     .           
     .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
     .                   self.label_res_map.get(&id).cloned()
     .               }
     .           
     .               fn definitions(&mut self) -> &mut Definitions {
    21 ( 0.00%)          &mut self.definitions
    21 ( 0.00%)      }
     .           
   192 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
   293 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
   240 ( 0.00%)      }
     .           
     .               fn lint_buffer(&mut self) -> &mut LintBuffer {
     .                   &mut self.lint_buffer
     .               }
     .           
     .               fn next_node_id(&mut self) -> NodeId {
     .                   self.next_node_id()
     .               }
     .           
 1,168 ( 0.00%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
     .                   self.trait_map.remove(&node)
 1,168 ( 0.00%)      }
     .           
 1,202 ( 0.00%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
   211 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
 1,202 ( 0.00%)      }
     .           
   114 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
     .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
   114 ( 0.00%)      }
     .           
     .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
     .                   match def_id.as_local() {
     .                       Some(def_id) => self.definitions.def_path_hash(def_id),
     .                       None => self.cstore().def_path_hash(def_id),
     .                   }
     .               }
     .           
     .               /// Adds a definition with a parent definition.
   585 ( 0.00%)      fn create_def(
     .                   &mut self,
     .                   parent: LocalDefId,
     .                   node_id: ast::NodeId,
     .                   data: DefPathData,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .               ) -> LocalDefId {
    78 ( 0.00%)          assert!(
    78 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
     .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
     .                       node_id,
     .                       data,
     .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
     .                   );
     .           
     .                   // Find the next free disambiguator for this key.
    39 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
     .                   let next_disambiguator = |parent, data| {
   195 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
    39 ( 0.00%)              let disambiguator = *next_disamb;
    39 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
     .                       disambiguator
     .                   };
     .           
   390 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
     .           
     .                   // Some things for which we allocate `LocalDefId`s don't correspond to
     .                   // anything in the AST, so they don't have a `NodeId`. For these cases
     .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
   117 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
     .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
     .                       self.node_id_to_def_id.insert(node_id, def_id);
     .                   }
   117 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
     .           
     .                   def_id
   351 ( 0.00%)      }
     .           }
     .           
     .           impl<'a> Resolver<'a> {
    16 ( 0.00%)      pub fn new(
     .                   session: &'a Session,
     .                   krate: &Crate,
     .                   crate_name: &str,
     .                   metadata_loader: Box<MetadataLoaderDyn>,
     .                   arenas: &'a ResolverArenas<'a>,
     .               ) -> Resolver<'a> {
     .                   let root_def_id = CRATE_DEF_ID.to_def_id();
     .                   let mut module_map = FxHashMap::default();
    14 ( 0.00%)          let graph_root = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     1 ( 0.00%)              krate.span,
     2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
     .                       &mut module_map,
     .                   );
    12 ( 0.00%)          let empty_module = arenas.new_module(
     .                       None,
     .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
     1 ( 0.00%)              ExpnId::root(),
     .                       DUMMY_SP,
     .                       true,
     .                       &mut FxHashMap::default(),
     .                   );
     .           
     4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
     2 ( 0.00%)          let root = definitions.get_root_def();
     .           
     .                   let mut visibilities = FxHashMap::default();
     .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
     .           
     .                   let mut def_id_to_node_id = IndexVec::default();
     2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
     .                   let mut node_id_to_def_id = FxHashMap::default();
     .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
     .           
     .                   let mut invocation_parents = FxHashMap::default();
     .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
     .           
     3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
     .                       .opts
     .                       .externs
     .                       .iter()
     1 ( 0.00%)              .filter(|(_, entry)| entry.add_prelude)
     1 ( 0.00%)              .map(|(name, _)| (Ident::from_str(name), Default::default()))
     .                       .collect();
     .           
     9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
     .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
     7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
     .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
     .                       }
     .                   }
     .           
     8 ( 0.00%)          let (registered_attrs, registered_tools) =
     4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
     .           
     .                   let features = session.features_untracked();
     .           
   237 ( 0.00%)          let mut resolver = Resolver {
     .                       session,
     .           
     2 ( 0.00%)              definitions,
     .           
     .                       // The outermost module has def ID 0; this is not reflected in the
     .                       // AST.
     .                       graph_root,
     .                       prelude: None,
     4 ( 0.00%)              extern_prelude,
     .           
     .                       has_self: FxHashSet::default(),
     .                       field_names: FxHashMap::default(),
     .           
     .                       determined_imports: Vec::new(),
     .                       indeterminate_imports: Vec::new(),
     .           
     .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
     .                       partial_res_map: Default::default(),
     .                       import_res_map: Default::default(),
     .                       label_res_map: Default::default(),
     .                       extern_crate_map: Default::default(),
     .                       reexport_map: FxHashMap::default(),
     .                       trait_map: NodeMap::default(),
     .                       underscore_disambiguator: 0,
     .                       empty_module,
     4 ( 0.00%)              module_map,
     .                       block_map: Default::default(),
     .                       binding_parent_modules: FxHashMap::default(),
     .                       ast_transform_scopes: FxHashMap::default(),
     .           
     .                       glob_map: Default::default(),
     4 ( 0.00%)              visibilities,
     .                       used_imports: FxHashSet::default(),
     .                       maybe_unused_trait_imports: Default::default(),
     .                       maybe_unused_extern_crates: Vec::new(),
     .           
     .                       privacy_errors: Vec::new(),
     .                       ambiguity_errors: Vec::new(),
     .                       use_injections: Vec::new(),
     .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
     .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
     .                           kind: NameBindingKind::Res(Res::Err, false),
     .                           ambiguity: None,
     .                           expansion: LocalExpnId::ROOT,
     .                           span: DUMMY_SP,
     .                           vis: ty::Visibility::Public,
     .                       }),
     .           
     6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
     .                       macro_names: FxHashSet::default(),
     .                       builtin_macros: Default::default(),
     4 ( 0.00%)              registered_attrs,
     4 ( 0.00%)              registered_tools,
     .                       macro_use_prelude: FxHashMap::default(),
     .                       all_macros: FxHashMap::default(),
     .                       macro_map: FxHashMap::default(),
     7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
     6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
     5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
     .                       invocation_parent_scopes: Default::default(),
     .                       output_macro_rules_scopes: Default::default(),
     .                       helper_attrs: Default::default(),
     .                       derive_data: Default::default(),
     .                       local_macro_def_scopes: FxHashMap::default(),
     .                       name_already_seen: FxHashMap::default(),
     .                       potentially_unused_imports: Vec::new(),
     .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
     .                       active_features: features
     .                           .declared_lib_features
     .                           .iter()
     .                           .map(|(feat, ..)| *feat)
     .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
     .                           .collect(),
     .                       lint_buffer: LintBuffer::default(),
     .                       next_node_id: CRATE_NODE_ID,
     4 ( 0.00%)              node_id_to_def_id,
     4 ( 0.00%)              def_id_to_node_id,
     .                       placeholder_field_indices: Default::default(),
     4 ( 0.00%)              invocation_parents,
     .                       next_disambiguator: Default::default(),
     .                       trait_impl_items: Default::default(),
     .                       legacy_const_generic_args: Default::default(),
     .                       item_generics_num_lifetimes: Default::default(),
     .                       main_def: Default::default(),
     .                       trait_impls: Default::default(),
     .                       proc_macros: Default::default(),
     .                       confused_type_with_std_module: Default::default(),
     .                       access_levels: Default::default(),
     .                   };
     .           
     .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
     .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
     .           
     .                   resolver
     9 ( 0.00%)      }
     .           
     .               fn new_module(
     .                   &mut self,
     .                   parent: Option<Module<'a>>,
     .                   kind: ModuleKind,
     .                   expn_id: ExpnId,
     .                   span: Span,
     .                   no_implicit_prelude: bool,
     .               ) -> Module<'a> {
     2 ( 0.00%)          let module_map = &mut self.module_map;
 2,452 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
     .               }
     .           
     .               pub fn next_node_id(&mut self) -> NodeId {
     .                   let next =
   327 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
     .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
     .               }
     .           
     .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
     3 ( 0.00%)          &mut self.lint_buffer
     3 ( 0.00%)      }
     .           
     1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
     .                   Default::default()
     1 ( 0.00%)      }
     .           
     9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     1 ( 0.00%)          let definitions = self.definitions;
     4 ( 0.00%)          let visibilities = self.visibilities;
     4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
     4 ( 0.00%)          let reexport_map = self.reexport_map;
     4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
     4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
     4 ( 0.00%)          let glob_map = self.glob_map;
     6 ( 0.00%)          let main_def = self.main_def;
     4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
     6 ( 0.00%)          let access_levels = self.access_levels;
    37 ( 0.00%)          ResolverOutputs {
     2 ( 0.00%)              definitions,
    11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
     4 ( 0.00%)              visibilities,
     4 ( 0.00%)              access_levels,
     4 ( 0.00%)              extern_crate_map,
     4 ( 0.00%)              reexport_map,
     4 ( 0.00%)              glob_map,
     4 ( 0.00%)              maybe_unused_trait_imports,
     4 ( 0.00%)              maybe_unused_extern_crates,
     .                       extern_prelude: self
     .                           .extern_prelude
     .                           .iter()
     4 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
     .                           .collect(),
     6 ( 0.00%)              main_def,
     4 ( 0.00%)              trait_impls: self.trait_impls,
     4 ( 0.00%)              proc_macros,
     4 ( 0.00%)              confused_type_with_std_module,
     5 ( 0.00%)              registered_tools: self.registered_tools,
     .                   }
    19 ( 0.00%)      }
     .           
     .               pub fn clone_outputs(&self) -> ResolverOutputs {
     .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
     .                   ResolverOutputs {
     .                       definitions: self.definitions.clone(),
     .                       access_levels: self.access_levels.clone(),
     .                       cstore: Box::new(self.cstore().clone()),
     .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
     .                       trait_impls: self.trait_impls.clone(),
     .                       proc_macros,
     .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
     .                       registered_tools: self.registered_tools.clone(),
     .                   }
     .               }
     .           
     .               pub fn cstore(&self) -> &CStore {
13,964 ( 0.02%)          self.crate_loader.cstore()
     .               }
     .           
     .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
     .                   match macro_kind {
     .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
     .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
     .                       MacroKind::Attr => self.non_macro_attr.clone(),
     .                   }
     .               }
     .           
     .               /// Runs the function on each namespace.
    93 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
   141 ( 0.00%)          f(self, TypeNS);
   126 ( 0.00%)          f(self, ValueNS);
   126 ( 0.00%)          f(self, MacroNS);
    84 ( 0.00%)      }
     .           
     .               fn is_builtin_macro(&mut self, res: Res) -> bool {
     .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
     .               }
     .           
     .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
     .                   loop {
     .                       match ctxt.outer_expn_data().macro_def_id {
     .                           Some(def_id) => return def_id,
     .                           None => ctxt.remove_mark(),
     .                       };
     .                   }
     .               }
     .           
     .               /// Entry point to crate resolution.
     2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
     4 ( 0.00%)          self.session.time("resolve_crate", || {
     3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
     .                       self.session.time("resolve_access_levels", || {
     3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
     .                       });
     2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
     3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
     2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
     3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
     3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
     4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
     .                   });
     .               }
     .           
    36 ( 0.00%)      pub fn traits_in_scope(
     .                   &mut self,
     .                   current_trait: Option<Module<'a>>,
     .                   parent_scope: &ParentScope<'a>,
     .                   ctxt: SyntaxContext,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> Vec<TraitCandidate> {
     .                   let mut found_traits = Vec::new();
     .           
     6 ( 0.00%)          if let Some(module) = current_trait {
     .                       if self.trait_may_have_item(Some(module), assoc_item) {
     .                           let def_id = module.def_id();
     .                           found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
     .                       }
     .                   }
     .           
     .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
     .                       match scope {
     .                           Scope::Module(module, _) => {
     .                               this.traits_in_module(module, assoc_item, &mut found_traits);
     .                           }
     .                           Scope::StdLibPrelude => {
     9 ( 0.00%)                      if let Some(module) = this.prelude {
     .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
     .                               }
     .                           }
     .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
     .                           _ => unreachable!(),
     .                       }
     .                       None::<()>
     .                   });
     .           
     .                   found_traits
    24 ( 0.00%)      }
     .           
     .               fn traits_in_module(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .                   found_traits: &mut Vec<TraitCandidate>,
     .               ) {
     .                   module.ensure_traits(self);
     .                   let traits = module.traits.borrow();
   162 ( 0.00%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
     .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
     .                           let def_id = trait_binding.res().def_id();
     .                           let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
     .                           found_traits.push(TraitCandidate { def_id, import_ids });
     .                       }
     .                   }
     .               }
     .           
-- line 1619 ----------------------------------------
-- line 1622 ----------------------------------------
     .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
     .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
     .               // associated items.
     .               fn trait_may_have_item(
     .                   &mut self,
     .                   trait_module: Option<Module<'a>>,
     .                   assoc_item: Option<(Symbol, Namespace)>,
     .               ) -> bool {
    78 ( 0.00%)          match (trait_module, assoc_item) {
     .                       (Some(trait_module), Some((name, ns))) => {
   156 ( 0.00%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
     .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
   597 ( 0.00%)                      assoc_ns == ns && assoc_ident.name == name
     .                           })
     .                       }
     .                       _ => true,
     .                   }
     .               }
     .           
     .               fn find_transitive_imports(
     .                   &mut self,
-- line 1642 ----------------------------------------
-- line 1650 ----------------------------------------
     .                       self.add_to_glob_map(&import, trait_name);
     .                       import_ids.push(id);
     .                       kind = &binding.kind;
     .                   }
     .                   import_ids
     .               }
     .           
     .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
35,141 ( 0.04%)          let ident = ident.normalize_to_macros_2_0();
 5,992 ( 0.01%)          let disambiguator = if ident.name == kw::Underscore {
     .                       self.underscore_disambiguator += 1;
     .                       self.underscore_disambiguator
     .                   } else {
     .                       0
     .                   };
     .                   BindingKey { ident, ns, disambiguator }
     .               }
     .           
48,648 ( 0.05%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
 6,081 ( 0.01%)          if module.populate_on_access.get() {
     .                       module.populate_on_access.set(false);
     .                       self.build_reduced_graph_external(module);
     .                   }
 6,081 ( 0.01%)          &module.lazy_resolutions
54,729 ( 0.06%)      }
     .           
53,955 ( 0.06%)      fn resolution(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   key: BindingKey,
     .               ) -> &'a RefCell<NameResolution<'a>> {
17,985 ( 0.02%)          *self
     .                       .resolutions(module)
     .                       .borrow_mut()
35,970 ( 0.04%)              .entry(key)
11,990 ( 0.01%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
47,960 ( 0.05%)      }
     .           
   649 ( 0.00%)      fn record_use(
     .                   &mut self,
     .                   ident: Ident,
     .                   used_binding: &'a NameBinding<'a>,
     .                   is_lexical_scope: bool,
     .               ) {
   177 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
     .                       self.ambiguity_errors.push(AmbiguityError {
     .                           kind,
     .                           ident,
     .                           b1: used_binding,
     .                           b2,
     .                           misc1: AmbiguityErrorMisc::None,
     .                           misc2: AmbiguityErrorMisc::None,
     .                       });
     .                   }
   146 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
     .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
     .                       // but not introduce it, as used if they are accessed from lexical scope.
    28 ( 0.00%)              if is_lexical_scope {
    11 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
     5 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
     2 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
     .                                       return;
     .                                   }
     .                               }
     .                           }
     .                       }
     .                       used.set(true);
     .                       import.used.set(true);
    14 ( 0.00%)              self.used_imports.insert(import.id);
    70 ( 0.00%)              self.add_to_glob_map(&import, ident);
    84 ( 0.00%)              self.record_use(ident, binding, false);
     .                   }
   472 ( 0.00%)      }
     .           
     .               #[inline]
    42 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
    14 ( 0.00%)          if import.is_glob() {
     .                       let def_id = self.local_def_id(import.id);
     .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
     .                   }
    56 ( 0.00%)      }
     .           
     .               /// A generic scope visitor.
     .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
     .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
     .               fn visit_scopes<T>(
     .                   &mut self,
     .                   scope_set: ScopeSet<'a>,
     .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
     .                   //    ambiguities with `macro_rules`.
     .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
     .                   // 4a. User-defined prelude from macro-use
     .                   //    (open, the open part is from macro expansions, not controlled).
     .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
     .                   // 4c. Standard library prelude (de-facto closed, controlled).
     .                   // 6. Language prelude: builtin attributes (closed, controlled).
     .           
   873 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
     .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
     .                       ScopeSet::All(ns, _) => (ns, None, false),
     .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
     .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
     .                       ScopeSet::Late(ns, ..) => (ns, None, false),
     .                   };
 2,688 ( 0.00%)          let module = match scope_set {
     .                       // Start with the specified module.
     .                       ScopeSet::Late(_, module, _) => module,
     .                       // Jump out of trait or enum modules, they do not act as scopes.
    30 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
     .                   };
   192 ( 0.00%)          let mut scope = match ns {
   480 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
     .                       TypeNS | ValueNS => Scope::Module(module, None),
    27 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
     .                   };
   198 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
   420 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
     .           
     .                   loop {
 2,484 ( 0.00%)              let visit = match scope {
     .                           // Derive helpers are not in scope when resolving derives in the same container.
     .                           Scope::DeriveHelpers(expn_id) => {
    27 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
     .                           }
     .                           Scope::DeriveHelpersCompat => true,
     .                           Scope::MacroRules(macro_rules_scope) => {
     .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
     .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
     .                               // As another consequence of this optimization visitors never observe invocation
     .                               // scopes for macros that were already expanded.
    18 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
     .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
     .                                       macro_rules_scope.set(next_scope.get());
     .                                   } else {
     .                                       break;
     .                                   }
     .                               }
     .                               true
     .                           }
     .                           Scope::CrateRoot => true,
     .                           Scope::Module(..) => true,
     9 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
     .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
     .                           Scope::BuiltinAttrs => true,
   123 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
    21 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
   312 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
     .                           Scope::BuiltinTypes => true,
     .                       };
     .           
    93 ( 0.00%)              if visit {
   270 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
     .                               return break_result;
     .                           }
     .                       }
     .           
   631 ( 0.00%)              scope = match scope {
     .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
     .                           Scope::DeriveHelpers(expn_id) => {
     .                               // Derive helpers are not visible to code generated by bang or derive macros.
     .                               let expn_data = expn_id.expn_data();
     .                               match expn_data.kind {
     .                                   ExpnKind::Root
     .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
     .                                       Scope::DeriveHelpersCompat
     .                                   }
     .                                   _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
     .                               }
     .                           }
    27 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
    18 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
     .                               MacroRulesScope::Binding(binding) => {
     .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
     .                               }
     .                               MacroRulesScope::Invocation(invoc_id) => {
     .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
     .                               }
     .                               MacroRulesScope::Empty => Scope::Module(module, None),
     .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
     .                           Scope::CrateRoot => match ns {
     .                               TypeNS => {
     .                                   ctxt.adjust(ExpnId::root());
     .                                   Scope::ExternPrelude
     .                               }
     .                               ValueNS | MacroNS => break,
     .                           },
     .                           Scope::Module(module, prev_lint_id) => {
   306 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
     .                               let derive_fallback_lint_id = match scope_set {
     .                                   ScopeSet::Late(.., lint_id) => lint_id,
     .                                   _ => None,
     .                               };
   471 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
     .                                   Some((parent_module, lint_id)) => {
     .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
     .                                   }
     .                                   None => {
   373 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   202 ( 0.00%)                              match ns {
     .                                           TypeNS => Scope::ExternPrelude,
     .                                           ValueNS => Scope::StdLibPrelude,
     .                                           MacroNS => Scope::RegisteredAttrs,
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
     .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
     .                           Scope::BuiltinAttrs => break, // nowhere else to search
    42 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
     .                           Scope::ExternPrelude => Scope::ToolPrelude,
     .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   126 ( 0.00%)                  Scope::StdLibPrelude => match ns {
     .                               TypeNS => Scope::BuiltinTypes,
     .                               ValueNS => break, // nowhere else to search
     .                               MacroNS => Scope::BuiltinAttrs,
     .                           },
     .                           Scope::BuiltinTypes => break, // nowhere else to search
     .                       };
     .                   }
     .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
     .               ///    let g = || {};
     .               ///    fn g() {}
     .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
     .               /// }
     .               /// ```
     .               ///
     .               /// Invariant: This must only be called during main resolution, not during
     .               /// import resolution.
   850 ( 0.00%)      fn resolve_ident_in_lexical_scope(
     .                   &mut self,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used_id: Option<NodeId>,
     .                   path_span: Span,
     .                   ribs: &[Rib<'a>],
     .               ) -> Option<LexicalScopeBinding<'a>> {
   170 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
     .                   let orig_ident = ident;
   595 ( 0.00%)          if ident.name == kw::Empty {
     .                       return Some(LexicalScopeBinding::Res(Res::Err));
     .                   }
     .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
     .                       // FIXME(jseyfried) improve `Self` hygiene
     .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
     .                       (empty_span, empty_span)
    85 ( 0.00%)          } else if ns == TypeNS {
   245 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
     .                       (normalized_span, normalized_span)
     .                   } else {
   180 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
     .                   };
     .                   ident.span = general_span;
     .                   let normalized_ident = Ident { span: normalized_span, ..ident };
     .           
     .                   // Walk backwards up the ribs in scope.
     .                   let record_used = record_used_id.is_some();
   255 ( 0.00%)          let mut module = self.graph_root;
     .                   for i in (0..ribs.len()).rev() {
     .                       debug!("walk rib\n{:?}", ribs[i].bindings);
     .                       // Use the rib kind to determine whether we are resolving parameters
     .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
   205 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
     .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
     .                       {
     .                           // The ident resolves to a type parameter or local variable.
   192 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
     .                               i,
    32 ( 0.00%)                      rib_ident,
    80 ( 0.00%)                      *res,
     .                               record_used,
     .                               path_span,
     .                               *original_rib_ident_def,
     .                               ribs,
     .                           )));
     .                       }
     .           
 1,047 ( 0.00%)              module = match ribs[i].kind {
    69 ( 0.00%)                  ModuleRibKind(module) => module,
     .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
     .                               // If an invocation of this macro created `ident`, give up on `ident`
     .                               // and switch to `ident`'s source from the macro definition.
     .                               ident.span.remove_mark();
     .                               continue;
     .                           }
     .                           _ => continue,
     .                       };
     .           
   207 ( 0.00%)              match module.kind {
     .                           ModuleKind::Block(..) => {} // We can see through blocks
     .                           _ => break,
     .                       }
     .           
     .                       let item = self.resolve_ident_in_module_unadjusted(
     .                           ModuleOrUniformRoot::Module(module),
     .                           ident,
     .                           ns,
-- line 2000 ----------------------------------------
-- line 2002 ----------------------------------------
     .                           record_used,
     .                           path_span,
     .                       );
     .                       if let Ok(binding) = item {
     .                           // The ident resolves to an item.
     .                           return Some(LexicalScopeBinding::Item(binding));
     .                       }
     .                   }
 1,173 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
     .                       orig_ident,
     .                       ScopeSet::Late(ns, module, record_used_id),
     .                       parent_scope,
     .                       record_used,
     .                       record_used,
     .                       path_span,
     .                   )
     .                   .ok()
     .                   .map(LexicalScopeBinding::Item)
   765 ( 0.00%)      }
     .           
   858 ( 0.00%)      fn hygienic_lexical_parent(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   ctxt: &mut SyntaxContext,
     .                   derive_fallback_lint_id: Option<NodeId>,
     .               ) -> Option<(Module<'a>, Option<NodeId>)> {
   546 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    24 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
     .                   }
     .           
   148 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
     .                       return Some((module.parent.unwrap().nearest_item_scope(), None));
     .                   }
     .           
     .                   // We need to support the next case under a deprecation warning
     .                   // ```
     .                   // struct MyStruct;
     .                   // ---- begin: this comes from a proc macro derive
     .                   // mod implementation_details {
     .                   //     // Note that `MyStruct` is not in scope here.
     .                   //     impl SomeTrait for MyStruct { ... }
     .                   // }
     .                   // ---- end
     .                   // ```
     .                   // So we have to fall back to the module's parent during lexical resolution in this case.
    74 ( 0.00%)          if derive_fallback_lint_id.is_some() {
    36 ( 0.00%)              if let Some(parent) = module.parent {
     .                           // Inner module is inside the macro, parent module is outside of the macro.
    60 ( 0.00%)                  if module.expansion != parent.expansion
     .                               && module.expansion.is_descendant_of(parent.expansion)
     .                           {
     .                               // The macro is a proc macro derive
     .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
     .                                   let ext = self.get_macro_by_def_id(def_id);
     .                                   if ext.builtin_name.is_none()
     .                                       && ext.macro_kind() == MacroKind::Derive
     .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
     .                                       return Some((parent, derive_fallback_lint_id));
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .           
     .                   None
   780 ( 0.00%)      }
     .           
     .               fn resolve_ident_in_module(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
   675 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
     .                       .map_err(|(determinacy, _)| determinacy)
     .               }
     .           
 1,560 ( 0.00%)      fn resolve_ident_in_module_ext(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   mut ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
     .                   let tmp_parent_scope;
     .                   let mut adjusted_parent_scope = parent_scope;
     .                   match module {
     .                       ModuleOrUniformRoot::Module(m) => {
   474 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    20 ( 0.00%)                      tmp_parent_scope =
    24 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
     .                               adjusted_parent_scope = &tmp_parent_scope;
     .                           }
     .                       }
     .                       ModuleOrUniformRoot::ExternPrelude => {
     .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
     .                       }
     .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
     .                           // No adjustments
     .                       }
     .                   }
   868 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
     .                       module,
   158 ( 0.00%)              ident,
     .                       ns,
     .                       adjusted_parent_scope,
     .                       false,
     .                       record_used,
     .                       path_span,
     .                   )
   546 ( 0.00%)      }
     .           
    50 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
     .                   debug!("resolve_crate_root({:?})", ident);
     5 ( 0.00%)          let mut ctxt = ident.span.ctxt();
     5 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
     .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
     .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
     .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
     .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
     .                       // definitions actually produced by `macro` and `macro` definitions produced by
     .                       // `macro_rules!`, but at least such configurations are not stable yet.
     6 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
     .                       debug!(
     .                           "resolve_crate_root: marks={:?}",
     .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
     .                       );
     6 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
     .                       let mut result = None;
     .                       // Find the last opaque mark from the end if it exists.
    12 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
     .                           if transparency == Transparency::Opaque {
     .                               result = Some(mark);
     .                               iter.next();
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found opaque mark {:?} {:?}",
     .                           result,
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       // Then find the last semi-transparent mark from the end if it exists.
     9 ( 0.00%)              for (mark, transparency) in iter {
     .                           if transparency == Transparency::SemiTransparent {
     .                               result = Some(mark);
     .                           } else {
     .                               break;
     .                           }
     .                       }
     .                       debug!(
     .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
     .                           result,
     .                           result.map(|r| r.expn_data())
     .                       );
     .                       result
     .                   } else {
     .                       debug!("resolve_crate_root: not DollarCrate");
     2 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
    14 ( 0.00%)              ctxt.adjust(ExpnId::root())
     .                   };
    10 ( 0.00%)          let module = match mark {
     5 ( 0.00%)              Some(def) => self.expn_def_scope(def),
     .                       None => {
     .                           debug!(
     .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
     .                               ident, ident.span
     .                           );
     8 ( 0.00%)                  return self.graph_root;
     .                       }
     .                   };
     .                   let module = self.expect_module(
     .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
     .                   );
     .                   debug!(
     .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
     .                       ident,
     .                       module,
     .                       module.kind.name(),
     .                       ident.span
     .                   );
     .                   module
    35 ( 0.00%)      }
     .           
     .               fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
     .                   let mut module = self.expect_module(module.nearest_parent_mod());
     .                   while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
     .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
     .                       module = self.expect_module(parent.nearest_parent_mod());
     .                   }
     .                   module
-- line 2199 ----------------------------------------
-- line 2203 ----------------------------------------
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .               ) -> PathResult<'a> {
   210 ( 0.00%)          self.resolve_path_with_ribs(
     .                       path,
     .                       opt_ns,
     .                       parent_scope,
     .                       record_used,
     .                       path_span,
     .                       crate_lint,
     .                       None,
     .                   )
     .               }
     .           
 1,095 ( 0.00%)      fn resolve_path_with_ribs(
     .                   &mut self,
     .                   path: &[Segment],
     .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .                   crate_lint: CrateLint,
     .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
     .               ) -> PathResult<'a> {
    73 ( 0.00%)          let mut module = None;
     .                   let mut allow_super = true;
     .                   let mut second_binding = None;
     .           
     .                   debug!(
     .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
     .                        path_span={:?}, crate_lint={:?})",
     .                       path, opt_ns, record_used, path_span, crate_lint,
     .                   );
     .           
   582 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
     .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
   683 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
   198 ( 0.00%)                  if record_used {
   240 ( 0.00%)                      if let Some(id) = id {
    96 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
    96 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
   192 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
     .                                   }
     .                               }
     .                           }
   264 ( 0.00%)              };
     .           
   238 ( 0.00%)              let is_last = i == path.len() - 1;
   485 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
    97 ( 0.00%)              let name = ident.name;
     .           
   162 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
     .           
     .                       if ns == TypeNS {
   130 ( 0.00%)                  if allow_super && name == kw::Super {
     .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                               let self_module = match i {
     .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
     .                                   _ => match module {
     .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
     .                                       _ => None,
     .                                   },
     .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
     .                               let msg = "there are too many leading `super` keywords".to_string();
     .                               return PathResult::Failed {
     .                                   span: ident.span,
     .                                   label: msg,
     .                                   suggestion: None,
     .                                   is_error_from_last_segment: false,
     .                               };
     .                           }
   130 ( 0.00%)                  if i == 0 {
   141 ( 0.00%)                      if name == kw::SelfLower {
     .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
     .                                   module = Some(ModuleOrUniformRoot::Module(
     .                                       self.resolve_self(&mut ctxt, parent_scope.module),
     .                                   ));
     .                                   continue;
     .                               }
     .                               if name == kw::PathRoot && ident.span.rust_2018() {
     .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
     .                               }
     .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
     .                                   // `::a::b` from 2015 macro on 2018 global edition
     .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
     .                                   continue;
     .                               }
     .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
     .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
     8 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
     .                                   continue;
     .                               }
     .                           }
     .                       }
     .           
     .                       // Report special messages for path segment keywords in wrong positions.
   475 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
     .                           let name_str = if name == kw::PathRoot {
     .                               "crate root".to_string()
     .                           } else {
     .                               format!("`{}`", name)
     .                           };
     .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
     .                               format!("global paths cannot start with {}", name_str)
     .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
     .                               is_error_from_last_segment: false,
     .                           };
     .                       }
     .           
     .                       enum FindBindingResult<'a> {
     .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
     .                           PathResult(PathResult<'a>),
     .                       }
 3,040 ( 0.00%)              let find_binding_in_ns = |this: &mut Self, ns| {
   404 ( 0.00%)                  let binding = if let Some(module) = module {
     .                               this.resolve_ident_in_module(
     .                                   module,
    72 ( 0.00%)                          ident,
     .                                   ns,
     .                                   parent_scope,
    48 ( 0.00%)                          record_used,
    24 ( 0.00%)                          path_span,
     .                               )
   354 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
     .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
   306 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
    54 ( 0.00%)                          ident,
     .                                   scopes,
    18 ( 0.00%)                          parent_scope,
    36 ( 0.00%)                          record_used,
     .                                   record_used,
    18 ( 0.00%)                          path_span,
     .                               )
     .                           } else {
   212 ( 0.00%)                      let record_used_id = if record_used {
    43 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
     .                               } else {
     .                                   None
     .                               };
   763 ( 0.00%)                      match this.resolve_ident_in_lexical_scope(
   159 ( 0.00%)                          ident,
     .                                   ns,
    53 ( 0.00%)                          parent_scope,
     .                                   record_used_id,
   106 ( 0.00%)                          path_span,
     .                                   &ribs.unwrap()[ns],
     .                               ) {
     .                                   // we found a locally-imported or available item/module
    90 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
     .                                   // we found a local variable or type param
     .                                   Some(LexicalScopeBinding::Res(res))
    32 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
     .                                   {
   144 ( 0.00%)                              record_segment_res(this, res);
   128 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
   112 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
     .                                       ));
     .                                   }
    21 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
     .                               }
     .                           };
   553 ( 0.00%)                  FindBindingResult::Binding(binding)
   760 ( 0.00%)              };
   665 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
   224 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
     .                           FindBindingResult::Binding(binding) => binding,
     .                       };
   179 ( 0.00%)              match binding {
     .                           Ok(binding) => {
   360 ( 0.00%)                      if i == 1 {
     .                                   second_binding = Some(binding);
     .                               }
     .                               let res = binding.res();
   720 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
     .                               if let Some(next_module) = binding.module() {
   100 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
   450 ( 0.00%)                          record_segment_res(self, res);
   154 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
     .                                   if binding.is_import() {
     .                                       self.session
     .                                           .struct_span_err(
     .                                               ident.span,
     .                                               "cannot use a tool module through an import",
     .                                           )
     .                                           .span_note(binding.span, "the tool module imported here")
     .                                           .emit();
     .                                   }
     .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
     .                                   return PathResult::NonModule(PartialRes::new(res));
   110 ( 0.00%)                      } else if res == Res::Err {
     .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
    66 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
   154 ( 0.00%)                          self.lint_if_path_starts_with_module(
    44 ( 0.00%)                              crate_lint,
     .                                       path,
    22 ( 0.00%)                              path_span,
     .                                       second_binding,
     .                                   );
    66 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
    88 ( 0.00%)                              res,
    88 ( 0.00%)                              path.len() - i - 1,
     .                                   ));
     .                               } else {
     .                                   let label = format!(
     .                                       "`{}` is {} {}, not a module",
     .                                       ident,
     .                                       res.article(),
     .                                       res.descr(),
     .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
     .                                   return PathResult::Failed {
     .                                       span: ident.span,
     .                                       label,
     .                                       suggestion: None,
     .                                       is_error_from_last_segment: is_last,
     .                                   };
     .                               }
     .                           }
    14 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
     .                           Err(Determined) => {
     .                               if let Some(ModuleOrUniformRoot::Module(module)) = module {
     .                                   if opt_ns.is_some() && !module.is_normal() {
     .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
     .                                           module.res().unwrap(),
     .                                           path.len() - i,
     .                                       ));
     .                                   }
-- line 2449 ----------------------------------------
-- line 2612 ----------------------------------------
     .                                   label,
     .                                   suggestion,
     .                                   is_error_from_last_segment: is_last,
     .                               };
     .                           }
     .                       }
     .                   }
     .           
   308 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
     .           
   168 ( 0.00%)          PathResult::Module(match module {
    56 ( 0.00%)              Some(module) => module,
     .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
     .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
     .                   })
   657 ( 0.00%)      }
     .           
   660 ( 0.00%)      fn lint_if_path_starts_with_module(
     .                   &mut self,
     .                   crate_lint: CrateLint,
     .                   path: &[Segment],
     .                   path_span: Span,
     .                   second_binding: Option<&NameBinding<'_>>,
     .               ) {
   275 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
     .                       CrateLint::No => return,
     .                       CrateLint::SimplePath(id) => (id, path_span),
     .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
     .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
     .                   };
     .           
    52 ( 0.00%)          let first_name = match path.get(0) {
     .                       // In the 2018 edition this lint is a hard error, so nothing to do
   104 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
     .                       _ => return,
     .                   };
     .           
     .                   // We're only interested in `use` paths which should start with
     .                   // `{{root}}` currently.
     .                   if first_name != kw::PathRoot {
     .                       return;
     .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
     .                   self.lint_buffer.buffer_lint_with_diagnostic(
     .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
     .                       diag_id,
     .                       diag_span,
     .                       "absolute paths must start with `self`, `super`, \
     .                        `crate`, or an external crate name in the 2018 edition",
     .                       diag,
     .                   );
   440 ( 0.00%)      }
     .           
     .               // Validate a local resolution (from ribs).
     .               fn validate_res_from_ribs(
     .                   &mut self,
     .                   rib_index: usize,
     .                   rib_ident: Ident,
     .                   mut res: Res,
     .                   record_used: bool,
     .                   span: Span,
     .                   original_rib_ident_def: Ident,
     .                   all_ribs: &[Rib<'a>],
     .               ) -> Res {
     .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
     .                   debug!("validate_res_from_ribs({:?})", res);
    32 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
     .           
     .                   // An invalid forward use of a generic parameter from a previous default.
    64 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
     .                       if record_used {
     .                           let res_error = if rib_ident.name == kw::SelfUpper {
     .                               ResolutionError::SelfInGenericParamDefault
     .                           } else {
     .                               ResolutionError::ForwardDeclaredGenericParam
     .                           };
     .                           self.report_error(span, res_error);
     .                       }
     .                       assert_eq!(res, Res::Err);
     .                       return Res::Err;
     .                   }
     .           
   116 ( 0.00%)          match res {
     .                       Res::Local(_) => {
     .                           use ResolutionError::*;
    12 ( 0.00%)                  let mut res_err = None;
     .           
     .                           for rib in ribs {
    64 ( 0.00%)                      match rib.kind {
     .                                   NormalRibKind
     .                                   | ClosureOrAsyncRibKind
     .                                   | ModuleRibKind(..)
     .                                   | MacroDefinition(..)
     .                                   | ForwardGenericParamBanRibKind => {
     .                                       // Nothing to do. Continue.
     .                                   }
     .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
     .                                       // This was an attempt to access an upvar inside a
     .                                       // named function item. This is not allowed, so we
     .                                       // report an error.
     7 ( 0.00%)                              if record_used {
     .                                           // We don't immediately trigger a resolve error, because
     .                                           // we want certain other resolution errors (namely those
     .                                           // emitted for `ConstantItemRibKind` below) to take
     .                                           // precedence.
     .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
     .                                       }
     .                                   }
     .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
     .                                   ConstParamTyRibKind => {
     .                                       if record_used {
     .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
     .                                       }
     .                                       return Res::Err;
     .                                   }
     .                               }
     .                           }
    14 ( 0.00%)                  if let Some(res_err) = res_err {
     .                               self.report_error(span, res_err);
     .                               return Res::Err;
     .                           }
     .                       }
     .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
     .                           for rib in ribs {
     .                               let has_generic_params: HasGenericParams = match rib.kind {
     .                                   NormalRibKind
-- line 2789 ----------------------------------------
-- line 2912 ----------------------------------------
     .                                       ),
     .                                   );
     .                               }
     .                               return Res::Err;
     .                           }
     .                       }
     .                       _ => {}
     .                   }
    64 ( 0.00%)          res
     .               }
     .           
     .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
     .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
   230 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
     .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
     .                   }
     .               }
     .           
     .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
     .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
     .                   self.pat_span_map.insert(node, span);
     .               }
     .           
     .               fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
   570 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
     .               }
     .           
     .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
22,876 ( 0.02%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
     .                       if !ptr::eq(module, old_module) {
     .                           span_bug!(binding.span, "parent module is reset for binding");
     .                       }
     .                   }
     .               }
     .           
     .               fn disambiguate_macro_rules_vs_modularized(
     .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
     .                       (Some(macro_rules), Some(modularized)) => {
     .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
     .                               && modularized.is_ancestor_of(macro_rules)
     .                       }
     .                       _ => false,
     .                   }
     .               }
     .           
     7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
     .                   self.report_with_use_injections(krate);
     .           
     6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
     .                       let msg = "macro-expanded `macro_export` macros from the current crate \
     .                                  cannot be referred to by absolute paths";
     .                       self.lint_buffer.buffer_lint_with_diagnostic(
     .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
     .                           CRATE_NODE_ID,
     .                           span_use,
     .                           msg,
     .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
     .                   }
     .           
     .                   let mut reported_spans = FxHashSet::default();
     .                   for error in &self.privacy_errors {
     .                       if reported_spans.insert(error.dedup_span) {
     .                           self.report_privacy_error(error);
     .                       }
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn report_with_use_injections(&mut self, krate: &Crate) {
     .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
    10 ( 0.00%)              self.use_injections.drain(..)
     .                   {
     .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
     .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
     .                       } else {
     .                           (None, false)
     .                       };
     .                       if !candidates.is_empty() {
     .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
     .                       }
     .           
     .                       return;
     .                   }
     .           
     .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
     .               }
     .           
   390 ( 0.00%)      fn extern_prelude_get(
     .                   &mut self,
     .                   ident: Ident,
     .                   speculative: bool,
     .               ) -> Option<&'a NameBinding<'a>> {
   195 ( 0.00%)          if ident.is_path_segment_keyword() {
     .                       // Make sure `self`, `super` etc produce an error when passed to here.
     .                       return None;
     .                   }
   351 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
    52 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
     .                           if !speculative && entry.introduced_by_item {
     .                               self.record_use(ident, binding, false);
     .                           }
     .                           Some(binding)
     .                       } else {
    52 ( 0.00%)                  let crate_id = if !speculative {
    16 ( 0.00%)                      let Some(crate_id) =
    24 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
     .                               crate_id
     .                           } else {
    72 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
     .                           };
     .                           let crate_root = self.expect_module(crate_id.as_def_id());
     .                           Some(
     .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
    26 ( 0.00%)                          .to_name_binding(self.arenas),
     .                           )
     .                       }
     .                   })
   312 ( 0.00%)      }
     .           
     .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
     .               /// isn't something that can be returned because it can't be made to live that long,
     .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
     .               /// just that an error occurred.
     .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
     .               pub fn resolve_str_path_error(
     .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
     .               #[inline]
     .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
     .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
     .               }
     .           
     .               /// Checks if an expression refers to a function marked with
     .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
     .               /// from the attribute.
   160 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    80 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
     .                       // Don't perform legacy const generics rewriting if the path already
     .                       // has generic arguments.
    20 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
     .                           return None;
     .                       }
     .           
     .                       let partial_res = self.partial_res_map.get(&expr.id)?;
    40 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
     .                           return None;
     .                       }
     .           
    80 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
     .                           // We only support cross-crate argument rewriting. Uses
     .                           // within the same crate should be updated to use the new
     .                           // const generics style.
    14 ( 0.00%)                  if def_id.is_local() {
     .                               return None;
     .                           }
     .           
     .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
     .                               return v.clone();
     .                           }
     .           
    48 ( 0.00%)                  let attr = self
     .                               .cstore()
    16 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
     .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
     .                           let mut ret = Vec::new();
     .                           for meta in attr.meta_item_list()? {
     .                               match meta.literal()?.kind {
     .                                   LitKind::Int(a, _) => ret.push(a as usize),
     .                                   _ => panic!("invalid arg index"),
     .                               }
     .                           }
     .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
     .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
     .                           return Some(ret);
     .                       }
     .                   }
     .                   None
   180 ( 0.00%)      }
     .           
     7 ( 0.00%)      fn resolve_main(&mut self) {
     2 ( 0.00%)          let module = self.graph_root;
     .                   let ident = Ident::with_dummy_span(sym::main);
     .                   let parent_scope = &ParentScope::module(module, self);
     .           
     .                   let name_binding = match self.resolve_ident_in_module(
     .                       ModuleOrUniformRoot::Module(module),
     .                       ident,
     .                       ValueNS,
     .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
     .           
     .                   let res = name_binding.res();
     .                   let is_import = name_binding.is_import();
     .                   let span = name_binding.span;
     .                   if let Res::Def(DefKind::Fn, _) = res {
     .                       self.record_use(ident, name_binding, false);
     .                   }
     .                   self.main_def = Some(MainDefinition { res, is_import, span });
     8 ( 0.00%)      }
     .           }
     .           
     .           fn names_to_string(names: &[Symbol]) -> String {
     .               let mut result = String::new();
     .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
     .                   if i > 0 {
     .                       result.push_str("::");
     .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
     .               /// This is the "trait item" from a fully qualified path. For example,
     .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
     .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
     .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
     .           }
     .           
     .           impl CrateLint {
     .               fn node_id(&self) -> Option<NodeId> {
   129 ( 0.00%)          match *self {
     .                       CrateLint::No => None,
     .                       CrateLint::SimplePath(id)
     .                       | CrateLint::UsePath { root_id: id, .. }
     .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
     .                   }
     .               }
     .           }
     .           
     .           pub fn provide(providers: &mut Providers) {
     .               late::lifetimes::provide(providers);
     1 ( 0.00%)  }

12,590 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   48,271 ( 0.05%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       17 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,134 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,898 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        6 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       24 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,308 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        3 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        3 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,941 ( 0.01%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,883 ( 0.01%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       21 ( 0.00%)      fn from(p: PathBuf) -> Self {
        6 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       18 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       21 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       12 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       18 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       18 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       15 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,156 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        3 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        6 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
    2,925 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
        .                   self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
-- line 501 ----------------------------------------
-- line 502 ----------------------------------------
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    4,552 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    3,414 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    4,552 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    1,044 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
      696 ( 0.00%)      }
        .               #[inline]
      152 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      152 ( 0.00%)      }
        .               #[inline]
      432 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      288 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      115 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
       69 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
      300 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      200 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
       79 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       42 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
        9 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      287 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      246 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      205 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
-- line 736 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
    9,768 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    1,771 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        5 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        1 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    6,188 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    7,992 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
-- line 804 ----------------------------------------
-- line 815 ----------------------------------------
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       66 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       12 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       42 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       54 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
       24 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      819 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      546 ( 0.00%)          let mut span = self.data();
      455 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
      819 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      910 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      680 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
      595 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      115 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       22 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      115 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      115 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        9 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,150 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       18 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,300 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        9 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        9 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      174 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        3 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        3 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        3 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       12 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        6 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        9 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,175 ( 0.01%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      575 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  899,994 ( 0.98%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,150 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,325 ( 0.01%)              SourceFile {
    4,600 ( 0.01%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,300 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,300 ( 0.00%)                  lines,
    2,300 ( 0.00%)                  multibyte_chars,
    2,300 ( 0.00%)                  non_narrow_chars,
    2,300 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,175 ( 0.01%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       33 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        9 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        6 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        6 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        9 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       36 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        6 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       51 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       33 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       12 ( 0.00%)              lines,
       12 ( 0.00%)              multibyte_chars,
       12 ( 0.00%)              non_narrow_chars,
       12 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
        7 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
        1 ( 0.00%)          if matches!(
        2 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
        1 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      578 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
      700 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      233 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
      222 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      145 ( 0.00%)          assert!(line_index < self.lines.len());
      210 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       16 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      128 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       30 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       27 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        3 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    1,374 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      119 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    2,861 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,588,666 ( 1.73%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  826,686 ( 0.90%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  106,050 ( 0.12%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
    4,893 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
      953 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
    3,940 ( 0.00%)          let span = self.data_untracked();
    1,335 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    2,097 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    1,447 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    1,300 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
    2,600 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    1,300 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
      650 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
      650 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
    5,592 ( 0.01%)      }
        .           }

1,200,781 ( 1.31%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
  3,791 ( 0.00%)                  if value < 0x80 {
      .                               unsafe {
  1,659 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
  2,322 ( 0.00%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
  1,880 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
    852 ( 0.00%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
618,160 ( 0.67%)              let byte = slice[*position];
309,080 ( 0.34%)              *position += 1;
309,080 ( 0.34%)              if (byte & 0x80) == 0 {
      .                           return byte as $int_ty;
      .                       }
  1,152 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
249,915 ( 0.27%)                  let byte = slice[*position];
160,606 ( 0.17%)                  *position += 1;
166,610 ( 0.18%)                  if (byte & 0x80) == 0 {
130,665 ( 0.14%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

273,726 ( 0.30%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir              

-- line 173 ----------------------------------------
     .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
     .           #[macro_export]
     .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
     .           #[allow_internal_unsafe]
     .           macro_rules! __thread_local_inner {
     .               // used to generate the `LocalKey` value for const-initialized thread locals
     .               (@key $t:ty, const $init:expr) => {{
     .                   #[cfg_attr(not(windows), inline)] // see comments below
     4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
     .                       const INIT_EXPR: $t = $init;
     .           
     .                       // wasm without atomics maps directly to `static mut`, and dtors
     .                       // aren't implemented because thread dtors aren't really a thing
     .                       // on wasm right now
     .                       //
     .                       // FIXME(#84224) this should come after the `target_thread_local`
     .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
     .                           }
     .           
     .                           // 0 == dtor not registered
     .                           // 1 == dtor registered, dtor not run
     .                           // 2 == dtor registered and is running or has run
     .                           #[thread_local]
     .                           static mut STATE: u8 = 0;
     .           
     8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
     .                               let ptr = ptr as *mut $t;
     .           
     .                               unsafe {
     .                                   debug_assert_eq!(STATE, 1);
    12 ( 0.00%)                          STATE = 2;
     .                                   $crate::ptr::drop_in_place(ptr);
     .                               }
     8 ( 0.00%)                  }
     .           
     .                           unsafe {
    60 ( 0.00%)                      match STATE {
     .                                   // 0 == we haven't registered a destructor, so do
     .                                   //   so now.
     .                                   0 => {
     .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
     .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
     .                                           destroy,
     .                                       );
     8 ( 0.00%)                              STATE = 1;
     .                                       Some(&VAL)
     .                                   }
     .                                   // 1 == the destructor is registered and the value
     .                                   //   is valid, so return the pointer.
     .                                   1 => Some(&VAL),
     .                                   // otherwise the destructor has already run, so we
     .                                   // can't give access.
     .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
     .                       {
     .                           #[inline]
     .                           const fn __init() -> $t { INIT_EXPR }
     .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
     .                               $crate::thread::__OsLocalKeyInner::new();
     .                           #[allow(unused_unsafe)]
     .                           unsafe { __KEY.get(__init) }
     .                       }
 7,706 ( 0.01%)          }
     .           
     .                   unsafe {
     .                       $crate::thread::LocalKey::new(__getit)
     .                   }
     .               }};
     .           
     .               // used to generate the `LocalKey` value for `thread_local!`
     .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
     .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
     .                               $crate::thread::__OsLocalKeyInner::new();
     .           
     .                           // FIXME: remove the #[allow(...)] marker when macros don't
     .                           // raise warning for missing/extraneous unsafe blocks anymore.
     .                           // See https://github.com/rust-lang/rust/issues/74838.
     .                           #[allow(unused_unsafe)]
     .                           unsafe { __KEY.get(__init) }
75,932 ( 0.08%)              }
     .           
     .                       unsafe {
     .                           $crate::thread::LocalKey::new(__getit)
     .                       }
     .                   }
     .               };
     .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
     .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
     .               /// this key yet.
     .               ///
     .               /// # Panics
     .               ///
     .               /// This function will `panic!()` if the key currently has its
     .               /// destructor running, and it **may** panic if the destructor has
     .               /// previously been run for this thread.
     .               #[stable(feature = "rust1", since = "1.0.0")]
    12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
     .               where
     .                   F: FnOnce(&T) -> R,
     .               {
    17 ( 0.00%)          self.try_with(f).expect(
     .                       "cannot access a Thread Local Storage value \
     .                        during or after destruction",
     .                   )
    16 ( 0.00%)      }
     .           
     .               /// Acquires a reference to the value in this TLS key.
     .               ///
     .               /// This will lazily initialize the value if this thread has not referenced
     .               /// this key yet. If the key has been destroyed (which may happen if this is called
     .               /// in a destructor), this function will return an [`AccessError`].
     .               ///
     .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
     .               /// key's initializer panics.
     .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
     .               #[inline]
     .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
     .               where
     .                   F: FnOnce(&T) -> R,
     .               {
     .                   unsafe {
59,555 ( 0.06%)              let thread_local = (self.inner)().ok_or(AccessError)?;
30,536 ( 0.03%)              Ok(f(thread_local))
     .                   }
     .               }
     .           }
     .           
     .           mod lazy {
     .               use crate::cell::UnsafeCell;
     .               use crate::hint;
     .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
     .                       // the inner cell nor mutable reference to the Option<T> inside said
     .                       // cell. This make it safe to hand a reference, though the lifetime
     .                       // of 'static is itself unsafe, making the get method unsafe.
     .                       unsafe { (*self.inner.get()).as_ref() }
     .                   }
     .           
     .                   /// The caller must ensure that no reference is active: this method
     .                   /// needs unique access.
     9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
     .                       // Execute the initialization up front, *then* move it into our slot,
     .                       // just in case initialization fails.
     .                       let value = init();
     .                       let ptr = self.inner.get();
     .           
     .                       // SAFETY:
     .                       //
     .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
     .                           // always work it empirically doesn't seem to always get optimized away,
     .                           // which means that using something like `try_with` can pull in
     .                           // panicking code and cause a large size bloat.
     .                           match *ptr {
     .                               Some(ref x) => x,
     .                               None => hint::unreachable_unchecked(),
     .                           }
     .                       }
    10 ( 0.00%)          }
     .           
     .                   /// The other methods hand out references while taking &self.
     .                   /// As such, callers of this method must ensure no `&` and `&mut` are
     .                   /// available and used at the same time.
     .                   #[allow(unused)]
     .                   pub unsafe fn take(&mut self) -> Option<T> {
     .                       // SAFETY: See doc comment for this method.
     .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
     .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
     .                       // `try_initialize` for more information.
     .                       //
     .                       // The caller must ensure no mutable references are ever active to
     .                       // the inner cell or the inner T when this is called.
     .                       // The `try_initialize` is dependant on the passed `init` function
     .                       // for this.
     .                       unsafe {
22,839 ( 0.02%)                  match self.inner.get() {
     .                               Some(val) => Some(val),
    18 ( 0.00%)                      None => self.try_initialize(init),
     .                           }
     .                       }
     .                   }
     .           
     .                   // `try_initialize` is only called once per fast thread local variable,
     .                   // except in corner cases where thread_local dtors reference other
     .                   // thread_local's, or it is being recursively initialized.
     .                   //
     .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
     .                   // be performed for every call to `Key::get`.
     .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
     .                   #[inline(never)]
     8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
     .                       // SAFETY: See comment above (this function doc).
     .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
     .                           // SAFETY: See comment above (his function doc).
     6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
     .                       } else {
     .                           None
     .                       }
     8 ( 0.00%)          }
     .           
     .                   // `try_register_dtor` is only called once per fast thread local
     .                   // variable, except in corner cases where thread_local dtors reference
     .                   // other thread_local's, or it is being recursively initialized.
     .                   unsafe fn try_register_dtor(&self) -> bool {
     6 ( 0.00%)              match self.dtor_state.get() {
     .                           DtorState::Unregistered => {
     .                               // SAFETY: dtor registration happens before initialization.
     .                               // Passing `self` as a pointer while using `destroy_value<T>`
     .                               // is safe because the function will build a pointer to a
     .                               // Key<T>, which is the type of self and so find the correct
     .                               // size.
     6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
     .                               self.dtor_state.set(DtorState::Registered);
     .                               true
     .                           }
     .                           DtorState::Registered => {
     .                               // recursively initialized
     .                               true
     .                           }
     .                           DtorState::RunningOrHasRun => false,
     .                       }
     .                   }
     .               }
     .           
     4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
     .                   let ptr = ptr as *mut Key<T>;
     .           
     .                   // SAFETY:
     .                   //
     .                   // The pointer `ptr` has been built just above and comes from
     .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
     .                   // making it non-NUL and of the correct type.
     .                   //
-- line 661 ----------------------------------------

     4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
  1,410 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 11,835 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 10,728 ( 0.01%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
356,629 ( 0.39%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
      .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
      2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
      .                       if unlikely!(b) {None} else {Some(a)}
      .                   }
      .           
      .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
      .                   /// cannot occur.
      .                   ///
      .                   /// # Safety
      .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
 61,650 ( 0.07%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
    437 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  2,479 ( 0.00%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     56 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
129,636 ( 0.14%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 98,047 ( 0.11%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
260,711 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 24,913 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 22,424 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 36,186 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
    138 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    222 ( 0.00%)              if self <= 1 { return 0; }
      .           
    704 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  2,112 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    704 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  1,186 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

  2,546 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .           ///
      .           /// `Decodable` can still be implemented in cases where `Decodable` is required
      .           /// by a trait bound.
      .           pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {
      .               fn decode(d: &mut D) -> &'tcx Self;
      .           }
      .           
      .           /// Encode the given value or a previously cached shorthand.
    198 ( 0.00%)  pub fn encode_with_shorthand<'tcx, E, T, M>(
      .               encoder: &mut E,
      .               value: &T,
      .               cache: M,
      .           ) -> Result<(), E::Error>
      .           where
      .               E: TyEncoder<'tcx>,
      .               M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,
      .               T: EncodableWithShorthand<'tcx, E>,
-- line 86 ----------------------------------------
-- line 90 ----------------------------------------
      .               let existing_shorthand = cache(encoder).get(value).copied();
      .               if let Some(shorthand) = existing_shorthand {
      .                   return encoder.emit_usize(shorthand);
      .               }
      .           
      .               let variant = value.variant();
      .           
      .               let start = encoder.position();
     33 ( 0.00%)      variant.encode(encoder)?;
     22 ( 0.00%)      let len = encoder.position() - start;
      .           
      .               // The shorthand encoding uses the same usize as the
      .               // discriminant, with an offset so they can't conflict.
      .               let discriminant = intrinsics::discriminant_value(variant);
      .               assert!(SHORTHAND_OFFSET > discriminant as usize);
      .           
     22 ( 0.00%)      let shorthand = start + SHORTHAND_OFFSET;
      .           
      .               // Get the number of bits that leb128 could fit
      .               // in the same space as the fully encoded type.
     22 ( 0.00%)      let leb128_bits = len * 7;
      .           
      .               // Check that the shorthand is a not longer than the
      .               // full encoding itself, i.e., it's an obvious win.
     77 ( 0.00%)      if leb128_bits >= 64 || (shorthand as u64) < (1 << leb128_bits) {
      .                   cache(encoder).insert(*value, shorthand);
      .               }
      .           
      .               Ok(())
    136 ( 0.00%)  }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     76 ( 0.00%)          encode_with_shorthand(e, self, TyEncoder::type_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.bound_vars().encode(e)?;
     24 ( 0.00%)          encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.kind().encode(e)
      .               }
      .           }
-- line 138 ----------------------------------------
-- line 176 ----------------------------------------
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>;
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R;
      .           
      .               fn positioned_at_shorthand(&self) -> bool {
    794 ( 0.00%)          (self.peek_byte() & (SHORTHAND_OFFSET as u8)) != 0
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> AllocId;
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx T
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
    318 ( 0.00%)      decoder.tcx().arena.alloc(Decodable::decode(decoder))
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable_slice<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx [T]
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
      .               decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable<D>>::decode(decoder))
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {
      .               #[allow(rustc::usage_of_ty_tykind)]
  3,004 ( 0.00%)      fn decode(decoder: &mut D) -> Ty<'tcx> {
      .                   // Handle shorthands first, if we have a usize > 0x80.
    751 ( 0.00%)          if decoder.positioned_at_shorthand() {
      .                       let pos = decoder.read_usize();
    966 ( 0.00%)              assert!(pos >= SHORTHAND_OFFSET);
  1,449 ( 0.00%)              let shorthand = pos - SHORTHAND_OFFSET;
      .           
  1,449 ( 0.00%)              decoder.cached_ty_for_shorthand(shorthand, |decoder| {
      .                           decoder.with_position(shorthand, Ty::decode)
      .                       })
      .                   } else {
    268 ( 0.00%)              let tcx = decoder.tcx();
    536 ( 0.00%)              tcx.mk_ty(ty::TyKind::decode(decoder))
      .                   }
  3,004 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
    258 ( 0.00%)      fn decode(decoder: &mut D) -> ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .                   let bound_vars = Decodable::decode(decoder);
      .                   // Handle shorthands first, if we have a usize > 0x80.
      .                   ty::Binder::bind_with_vars(
     43 ( 0.00%)              if decoder.positioned_at_shorthand() {
      .                           let pos = decoder.read_usize();
     72 ( 0.00%)                  assert!(pos >= SHORTHAND_OFFSET);
     36 ( 0.00%)                  let shorthand = pos - SHORTHAND_OFFSET;
      .           
      .                           decoder.with_position(shorthand, ty::PredicateKind::decode)
      .                       } else {
     21 ( 0.00%)                  ty::PredicateKind::decode(decoder)
      .                       },
      .                       bound_vars,
      .                   )
    258 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {
      .               fn decode(decoder: &mut D) -> ty::Predicate<'tcx> {
    129 ( 0.00%)          let predicate_kind = Decodable::decode(decoder);
     43 ( 0.00%)          decoder.tcx().mk_predicate(predicate_kind)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
    355 ( 0.00%)          let tcx = decoder.tcx();
      .                   tcx.mk_substs(
    777 ( 0.00%)              (0..len).map::<ty::subst::GenericArg<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for mir::Place<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let local: mir::Local = Decodable::decode(decoder);
      .                   let len = decoder.read_usize();
-- line 268 ----------------------------------------
-- line 269 ----------------------------------------
      .                   let projection = decoder.tcx().mk_place_elems(
      .                       (0..len).map::<mir::PlaceElem<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   );
      .                   mir::Place { local, projection }
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {
    483 ( 0.00%)      fn decode(decoder: &mut D) -> Self {
    207 ( 0.00%)          decoder.tcx().mk_region(Decodable::decode(decoder))
    552 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
      .                   let interned: Vec<CanonicalVarInfo<'tcx>> =
      .                       (0..len).map(|_| Decodable::decode(decoder)).collect();
      .                   decoder.tcx().intern_canonical_var_infos(interned.as_slice())
-- line 287 ----------------------------------------
-- line 308 ----------------------------------------
      .                       }
      .                   })*
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    102 ( 0.00%)          decoder.tcx().mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>
      .               for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>
      .           {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
      1 ( 0.00%)          decoder.tcx().mk_poly_existential_predicates(
      9 ( 0.00%)              (0..len).map::<ty::Binder<'tcx, _>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
     15 ( 0.00%)          decoder.tcx().mk_const(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [ty::ValTree<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
-- line 341 ----------------------------------------
-- line 344 ----------------------------------------
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for Allocation {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().intern_const_alloc(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>, Span)] {
    525 ( 0.00%)      fn decode(decoder: &mut D) -> &'tcx Self {
    150 ( 0.00%)          decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
    750 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [thir::abstract_const::Node<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
-- line 364 ----------------------------------------
-- line 370 ----------------------------------------
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
     61 ( 0.00%)          decoder.tcx().mk_bound_variable_kinds(
     22 ( 0.00%)              (0..len).map::<ty::BoundVariableKind, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl_decodable_via_ref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               &'tcx ty::List<Ty<'tcx>>,
      .               &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,
-- line 387 ----------------------------------------
-- line 394 ----------------------------------------
      .               &'tcx ty::AdtDef
      .           }
      .           
      .           #[macro_export]
      .           macro_rules! __impl_decoder_methods {
      .               ($($name:ident -> $ty:ty;)*) => {
      .                   $(
      .                       #[inline]
 71,558 ( 0.08%)              fn $name(&mut self) -> $ty {
132,782 ( 0.14%)                  self.opaque.$name()
134,722 ( 0.15%)              }
      .                   )*
      .               }
      .           }
      .           
      .           macro_rules! impl_arena_allocatable_decoder {
      .               ([]$args:tt) => {};
      .               ([decode $(, $attrs:ident)*]
      .                [$name:ident: $ty:ty]) => {
-- line 412 ----------------------------------------
-- line 483 ----------------------------------------
      .               }
      .           }
      .           
      .           macro_rules! impl_binder_encode_decode {
      .               ($($t:ty),+ $(,)?) => {
      .                   $(
      .                       impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, $t> {
      .                           fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      4 ( 0.00%)                      self.bound_vars().encode(e)?;
      .                               self.as_ref().skip_binder().encode(e)
      .                           }
      .                       }
      .                       impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, $t> {
    162 ( 0.00%)                  fn decode(decoder: &mut D) -> Self {
      .                               let bound_vars = Decodable::decode(decoder);
      .                               ty::Binder::bind_with_vars(Decodable::decode(decoder), bound_vars)
    162 ( 0.00%)                  }
      .                       }
      .                   )*
      .               }
      .           }
      .           
      .           impl_binder_encode_decode! {
      .               &'tcx ty::List<Ty<'tcx>>,
      .               ty::FnSig<'tcx>,
-- line 507 ----------------------------------------

  2,300 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir              

-- line 5 ----------------------------------------
     .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
     .           unsafe impl GlobalAlloc for System {
     .               #[inline]
     .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
     .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
     .                   // So only rely on MIN_ALIGN if size >= align.
     .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
     .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
67,848 ( 0.07%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
50,886 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
     .                   } else {
     .                       #[cfg(target_os = "macos")]
     .                       {
     .                           if layout.align() > (1 << 31) {
     .                               return ptr::null_mut();
     .                           }
     .                       }
     .                       aligned_malloc(&layout)
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
     .                   // See the comment above in `alloc` for why this check looks the way it does.
   756 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,134 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
     .                   } else {
     .                       let ptr = self.alloc(layout);
     .                       if !ptr.is_null() {
     .                           ptr::write_bytes(ptr, 0, layout.size());
     .                       }
     .                       ptr
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
17,140 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
     .               }
     .           
     .               #[inline]
     .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 5,932 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
11,864 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
     .                   } else {
     .                       realloc_fallback(self, ptr, layout, new_size)
     .                   }
     .               }
     .           }
     .           
     .           cfg_if::cfg_if! {
     .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir              

-- line 91 ----------------------------------------
     .           // maximum of number bytes needed to fill an 8-byte-sized element on which
     .           // SipHash operates. Note that for variable-sized copies which are known to be
     .           // less than 8 bytes, this function will perform more work than necessary unless
     .           // the compiler is able to optimize the extra work away.
     .           #[inline]
     .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
     .               debug_assert!(count <= 8);
     .           
 6,869 ( 0.01%)      if count == 8 {
     .                   ptr::copy_nonoverlapping(src, dst, 8);
     .                   return;
     .               }
     .           
     .               let mut i = 0;
12,520 ( 0.01%)      if i + 3 < count {
     .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
     .                   i += 4;
     .               }
     .           
26,883 ( 0.03%)      if i + 1 < count {
     .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
 3,923 ( 0.00%)          i += 2
     .               }
     .           
12,520 ( 0.01%)      if i < count {
 6,207 ( 0.01%)          *dst.add(i) = *src.add(i);
     .                   i += 1;
     .               }
     .           
     .               debug_assert_eq!(i, count);
     .           }
     .           
     .           // # Implementation
     .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
     .           
     .                   hasher
     .               }
     .           
     .               // A specialized write function for values with size <= 8.
     .               #[inline]
     .               fn short_write<T>(&mut self, x: T) {
     .                   let size = mem::size_of::<T>();
 6,806 ( 0.01%)          let nbuf = self.nbuf;
     .                   debug_assert!(size <= 8);
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
     .           
43,220 ( 0.05%)          if nbuf + size < BUFFER_SIZE {
     .                       unsafe {
     .                           // The memcpy call is optimized away because the size is known.
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
     .                       }
     .           
13,182 ( 0.01%)              self.nbuf = nbuf + size;
     .           
     .                       return;
     .                   }
     .           
 1,838 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
     .               }
     .           
     .               // A specialized write function for values with size <= 8 that should only
     .               // be called when the write would cause the buffer to fill.
     .               //
     .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
     .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
     .               // overflow) if it wasn't already.
     .               #[inline(never)]
   538 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
     .                   let size = mem::size_of::<T>();
   538 ( 0.00%)          let nbuf = self.nbuf;
     .                   debug_assert!(size <= 8);
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
     .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
     .           
     .                   // Copy first part of input into end of buffer, possibly into spill
     .                   // element. The memcpy call is optimized away because the size is known.
     .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
     .           
     .                   // Process buffer.
     .                   for i in 0..BUFFER_CAPACITY {
 5,380 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 4,304 ( 0.00%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
 4,842 ( 0.01%)              self.state.v0 ^= elem;
     .                   }
     .           
     .                   // Copy remaining input into start of buffer by copying size - 1
     .                   // elements from spill (at most size - 1 bytes could have overflowed
     .                   // into the spill). The memcpy call is optimized away because the size
     .                   // is known. And the whole copy is optimized away for size == 1.
     .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
     .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
     .           
     .                   // This function should only be called when the write fills the buffer.
     .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
     .                   // is statically known, so the branch is optimized away.
 2,514 ( 0.00%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 2,152 ( 0.00%)          self.processed += BUFFER_SIZE;
 1,076 ( 0.00%)      }
     .           
     .               // A write function for byte slices.
     .               #[inline]
     .               fn slice_write(&mut self, msg: &[u8]) {
     .                   let length = msg.len();
 6,581 ( 0.01%)          let nbuf = self.nbuf;
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .           
34,079 ( 0.04%)          if nbuf + length < BUFFER_SIZE {
     .                       unsafe {
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .           
12,432 ( 0.01%)                  if length <= 8 {
     .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
     .                           } else {
     .                               // This memcpy is *not* optimized away.
     .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
     .                           }
     .                       }
     .           
 6,222 ( 0.01%)              self.nbuf = nbuf + length;
     .           
     .                       return;
     .                   }
     .           
 3,200 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
     .               }
     .           
     .               // A write function for byte slices that should only be called when the
     .               // write would cause the buffer to fill.
     .               //
     .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
     .               // and `msg` must contain enough bytes to initialize the rest of the element
     .               // containing the byte offset `self.nbuf`.
     .               #[inline(never)]
 2,965 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
     .                   let length = msg.len();
   593 ( 0.00%)          let nbuf = self.nbuf;
     .                   debug_assert!(nbuf < BUFFER_SIZE);
     .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
     .           
     .                   // Always copy first part of input into current element of buffer.
     .                   // This function should only be called when the write fills the buffer,
     .                   // so we know that there is enough input to fill the current element.
 1,779 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
   593 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
     .           
     .                   let src = msg.as_ptr();
     .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
     .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
     .           
     .                   // Process buffer.
     .           
     .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
     .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
     .                   // We know that is true, because last step ensured we have a full
     .                   // element in the buffer.
 1,186 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
     .           
     .                   for i in 0..last {
 4,543 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 5,136 ( 0.01%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
 9,086 ( 0.01%)              self.state.v0 ^= elem;
     .                   }
     .           
     .                   // Process the remaining element-sized chunks of input.
     .                   let mut processed = needed_in_elem;
 1,186 ( 0.00%)          let input_left = length - processed;
   471 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
     .                   let extra_bytes_left = input_left % ELEM_SIZE;
     .           
     .                   for _ in 0..elems_left {
   289 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
   289 ( 0.00%)              self.state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut self.state);
   289 ( 0.00%)              self.state.v0 ^= elem;
   578 ( 0.00%)              processed += ELEM_SIZE;
     .                   }
     .           
     .                   // Copy remaining input into start of buffer.
     .                   let src = msg.as_ptr().add(processed);
     .                   let dst = self.buf.as_mut_ptr() as *mut u8;
     .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
     .           
   593 ( 0.00%)          self.nbuf = extra_bytes_left;
 2,965 ( 0.00%)          self.processed += nbuf + processed;
 3,558 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn finish128(mut self) -> (u64, u64) {
     .                   debug_assert!(self.nbuf < BUFFER_SIZE);
     .           
     .                   // Process full elements in buffer.
 2,130 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
     .           
     .                   // Since we're consuming self, avoid updating members for a potential
     .                   // performance gain.
 2,840 ( 0.00%)          let mut state = self.state;
     .           
     .                   for i in 0..last {
 1,981 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
 1,981 ( 0.00%)              state.v3 ^= elem;
     .                       Sip24Rounds::c_rounds(&mut state);
 1,981 ( 0.00%)              state.v0 ^= elem;
     .                   }
     .           
     .                   // Get remaining partial element.
 1,420 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
     .                       unsafe {
     .                           // Ensure element is initialized by writing zero bytes. At most
     .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
     .                           // to write this many because we have the spill and we maintain
     .                           // `self.nbuf` such that this write will start before the spill.
     .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
     .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   625 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
     .                       }
     .                   } else {
     .                       0
     .                   };
     .           
     .                   // Finalize the hash.
 2,045 ( 0.00%)          let length = self.processed + self.nbuf;
 1,418 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
     .           
   709 ( 0.00%)          state.v3 ^= b;
     .                   Sip24Rounds::c_rounds(&mut state);
   709 ( 0.00%)          state.v0 ^= b;
     .           
   709 ( 0.00%)          state.v2 ^= 0xee;
     .                   Sip24Rounds::d_rounds(&mut state);
 1,578 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
     .           
   158 ( 0.00%)          state.v1 ^= 0xdd;
     .                   Sip24Rounds::d_rounds(&mut state);
   158 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
     .           
     .                   (_0, _1)
     .               }
     .           }
     .           
     .           impl Hasher for SipHasher128 {
     .               #[inline]
     .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
     .           }
     .           
     .           #[derive(Debug, Clone, Default)]
     .           struct Sip24Rounds;
     .           
     .           impl Sip24Rounds {
     .               #[inline]
     .               fn c_rounds(state: &mut State) {
49,621 ( 0.05%)          compress!(state);
62,547 ( 0.07%)          compress!(state);
     .               }
     .           
     .               #[inline]
     .               fn d_rounds(state: &mut State) {
 3,152 ( 0.00%)          compress!(state);
 3,152 ( 0.00%)          compress!(state);
 3,152 ( 0.00%)          compress!(state);
 2,444 ( 0.00%)          compress!(state);
     .               }
     .           }

 7,243 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           
      .           use std::cell::Cell;
      .           use std::ptr;
      .           use tracing::debug;
      .           
      .           type Res = def::Res<NodeId>;
      .           
      .           impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {
      8 ( 0.00%)      fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
      .                   arenas.alloc_name_binding(NameBinding {
      1 ( 0.00%)              kind: NameBindingKind::Module(self.0),
      .                       ambiguity: None,
      3 ( 0.00%)              vis: self.1,
      1 ( 0.00%)              span: self.2,
      1 ( 0.00%)              expansion: self.3,
      .                   })
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {
      .               fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
 32,742 ( 0.04%)          arenas.alloc_name_binding(NameBinding {
 21,828 ( 0.02%)              kind: NameBindingKind::Res(self.0, false),
      .                       ambiguity: None,
      .                       vis: self.1,
      .                       span: self.2,
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
-- line 66 ----------------------------------------
-- line 76 ----------------------------------------
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
      .               /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;
      .               /// otherwise, reports an error.
 68,521 ( 0.07%)      crate fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)
      .               where
      .                   T: ToNameBinding<'a>,
      .               {
 40,467 ( 0.04%)          let binding = def.to_name_binding(self.arenas);
      .                   let key = self.new_key(ident, ns);
 62,909 ( 0.07%)          if let Err(old_binding) = self.try_define(parent, key, binding) {
      .                       self.report_conflict(parent, ident, ns, old_binding, &binding);
      .                   }
 45,680 ( 0.05%)      }
      .           
      .               /// Walks up the tree of definitions starting at `def_id`,
      .               /// stopping at the first encountered module.
      .               /// Parent block modules for arbitrary def-ids are not recorded for the local crate,
      .               /// and are not preserved in metadata for foreign crates, so block modules are never
      .               /// returned by this function.
      .               ///
      .               /// For the local crate ignoring block modules may be incorrect, so use this method with care.
-- line 101 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// For foreign crates block modules can be ignored without introducing observable differences,
      .               /// moreover they has to be ignored right now because they are not kept in metadata.
      .               /// Foreign parent modules are used for resolving names used by foreign macros with def-site
      .               /// hygiene, therefore block module ignorability relies on macros with def-site hygiene and
      .               /// block module parents being unreachable from other crates.
      .               /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,
      .               /// but they cannot use def-site hygiene, so the assumption holds
      .               /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).
  3,055 ( 0.00%)      pub fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {
      .                   loop {
  1,175 ( 0.00%)              match self.get_module(def_id) {
      .                           Some(module) => return module,
      .                           None => {
      .                               def_id.index =
      .                                   self.def_key(def_id).parent.expect("non-root `DefId` without parent")
      .                           }
      .                       }
      .                   }
  1,880 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {
    608 ( 0.00%)          self.get_module(def_id).expect("argument `DefId` is not a module")
      2 ( 0.00%)      }
      .           
      .               /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,
      .               /// or trait), then this function returns that module's resolver representation, otherwise it
      .               /// returns `None`.
  5,160 ( 0.01%)      crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {
      .                   if let module @ Some(..) = self.module_map.get(&def_id) {
      .                       return module.copied();
      .                   }
      .           
    243 ( 0.00%)          if !def_id.is_local() {
  1,458 ( 0.00%)              let def_kind = self.cstore().def_kind(def_id);
    486 ( 0.00%)              match def_kind {
      .                           DefKind::Mod | DefKind::Enum | DefKind::Trait => {
  1,458 ( 0.00%)                      let def_key = self.cstore().def_key(def_id);
      .                               let parent = def_key.parent.map(|index| {
  1,175 ( 0.00%)                          self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })
      .                               });
    243 ( 0.00%)                      let name = if def_id.index == CRATE_DEF_INDEX {
     32 ( 0.00%)                          self.cstore().crate_name(def_id.krate)
      .                               } else {
    705 ( 0.00%)                          def_key.disambiguated_data.data.get_opt_name().expect("module without name")
      .                               };
      .           
  1,944 ( 0.00%)                      Some(self.new_module(
      .                                   parent,
      .                                   ModuleKind::Def(def_kind, def_id, name),
  1,701 ( 0.00%)                          self.cstore().module_expansion_untracked(def_id, &self.session),
  1,458 ( 0.00%)                          self.cstore().get_span_untracked(def_id, &self.session),
      .                                   // FIXME: Account for `#[no_implicit_prelude]` attributes.
    705 ( 0.00%)                          parent.map_or(false, |module| module.no_implicit_prelude),
      .                               ))
      .                           }
      .                           _ => None,
      .                       }
      .                   } else {
      .                       None
      .                   }
  4,128 ( 0.00%)      }
      .           
     81 ( 0.00%)      crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {
     27 ( 0.00%)          match expn_id.expn_data().macro_def_id {
      .                       Some(def_id) => self.macro_def_scope(def_id),
      9 ( 0.00%)              None => expn_id
      .                           .as_local()
      .                           .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))
      9 ( 0.00%)                  .unwrap_or(&self.graph_root),
      .                   }
     54 ( 0.00%)      }
      .           
      .               crate fn macro_def_scope(&mut self, def_id: DefId) -> Module<'a> {
      .                   if let Some(id) = def_id.as_local() {
      .                       self.local_macro_def_scopes[&id]
      .                   } else {
      .                       self.get_nearest_non_block_module(def_id)
      .                   }
      .               }
      .           
      .               crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {
     12 ( 0.00%)          match res {
      8 ( 0.00%)              Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),
      .                       Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),
      .                       _ => None,
      .                   }
      .               }
      .           
     16 ( 0.00%)      crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {
      .                   if let Some(ext) = self.macro_map.get(&def_id) {
      1 ( 0.00%)              return ext.clone();
      .                   }
      .           
      9 ( 0.00%)          let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {
     11 ( 0.00%)              LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),
      .                       LoadedMacro::ProcMacro(ext) => ext,
      .                   });
      .           
      .                   self.macro_map.insert(def_id, ext.clone());
      .                   ext
     14 ( 0.00%)      }
      .           
      .               crate fn build_reduced_graph(
      .                   &mut self,
      .                   fragment: &AstFragment,
      .                   parent_scope: ParentScope<'a>,
      .               ) -> MacroRulesScopeRef<'a> {
      4 ( 0.00%)          collect_definitions(self, fragment, parent_scope.expansion);
      7 ( 0.00%)          let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };
      2 ( 0.00%)          fragment.visit_with(&mut visitor);
      1 ( 0.00%)          visitor.parent_scope.macro_rules
      .               }
      .           
      .               crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {
 45,896 ( 0.05%)          for child in self.cstore().module_children_untracked(module.def_id(), self.session) {
      .                       let parent_scope = ParentScope::module(module, self);
 57,030 ( 0.06%)              BuildReducedGraphVisitor { r: self, parent_scope }
 45,624 ( 0.05%)                  .build_reduced_graph_for_external_crate_res(child);
      .                   }
      .               }
      .           }
      .           
      .           struct BuildReducedGraphVisitor<'a, 'b> {
      .               r: &'b mut Resolver<'a>,
      .               parent_scope: ParentScope<'a>,
      .           }
      .           
      .           impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      1 ( 0.00%)          self.r
      .               }
      .           }
      .           
      .           impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {
      .               fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {
     68 ( 0.00%)          self.resolve_visibility_speculative(vis, false).unwrap_or_else(|err| {
      .                       self.r.report_vis_error(err);
      .                       ty::Visibility::Public
      .                   })
      .               }
      .           
    170 ( 0.00%)      fn resolve_visibility_speculative<'ast>(
      .                   &mut self,
      .                   vis: &'ast ast::Visibility,
      .                   speculative: bool,
      .               ) -> Result<ty::Visibility, VisResolutionError<'ast>> {
     17 ( 0.00%)          let parent_scope = &self.parent_scope;
     85 ( 0.00%)          match vis.kind {
     12 ( 0.00%)              ast::VisibilityKind::Public => Ok(ty::Visibility::Public),
      .                       ast::VisibilityKind::Crate(..) => {
      .                           Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))
      .                       }
      .                       ast::VisibilityKind::Inherited => {
    132 ( 0.00%)                  Ok(match self.parent_scope.module.kind {
      .                               // Any inherited visibility resolved directly inside an enum or trait
      .                               // (i.e. variants, fields, and trait items) inherits from the visibility
      .                               // of the enum or trait.
      .                               ModuleKind::Def(DefKind::Enum | DefKind::Trait, def_id, _) => {
      .                                   self.r.visibilities[&def_id.expect_local()]
      .                               }
      .                               // Otherwise, the visibility is restricted to the nearest parent `mod` item.
     22 ( 0.00%)                      _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),
      .                           })
      .                       }
      .                       ast::VisibilityKind::Restricted { ref path, id, .. } => {
      .                           // For visibilities we are not ready to provide correct implementation of "uniform
      .                           // paths" right now, so on 2018 edition we only allow module-relative paths for now.
      .                           // On 2015 edition visibilities are resolved as crate-relative by default,
      .                           // so we are prepending a root segment if necessary.
      .                           let ident = path.segments.get(0).expect("empty path in visibility").ident;
-- line 272 ----------------------------------------
-- line 326 ----------------------------------------
      .                               }
      .                               PathResult::Failed { span, label, suggestion, .. } => {
      .                                   Err(VisResolutionError::FailedToResolve(span, label, suggestion))
      .                               }
      .                               PathResult::Indeterminate => Err(VisResolutionError::Indeterminate(path.span)),
      .                           }
      .                       }
      .                   }
    136 ( 0.00%)      }
      .           
      .               fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {
      .                   let field_names = vdata
      .                       .fields()
      .                       .iter()
      .                       .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))
      .                       .collect();
      .                   self.insert_field_names(def_id, field_names);
-- line 342 ----------------------------------------
-- line 346 ----------------------------------------
      .                   self.r.field_names.insert(def_id, field_names);
      .               }
      .           
      .               fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {
      .                   // If any statements are items, we need to create an anonymous module
      .                   block
      .                       .stmts
      .                       .iter()
     16 ( 0.00%)              .any(|statement| matches!(statement.kind, StmtKind::Item(_) | StmtKind::MacCall(_)))
      .               }
      .           
      .               // Add an import to the current module.
    130 ( 0.00%)      fn add_import(
      .                   &mut self,
      .                   module_path: Vec<Segment>,
      .                   kind: ImportKind<'a>,
      .                   span: Span,
      .                   id: NodeId,
      .                   item: &ast::Item,
      .                   root_span: Span,
      .                   root_id: NodeId,
      .                   vis: ty::Visibility,
      .               ) {
     30 ( 0.00%)          let current_module = self.parent_scope.module;
    280 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind,
      .                       parent_scope: self.parent_scope,
     40 ( 0.00%)              module_path,
      .                       imported_module: Cell::new(None),
      .                       span,
      .                       id,
     20 ( 0.00%)              use_span: item.span,
     30 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      .                       has_attributes: !item.attrs.is_empty(),
      .                       root_span,
      .                       root_id,
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(false),
      .                   });
      .           
      .                   self.r.indeterminate_imports.push(import);
     52 ( 0.00%)          match import.kind {
      .                       // Don't add unresolved underscore imports to modules
      .                       ImportKind::Single { target: Ident { name: kw::Underscore, .. }, .. } => {}
     63 ( 0.00%)              ImportKind::Single { target, type_ns_only, .. } => {
    252 ( 0.00%)                  self.r.per_ns(|this, ns| {
     81 ( 0.00%)                      if !type_ns_only || ns == TypeNS {
     81 ( 0.00%)                          let key = this.new_key(target, ns);
    216 ( 0.00%)                          let mut resolution = this.resolution(current_module, key).borrow_mut();
     27 ( 0.00%)                          resolution.add_single_import(import);
      .                               }
    135 ( 0.00%)                  });
      .                       }
      .                       // We don't add prelude imports to the globs since they only affect lexical scopes,
      .                       // which are not relevant to import resolution.
      .                       ImportKind::Glob { is_prelude: true, .. } => {}
      .                       ImportKind::Glob { .. } => current_module.globs.borrow_mut().push(import),
      .                       _ => unreachable!(),
      .                   }
     80 ( 0.00%)      }
      .           
     90 ( 0.00%)      fn build_reduced_graph_for_use_tree(
      .                   &mut self,
      .                   // This particular use tree
      .                   use_tree: &ast::UseTree,
      .                   id: NodeId,
      .                   parent_prefix: &[Segment],
      .                   nested: bool,
      .                   // The whole `use` item
      .                   item: &Item,
-- line 415 ----------------------------------------
-- line 426 ----------------------------------------
      .                       .cloned()
      .                       .chain(use_tree.prefix.segments.iter().map(|seg| seg.into()))
      .                       .peekable();
      .           
      .                   // On 2015 edition imports are resolved as crate-relative by default,
      .                   // so prefixes are prepended with crate root segment if necessary.
      .                   // The root is prepended lazily, when the first non-empty prefix or terminating glob
      .                   // appears, so imports in braced groups can have roots prepended independently.
     10 ( 0.00%)          let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);
     10 ( 0.00%)          let crate_root = match prefix_iter.peek() {
    119 ( 0.00%)              Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {
      .                           Some(seg.ident.span.ctxt())
      .                       }
      .                       None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),
      .                       _ => None,
      .                   }
      .                   .map(|ctxt| {
      .                       Segment::from_ident(Ident::new(
      .                           kw::PathRoot,
      .                           use_tree.prefix.span.shrink_to_lo().with_ctxt(ctxt),
      .                       ))
      .                   });
      .           
     50 ( 0.00%)          let prefix = crate_root.into_iter().chain(prefix_iter).collect::<Vec<_>>();
      .                   debug!("build_reduced_graph_for_use_tree: prefix={:?}", prefix);
      .           
      .                   let empty_for_self = |prefix: &[Segment]| {
      .                       prefix.is_empty() || prefix.len() == 1 && prefix[0].ident.name == kw::PathRoot
      .                   };
     33 ( 0.00%)          match use_tree.kind {
     45 ( 0.00%)              ast::UseTreeKind::Simple(rename, id1, id2) => {
      9 ( 0.00%)                  let mut ident = use_tree.ident();
     36 ( 0.00%)                  let mut module_path = prefix;
      .                           let mut source = module_path.pop().unwrap();
      .                           let mut type_ns_only = false;
      .           
     18 ( 0.00%)                  if nested {
      .                               // Correctly handle `self`
      .                               if source.ident.name == kw::SelfLower {
      .                                   type_ns_only = true;
      .           
      .                                   if empty_for_self(&module_path) {
      .                                       self.r.report_error(
      .                                           use_tree.span,
      .                                           ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix,
-- line 470 ----------------------------------------
-- line 475 ----------------------------------------
      .                                   // Replace `use foo::{ self };` with `use foo;`
      .                                   source = module_path.pop().unwrap();
      .                                   if rename.is_none() {
      .                                       ident = source.ident;
      .                                   }
      .                               }
      .                           } else {
      .                               // Disallow `self`
      9 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   let parent = module_path.last();
      .           
      .                                   let span = match parent {
      .                                       // only `::self` from `use foo::self as bar`
      .                                       Some(seg) => seg.ident.span.shrink_to_hi().to(source.ident.span),
      .                                       None => source.ident.span,
      .                                   };
      .                                   let span_with_rename = match rename {
-- line 491 ----------------------------------------
-- line 506 ----------------------------------------
      .                                       source = parent;
      .                                       if rename.is_none() {
      .                                           ident = source.ident;
      .                                       }
      .                                   }
      .                               }
      .           
      .                               // Disallow `use $crate;`
      9 ( 0.00%)                      if source.ident.name == kw::DollarCrate && module_path.is_empty() {
      .                                   let crate_root = self.r.resolve_crate_root(source.ident);
      .                                   let crate_name = match crate_root.kind {
      .                                       ModuleKind::Def(.., name) => name,
      .                                       ModuleKind::Block(..) => unreachable!(),
      .                                   };
      .                                   // HACK(eddyb) unclear how good this is, but keeping `$crate`
      .                                   // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,
      .                                   // while the current crate doesn't have a valid `crate_name`.
-- line 522 ----------------------------------------
-- line 535 ----------------------------------------
      .           
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(item.span, "`$crate` may not be imported")
      .                                       .emit();
      .                               }
      .                           }
      .           
     18 ( 0.00%)                  if ident.name == kw::Crate {
      .                               self.r.session.span_err(
      .                                   ident.span,
      .                                   "crate root imports need to be explicitly named: \
      .                                    `use crate as name;`",
      .                               );
      .                           }
      .           
      .                           let kind = ImportKind::Single {
     45 ( 0.00%)                      source: source.ident,
      .                               target: ident,
      .                               source_bindings: PerNS {
      .                                   type_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   value_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   macro_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                               },
      .                               target_bindings: PerNS {
      .                                   type_ns: Cell::new(None),
-- line 560 ----------------------------------------
-- line 562 ----------------------------------------
      .                                   macro_ns: Cell::new(None),
      .                               },
      .                               type_ns_only,
      .                               nested,
      .                               additional_ids: (id1, id2),
      .                           };
      .           
      .                           self.add_import(
     36 ( 0.00%)                      module_path,
    216 ( 0.00%)                      kind,
     18 ( 0.00%)                      use_tree.span,
      .                               id,
      .                               item,
      .                               root_span,
     36 ( 0.00%)                      item.id,
      .                               vis,
      .                           );
      .                       }
      .                       ast::UseTreeKind::Glob => {
      .                           let kind = ImportKind::Glob {
      5 ( 0.00%)                      is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),
      .                               max_vis: Cell::new(ty::Visibility::Invisible),
      .                           };
     15 ( 0.00%)                  self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);
      .                       }
      .                       ast::UseTreeKind::Nested(ref items) => {
      .                           // Ensure there is at most one `self` in the list
      .                           let self_spans = items
      .                               .iter()
      .                               .filter_map(|&(ref use_tree, _)| {
      .                                   if let ast::UseTreeKind::Simple(..) = use_tree.kind {
      .                                       if use_tree.ident().name == kw::SelfLower {
-- line 593 ----------------------------------------
-- line 642 ----------------------------------------
      .                                   // The whole `use` item
      .                                   item,
      .                                   ty::Visibility::Invisible,
      .                                   root_span,
      .                               );
      .                           }
      .                       }
      .                   }
     80 ( 0.00%)      }
      .           
      .               /// Constructs the reduced graph for one item.
      .               fn build_reduced_graph_for_item(&mut self, item: &'b Item) {
      .                   let parent_scope = &self.parent_scope;
      .                   let parent = parent_scope.module;
     34 ( 0.00%)          let expansion = parent_scope.expansion;
     51 ( 0.00%)          let ident = item.ident;
     34 ( 0.00%)          let sp = item.span;
     34 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
     51 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
      .                   self.r.visibilities.insert(local_def_id, vis);
      .           
     85 ( 0.00%)          match item.kind {
     10 ( 0.00%)              ItemKind::Use(ref use_tree) => {
    110 ( 0.00%)                  self.build_reduced_graph_for_use_tree(
      .                               // This particular use tree
      .                               use_tree,
     10 ( 0.00%)                      item.id,
      .                               &[],
      .                               false,
      .                               // The whole `use` item
      .                               item,
      .                               vis,
      .                               use_tree.span,
      .                           );
      .                       }
      .           
      1 ( 0.00%)              ItemKind::ExternCrate(orig_name) => {
      .                           self.build_reduced_graph_for_extern_crate(
      .                               orig_name,
      .                               item,
      .                               local_def_id,
      .                               vis,
      .                               parent,
      .                           );
      .                       }
      .           
      .                       ItemKind::Mod(..) => {
     16 ( 0.00%)                  let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Mod, def_id, ident.name),
      .                               expansion.to_expn_id(),
      4 ( 0.00%)                      item.span,
      4 ( 0.00%)                      parent.no_implicit_prelude
     14 ( 0.00%)                          || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),
      .                           );
     38 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));
      .           
      .                           // Descend into the module.
      4 ( 0.00%)                  self.parent_scope.module = module;
      .                       }
      .           
      .                       // These items live in the value namespace.
      .                       ItemKind::Static(..) => {
      .                           let res = Res::Def(DefKind::Static, def_id);
      .                           self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Const(..) => {
      .                           let res = Res::Def(DefKind::Const, def_id);
      .                           self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Fn(..) => {
      .                           let res = Res::Def(DefKind::Fn, def_id);
     84 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .           
      .                           // Functions introducing procedural macros reserve a slot
      .                           // in the macro namespace as well (see #52225).
     16 ( 0.00%)                  self.define_macro(item);
      .                       }
      .           
      .                       // These items live in the type namespace.
      .                       ItemKind::TyAlias(..) => {
      .                           let res = Res::Def(DefKind::TyAlias, def_id);
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
-- line 728 ----------------------------------------
-- line 825 ----------------------------------------
      .               fn build_reduced_graph_for_extern_crate(
      .                   &mut self,
      .                   orig_name: Option<Symbol>,
      .                   item: &Item,
      .                   local_def_id: LocalDefId,
      .                   vis: ty::Visibility,
      .                   parent: Module<'a>,
      .               ) {
      4 ( 0.00%)          let ident = item.ident;
      2 ( 0.00%)          let sp = item.span;
      2 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
      .           
      7 ( 0.00%)          let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {
      .                       self.r
      .                           .session
      .                           .struct_span_err(item.span, "`extern crate self;` requires renaming")
      .                           .span_suggestion(
      .                               item.span,
      .                               "rename the `self` crate to be able to import it",
      .                               "extern crate self as name;".into(),
      .                               Applicability::HasPlaceholders,
      .                           )
      .                           .emit();
      .                       return;
      .                   } else if orig_name == Some(kw::SelfLower) {
      .                       Some(self.r.graph_root)
      .                   } else {
      6 ( 0.00%)              self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(
      1 ( 0.00%)                  |crate_id| {
      1 ( 0.00%)                      self.r.extern_crate_map.insert(local_def_id, crate_id);
      6 ( 0.00%)                      self.r.expect_module(crate_id.as_def_id())
      .                           },
      .                       )
      .                   }
      .                   .map(|module| {
      .                       let used = self.process_macro_use_imports(item, module);
      .                       let binding =
     11 ( 0.00%)                  (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);
      .                       (used, Some(ModuleOrUniformRoot::Module(module)), binding)
      .                   })
      2 ( 0.00%)          .unwrap_or((true, None, self.r.dummy_binding));
     31 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind: ImportKind::ExternCrate { source: orig_name, target: ident },
      1 ( 0.00%)              root_id: item.id,
      .                       id: item.id,
      6 ( 0.00%)              parent_scope: self.parent_scope,
      .                       imported_module: Cell::new(module),
      .                       has_attributes: !item.attrs.is_empty(),
      2 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      1 ( 0.00%)              use_span: item.span,
      .                       root_span: item.span,
      .                       span: item.span,
      .                       module_path: Vec::new(),
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(used),
      .                   });
      1 ( 0.00%)          self.r.potentially_unused_imports.push(import);
      5 ( 0.00%)          let imported_binding = self.r.import(binding, import);
      2 ( 0.00%)          if ptr::eq(parent, self.r.graph_root) {
     10 ( 0.00%)              if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
      .                           if expansion != LocalExpnId::ROOT
      .                               && orig_name.is_some()
      .                               && entry.extern_crate_item.is_none()
      .                           {
      .                               let msg = "macro-expanded `extern crate` items cannot \
      .                                                  shadow names passed with `--extern`";
      .                               self.r.session.span_err(item.span, msg);
      .                           }
      .                       }
      6 ( 0.00%)              let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(
      .                           ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },
      .                       );
      1 ( 0.00%)              entry.extern_crate_item = Some(imported_binding);
      1 ( 0.00%)              if orig_name.is_some() {
      .                           entry.introduced_by_item = true;
      .                       }
      .                   }
      6 ( 0.00%)          self.r.define(parent, ident, TypeNS, imported_binding);
      .               }
      .           
      .               /// Constructs the reduced graph for one foreign item.
      .               fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {
      .                   let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .                   let (def_kind, ns) = match item.kind {
      .                       ForeignItemKind::Fn(..) => (DefKind::Fn, ValueNS),
-- line 911 ----------------------------------------
-- line 918 ----------------------------------------
      .                   let vis = self.resolve_visibility(&item.vis);
      .                   let res = Res::Def(def_kind, def_id);
      .                   self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   self.r.visibilities.insert(local_def_id, vis);
      .               }
      .           
      .               fn build_reduced_graph_for_block(&mut self, block: &Block) {
      .                   let parent = self.parent_scope.module;
      5 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   if self.block_needs_anonymous_module(block) {
      .                       let module = self.r.new_module(
      .                           Some(parent),
      .                           ModuleKind::Block(block.id),
      .                           expansion.to_expn_id(),
      .                           block.span,
      .                           parent.no_implicit_prelude,
      .                       );
      .                       self.r.block_map.insert(block.id, module);
      .                       self.parent_scope.module = module; // Descend into the block.
      .                   }
      .               }
      .           
      .               /// Builds the reduced graph for a single item in an external crate.
 45,624 ( 0.05%)      fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {
  5,703 ( 0.01%)          let parent = self.parent_scope.module;
 34,218 ( 0.04%)          let ModChild { ident, res, vis, span } = child;
 28,515 ( 0.03%)          let res = res.expect_non_local();
 11,406 ( 0.01%)          let expansion = self.parent_scope.expansion;
      .                   // Record primary definitions.
 28,515 ( 0.03%)          match res {
      .                       Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {
    250 ( 0.00%)                  let module = self.r.expect_module(def_id);
  3,500 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));
      .                       }
      .                       Res::Def(
      .                           DefKind::Struct
      .                           | DefKind::Union
      .                           | DefKind::Variant
      .                           | DefKind::TyAlias
      .                           | DefKind::ForeignTy
      .                           | DefKind::OpaqueTy
      .                           | DefKind::TraitAlias
      .                           | DefKind::AssocTy,
      .                           _,
      .                       )
      .                       | Res::PrimTy(..)
 10,638 ( 0.01%)              | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),
      .                       Res::Def(
      .                           DefKind::Fn
      .                           | DefKind::AssocFn
      .                           | DefKind::Static
      .                           | DefKind::Const
      .                           | DefKind::AssocConst
      .                           | DefKind::Ctor(..),
      .                           _,
144,043 ( 0.16%)              ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),
      .                       Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {
  2,576 ( 0.00%)                  self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))
      .                       }
      .                       Res::Def(
      .                           DefKind::TyParam
      .                           | DefKind::ConstParam
      .                           | DefKind::ExternCrate
      .                           | DefKind::Use
      .                           | DefKind::ForeignMod
      .                           | DefKind::AnonConst
-- line 983 ----------------------------------------
-- line 992 ----------------------------------------
      .                       )
      .                       | Res::Local(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::Err => bug!("unexpected resolution: {:?}", res),
      .                   }
      .                   // Record some extra data for better diagnostics.
      .                   let cstore = self.r.cstore();
 55,342 ( 0.06%)          match res {
    711 ( 0.00%)              Res::Def(DefKind::Struct, def_id) => {
      .                           let field_names =
  1,422 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
  1,659 ( 0.00%)                  let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);
    474 ( 0.00%)                  if let Some((ctor_def_id, ctor_kind)) = ctor {
      .                               let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
     80 ( 0.00%)                      let ctor_vis = cstore.visibility_untracked(ctor_def_id);
      .                               let field_visibilities =
     64 ( 0.00%)                          cstore.struct_field_visibilities_untracked(def_id).collect();
      .                               self.r
      .                                   .struct_constructors
      .                                   .insert(def_id, (ctor_res, ctor_vis, field_visibilities));
      .                           }
      .                           self.insert_field_names(def_id, field_names);
      .                       }
      6 ( 0.00%)              Res::Def(DefKind::Union, def_id) => {
      .                           let field_names =
     14 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
      .                           self.insert_field_names(def_id, field_names);
      .                       }
    220 ( 0.00%)              Res::Def(DefKind::AssocFn, def_id) => {
    660 ( 0.00%)                  if cstore.fn_has_self_parameter_untracked(def_id) {
      .                               self.r.has_self.insert(def_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   }
 44,760 ( 0.05%)      }
      .           
    408 ( 0.00%)      fn add_macro_use_binding(
      .                   &mut self,
      .                   name: Symbol,
      .                   binding: &'a NameBinding<'a>,
      .                   span: Span,
      .                   allow_shadowing: bool,
      .               ) {
    204 ( 0.00%)          if self.r.macro_use_prelude.insert(name, binding).is_some() && !allow_shadowing {
      .                       let msg = format!("`{}` is already in scope", name);
      .                       let note =
      .                           "macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)";
      .                       self.r.session.struct_span_err(span, &msg).note(note).emit();
      .                   }
    306 ( 0.00%)      }
      .           
      .               /// Returns `true` if we should consider the underlying `extern crate` to be used.
      .               fn process_macro_use_imports(&mut self, item: &Item, module: Module<'a>) -> bool {
      .                   let mut import_all = None;
      .                   let mut single_imports = Vec::new();
      .                   for attr in &item.attrs {
      1 ( 0.00%)              if attr.has_name(sym::macro_use) {
      2 ( 0.00%)                  if self.parent_scope.module.parent.is_some() {
      .                               struct_span_err!(
      .                                   self.r.session,
      .                                   item.span,
      .                                   E0468,
      .                                   "an `extern crate` loading macros must be at the crate root"
      .                               )
      .                               .emit();
      .                           }
      4 ( 0.00%)                  if let ItemKind::ExternCrate(Some(orig_name)) = item.kind {
      .                               if orig_name == kw::SelfLower {
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(
      .                                           attr.span,
      .                                           "`#[macro_use]` is not supported on `extern crate self`",
      .                                       )
      .                                       .emit();
      .                               }
      .                           }
      .                           let ill_formed =
      3 ( 0.00%)                      |span| struct_span_err!(self.r.session, span, E0466, "bad macro import").emit();
      5 ( 0.00%)                  match attr.meta() {
     22 ( 0.00%)                      Some(meta) => match meta.kind {
      .                                   MetaItemKind::Word => {
      2 ( 0.00%)                              import_all = Some(meta.span);
      .                                       break;
      .                                   }
      .                                   MetaItemKind::List(nested_metas) => {
      .                                       for nested_meta in nested_metas {
      .                                           match nested_meta.ident() {
      .                                               Some(ident) if nested_meta.is_word() => {
      .                                                   single_imports.push(ident)
      .                                               }
      .                                               _ => ill_formed(nested_meta.span()),
      .                                           }
      .                                       }
      .                                   }
      .                                   MetaItemKind::NameValue(..) => ill_formed(meta.span),
      2 ( 0.00%)                      },
      .                               None => ill_formed(attr.span),
      .                           }
      .                       }
      .                   }
      .           
      .                   let macro_use_import = |this: &Self, span| {
     20 ( 0.00%)              this.r.arenas.alloc_import(Import {
      .                           kind: ImportKind::MacroUse,
      1 ( 0.00%)                  root_id: item.id,
      .                           id: item.id,
      6 ( 0.00%)                  parent_scope: this.parent_scope,
      .                           imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),
      1 ( 0.00%)                  use_span_with_attributes: item.span_with_attributes(),
      .                           has_attributes: !item.attrs.is_empty(),
      1 ( 0.00%)                  use_span: item.span,
      .                           root_span: span,
      .                           span,
      .                           module_path: Vec::new(),
      .                           vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),
      .                           used: Cell::new(false),
      .                       })
      .                   };
      .           
      4 ( 0.00%)          let allow_shadowing = self.parent_scope.expansion == LocalExpnId::ROOT;
      3 ( 0.00%)          if let Some(span) = import_all {
      .                       let import = macro_use_import(self, span);
      1 ( 0.00%)              self.r.potentially_unused_imports.push(import);
      9 ( 0.00%)              module.for_each_child(self, |this, ident, ns, binding| {
    195 ( 0.00%)                  if ns == MacroNS {
    153 ( 0.00%)                      let imported_binding = this.r.import(binding, import);
    408 ( 0.00%)                      this.add_macro_use_binding(ident.name, imported_binding, span, allow_shadowing);
      .                           }
      .                       });
      .                   } else {
      .                       for ident in single_imports.iter().cloned() {
      .                           let result = self.r.resolve_ident_in_module(
      .                               ModuleOrUniformRoot::Module(module),
      .                               ident,
      .                               MacroNS,
-- line 1129 ----------------------------------------
-- line 1146 ----------------------------------------
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .                   import_all.is_some() || !single_imports.is_empty()
      .               }
      .           
      .               /// Returns `true` if this attribute list contains `macro_use`.
     15 ( 0.00%)      fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {
      .                   for attr in attrs {
     20 ( 0.00%)              if attr.has_name(sym::macro_escape) {
      .                           let msg = "`#[macro_escape]` is a deprecated synonym for `#[macro_use]`";
      .                           let mut err = self.r.session.struct_span_warn(attr.span, msg);
      .                           if let ast::AttrStyle::Inner = attr.style {
      .                               err.help("try an outer attribute: `#[macro_use]`").emit();
      .                           } else {
      .                               err.emit();
      .                           }
      .                       } else if !attr.has_name(sym::macro_use) {
-- line 1164 ----------------------------------------
-- line 1167 ----------------------------------------
      .           
      .                       if !attr.is_word() {
      .                           self.r.session.span_err(attr.span, "arguments to `macro_use` are not allowed here");
      .                       }
      .                       return true;
      .                   }
      .           
      .                   false
     21 ( 0.00%)      }
      .           
      .               fn visit_invoc(&mut self, id: NodeId) -> LocalExpnId {
      .                   let invoc_id = id.placeholder_to_expn_id();
      .                   let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);
      .                   assert!(old_parent_scope.is_none(), "invocation data is reset for an invocation");
      .                   invoc_id
      .               }
      .           
-- line 1183 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// directly into its parent scope's module.
      .               fn visit_invoc_in_module(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {
      .                   let invoc_id = self.visit_invoc(id);
      .                   self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);
      .                   self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id))
      .               }
      .           
      .               fn proc_macro_stub(&self, item: &ast::Item) -> Option<(MacroKind, Ident, Span)> {
     24 ( 0.00%)          if self.r.session.contains_name(&item.attrs, sym::proc_macro) {
      .                       return Some((MacroKind::Bang, item.ident, item.span));
     20 ( 0.00%)          } else if self.r.session.contains_name(&item.attrs, sym::proc_macro_attribute) {
      .                       return Some((MacroKind::Attr, item.ident, item.span));
     20 ( 0.00%)          } else if let Some(attr) = self.r.session.find_by_name(&item.attrs, sym::proc_macro_derive)
      .                   {
      .                       if let Some(nested_meta) = attr.meta_item_list().and_then(|list| list.get(0).cloned()) {
      .                           if let Some(ident) = nested_meta.ident() {
      .                               return Some((MacroKind::Derive, ident, ident.span));
      .                           }
      .                       }
      .                   }
      .                   None
-- line 1205 ----------------------------------------
-- line 1209 ----------------------------------------
      .               // Macro uses will remove items from this set, and the remaining
      .               // items will be reported as `unused_macros`.
      .               fn insert_unused_macro(&mut self, ident: Ident, def_id: LocalDefId, node_id: NodeId) {
      .                   if !ident.as_str().starts_with('_') {
      .                       self.r.unused_macros.insert(def_id, (node_id, ident));
      .                   }
      .               }
      .           
     36 ( 0.00%)      fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScopeRef<'a> {
     16 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
     16 ( 0.00%)          let def_id = self.r.local_def_id(item.id);
     16 ( 0.00%)          let (ext, ident, span, macro_rules) = match &item.kind {
      .                       ItemKind::MacroDef(def) => {
      .                           let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));
      .                           (ext, item.ident, item.span, def.macro_rules)
      .                       }
      .                       ItemKind::Fn(..) => match self.proc_macro_stub(item) {
      .                           Some((macro_kind, ident, span)) => {
      .                               self.r.proc_macro_stubs.insert(def_id);
      .                               (self.r.dummy_ext(macro_kind), ident, span, false)
-- line 1229 ----------------------------------------
-- line 1276 ----------------------------------------
      .                       };
      .                       if vis != ty::Visibility::Public {
      .                           self.insert_unused_macro(ident, def_id, item.id);
      .                       }
      .                       self.r.define(module, ident, MacroNS, (res, vis, span, expansion));
      .                       self.r.visibilities.insert(def_id, vis);
      .                       self.parent_scope.macro_rules
      .                   }
     32 ( 0.00%)      }
      .           }
      .           
      .           macro_rules! method {
      .               ($visit:ident: $ty:ty, $invoc:path, $walk:ident) => {
      .                   fn $visit(&mut self, node: &'b $ty) {
    211 ( 0.00%)              if let $invoc(..) = node.kind {
      .                           self.visit_invoc(node.id);
      .                       } else {
    202 ( 0.00%)                  visit::$walk(self, node);
      .                       }
      .                   }
      .               };
      .           }
      .           
      .           impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {
      .               method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);
      .               method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);
      .               method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);
      .           
    153 ( 0.00%)      fn visit_item(&mut self, item: &'b Item) {
     17 ( 0.00%)          let orig_module_scope = self.parent_scope.module;
    102 ( 0.00%)          self.parent_scope.macro_rules = match item.kind {
      .                       ItemKind::MacroDef(..) => {
      .                           let macro_rules_scope = self.define_macro(item);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       ItemKind::MacCall(..) => {
      .                           let macro_rules_scope = self.visit_invoc_in_module(item.id);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       _ => {
     34 ( 0.00%)                  let orig_macro_rules_scope = self.parent_scope.macro_rules;
      .                           self.build_reduced_graph_for_item(item);
     51 ( 0.00%)                  visit::walk_item(self, item);
     34 ( 0.00%)                  match item.kind {
     12 ( 0.00%)                      ItemKind::Mod(..) if self.contains_macro_use(&item.attrs) => {
      .                                   self.parent_scope.macro_rules
      .                               }
      .                               _ => orig_macro_rules_scope,
      .                           }
      .                       }
      .                   };
     17 ( 0.00%)          self.parent_scope.module = orig_module_scope;
    136 ( 0.00%)      }
      .           
      .               fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {
     16 ( 0.00%)          if let ast::StmtKind::MacCall(..) = stmt.kind {
      .                       self.parent_scope.macro_rules = self.visit_invoc_in_module(stmt.id);
      .                   } else {
     24 ( 0.00%)              visit::walk_stmt(self, stmt);
      .                   }
      .               }
      .           
      .               fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {
      .                   if let ForeignItemKind::MacCall(_) = foreign_item.kind {
      .                       self.visit_invoc_in_module(foreign_item.id);
      .                       return;
      .                   }
      .           
      .                   self.build_reduced_graph_for_foreign_item(foreign_item);
      .                   visit::walk_foreign_item(self, foreign_item);
      .               }
      .           
     45 ( 0.00%)      fn visit_block(&mut self, block: &'b Block) {
      5 ( 0.00%)          let orig_current_module = self.parent_scope.module;
     10 ( 0.00%)          let orig_current_macro_rules_scope = self.parent_scope.macro_rules;
      .                   self.build_reduced_graph_for_block(block);
      .                   visit::walk_block(self, block);
     10 ( 0.00%)          self.parent_scope.module = orig_current_module;
      5 ( 0.00%)          self.parent_scope.macro_rules = orig_current_macro_rules_scope;
     40 ( 0.00%)      }
      .           
      .               fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {
      .                   if let AssocItemKind::MacCall(_) = item.kind {
      .                       match ctxt {
      .                           AssocCtxt::Trait => {
      .                               self.visit_invoc_in_module(item.id);
      .                           }
      .                           AssocCtxt::Impl => {
-- line 1365 ----------------------------------------
-- line 1403 ----------------------------------------
      .                       let expansion = self.parent_scope.expansion;
      .                       let res = Res::Def(def_kind, def_id);
      .                       self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   }
      .           
      .                   visit::walk_assoc_item(self, item, ctxt);
      .               }
      .           
    162 ( 0.00%)      fn visit_attribute(&mut self, attr: &'b ast::Attribute) {
    144 ( 0.00%)          if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {
      9 ( 0.00%)              self.r
      .                           .builtin_attrs
    108 ( 0.00%)                  .push((attr.get_normal_item().path.segments[0].ident, self.parent_scope));
      .                   }
    189 ( 0.00%)          visit::walk_attribute(self, attr);
      .               }
      .           
      .               fn visit_arm(&mut self, arm: &'b ast::Arm) {
     20 ( 0.00%)          if arm.is_placeholder {
      .                       self.visit_invoc(arm.id);
      .                   } else {
      8 ( 0.00%)              visit::walk_arm(self, arm);
      .                   }
      .               }
      .           
      .               fn visit_expr_field(&mut self, f: &'b ast::ExprField) {
      .                   if f.is_placeholder {
      .                       self.visit_invoc(f.id);
      .                   } else {
      .                       visit::walk_expr_field(self, f);
-- line 1432 ----------------------------------------
-- line 1437 ----------------------------------------
      .                   if fp.is_placeholder {
      .                       self.visit_invoc(fp.id);
      .                   } else {
      .                       visit::walk_pat_field(self, fp);
      .                   }
      .               }
      .           
      .               fn visit_generic_param(&mut self, param: &'b ast::GenericParam) {
     28 ( 0.00%)          if param.is_placeholder {
      .                       self.visit_invoc(param.id);
      .                   } else {
     12 ( 0.00%)              visit::walk_generic_param(self, param);
      .                   }
      .               }
      .           
      .               fn visit_param(&mut self, p: &'b ast::Param) {
     28 ( 0.00%)          if p.is_placeholder {
      .                       self.visit_invoc(p.id);
      .                   } else {
     12 ( 0.00%)              visit::walk_param(self, p);
      .                   }
      .               }
      .           
      .               fn visit_field_def(&mut self, sf: &'b ast::FieldDef) {
      .                   if sf.is_placeholder {
      .                       self.visit_invoc(sf.id);
      .                   } else {
      .                       let vis = self.resolve_visibility(&sf.vis);
-- line 1464 ----------------------------------------
-- line 1510 ----------------------------------------
      .                   }
      .                   // Record field names for error reporting.
      .                   self.insert_field_names_local(ctor_def_id.to_def_id(), &variant.data);
      .           
      .                   visit::walk_variant(self, variant);
      .               }
      .           
      .               fn visit_crate(&mut self, krate: &'b ast::Crate) {
      2 ( 0.00%)          if krate.is_placeholder {
      .                       self.visit_invoc_in_module(krate.id);
      .                   } else {
      .                       visit::walk_crate(self, krate);
     11 ( 0.00%)              self.contains_macro_use(&krate.attrs);
      .                   }
      .               }
      .           }

 16,605 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs
--------------------------------------------------------------------------------
Ir               

-- line 6 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::Symbol;
      .           
      .           use std::array::IntoIter;
      .           use std::fmt::Debug;
      .           
      .           /// Encodes if a `DefKind::Ctor` is the constructor of an enum variant or a struct.
     20 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
     12 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum CtorOf {
      .               /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit struct.
      .               Struct,
      .               /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit variant.
      .               Variant,
      .           }
      .           
      .           /// What kind of constructor something is.
  1,202 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
     12 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum CtorKind {
      .               /// Constructor function automatically created by a tuple struct/variant.
      .               Fn,
      .               /// Constructor constant automatically created by a unit struct/variant.
      .               Const,
      .               /// Unusable name in value namespace created by a struct variant.
      .               Fictive,
      .           }
-- line 33 ----------------------------------------
-- line 45 ----------------------------------------
      .               /// Single-segment custom attribute registered by a derive macro
      .               /// but used before that derive macro was expanded (deprecated).
      .               DeriveHelperCompat,
      .               /// Single-segment custom attribute registered with `#[register_attr]`.
      .               Registered,
      .           }
      .           
      .           /// What kind of definition something is; e.g., `mod` vs `struct`.
102,742 ( 0.11%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DefKind {
      .               // Type namespace
      .               Mod,
      .               /// Refers to the struct itself, [`DefKind::Ctor`] refers to its constructor if it exists.
      .               Struct,
      .               Union,
      .               Enum,
-- line 61 ----------------------------------------
-- line 116 ----------------------------------------
      .               /// A use of `global_asm!`.
      .               GlobalAsm,
      .               Impl,
      .               Closure,
      .               Generator,
      .           }
      .           
      .           impl DefKind {
     24 ( 0.00%)      pub fn descr(self, def_id: DefId) -> &'static str {
     30 ( 0.00%)          match self {
      .                       DefKind::Fn => "function",
     14 ( 0.00%)              DefKind::Mod if def_id.index == CRATE_DEF_INDEX && def_id.krate != LOCAL_CRATE => {
      .                           "crate"
      .                       }
      .                       DefKind::Mod => "module",
      .                       DefKind::Static => "static",
      .                       DefKind::Enum => "enum",
      .                       DefKind::Variant => "variant",
      .                       DefKind::Ctor(CtorOf::Variant, CtorKind::Fn) => "tuple variant",
      .                       DefKind::Ctor(CtorOf::Variant, CtorKind::Const) => "unit variant",
-- line 135 ----------------------------------------
-- line 160 ----------------------------------------
      .                       DefKind::InlineConst => "inline constant",
      .                       DefKind::Field => "field",
      .                       DefKind::Impl => "implementation",
      .                       DefKind::Closure => "closure",
      .                       DefKind::Generator => "generator",
      .                       DefKind::ExternCrate => "extern crate",
      .                       DefKind::GlobalAsm => "global assembly block",
      .                   }
     12 ( 0.00%)      }
      .           
      .               /// Gets an English article for the definition.
      6 ( 0.00%)      pub fn article(&self) -> &'static str {
     30 ( 0.00%)          match *self {
      .                       DefKind::AssocTy
      .                       | DefKind::AssocConst
      .                       | DefKind::AssocFn
      .                       | DefKind::Enum
      .                       | DefKind::OpaqueTy
      .                       | DefKind::Impl
      .                       | DefKind::Use
      .                       | DefKind::InlineConst
      .                       | DefKind::ExternCrate => "an",
      .                       DefKind::Macro(macro_kind) => macro_kind.article(),
      .                       _ => "a",
      .                   }
     12 ( 0.00%)      }
      .           
      .               pub fn ns(&self) -> Option<Namespace> {
     24 ( 0.00%)          match self {
      .                       DefKind::Mod
      .                       | DefKind::Struct
      .                       | DefKind::Union
      .                       | DefKind::Enum
      .                       | DefKind::Variant
      .                       | DefKind::Trait
      .                       | DefKind::OpaqueTy
      .                       | DefKind::TyAlias
-- line 196 ----------------------------------------
-- line 217 ----------------------------------------
      .                       | DefKind::ExternCrate
      .                       | DefKind::Closure
      .                       | DefKind::Generator
      .                       | DefKind::Use
      .                       | DefKind::ForeignMod
      .                       | DefKind::GlobalAsm
      .                       | DefKind::Impl => None,
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           /// The resolution of a path or export.
      .           ///
      .           /// For every path or identifier in Rust, the compiler must determine
      .           /// what the path refers to. This process is called name resolution,
      .           /// and `Res` is the primary result of name resolution.
      .           ///
-- line 233 ----------------------------------------
-- line 248 ----------------------------------------
      .           /// - `String` will resolve to [`Res::Def`], and the `Res` will include the [`DefId`]
      .           ///   for `String` as defined in the standard library;
      .           /// - `String::from` will also resolve to [`Res::Def`], with the [`DefId`]
      .           ///   pointing to `String::from`;
      .           /// - `s` will resolve to [`Res::Local`];
      .           /// - the call to `str_to_string` will resolve to [`Res::Def`], with the [`DefId`]
      .           ///   pointing to the definition of `str_to_string` in the current crate.
      .           //
133,632 ( 0.15%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
  3,486 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum Res<Id = hir::HirId> {
      .               /// Definition having a unique ID (`DefId`), corresponds to something defined in user code.
      .               ///
      .               /// **Not bound to a specific namespace.**
     77 ( 0.00%)      Def(DefKind, DefId),
      .           
      .               // Type namespace
      .               /// A primitive type such as `i32` or `str`.
      .               ///
      .               /// **Belongs to the type namespace.**
      .               PrimTy(hir::PrimTy),
      .               /// The `Self` type, optionally with the trait it is associated with
      .               /// and optionally with the [`DefId`] of the impl it is associated with.
-- line 270 ----------------------------------------
-- line 364 ----------------------------------------
      .           /// module::Type::AssocX::AssocY::MethodOrAssocType
      .           /// ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      .           /// base_res      unresolved_segments = 3
      .           ///
      .           /// <T as Trait>::AssocX::AssocY::MethodOrAssocType
      .           ///       ^~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~
      .           ///       base_res        unresolved_segments = 2
      .           /// ```
    424 ( 0.00%)  #[derive(Copy, Clone, Debug)]
      .           pub struct PartialRes {
      .               base_res: Res<NodeId>,
      .               unresolved_segments: usize,
      .           }
      .           
      .           impl PartialRes {
      .               #[inline]
      .               pub fn new(base_res: Res<NodeId>) -> Self {
     82 ( 0.00%)          PartialRes { base_res, unresolved_segments: 0 }
      .               }
      .           
      .               #[inline]
      .               pub fn with_unresolved_segments(base_res: Res<NodeId>, mut unresolved_segments: usize) -> Self {
    228 ( 0.00%)          if base_res == Res::Err {
      .                       unresolved_segments = 0
      .                   }
     88 ( 0.00%)          PartialRes { base_res, unresolved_segments }
      .               }
      .           
      .               #[inline]
      .               pub fn base_res(&self) -> Res<NodeId> {
  1,038 ( 0.00%)          self.base_res
      .               }
      .           
      .               #[inline]
      .               pub fn unresolved_segments(&self) -> usize {
      .                   self.unresolved_segments
      .               }
      .           }
      .           
      .           /// Different kinds of symbols can coexist even if they share the same textual name.
      .           /// Therefore, they each have a separate universe (known as a "namespace").
  1,001 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           pub enum Namespace {
      .               /// The type namespace includes `struct`s, `enum`s, `union`s, `trait`s, and `mod`s
      .               /// (and, by extension, crates).
      .               ///
      .               /// Note that the type namespace includes other items; this is not an
      .               /// exhaustive list.
      .               TypeNS,
      .               /// The value namespace includes `fn`s, `const`s, `static`s, and local variables (including function arguments).
-- line 413 ----------------------------------------
-- line 450 ----------------------------------------
      .                   [&self.value_ns, &self.type_ns, &self.macro_ns].into_iter()
      .               }
      .           }
      .           
      .           impl<T> ::std::ops::Index<Namespace> for PerNS<T> {
      .               type Output = T;
      .           
      .               fn index(&self, ns: Namespace) -> &T {
    726 ( 0.00%)          match ns {
      .                       Namespace::ValueNS => &self.value_ns,
     78 ( 0.00%)              Namespace::TypeNS => &self.type_ns,
     54 ( 0.00%)              Namespace::MacroNS => &self.macro_ns,
      .                   }
      .               }
      .           }
      .           
      .           impl<T> ::std::ops::IndexMut<Namespace> for PerNS<T> {
      .               fn index_mut(&mut self, ns: Namespace) -> &mut T {
     26 ( 0.00%)          match ns {
      .                       Namespace::ValueNS => &mut self.value_ns,
     10 ( 0.00%)              Namespace::TypeNS => &mut self.type_ns,
      .                       Namespace::MacroNS => &mut self.macro_ns,
      .                   }
      .               }
      .           }
      .           
      .           impl<T> PerNS<Option<T>> {
      .               /// Returns `true` if all the items in this collection are `None`.
      .               pub fn is_empty(&self) -> bool {
      .                   self.type_ns.is_none() && self.value_ns.is_none() && self.macro_ns.is_none()
      .               }
      .           
      .               /// Returns an iterator over the items which are `Some`.
      .               pub fn present_items(self) -> impl Iterator<Item = T> {
    162 ( 0.00%)          [self.type_ns, self.value_ns, self.macro_ns].into_iter().flatten()
      .               }
      .           }
      .           
      .           impl CtorKind {
      .               pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {
      .                   match *vdata {
      .                       ast::VariantData::Tuple(..) => CtorKind::Fn,
      .                       ast::VariantData::Unit(..) => CtorKind::Const,
-- line 492 ----------------------------------------
-- line 530 ----------------------------------------
      .                       | NonMacroAttrKind::DeriveHelperCompat => true,
      .                       NonMacroAttrKind::Builtin(..) | NonMacroAttrKind::Registered => false,
      .                   }
      .               }
      .           }
      .           
      .           impl<Id> Res<Id> {
      .               /// Return the `DefId` of this `Def` if it has an ID, else panic.
     48 ( 0.00%)      pub fn def_id(&self) -> DefId
      .               where
      .                   Id: Debug,
      .               {
      .                   self.opt_def_id()
      .                       .unwrap_or_else(|| panic!("attempted .def_id() on invalid res: {:?}", self))
     48 ( 0.00%)      }
      .           
      .               /// Return `Some(..)` with the `DefId` of this `Res` if it has a ID, else `None`.
      .               pub fn opt_def_id(&self) -> Option<DefId> {
    107 ( 0.00%)          match *self {
      .                       Res::Def(_, id) => Some(id),
      .           
      .                       Res::Local(..)
      .                       | Res::PrimTy(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::ToolMod
      .                       | Res::NonMacroAttr(..)
-- line 556 ----------------------------------------
-- line 585 ----------------------------------------
      .                   match *self {
      .                       Res::Def(kind, _) => kind.article(),
      .                       Res::NonMacroAttr(kind) => kind.article(),
      .                       Res::Err => "an",
      .                       _ => "a",
      .                   }
      .               }
      .           
    136 ( 0.00%)      pub fn map_id<R>(self, mut map: impl FnMut(Id) -> R) -> Res<R> {
 29,361 ( 0.03%)          match self {
 29,047 ( 0.03%)              Res::Def(kind, id) => Res::Def(kind, id),
      .                       Res::SelfCtor(id) => Res::SelfCtor(id),
      .                       Res::PrimTy(id) => Res::PrimTy(id),
     96 ( 0.00%)              Res::Local(id) => Res::Local(map(id)),
      .                       Res::SelfTy(a, b) => Res::SelfTy(a, b),
      .                       Res::ToolMod => Res::ToolMod,
      .                       Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),
      .                       Res::Err => Res::Err,
      .                   }
    408 ( 0.00%)      }
      .           
      .               #[track_caller]
      .               pub fn expect_non_local<OtherId>(self) -> Res<OtherId> {
      .                   self.map_id(|_| panic!("unexpected `Res::Local`"))
      .               }
      .           
      .               pub fn macro_kind(self) -> Option<MacroKind> {
    471 ( 0.00%)          match self {
      .                       Res::Def(DefKind::Macro(kind), _) => Some(kind),
      .                       Res::NonMacroAttr(..) => Some(MacroKind::Attr),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Returns `None` if this is `Res::Err`
      .               pub fn ns(&self) -> Option<Namespace> {
     40 ( 0.00%)          match self {
     16 ( 0.00%)              Res::Def(kind, ..) => kind.ns(),
      .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::ToolMod => Some(Namespace::TypeNS),
      .                       Res::SelfCtor(..) | Res::Local(..) => Some(Namespace::ValueNS),
      .                       Res::NonMacroAttr(..) => Some(Namespace::MacroNS),
      .                       Res::Err => None,
      .                   }
      .               }
      .           
      .               /// Always returns `true` if `self` is `Res::Err`
      .               pub fn matches_ns(&self, ns: Namespace) -> bool {
      .                   self.ns().map_or(true, |actual_ns| actual_ns == ns)
      .               }
      .           
      .               /// Returns whether such a resolved path can occur in a tuple struct/variant pattern
      .               pub fn expected_in_tuple_struct_pat(&self) -> bool {
     20 ( 0.00%)          matches!(self, Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) | Res::SelfCtor(..))
      .               }
      .           }

 79,293 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs
--------------------------------------------------------------------------------
Ir              

-- line 316 ----------------------------------------
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           // Cross-platform, iterator-independent parsing
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Says whether the first byte after the prefix is a separator.
     .           fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {
     .               let path = if let Some(p) = prefix { &s[p.len()..] } else { s };
   107 ( 0.00%)      !path.is_empty() && is_sep_byte(path[0])
     .           }
     .           
     .           // basic workhorse for splitting stem and extension
     .           fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {
     .               if os_str_as_u8_slice(file) == b".." {
     .                   return (Some(file), None);
     .               }
     .           
     .               // The unsafety here stems from converting between &OsStr and &[u8]
     .               // and back. This is safe to do because (1) we only look at ASCII
     .               // contents of the encoding and (2) new &OsStr values are produced
     .               // only from ASCII-bounded slices of existing &OsStr values.
    93 ( 0.00%)      let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');
     .               let after = iter.next();
     .               let before = iter.next();
     .               if before == Some(b"") {
     .                   (Some(file), None)
     .               } else {
     .                   unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }
     .               }
     .           }
-- line 345 ----------------------------------------
-- line 368 ----------------------------------------
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Component parsing works by a double-ended state machine; the cursors at the
     .           /// front and back of the path each keep track of what parts of the path have
     .           /// been consumed so far.
     .           ///
     .           /// Going front to back, a path is made up of a prefix, a starting
     .           /// directory component, and a body (of normal components)
   137 ( 0.00%)  #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
     .           enum State {
     .               Prefix = 0,   // c:
     .               StartDir = 1, // / or . or nothing
     .               Body = 2,     // foo/bar/baz
     .               Done = 3,
     .           }
     .           
     .           /// A structure wrapping a Windows path prefix as well as its unparsed string
-- line 384 ----------------------------------------
-- line 493 ----------------------------------------
     .           /// let components = path.components().collect::<Vec<_>>();
     .           /// assert_eq!(&components, &[
     .           ///     Component::RootDir,
     .           ///     Component::Normal("tmp".as_ref()),
     .           ///     Component::Normal("foo".as_ref()),
     .           ///     Component::Normal("bar.txt".as_ref()),
     .           /// ]);
     .           /// ```
    14 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub enum Component<'a> {
     .               /// A Windows path prefix, e.g., `C:` or `\\server\share`.
     .               ///
     .               /// There is a large variety of prefix types, see [`Prefix`]'s documentation
     .               /// for more.
     .               ///
     .               /// Does not occur on Unix.
-- line 509 ----------------------------------------
-- line 586 ----------------------------------------
     .           /// let path = Path::new("/tmp/foo/bar.txt");
     .           ///
     .           /// for component in path.components() {
     .           ///     println!("{:?}", component);
     .           /// }
     .           /// ```
     .           ///
     .           /// [`components`]: Path::components
   136 ( 0.00%)  #[derive(Clone)]
     .           #[must_use = "iterators are lazy and do nothing unless consumed"]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub struct Components<'a> {
     .               // The path left to parse components from
    18 ( 0.00%)      path: &'a [u8],
     .           
     .               // The prefix as it was originally parsed, if any
     .               prefix: Option<Prefix<'a>>,
     .           
     .               // true if path *physically* has a root separator; for most Windows
     .               // prefixes, it may have a "logical" root separator for the purposes of
     .               // normalization, e.g.,  \\server\share == \\server\share\.
     .               has_physical_root: bool,
     .           
     .               // The iterator is double-ended, and these two states keep track of what has
     .               // been produced from either end
    14 ( 0.00%)      front: State,
     8 ( 0.00%)      back: State,
     .           }
     .           
     .           /// An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.
     .           ///
     .           /// This `struct` is created by the [`iter`] method on [`Path`].
     .           /// See its documentation for more.
     .           ///
     .           /// [`iter`]: Path::iter
-- line 620 ----------------------------------------
-- line 650 ----------------------------------------
     .               #[inline]
     .               fn prefix_verbatim(&self) -> bool {
     .                   self.prefix.as_ref().map(Prefix::is_verbatim).unwrap_or(false)
     .               }
     .           
     .               /// how much of the prefix is left from the point of view of iteration?
     .               #[inline]
     .               fn prefix_remaining(&self) -> usize {
   121 ( 0.00%)          if self.front == State::Prefix { self.prefix_len() } else { 0 }
     .               }
     .           
     .               // Given the iteration so far, how much of the pre-State::Body path is left?
     .               #[inline]
   847 ( 0.00%)      fn len_before_body(&self) -> usize {
   484 ( 0.00%)          let root = if self.front <= State::StartDir && self.has_physical_root { 1 } else { 0 };
   181 ( 0.00%)          let cur_dir = if self.front <= State::StartDir && self.include_cur_dir() { 1 } else { 0 };
   484 ( 0.00%)          self.prefix_remaining() + root + cur_dir
 1,089 ( 0.00%)      }
     .           
     .               // is the iteration complete?
     .               #[inline]
     .               fn finished(&self) -> bool {
     .                   self.front == State::Done || self.back == State::Done || self.front > self.back
     .               }
     .           
     .               #[inline]
-- line 675 ----------------------------------------
-- line 687 ----------------------------------------
     .               /// let mut components = Path::new("/tmp/foo/bar.txt").components();
     .               /// components.next();
     .               /// components.next();
     .               ///
     .               /// assert_eq!(Path::new("foo/bar.txt"), components.as_path());
     .               /// ```
     .               #[must_use]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    48 ( 0.00%)      pub fn as_path(&self) -> &'a Path {
     .                   let mut comps = self.clone();
     8 ( 0.00%)          if comps.front == State::Body {
     .                       comps.trim_left();
     .                   }
     8 ( 0.00%)          if comps.back == State::Body {
     .                       comps.trim_right();
     .                   }
     .                   unsafe { Path::from_u8_slice(comps.path) }
    72 ( 0.00%)      }
     .           
     .               /// Is the *original* path rooted?
     .               fn has_root(&self) -> bool {
   242 ( 0.00%)          if self.has_physical_root {
     .                       return true;
     .                   }
    63 ( 0.00%)          if let Some(p) = self.prefix {
     .                       if p.has_implicit_root() {
     .                           return true;
     .                       }
     .                   }
     .                   false
     .               }
     .           
     .               /// Should the normalized path include a leading . ?
     .               fn include_cur_dir(&self) -> bool {
    22 ( 0.00%)          if self.has_root() {
     .                       return false;
     .                   }
    43 ( 0.00%)          let mut iter = self.path[self.prefix_len()..].iter();
    20 ( 0.00%)          match (iter.next(), iter.next()) {
     .                       (Some(&b'.'), None) => true,
     .                       (Some(&b'.'), Some(&b)) => self.is_sep_byte(b),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               // parse a given byte sequence into the corresponding path component
     .               fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {
     .                   match comp {
   360 ( 0.00%)              b"." if self.prefix_verbatim() => Some(Component::CurDir),
     .                       b"." => None, // . components are normalized away, except at
     .                       // the beginning of a path, which is treated
     .                       // separately via `include_cur_dir`
     .                       b".." => Some(Component::ParentDir),
     .                       b"" => None,
     .                       _ => Some(Component::Normal(unsafe { u8_slice_as_os_str(comp) })),
     .                   }
     .               }
-- line 743 ----------------------------------------
-- line 750 ----------------------------------------
     .                       None => (0, self.path),
     .                       Some(i) => (1, &self.path[..i]),
     .                   };
     .                   (comp.len() + extra, self.parse_single_component(comp))
     .               }
     .           
     .               // parse a component from the right, saying how many bytes to consume to
     .               // remove the component
   300 ( 0.00%)      fn parse_next_component_back(&self) -> (usize, Option<Component<'a>>) {
     .                   debug_assert!(self.back == State::Body);
   120 ( 0.00%)          let start = self.len_before_body();
    60 ( 0.00%)          let (extra, comp) = match self.path[start..].iter().rposition(|b| self.is_sep_byte(*b)) {
     .                       None => (0, &self.path[start..]),
   228 ( 0.00%)              Some(i) => (1, &self.path[start + i + 1..]),
     .                   };
   360 ( 0.00%)          (comp.len() + extra, self.parse_single_component(comp))
   240 ( 0.00%)      }
     .           
     .               // trim away repeated separators (i.e., empty components) on the left
     .               fn trim_left(&mut self) {
     .                   while !self.path.is_empty() {
     .                       let (size, comp) = self.parse_next_component();
     .                       if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[size..];
     .                       }
     .                   }
     .               }
     .           
     .               // trim away repeated separators (i.e., empty components) on the right
     .               fn trim_right(&mut self) {
    24 ( 0.00%)          while self.path.len() > self.len_before_body() {
    24 ( 0.00%)              let (size, comp) = self.parse_next_component_back();
     8 ( 0.00%)              if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[..self.path.len() - size];
     .                       }
     .                   }
     .               }
     .           }
     .           
-- line 792 ----------------------------------------
-- line 930 ----------------------------------------
     .                       }
     .                   }
     .                   None
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> DoubleEndedIterator for Components<'a> {
   530 ( 0.00%)      fn next_back(&mut self) -> Option<Component<'a>> {
   267 ( 0.00%)          while !self.finished() {
   128 ( 0.00%)              match self.back {
   265 ( 0.00%)                  State::Body if self.path.len() > self.len_before_body() => {
   624 ( 0.00%)                      let (size, comp) = self.parse_next_component_back();
   208 ( 0.00%)                      self.path = &self.path[..self.path.len() - size];
    52 ( 0.00%)                      if comp.is_some() {
   416 ( 0.00%)                          return comp;
     .                               }
     .                           }
     .                           State::Body => {
     3 ( 0.00%)                      self.back = State::StartDir;
     .                           }
     .                           State::StartDir => {
     2 ( 0.00%)                      self.back = State::Prefix;
    53 ( 0.00%)                      if self.has_physical_root {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::RootDir);
    48 ( 0.00%)                      } else if let Some(p) = self.prefix {
     .                                   if p.has_implicit_root() && !p.is_verbatim() {
     .                                       return Some(Component::RootDir);
     .                                   }
     .                               } else if self.include_cur_dir() {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::CurDir);
     .                               }
     .                           }
-- line 964 ----------------------------------------
-- line 965 ----------------------------------------
     .                           State::Prefix if self.prefix_len() > 0 => {
     .                               self.back = State::Done;
     .                               return Some(Component::Prefix(PrefixComponent {
     .                                   raw: unsafe { u8_slice_as_os_str(self.path) },
     .                                   parsed: self.prefix.unwrap(),
     .                               }));
     .                           }
     .                           State::Prefix => {
     1 ( 0.00%)                      self.back = State::Done;
     .                               return None;
     .                           }
     .                           State::Done => unreachable!(),
     .                       }
     .                   }
     .                   None
   477 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "fused", since = "1.26.0")]
     .           impl FusedIterator for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialEq for Components<'a> {
     .               #[inline]
     .               fn eq(&self, other: &Components<'a>) -> bool {
     .                   let Components { path: _, front: _, back: _, has_physical_root: _, prefix: _ } = self;
     .           
     .                   // Fast path for exact matches, e.g. for hashmap lookups.
     .                   // Don't explicitly compare the prefix or has_physical_root fields since they'll
     .                   // either be covered by the `path` buffer or are only relevant for `prefix_verbatim()`.
    12 ( 0.00%)          if self.path.len() == other.path.len()
     .                       && self.front == other.front
     .                       && self.back == State::Body
     .                       && other.back == State::Body
     .                       && self.prefix_verbatim() == other.prefix_verbatim()
     .                   {
     .                       // possible future improvement: this could bail out earlier if there were a
     .                       // reverse memcmp/bcmp comparing back to front
     .                       if self.path == other.path {
     .                           return true;
     .                       }
     .                   }
     .           
     .                   // compare back to front since absolute paths often share long prefixes
    12 ( 0.00%)          Iterator::eq(self.clone().rev(), other.clone().rev())
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialOrd for Components<'a> {
-- line 1017 ----------------------------------------
-- line 1179 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let path = PathBuf::new();
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               #[inline]
     .               pub fn new() -> PathBuf {
    36 ( 0.00%)          PathBuf { inner: OsString::new() }
     .               }
     .           
     .               /// Creates a new `PathBuf` with a given capacity used to create the
     .               /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1195 ----------------------------------------
-- line 1260 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let mut path = PathBuf::from("/tmp");
     .               /// path.push("/etc");
     .               /// assert_eq!(path, PathBuf::from("/etc"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn push<P: AsRef<Path>>(&mut self, path: P) {
   216 ( 0.00%)          self._push(path.as_ref())
     .               }
     .           
   432 ( 0.00%)      fn _push(&mut self, path: &Path) {
     .                   // in general, a separator is needed if the rightmost byte is not a separator
     .                   let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);
     .           
     .                   // in the special case of `C:` on Windows, do *not* add a separator
     .                   let comps = self.components();
     .           
     .                   if comps.prefix_len() > 0
     .                       && comps.prefix_len() == comps.path.len()
-- line 1279 ----------------------------------------
-- line 1327 ----------------------------------------
     .                       return;
     .           
     .                   // `path` has a root but no prefix, e.g., `\windows` (Windows only)
     .                   } else if path.has_root() {
     .                       let prefix_len = self.components().prefix_remaining();
     .                       self.as_mut_vec().truncate(prefix_len);
     .           
     .                   // `path` is a pure relative path
    53 ( 0.00%)          } else if need_sep {
     .                       self.inner.push(MAIN_SEP_STR);
     .                   }
     .           
     .                   self.inner.push(path);
   324 ( 0.00%)      }
     .           
     .               /// Truncates `self` to [`self.parent`].
     .               ///
     .               /// Returns `false` and does nothing if [`self.parent`] is [`None`].
     .               /// Otherwise, returns `true`.
     .               ///
     .               /// [`self.parent`]: Path::parent
     .               ///
-- line 1348 ----------------------------------------
-- line 1354 ----------------------------------------
     .               /// let mut p = PathBuf::from("/spirited/away.rs");
     .               ///
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/spirited"), p);
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/"), p);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
    16 ( 0.00%)      pub fn pop(&mut self) -> bool {
     4 ( 0.00%)          match self.parent().map(|p| p.as_u8_slice().len()) {
     .                       Some(len) => {
     .                           self.as_mut_vec().truncate(len);
     .                           true
     .                       }
     .                       None => false,
     .                   }
    16 ( 0.00%)      }
     .           
     .               /// Updates [`self.file_name`] to `file_name`.
     .               ///
     .               /// If [`self.file_name`] was [`None`], this is equivalent to pushing
     .               /// `file_name`.
     .               ///
     .               /// Otherwise it is equivalent to calling [`pop`] and then pushing
     .               /// `file_name`. The new path will be a sibling of the original path.
-- line 1378 ----------------------------------------
-- line 1428 ----------------------------------------
     .               /// p.set_extension("force");
     .               /// assert_eq!(Path::new("/feel/the.force"), p.as_path());
     .               ///
     .               /// p.set_extension("dark_side");
     .               /// assert_eq!(Path::new("/feel/the.dark_side"), p.as_path());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {
    12 ( 0.00%)          self._set_extension(extension.as_ref())
     .               }
     .           
    30 ( 0.00%)      fn _set_extension(&mut self, extension: &OsStr) -> bool {
    24 ( 0.00%)          let file_stem = match self.file_stem() {
     .                       None => return false,
     .                       Some(f) => os_str_as_u8_slice(f),
     .                   };
     .           
     .                   // truncate until right after the file stem
     .                   let end_file_stem = file_stem[file_stem.len()..].as_ptr() as usize;
     .                   let start = os_str_as_u8_slice(&self.inner).as_ptr() as usize;
     .                   let v = self.as_mut_vec();
     .                   v.truncate(end_file_stem.wrapping_sub(start));
     .           
     .                   // add the new extension, if any
     .                   let new = os_str_as_u8_slice(extension);
     3 ( 0.00%)          if !new.is_empty() {
     9 ( 0.00%)              v.reserve_exact(new.len() + 1);
     .                       v.push(b'.');
     .                       v.extend_from_slice(new);
     .                   }
     .           
     .                   true
    24 ( 0.00%)      }
     .           
     .               /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::PathBuf;
     .               ///
-- line 1468 ----------------------------------------
-- line 1558 ----------------------------------------
     .                   self.inner.shrink_to(min_capacity)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Clone for PathBuf {
     .               #[inline]
     .               fn clone(&self) -> Self {
     9 ( 0.00%)          PathBuf { inner: self.inner.clone() }
     .               }
     .           
     .               #[inline]
     .               fn clone_from(&mut self, source: &Self) {
     .                   self.inner.clone_from(&source.inner)
     .               }
     .           }
     .           
-- line 1574 ----------------------------------------
-- line 1642 ----------------------------------------
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl From<OsString> for PathBuf {
     .               /// Converts an [`OsString`] into a [`PathBuf`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
     .               #[inline]
     .               fn from(s: OsString) -> PathBuf {
   186 ( 0.00%)          PathBuf { inner: s }
     .               }
     .           }
     .           
     .           #[stable(feature = "from_path_buf_for_os_string", since = "1.14.0")]
     .           impl From<PathBuf> for OsString {
     .               /// Converts a [`PathBuf`] into an [`OsString`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
-- line 1658 ----------------------------------------
-- line 1711 ----------------------------------------
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl ops::Deref for PathBuf {
     .               type Target = Path;
     .               #[inline]
     .               fn deref(&self) -> &Path {
    12 ( 0.00%)          Path::new(&self.inner)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Borrow<Path> for PathBuf {
     .               #[inline]
     .               fn borrow(&self) -> &Path {
     .                   self.deref()
-- line 1727 ----------------------------------------
-- line 1825 ----------------------------------------
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl ToOwned for Path {
     .               type Owned = PathBuf;
     .               #[inline]
     .               fn to_owned(&self) -> PathBuf {
    17 ( 0.00%)          self.to_path_buf()
     .               }
     .               #[inline]
     .               fn clone_into(&self, target: &mut PathBuf) {
     .                   self.inner.clone_into(&mut target.inner);
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for PathBuf {
     .               #[inline]
     4 ( 0.00%)      fn eq(&self, other: &PathBuf) -> bool {
    16 ( 0.00%)          self.components() == other.components()
     4 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for PathBuf {
   225 ( 0.00%)      fn hash<H: Hasher>(&self, h: &mut H) {
     .                   self.as_path().hash(h)
   180 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for PathBuf {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for PathBuf {
     .               #[inline]
-- line 1861 ----------------------------------------
-- line 1936 ----------------------------------------
     .           
     .           impl Path {
     .               // The following (private!) function allows construction of a path from a u8
     .               // slice, which is only safe when it is known to follow the OsStr encoding.
     .               unsafe fn from_u8_slice(s: &[u8]) -> &Path {
     .                   unsafe { Path::new(u8_slice_as_os_str(s)) }
     .               }
     .               // The following (private!) function reveals the byte encoding used for OsStr.
 1,244 ( 0.00%)      fn as_u8_slice(&self) -> &[u8] {
     .                   os_str_as_u8_slice(&self.inner)
   622 ( 0.00%)      }
     .           
     .               /// Directly wraps a string slice as a `Path` slice.
     .               ///
     .               /// This is a cost-free conversion.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1954 ----------------------------------------
-- line 1964 ----------------------------------------
     .               ///
     .               /// let string = String::from("foo.txt");
     .               /// let from_string = Path::new(&string);
     .               /// let from_path = Path::new(&from_string);
     .               /// assert_eq!(from_string, from_path);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {
     4 ( 0.00%)          unsafe { &*(s.as_ref() as *const OsStr as *const Path) }
     .               }
     .           
     .               /// Yields the underlying [`OsStr`] slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::Path;
-- line 1980 ----------------------------------------
-- line 2050 ----------------------------------------
     .               ///
     .               /// let path_buf = Path::new("foo.txt").to_path_buf();
     .               /// assert_eq!(path_buf, std::path::PathBuf::from("foo.txt"));
     .               /// ```
     .               #[rustc_conversion_suggestion]
     .               #[must_use = "this returns the result of the operation, \
     .                             without modifying the original"]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    96 ( 0.00%)      pub fn to_path_buf(&self) -> PathBuf {
     .                   PathBuf::from(self.inner.to_os_string())
    84 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is absolute, i.e., if it is independent of
     .               /// the current directory.
     .               ///
     .               /// * On Unix, a path is absolute if it starts with the root, so
     .               /// `is_absolute` and [`has_root`] are equivalent.
     .               ///
     .               /// * On Windows, a path is absolute if it has a prefix and starts with the
-- line 2068 ----------------------------------------
-- line 2082 ----------------------------------------
     .               #[allow(deprecated)]
     .               pub fn is_absolute(&self) -> bool {
     .                   if cfg!(target_os = "redox") {
     .                       // FIXME: Allow Redox prefixes
     .                       self.has_root() || has_redox_scheme(self.as_u8_slice())
     .                   } else {
     .                       self.has_root() && (cfg!(any(unix, target_os = "wasi")) || self.prefix().is_some())
     .                   }
     1 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is relative, i.e., not absolute.
     .               ///
     .               /// See [`is_absolute`]'s documentation for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2098 ----------------------------------------
-- line 2150 ----------------------------------------
     .               /// assert_eq!(parent, Path::new("/foo"));
     .               ///
     .               /// let grand_parent = parent.parent().unwrap();
     .               /// assert_eq!(grand_parent, Path::new("/"));
     .               /// assert_eq!(grand_parent.parent(), None);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     4 ( 0.00%)      pub fn parent(&self) -> Option<&Path> {
     .                   let mut comps = self.components();
     8 ( 0.00%)          let comp = comps.next_back();
    12 ( 0.00%)          comp.and_then(|p| match p {
     .                       Component::Normal(_) | Component::CurDir | Component::ParentDir => {
    12 ( 0.00%)                  Some(comps.as_path())
     .                       }
     .                       _ => None,
     .                   })
     8 ( 0.00%)      }
     .           
     .               /// Produces an iterator over `Path` and its ancestors.
     .               ///
     .               /// The iterator will yield the `Path` that is returned if the [`parent`] method is used zero
     .               /// or more times. That means, the iterator will yield `&self`, `&self.parent().unwrap()`,
     .               /// `&self.parent().unwrap().parent().unwrap()` and so on. If the [`parent`] method returns
     .               /// [`None`], the iterator will do likewise. The iterator will always yield at least one value,
     .               /// namely `&self`.
-- line 2175 ----------------------------------------
-- line 2217 ----------------------------------------
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("tmp/foo.txt").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.//").file_name());
     .               /// assert_eq!(None, Path::new("foo.txt/..").file_name());
     .               /// assert_eq!(None, Path::new("/").file_name());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
    34 ( 0.00%)      pub fn file_name(&self) -> Option<&OsStr> {
   111 ( 0.00%)          self.components().next_back().and_then(|p| match p {
     .                       Component::Normal(p) => Some(p),
     .                       _ => None,
     .                   })
    68 ( 0.00%)      }
     .           
     .               /// Returns a path that, when joined onto `base`, yields `self`.
     .               ///
     .               /// # Errors
     .               ///
     .               /// If `base` is not a prefix of `self` (i.e., [`starts_with`]
     .               /// returns `false`), returns [`Err`].
     .               ///
-- line 2238 ----------------------------------------
-- line 2354 ----------------------------------------
     .               /// # See Also
     .               /// This method is similar to [`Path::file_prefix`], which extracts the portion of the file name
     .               /// before the *first* `.`
     .               ///
     .               /// [`Path::file_prefix`]: Path::file_prefix
     .               ///
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     3 ( 0.00%)      pub fn file_stem(&self) -> Option<&OsStr> {
     .                   self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))
     6 ( 0.00%)      }
     .           
     .               /// Extracts the prefix of [`self.file_name`].
     .               ///
     .               /// The prefix is:
     .               ///
     .               /// * [`None`], if there is no file name;
     .               /// * The entire file name if there is no embedded `.`;
     .               /// * The portion of the file name before the first non-beginning `.`;
-- line 2372 ----------------------------------------
-- line 2431 ----------------------------------------
     .               /// ```
     .               /// use std::path::{Path, PathBuf};
     .               ///
     .               /// assert_eq!(Path::new("/etc").join("passwd"), PathBuf::from("/etc/passwd"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {
    62 ( 0.00%)          self._join(path.as_ref())
     .               }
     .           
   204 ( 0.00%)      fn _join(&self, path: &Path) -> PathBuf {
     .                   let mut buf = self.to_path_buf();
     .                   buf.push(path);
     .                   buf
   153 ( 0.00%)      }
     .           
     .               /// Creates an owned [`PathBuf`] like `self` but with the given file name.
     .               ///
     .               /// See [`PathBuf::set_file_name`] for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2454 ----------------------------------------
-- line 2529 ----------------------------------------
     .               /// assert_eq!(components.next(), Some(Component::RootDir));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("tmp"))));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("foo.txt"))));
     .               /// assert_eq!(components.next(), None)
     .               /// ```
     .               ///
     .               /// [`CurDir`]: Component::CurDir
     .               #[stable(feature = "rust1", since = "1.0.0")]
     6 ( 0.00%)      pub fn components(&self) -> Components<'_> {
     .                   let prefix = parse_prefix(self.as_os_str());
   345 ( 0.00%)          Components {
     .                       path: self.as_u8_slice(),
     .                       prefix,
   106 ( 0.00%)              has_physical_root: has_physical_root(self.as_u8_slice(), prefix)
     .                           || has_redox_scheme(self.as_u8_slice()),
     .                       front: State::Prefix,
     .                       back: State::Body,
     .                   }
     6 ( 0.00%)      }
     .           
     .               /// Produces an iterator over the path's components viewed as [`OsStr`]
     .               /// slices.
     .               ///
     .               /// For more information about the particulars of how the path is separated
     .               /// into components, see [`components`].
     .               ///
     .               /// [`components`]: Path::components
-- line 2555 ----------------------------------------
-- line 2775 ----------------------------------------
     .               ///
     .               /// When the goal is simply to read from (or write to) the source, the most
     .               /// reliable way to test the source can be read (or written to) is to open
     .               /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on
     .               /// a Unix-like system for example. See [`fs::File::open`] or
     .               /// [`fs::OpenOptions::open`] for more information.
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
     5 ( 0.00%)      pub fn is_file(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)
     3 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a directory.
     .               ///
     .               /// This function will traverse symbolic links to query information about the
     .               /// destination file.
     .               ///
     .               /// If you cannot access the metadata of the file, e.g. because of a
     .               /// permission error or broken symbolic links, this will return `false`.
-- line 2793 ----------------------------------------
-- line 2802 ----------------------------------------
     .               ///
     .               /// # See Also
     .               ///
     .               /// This is a convenience function that coerces errors to false. If you want to
     .               /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call
     .               /// [`fs::Metadata::is_dir`] if it was [`Ok`].
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
    10 ( 0.00%)      pub fn is_dir(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)
     6 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a symbolic link.
     .               ///
     .               /// This function will not traverse symbolic links.
     .               /// In case of a broken symbolic link this will also return true.
     .               ///
     .               /// If you cannot access the directory containing the file, e.g., because of a
     .               /// permission error, this will return false.
-- line 2820 ----------------------------------------
-- line 2898 ----------------------------------------
     .           impl fmt::Debug for Display<'_> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.path, f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl fmt::Display for Display<'_> {
     4 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     4 ( 0.00%)          self.path.inner.display(f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for Path {
     .               #[inline]
     .               fn eq(&self, other: &Path) -> bool {
     .                   self.components() == other.components()
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for Path {
 4,616 ( 0.01%)      fn hash<H: Hasher>(&self, h: &mut H) {
   667 ( 0.00%)          let bytes = self.as_u8_slice();
     .                   let prefix_len = match parse_prefix(&self.inner) {
     .                       Some(prefix) => {
     .                           prefix.hash(h);
     .                           prefix.len()
     .                       }
     .                       None => 0,
     .                   };
     .                   let bytes = &bytes[prefix_len..];
     .           
     .                   let mut component_start = 0;
     .                   let mut bytes_hashed = 0;
     .           
     .                   for i in 0..bytes.len() {
62,932 ( 0.07%)              if is_sep_byte(bytes[i]) {
21,390 ( 0.02%)                  if i > component_start {
     .                               let to_hash = &bytes[component_start..i];
     8 ( 0.00%)                      h.write(to_hash);
13,028 ( 0.01%)                      bytes_hashed += to_hash.len();
     .                           }
     .           
     .                           // skip over separator and optionally a following CurDir item
     .                           // since components() would normalize these away
29,065 ( 0.03%)                  component_start = i + match bytes[i..] {
14,260 ( 0.02%)                      [_, b'.', b'/', ..] | [_, b'.'] => 2,
     .                               _ => 1,
     .                           };
     .                       }
     .                   }
     .           
 1,244 ( 0.00%)          if component_start < bytes.len() {
     .                       let to_hash = &bytes[component_start..];
     3 ( 0.00%)              h.write(to_hash);
 1,244 ( 0.00%)              bytes_hashed += to_hash.len();
     .                   }
     .           
     .                   h.write_usize(bytes_hashed);
 4,560 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Path {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for Path {
     .               #[inline]
-- line 2967 ----------------------------------------

31,993 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    1,463 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
    7,426 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       20 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    1,929 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    2,066 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    1,657 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
2,632,122 ( 2.86%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   12,379 ( 0.01%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      126 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
       31 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
        .                           while let Some(x) = self.next() {
    2,622 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
    4,296 ( 0.00%)                  while let Some(x) = self.next() {
    5,309 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      296 ( 0.00%)                  while let Some(x) = self.next() {
    4,657 ( 0.01%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
      456 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
      739 ( 0.00%)                  while let Some(x) = self.next() {
    2,080 ( 0.00%)                      if let Some(y) = f(x) {
      235 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
       85 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    5,151 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      360 ( 0.00%)                  while let Some(x) = self.next_back() {
    5,657 ( 0.01%)                      i -= 1;
    5,173 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
      772 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       21 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   11,280 ( 0.01%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

   89,654 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
    594 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    198 ( 0.00%)          let tcx = self.tcx();
 96,447 ( 0.10%)          DecodeContext {
 10,151 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    198 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
    660 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
  8,978 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
    594 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  3,800 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
  1,809 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 28,294 ( 0.03%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 13,265 ( 0.01%)          T::decode(&mut dcx)
  4,987 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
      .                   let mut dcx = metadata.decoder(self.position.get());
      .                   dcx.lazy_state = LazyState::NodeStart(self.position);
 10,825 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 29,935 ( 0.03%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 18,510 ( 0.02%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 17,980 ( 0.02%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  1,065 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  2,130 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  8,871 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  8,044 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 18,510 ( 0.02%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
  3,970 ( 0.00%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
  3,381 ( 0.00%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
    483 ( 0.00%)          let tcx = self.tcx();
      .           
    483 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
  1,064 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    217 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
  4,347 ( 0.00%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  1,265 ( 0.00%)          self.opaque = old_opaque;
    253 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 18,186 ( 0.02%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
  1,126 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 35,184 ( 0.04%)          DefIndex::from_u32(d.read_u32())
  2,252 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 67,840 ( 0.07%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 16,960 ( 0.02%)          let cdata = decoder.cdata();
 16,960 ( 0.02%)          let sess = decoder.sess.unwrap();
 33,920 ( 0.04%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    160 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 84,800 ( 0.09%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  2,422 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    346 ( 0.00%)          let local_cdata = decoder.cdata();
    346 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     57 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    285 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    285 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    570 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  2,768 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
134,720 ( 0.15%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 16,840 ( 0.02%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 33,680 ( 0.04%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 50,502 ( 0.05%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 47,246 ( 0.05%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     13 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     26 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     13 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 50,502 ( 0.05%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 62,210 ( 0.07%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 27,154 ( 0.03%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
 13,578 ( 0.01%)                  if tag == TAG_VALID_SPAN_LOCAL {
 13,571 ( 0.01%)                      decoder.last_source_file_index = index;
      .                           }
 27,156 ( 0.03%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 67,336 ( 0.07%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
151,560 ( 0.16%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  1,946 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  9,253 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 10,309 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    183 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     61 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    305 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    122 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    244 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    183 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    305 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     40 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      4 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     20 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     40 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     40 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 23,408 ( 0.03%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 17,114 ( 0.02%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 11,424 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     63 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 29,828 ( 0.03%)      }
      .           
  1,110 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,828 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
  2,220 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  1,930 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
  7,720 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  5,790 ( 0.01%)      }
      .           
  4,144 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  2,788 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  2,368 ( 0.00%)      }
      .           
  9,990 ( 0.01%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  6,307 ( 0.01%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  5,550 ( 0.01%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    117 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     36 ( 0.00%)          match self.kind(item_id) {
      9 ( 0.00%)              EntryKind::Trait(data) => {
     54 ( 0.00%)                  let data = data.decode((self, sess));
    144 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     18 ( 0.00%)                      data.unsafety,
     18 ( 0.00%)                      data.paren_sugar,
     18 ( 0.00%)                      data.has_auto_impl,
     18 ( 0.00%)                      data.is_marker,
      9 ( 0.00%)                      data.skip_array_during_method_dispatch,
      9 ( 0.00%)                      data.specialization_kind,
     36 ( 0.00%)                      self.def_path_hash(item_id),
      9 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
     81 ( 0.00%)      }
      .           
    675 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    300 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    375 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    198 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    150 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  1,650 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    300 ( 0.00%)              data.discr,
    450 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     48 ( 0.00%)                      did: self.local_def_id(index),
     96 ( 0.00%)                      name: self.item_ident(index, sess).name,
     96 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     75 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    675 ( 0.00%)      }
      .           
    450 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    120 ( 0.00%)          let kind = self.kind(item_id);
     60 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    138 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     30 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    867 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    192 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    450 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    210 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    355 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    355 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     20 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    382 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    540 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    125 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    120 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     96 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,533 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     64 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
    792 ( 0.00%)          match self.kind(id) {
    660 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    321 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     18 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      1 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      6 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    275 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  1,594 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,245 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     60 ( 0.00%)          tcx.arena.alloc_from_iter(
     40 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      4 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    115 ( 0.00%)                  let id = self.local_def_id(def_index);
    115 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     18 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    136 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    272 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    544 ( 0.00%)              for child_index in children.decode((self, sess)) {
  5,124 ( 0.01%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,026 ( 0.00%)                      let kind = self.def_kind(child_index);
    684 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,278 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     24 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
    123 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
     41 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    356 ( 0.00%)          match self.kind(id) {
     14 ( 0.00%)              EntryKind::Mod(exports) => {
 10,724 ( 0.01%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,701 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
      8 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    550 ( 0.00%)          match self.kind(id) {
    440 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
     84 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     36 ( 0.00%)              tcx.arena.alloc_from_iter(
     12 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
    480 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    280 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
    298 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
     31 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    217 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     18 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
    720 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
    360 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     45 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  2,285 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    971 ( 0.00%)                  let vdata = data.decode(self);
    566 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,431 ( 0.00%)      }
      .           
    108 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    291 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
     81 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,195 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
 11,100 ( 0.01%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     80 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     32 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
      8 ( 0.00%)          tcx.arena.alloc_from_iter(
     10 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     34 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  1,980 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    220 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    374 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    256 ( 0.00%)              tcx.arena.alloc_from_iter(
    128 ( 0.00%)                  impls
      .                               .decode(self)
  2,510 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  1,760 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     32 ( 0.00%)          let def_key = self.def_key(id);
     40 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
     72 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     40 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    100 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
      6 ( 0.00%)          match self.kind(id) {
      1 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     36 ( 0.00%)          let constness = match self.kind(id) {
      4 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
     12 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
     75 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 17,346 ( 0.02%)      fn def_key(self, index: DefIndex) -> DefKey {
  4,956 ( 0.01%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 10,935 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 19,824 ( 0.02%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    224 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    165 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
    784 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
    896 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 33,668 ( 0.04%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 33,668 ( 0.04%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,875 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 33,655 ( 0.04%)          self.cdata.source_map_import_info.get_or_init(|| {
     27 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,075 ( 0.01%)                          mut name,
  3,450 ( 0.00%)                          src_hash,
    575 ( 0.00%)                          start_pos,
  1,150 ( 0.00%)                          end_pos,
  2,875 ( 0.00%)                          mut lines,
  2,875 ( 0.00%)                          mut multibyte_chars,
  3,450 ( 0.00%)                          mut non_narrow_chars,
  2,875 ( 0.00%)                          mut normalized_pos,
  3,450 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,150 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
740,748 ( 0.81%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,596 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,350 ( 0.01%)                      let local_version = sess.source_map().new_imported_source_file(
  7,475 ( 0.01%)                          name,
  4,025 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,150 ( 0.00%)                          self.cnum,
  2,875 ( 0.00%)                          lines,
  3,450 ( 0.00%)                          multibyte_chars,
  2,875 ( 0.00%)                          non_narrow_chars,
  2,300 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,725 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    240 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     60 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     60 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     20 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    460 ( 0.00%)          CrateMetadata {
     20 ( 0.00%)              blob,
     60 ( 0.00%)              root,
     80 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     80 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    140 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     80 ( 0.00%)              cnum_map,
    100 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    240 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    180 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    100 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    104 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     96 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     44 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  5,091 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    715 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

330,405 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs
--------------------------------------------------------------------------------
Ir              

-- line 30 ----------------------------------------
     .                               bucket.write(i - offset);
     .                           } else if i >= start {
     .                               self.indices.erase(bucket);
     .                           }
     .                       }
     .                   }
     .               }
     .           
87,054 ( 0.09%)      pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>
     .               where
     .                   K: Eq,
     .               {
     .                   let eq = equivalent(&key, &self.entries);
   535 ( 0.00%)          match self.indices.find(hash.get(), eq) {
     .                       // SAFETY: The entry is created with a live raw bucket, at the same time
     .                       // we have a &mut reference to the map, so it can not be modified further.
 3,075 ( 0.00%)              Some(raw_bucket) => Entry::Occupied(OccupiedEntry {
     .                           map: self,
     .                           raw_bucket,
 1,116 ( 0.00%)                  key,
     .                       }),
31,738 ( 0.03%)              None => Entry::Vacant(VacantEntry {
     .                           map: self,
     .                           hash,
34,854 ( 0.04%)                  key,
     .                       }),
     .                   }
71,211 ( 0.08%)      }
     .           
     .               pub(super) fn indices_mut(&mut self) -> impl Iterator<Item = &mut usize> {
     .                   // SAFETY: we're not letting any of the buckets escape this function,
     .                   // only the item references that are appropriately bound to `&mut self`.
     .                   unsafe { self.indices.iter().map(|bucket| bucket.as_mut()) }
     .               }
     .           
     .               /// Return the raw bucket for the given index
-- line 65 ----------------------------------------
-- line 139 ----------------------------------------
     .               pub fn index(&self) -> usize {
     .                   // SAFETY: we have &mut map keep keeping the bucket stable
     .                   unsafe { self.raw_bucket.read() }
     .               }
     .           
     .               /// Converts into a mutable reference to the entry's value in the map,
     .               /// with a lifetime bound to the map itself.
     .               pub fn into_mut(self) -> &'a mut V {
   689 ( 0.00%)          let index = self.index();
 2,067 ( 0.00%)          &mut self.map.entries[index].value
     .               }
     .           
     .               /// Remove and return the key, value pair stored in the map for this entry
     .               ///
     .               /// Like `Vec::swap_remove`, the pair is removed by swapping it with the
     .               /// last element of the map and popping it off. **This perturbs
     .               /// the position of what used to be the last element!**
     .               ///
-- line 156 ----------------------------------------

31,594 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
48,410 ( 0.05%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
 3,252 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
    40 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    27 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
     9 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    24 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
   807 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 7,957 ( 0.01%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
15,977 ( 0.02%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
15,021 ( 0.02%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
   466 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
    50 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
   466 ( 0.00%)      }
     .           
   247 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
     .                   match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
    42 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
   221 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
     6 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
     .                       Entry::Vacant(entry) => entry.insert(default),
     .                   }
     .               }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
47,960 ( 0.05%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
11,990 ( 0.01%)          match self {
   186 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 5,885 ( 0.01%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
47,960 ( 0.05%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
18,298 ( 0.02%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
 5,228 ( 0.01%)          match self {
   503 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 6,333 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
20,912 ( 0.02%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
   335 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 6,465 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
     6 ( 0.00%)          &mut self.map.entries[i].value
   312 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

45,805 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
  1,181 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      2 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      1 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
    952 ( 0.00%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
    210 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  2,671 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 17,958 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 33,541 ( 0.04%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
      2 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  5,006 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 10,624 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    200 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
    724 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
697,489 ( 0.76%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
    480 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 93,806 ( 0.10%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    584 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1475 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
      .                   fn eq(&self, other: &&B) -> bool {
  2,592 ( 0.00%)              PartialEq::eq(*self, *other)
    227 ( 0.00%)          }
      .                   #[inline]
      .                   fn ne(&self, other: &&B) -> bool {
     60 ( 0.00%)              PartialEq::ne(*self, *other)
     49 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------

 44,160 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir               

-- line 109 ----------------------------------------
      .               /// The resolution of `module_path`.
      .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
      .               pub vis: Cell<ty::Visibility>,
      .               pub used: Cell<bool>,
      .           }
      .           
      .           impl<'a> Import<'a> {
      .               pub fn is_glob(&self) -> bool {
     41 ( 0.00%)          matches!(self.kind, ImportKind::Glob { .. })
      .               }
      .           
      .               pub fn is_nested(&self) -> bool {
      .                   match self.kind {
      .                       ImportKind::Single { nested, .. } => nested,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               crate fn crate_lint(&self) -> CrateLint {
     35 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
     65 ( 0.00%)      }
      .           }
      .           
 17,427 ( 0.02%)  #[derive(Clone, Default, Debug)]
      .           /// Records information about the resolution of a name in a namespace of a module.
      .           pub struct NameResolution<'a> {
      .               /// Single imports that may define the name in the namespace.
      .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
      .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
      .               /// The least shadowable known binding for this name, or None if there are no known bindings.
      .               pub binding: Option<&'a NameBinding<'a>>,
      .               shadowed_glob: Option<&'a NameBinding<'a>>,
      .           }
      .           
      .           impl<'a> NameResolution<'a> {
      .               // Returns the binding for the name if it is known or None if it not known.
      .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
  5,776 ( 0.01%)          self.binding.and_then(|binding| {
     13 ( 0.00%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
      .                           Some(binding)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
    441 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
      .                       ident,
      .                       ns,
      .                       parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
      .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
      .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
  4,788 ( 0.01%)      crate fn resolve_ident_in_module_unadjusted_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   restricted_shadowing: bool,
      .                   record_used: bool,
      .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 259 ----------------------------------------
      .                               path_span,
      .                           );
      .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
      .                       }
      .                   };
      .           
      .                   let key = self.new_key(ident, ns);
      .                   let resolution =
  1,824 ( 0.00%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
      .           
    862 ( 0.00%)          if let Some(binding) = resolution.binding {
     83 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
      .                           if let NameBindingKind::Res(_, true) = binding.kind {
      .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
      .                           }
      .                       }
      .                   }
      .           
    912 ( 0.00%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
    291 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
      .                           if ptr::eq(binding, unusable_binding) {
      .                               return Err((Determined, Weak::No));
      .                           }
      .                       }
    150 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
    164 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
      .                   };
      .           
    456 ( 0.00%)          if record_used {
    186 ( 0.00%)              return resolution
      .                           .binding
      .                           .and_then(|binding| {
      .                               // If the primary binding is unusable, search further and return the shadowed glob
      .                               // binding if it exists. What we really want here is having two separate scopes in
      .                               // a module - one for non-globs and one for globs, but until that's done use this
      .                               // hack to avoid inconsistent resolution ICEs during import validation.
    234 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
      .                                   if ptr::eq(binding, unusable_binding) {
      .                                       return resolution.shadowed_glob;
      .                                   }
      .                               }
      .                               Some(binding)
      .                           })
      .                           .ok_or((Determined, Weak::No))
      .                           .and_then(|binding| {
    108 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
      .                                   Err((Determined, Weak::No))
      .                               } else {
    270 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
      .           
    135 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
      .                                       // Forbid expanded shadowing to avoid time travel.
      .                                       if restricted_shadowing
      .                                           && binding.expansion != LocalExpnId::ROOT
      .                                           && binding.res() != shadowed_glob.res()
      .                                       {
      .                                           self.ambiguity_errors.push(AmbiguityError {
      .                                               kind: AmbiguityKind::GlobVsExpanded,
      .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
      .                                               b1: binding,
      .                                               b2: shadowed_glob,
      .                                               misc1: AmbiguityErrorMisc::None,
      .                                               misc2: AmbiguityErrorMisc::None,
      .                                           });
      .                                       }
      .                                   }
      .           
    225 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
      .                                       self.privacy_errors.push(PrivacyError {
      .                                           ident,
      .                                           binding,
      .                                           dedup_span: path_span,
      .                                       });
      .                                   }
      .           
      .                                   Ok(binding)
      .                               }
      .                           });
      .                   }
      .           
      .                   // Items and single imports are not shadowable, if we have one, then it's determined.
    405 ( 0.00%)          if let Some(binding) = resolution.binding {
      7 ( 0.00%)              if !binding.is_glob_import() {
      .                           return check_usable(self, binding);
      .                       }
      .                   }
      .           
      .                   // --- From now on we either have a glob resolution or no resolution. ---
      .           
      .                   // Check if one of single imports can still define the name,
      .                   // if it can then our result is not determined and can be invalidated.
    910 ( 0.00%)          for single_import in &resolution.single_imports {
      .                       if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match single_import.imported_module.get() {
      .                           Some(x) => x,
      .                           None => return Err((Undetermined, Weak::No)),
      .                       };
      .                       let ident = match single_import.kind {
-- line 358 ----------------------------------------
-- line 385 ----------------------------------------
      .                   // Additionally, any macro in any module can plant names in the root module if it creates
      .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
      .                   // module has unresolved invocations.
      .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
      .                   // progress, we have to ignore those potential unresolved invocations from other modules
      .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
      .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
      .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
    455 ( 0.00%)          if let Some(binding) = resolution.binding {
      .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
      .                           return check_usable(self, binding);
      .                       } else {
      .                           return Err((Undetermined, Weak::No));
      .                       }
      .                   }
      .           
      .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
      .                   // Now we are in situation when new item/import can appear only from a glob or a macro
      .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
      .                   // shadow names from outer scopes, so we can freely fallback from module search to search
      .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
      .                   // scopes we return `Undetermined` with `Weak::Yes`.
      .           
      .                   // Check if one of unexpanded macros can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
     91 ( 0.00%)          if unexpanded_macros {
      .                       return Err((Undetermined, Weak::Yes));
      .                   }
      .           
      .                   // Check if one of glob imports can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    364 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
      .                       if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match glob_import.imported_module.get() {
      .                           Some(ModuleOrUniformRoot::Module(module)) => module,
      .                           Some(_) => continue,
      .                           None => return Err((Undetermined, Weak::Yes)),
      .                       };
-- line 425 ----------------------------------------
-- line 452 ----------------------------------------
      .                               continue;
      .                           }
      .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
      .                       }
      .                   }
      .           
      .                   // No resolution and no one else can define the name - determinate error.
      .                   Err((Determined, Weak::No))
  4,104 ( 0.00%)      }
      .           
      .               // Given a binding and an import that resolves to it,
      .               // return the corresponding binding defined by the import.
    610 ( 0.00%)      crate fn import(
      .                   &self,
      .                   binding: &'a NameBinding<'a>,
      .                   import: &'a Import<'a>,
      .               ) -> &'a NameBinding<'a> {
    610 ( 0.00%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
      .                       || pub_use_of_private_extern_crate_hack(import, binding)
      .                   {
      .                       import.vis.get()
      .                   } else {
      .                       binding.vis
      .                   };
      .           
    183 ( 0.00%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
      .                       if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
      .                           max_vis.set(vis)
      .                       }
      .                   }
      .           
     61 ( 0.00%)          self.arenas.alloc_name_binding(NameBinding {
      .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
      .                       ambiguity: None,
     61 ( 0.00%)              span: import.span,
      .                       vis,
     61 ( 0.00%)              expansion: import.parent_scope.expansion,
      .                   })
    488 ( 0.00%)      }
      .           
      .               // Define the name or return the existing binding if there is a collision.
 68,628 ( 0.07%)      crate fn try_define(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .                   binding: &'a NameBinding<'a>,
      .               ) -> Result<(), &'a NameBinding<'a>> {
      .                   let res = binding.res();
102,942 ( 0.11%)          self.check_reserved_macro_name(key.ident, res);
      .                   self.set_binding_parent_module(binding, module);
 34,314 ( 0.04%)          self.update_resolution(module, key, |this, resolution| {
      .                       if let Some(old_binding) = resolution.binding {
      .                           if res == Res::Err {
      .                               // Do not override real bindings with `Res::Err`s from error recovery.
      .                               return Ok(());
      .                           }
      .                           match (old_binding.is_glob_import(), binding.is_glob_import()) {
      .                               (true, true) => {
      .                                   if res != old_binding.res() {
-- line 510 ----------------------------------------
-- line 535 ----------------------------------------
      .                                   }
      .                                   resolution.shadowed_glob = Some(glob_binding);
      .                               }
      .                               (false, false) => {
      .                                   return Err(old_binding);
      .                               }
      .                           }
      .                       } else {
 17,157 ( 0.02%)                  resolution.binding = Some(binding);
      .                       }
      .           
      .                       Ok(())
      .                   })
 51,471 ( 0.06%)      }
      .           
      .               fn ambiguity(
      .                   &self,
      .                   kind: AmbiguityKind,
      .                   primary_binding: &'a NameBinding<'a>,
      .                   secondary_binding: &'a NameBinding<'a>,
      .               ) -> &'a NameBinding<'a> {
      .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
      .               // If the resolution becomes a success, define it in the module's glob importers.
      .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
      .               where
      .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
      .               {
      .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
      .                   // during which the resolution might end up getting re-defined via a glob cycle.
      .                   let (binding, t) = {
 91,648 ( 0.10%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
      .                       let old_binding = resolution.binding();
      .           
      .                       let t = f(self, resolution);
      .           
      .                       match resolution.binding() {
      .                           _ if old_binding.is_some() => return t,
      .                           None => return t,
      .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 643 ----------------------------------------
      .               // This is a fixed-point algorithm. We resolve imports until our efforts
      .               // are stymied by an unresolved import; then we bail out of the current
      .               // module and continue. We terminate successfully once no more imports
      .               // remain or unsuccessfully when no forward progress in resolving imports
      .               // is made.
      .           
      .               /// Resolves all imports for the crate. This method performs the fixed-
      .               /// point iteration.
     16 ( 0.00%)      pub fn resolve_imports(&mut self) {
     10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
     19 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
      .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
     20 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
      .                           match self.resolve_import(&import) {
     11 ( 0.00%)                      true => self.r.determined_imports.push(import),
      .                               false => self.r.indeterminate_imports.push(import),
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn finalize_imports(&mut self) {
      2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
      4 ( 0.00%)              self.finalize_resolutions_in(module);
      .                   }
      .           
      .                   let mut seen_spans = FxHashSet::default();
      .                   let mut errors = vec![];
      .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
      1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
      1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
      .           
     12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
      .                       .into_iter()
      .                       .map(|i| (false, i))
      .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
      .                   {
     60 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
      .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
      .                               if source.name == kw::SelfLower {
      .                                   // Silence `unresolved import` error if E0429 is already emitted
      .                                   if let Err(Determined) = source_bindings.value_ns.get() {
      .                                       continue;
      .                                   }
      .                               }
      .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
      .                               let path = import_path_to_string(
      .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                                   &import.kind,
      .                                   err.span,
      .                               );
      .                               errors.push((path, err));
      .                               prev_root_id = import.root_id;
      .                           }
     20 ( 0.00%)              } else if is_indeterminate {
      .                           // Consider erroneous imports used to avoid duplicate diagnostics.
      .                           self.r.used_imports.insert(import.id);
      .                           let path = import_path_to_string(
      .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                               &import.kind,
      .                               import.span,
      .                           );
      .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
      .                               label: None,
      .                               note: Vec::new(),
      .                               suggestion: None,
      .                           };
      .                           errors.push((path, err));
      .                       }
      .                   }
      .           
      1 ( 0.00%)          if !errors.is_empty() {
      .                       self.throw_unresolved_import_error(errors, None);
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn throw_unresolved_import_error(
      .                   &self,
      .                   errors: Vec<(String, UnresolvedImportError)>,
      .                   span: Option<MultiSpan>,
      .               ) {
      .                   /// Upper limit on the number of `span_label` messages.
      .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
      .               /// If successful, the resolved bindings are written into the module.
      .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
      .                   debug!(
      .                       "(resolving import for module) resolving import `{}::...` in `{}`",
      .                       Segment::names_to_string(&import.module_path),
      .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
      .                   );
      .           
     30 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
      .                       module
      .                   } else {
      .                       // For better failure detection, pretend that the import will
      .                       // not define any names while resolving its module path.
      .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                       let path_res = self.r.resolve_path(
      .                           &import.module_path,
      .                           None,
     10 ( 0.00%)                  &import.parent_scope,
      .                           false,
      .                           import.span,
      .                           import.crate_lint(),
      .                       );
      .                       import.vis.set(orig_vis);
      .           
     70 ( 0.00%)              match path_res {
     50 ( 0.00%)                  PathResult::Module(module) => module,
      .                           PathResult::Indeterminate => return false,
      .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
      .                       }
      .                   };
      .           
      .                   import.imported_module.set(Some(module));
    113 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
      9 ( 0.00%)                  ref source_bindings,
      9 ( 0.00%)                  ref target_bindings,
      9 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      .                       ImportKind::Glob { .. } => {
      .                           self.resolve_glob_import(import);
      .                           return true;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
      9 ( 0.00%)          let mut indeterminate = false;
    387 ( 0.00%)          self.r.per_ns(|this, ns| {
     81 ( 0.00%)              if !type_ns_only || ns == TypeNS {
    108 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
      .                               // For better failure detection, pretend that the import will
      .                               // not define any names while resolving its module path.
     27 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                               let binding = this.resolve_ident_in_module(
     81 ( 0.00%)                          module,
     81 ( 0.00%)                          source,
      .                                   ns,
     27 ( 0.00%)                          &import.parent_scope,
      .                                   false,
     27 ( 0.00%)                          import.span,
      .                               );
      .                               import.vis.set(orig_vis);
      .                               source_bindings[ns].set(binding);
      .                           } else {
      .                               return;
      .                           };
      .           
     27 ( 0.00%)                  let parent = import.parent_scope.module;
     63 ( 0.00%)                  match source_bindings[ns].get() {
      .                               Err(Undetermined) => indeterminate = true,
      .                               // Don't update the resolution, because it was never added.
     36 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
      .                               Err(Determined) => {
     36 ( 0.00%)                          let key = this.new_key(target, ns);
      .                                   this.update_resolution(parent, key, |_, resolution| {
     36 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
      .                                   });
      .                               }
      .                               Ok(binding) if !binding.is_importable() => {
      .                                   let msg = format!("`{}` is not directly importable", target);
      .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
      .                                       .span_label(import.span, "cannot be imported directly")
      .                                       .emit();
      .                                   // Do not import this illegal binding. Import a dummy binding and pretend
      .                                   // everything is fine
      .                                   this.import_dummy_binding(import);
      .                               }
      .                               Ok(binding) => {
     36 ( 0.00%)                          let imported_binding = this.import(binding, import);
      9 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
     27 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
      .                               }
      .                           }
      .                       }
    216 ( 0.00%)          });
      .           
     27 ( 0.00%)          !indeterminate
      .               }
      .           
      .               /// Performs final import resolution, consistency checks and error reporting.
      .               ///
      .               /// Optionally returns an unresolved import error. This error is buffered and used to
      .               /// consolidate multiple unresolved import errors into a single diagnostic.
    100 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
      .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
     40 ( 0.00%)          let orig_unusable_binding = match &import.kind {
      .                       ImportKind::Single { target_bindings, .. } => {
     18 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
      .                       }
      .                       _ => None,
      .                   };
     20 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
      .                   let path_res = self.r.resolve_path(
      .                       &import.module_path,
      .                       None,
     10 ( 0.00%)              &import.parent_scope,
      .                       true,
     10 ( 0.00%)              import.span,
      .                       import.crate_lint(),
      .                   );
     10 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
     10 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
      9 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
      .                   }
      .                   import.vis.set(orig_vis);
     50 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
      .                       // Consider erroneous imports used to avoid duplicate diagnostics.
      .                       self.r.used_imports.insert(import.id);
      .                   }
      .                   let module = match path_res {
     30 ( 0.00%)              PathResult::Module(module) => {
      .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
     30 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
     30 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
      .                                   span_bug!(import.span, "inconsistent resolution for an import");
      .                               }
      .                           } else if self.r.privacy_errors.is_empty() {
      .                               let msg = "cannot determine resolution for the import";
      .                               let msg_note = "import resolution is stuck, try simplifying other imports";
      .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
      .                           }
      .           
     30 ( 0.00%)                  module
      .                       }
      .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
      .                           if no_ambiguity {
      .                               assert!(import.imported_module.get().is_none());
      .                               self.r
      .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
      .                           }
      .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
      .                               assert!(import.imported_module.get().is_none());
      .                           }
      .                           // The error was already reported earlier.
      .                           return None;
      .                       }
      .                       PathResult::Indeterminate => unreachable!(),
      .                   };
      .           
    113 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
      9 ( 0.00%)                  ref source_bindings,
      9 ( 0.00%)                  ref target_bindings,
      9 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      2 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
      3 ( 0.00%)                  if import.module_path.len() <= 1 {
      .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                               // 2 segments, so the `resolve_path` above won't trigger it.
      .                               let mut full_path = import.module_path.clone();
      .                               full_path.push(Segment::from_ident(Ident::empty()));
      .                               self.r.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      .                                   import.span,
      .                                   None,
      .                               );
      .                           }
      .           
      4 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
      1 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
      .                                   // Importing a module into itself is not allowed.
      .                                   return Some(UnresolvedImportError {
      .                                       span: import.span,
      .                                       label: Some(String::from("cannot glob-import a module into itself")),
      .                                       note: Vec::new(),
      .                                       suggestion: None,
      .                                   });
      .                               }
      .                           }
      1 ( 0.00%)                  if !is_prelude &&
      .                              max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
      .                              !max_vis.get().is_at_least(import.vis.get(), &*self)
      .                           {
      .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
      .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
      .                           }
      .                           return None;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     18 ( 0.00%)          let mut all_ns_err = true;
    414 ( 0.00%)          self.r.per_ns(|this, ns| {
     81 ( 0.00%)              if !type_ns_only || ns == TypeNS {
     27 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                           let orig_unusable_binding =
     54 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
      .                           let binding = this.resolve_ident_in_module(
     81 ( 0.00%)                      module,
    108 ( 0.00%)                      ident,
      .                               ns,
     27 ( 0.00%)                      &import.parent_scope,
      .                               true,
      .                               import.span,
      .                           );
     54 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
     54 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                           import.vis.set(orig_vis);
      .           
      .                           match binding {
      .                               Ok(binding) => {
      .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
     27 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
      9 ( 0.00%)                              all_ns_err = false;
     27 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
      9 ( 0.00%)                                  if target.name == kw::Underscore
      .                                               && initial_binding.is_extern_crate()
      .                                               && !initial_binding.is_import()
      .                                           {
      .                                               this.record_use(
      .                                                   ident,
      .                                                   target_binding,
      .                                                   import.module_path.is_empty(),
      .                                               );
      .                                           }
      .                                       }
      .                                       initial_binding.res()
      .                                   });
      .                                   let res = binding.res();
    126 ( 0.00%)                          if let Ok(initial_res) = initial_res {
     27 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
      .                                           span_bug!(import.span, "inconsistent resolution for an import");
      .                                       }
      .                                   } else if res != Res::Err
      .                                       && this.ambiguity_errors.is_empty()
      .                                       && this.privacy_errors.is_empty()
      .                                   {
      .                                       let msg = "cannot determine resolution for the import";
      .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
      .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
      .                                   // always block globs, even if they are not yet resolved, so that this kind of
      .                                   // self-inconsistent resolution never happens.
      .                                   // Re-enable the assert when the issue is fixed.
      .                                   // assert!(result[ns].get().is_err());
      .                               }
      .                           }
      .                       }
    216 ( 0.00%)          });
      .           
     18 ( 0.00%)          if all_ns_err {
      .                       let mut all_ns_failed = true;
      .                       self.r.per_ns(|this, ns| {
      .                           if !type_ns_only || ns == TypeNS {
      .                               let binding = this.resolve_ident_in_module(
      .                                   module,
      .                                   ident,
      .                                   ns,
      .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           })
      .                       } else {
      .                           // `resolve_ident_in_module` reported a privacy error.
      .                           self.r.import_dummy_binding(import);
      .                           None
      .                       };
      .                   }
      .           
      9 ( 0.00%)          let mut reexport_error = None;
      9 ( 0.00%)          let mut any_successful_reexport = false;
     18 ( 0.00%)          let mut crate_private_reexport = false;
    108 ( 0.00%)          self.r.per_ns(|this, ns| {
     63 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
     27 ( 0.00%)                  let vis = import.vis.get();
     54 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
      .                               reexport_error = Some((ns, binding));
      .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
      .                                   if binding_def_id.is_top_level_module() {
      .                                       crate_private_reexport = true;
      .                                   }
      .                               }
      .                           } else {
     18 ( 0.00%)                      any_successful_reexport = true;
      .                           }
      .                       }
      .                   });
      .           
      .                   // All namespaces must be re-exported with extra visibility for an error to occur.
     18 ( 0.00%)          if !any_successful_reexport {
      .                       let (ns, binding) = reexport_error.unwrap();
      .                       if pub_use_of_private_extern_crate_hack(import, binding) {
      .                           let msg = format!(
      .                               "extern crate `{}` is private, and cannot be \
      .                                              re-exported (error E0365), consider declaring with \
      .                                              `pub`",
      .                               ident
      .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
      .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
      .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
      .                                   .span_note(import.span, &note_msg)
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .           
     27 ( 0.00%)          if import.module_path.len() <= 1 {
      .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                       // 2 segments, so the `resolve_path` above won't trigger it.
      .                       let mut full_path = import.module_path.clone();
     15 ( 0.00%)              full_path.push(Segment::from_ident(ident));
     35 ( 0.00%)              self.r.per_ns(|this, ns| {
     32 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
     15 ( 0.00%)                      this.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      5 ( 0.00%)                          import.span,
      .                                   Some(binding),
      .                               );
      .                           }
      .                       });
      .                   }
      .           
      .                   // Record what this import resolves to for later uses in documentation,
      .                   // this may resolve to either a value or a type, but for documentation
      .                   // purposes it's good enough to just favor one over the other.
    252 ( 0.00%)          self.r.per_ns(|this, ns| {
    100 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
    144 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
      .                       }
    216 ( 0.00%)          });
      .           
     81 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
      .           
      .                   debug!("(resolving single import) successfully resolved import");
      .                   None
     80 ( 0.00%)      }
      .           
      .               fn check_for_redundant_imports(
      .                   &mut self,
      .                   ident: Ident,
      .                   import: &'b Import<'b>,
      .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
      .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
      .                   target: Ident,
      .               ) {
      .                   // Skip if the import was produced by a macro.
      9 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
      .                       return;
      .                   }
      .           
      .                   // Skip if we are inside a named module (in contrast to an anonymous
      .                   // module defined by a block).
     27 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
      .                       return;
      .                   }
      .           
      .                   let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      .                   let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      .                   self.r.per_ns(|this, ns| {
-- line 1304 ----------------------------------------
-- line 1350 ----------------------------------------
      .                   let module = match import.imported_module.get().unwrap() {
      .                       ModuleOrUniformRoot::Module(module) => module,
      .                       _ => {
      .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
      .                           return;
      .                       }
      .                   };
      .           
      3 ( 0.00%)          if module.is_trait() {
      .                       self.r.session.span_err(import.span, "items in traits are not importable");
      .                       return;
      1 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
      .                       return;
      4 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
      2 ( 0.00%)              self.r.prelude = Some(module);
      .                       return;
      .                   }
      .           
      .                   // Add to module's glob_importers
      .                   module.glob_importers.borrow_mut().push(import);
      .           
      .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
      .                   // since it might get updated via a glob cycle.
-- line 1372 ----------------------------------------
-- line 1394 ----------------------------------------
      .                   // Record the destination of this import
      .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
      .               }
      .           
      .               // Miscellaneous post-processing, including recording re-exports,
      .               // reporting conflicts, and reporting unresolved imports.
      .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
      .                   // Since import resolution is finished, globs will not define any more names.
     16 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
      .           
      .                   let mut reexports = Vec::new();
      .           
     20 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
      .                       // Filter away ambiguous imports and anything that has def-site hygiene.
      .                       // FIXME: Implement actual cross-crate hygiene.
      .                       let is_good_import =
     26 ( 0.00%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
     35 ( 0.00%)              if is_good_import || binding.is_macro_def() {
      .                           let res = binding.res().expect_non_local();
      .                           if res != def::Res::Err {
     36 ( 0.00%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
      .                           }
      .                       }
      .                   });
      .           
      4 ( 0.00%)          if !reexports.is_empty() {
      9 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
      .                           // Call to `expect_local` should be fine because current
      .                           // code is only called for local modules.
      .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1428 ----------------------------------------

 35,805 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs
--------------------------------------------------------------------------------
Ir              

-- line 84 ----------------------------------------
     .               }
     .               let sub_ns = |kind| match kind {
     .                   MacroKind::Bang => SubNS::Bang,
     .                   MacroKind::Attr | MacroKind::Derive => SubNS::AttrLike,
     .               };
     .               let candidate = candidate.map(sub_ns);
     .               let requirement = requirement.map(sub_ns);
     .               // "No specific sub-namespace" means "matches anything" for both requirements and candidates.
   112 ( 0.00%)      candidate.is_none() || requirement.is_none() || candidate == requirement
     .           }
     .           
     .           // We don't want to format a path using pretty-printing,
     .           // `format!("{}", path)`, because that tries to insert
     .           // line-breaks and is slow.
     .           fn fast_print_path(path: &ast::Path) -> Symbol {
     .               if path.segments.len() == 1 {
     .                   path.segments[0].ident.name
-- line 100 ----------------------------------------
-- line 108 ----------------------------------------
     .                           path_str.push_str(segment.ident.as_str())
     .                       }
     .                   }
     .                   Symbol::intern(&path_str)
     .               }
     .           }
     .           
     .           /// The code common between processing `#![register_tool]` and `#![register_attr]`.
    22 ( 0.00%)  fn registered_idents(
     .               sess: &Session,
     .               attrs: &[ast::Attribute],
     .               attr_name: Symbol,
     .               descr: &str,
     .           ) -> FxHashSet<Ident> {
     .               let mut registered = FxHashSet::default();
     2 ( 0.00%)      for attr in sess.filter_by_name(attrs, attr_name) {
     .                   for nested_meta in attr.meta_item_list().unwrap_or_default() {
     .                       match nested_meta.ident() {
     .                           Some(ident) => {
     .                               if let Some(old_ident) = registered.replace(ident) {
     .                                   let msg = format!("{} `{}` was already registered", descr, ident);
     .                                   sess.struct_span_err(ident.span, &msg)
     .                                       .span_label(old_ident.span, "already registered here")
     .                                       .emit();
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
     .                               let msg = format!("`{}` only accepts identifiers", attr_name);
     .                               let span = nested_meta.span();
     .                               sess.struct_span_err(span, &msg).span_label(span, "not an identifier").emit();
     .                           }
     .                       }
     .                   }
     .               }
     .               registered
    16 ( 0.00%)  }
     .           
     9 ( 0.00%)  crate fn registered_attrs_and_tools(
     .               sess: &Session,
     .               attrs: &[ast::Attribute],
     .           ) -> (FxHashSet<Ident>, FxHashSet<Ident>) {
     5 ( 0.00%)      let registered_attrs = registered_idents(sess, attrs, sym::register_attr, "attribute");
     8 ( 0.00%)      let mut registered_tools = registered_idents(sess, attrs, sym::register_tool, "tool");
     .               // We implicitly add `rustfmt` and `clippy` to known tools,
     .               // but it's not an error to register them explicitly.
     .               let predefined_tools = [sym::clippy, sym::rustfmt];
     .               registered_tools.extend(predefined_tools.iter().cloned().map(Ident::with_dummy_span));
     8 ( 0.00%)      (registered_attrs, registered_tools)
     7 ( 0.00%)  }
     .           
     .           // Some feature gates for inner attributes are reported as lints for backward compatibility.
     .           fn soft_custom_inner_attributes_gate(path: &ast::Path, invoc: &Invocation) -> bool {
     .               match &path.segments[..] {
     .                   // `#![test]`
     .                   [seg] if seg.ident.name == sym::test => return true,
     .                   // `#![rustfmt::skip]` on out-of-line modules
     .                   [seg1, seg2] if seg1.ident.name == sym::rustfmt && seg2.ident.name == sym::skip => {
-- line 164 ----------------------------------------
-- line 171 ----------------------------------------
     .                       }
     .                   }
     .                   _ => {}
     .               }
     .               false
     .           }
     .           
     .           impl<'a> ResolverExpand for Resolver<'a> {
   327 ( 0.00%)      fn next_node_id(&mut self) -> NodeId {
     .                   self.next_node_id()
   654 ( 0.00%)      }
     .           
     .               fn invocation_parent(&self, id: LocalExpnId) -> LocalDefId {
     .                   self.invocation_parents[&id].0
     .               }
     .           
     .               fn resolve_dollar_crates(&mut self) {
     1 ( 0.00%)          hygiene::update_dollar_crate_names(|ctxt| {
     .                       let ident = Ident::new(kw::DollarCrate, DUMMY_SP.with_ctxt(ctxt));
    27 ( 0.00%)              match self.resolve_crate_root(ident).kind {
     .                           ModuleKind::Def(.., name) if name != kw::Empty => name,
     .                           _ => kw::Crate,
     .                       }
     .                   });
     .               }
     .           
     8 ( 0.00%)      fn visit_ast_fragment_with_placeholders(
     .                   &mut self,
     .                   expansion: LocalExpnId,
     .                   fragment: &AstFragment,
     .               ) {
     .                   // Integrate the new AST fragment into all the definition and module structures.
     .                   // We are inside the `expansion` now, but other parent scope components are still the same.
     4 ( 0.00%)          let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };
     .                   let output_macro_rules_scope = self.build_reduced_graph(fragment, parent_scope);
     .                   self.output_macro_rules_scopes.insert(expansion, output_macro_rules_scope);
     .           
     .                   parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);
     8 ( 0.00%)      }
     .           
   308 ( 0.00%)      fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind) {
   264 ( 0.00%)          if self.builtin_macros.insert(name, BuiltinMacroState::NotYetSeen(ext)).is_some() {
     .                       self.session
     .                           .diagnostic()
     .                           .bug(&format!("built-in macro `{}` was already registered", name));
     .                   }
   220 ( 0.00%)      }
     .           
     .               // Create a new Expansion with a definition site of the provided module, or
     .               // a fake empty `#[no_implicit_prelude]` module if no module is provided.
     9 ( 0.00%)      fn expansion_for_ast_pass(
     .                   &mut self,
     .                   call_site: Span,
     .                   pass: AstPass,
     .                   features: &[Symbol],
     .                   parent_module_id: Option<NodeId>,
     .               ) -> LocalExpnId {
     .                   let parent_module =
     .                       parent_module_id.map(|module_id| self.local_def_id(module_id).to_def_id());
     .                   let expn_id = LocalExpnId::fresh(
    11 ( 0.00%)              ExpnData::allow_unstable(
     .                           ExpnKind::AstPass(pass),
     .                           call_site,
     7 ( 0.00%)                  self.session.edition(),
     .                           features.into(),
     .                           None,
     .                           parent_module,
     .                       ),
     .                       self.create_stable_hashing_context(),
     .                   );
     .           
     .                   let parent_scope =
     .                       parent_module.map_or(self.empty_module, |def_id| self.expect_module(def_id));
     .                   self.ast_transform_scopes.insert(expn_id, parent_scope);
     .           
     .                   expn_id
     9 ( 0.00%)      }
     .           
     2 ( 0.00%)      fn resolve_imports(&mut self) {
     6 ( 0.00%)          ImportResolver { r: self }.resolve_imports()
     4 ( 0.00%)      }
     .           
     .               fn resolve_macro_invocation(
     .                   &mut self,
     .                   invoc: &Invocation,
     .                   eager_expansion_root: LocalExpnId,
     .                   force: bool,
     .               ) -> Result<Lrc<SyntaxExtension>, Indeterminate> {
     .                   let invoc_id = invoc.expansion_data.id;
-- line 259 ----------------------------------------
-- line 309 ----------------------------------------
     .                           def_id.map(|def_id| self.macro_def_scope(def_id).nearest_parent_mod()),
     .                       ),
     .                       self.create_stable_hashing_context(),
     .                   );
     .           
     .                   Ok(ext)
     .               }
     .           
     7 ( 0.00%)      fn check_unused_macros(&mut self) {
     .                   for (_, &(node_id, ident)) in self.unused_macros.iter() {
     .                       self.lint_buffer.buffer_lint(
     .                           UNUSED_MACROS,
     .                           node_id,
     .                           ident.span,
     .                           &format!("unused macro definition: `{}`", ident.as_str()),
     .                       );
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool {
     .                   self.containers_deriving_copy.contains(&expn_id)
     .               }
     .           
     .               fn resolve_derives(
     .                   &mut self,
     .                   expn_id: LocalExpnId,
-- line 334 ----------------------------------------
-- line 444 ----------------------------------------
     .                   self.crate_loader.cstore().get_proc_macro_quoted_span_untracked(krate, id, self.session)
     .               }
     .           
     .               fn declare_proc_macro(&mut self, id: NodeId) {
     .                   self.proc_macros.push(id)
     .               }
     .           
     .               fn registered_tools(&self) -> &RegisteredTools {
     4 ( 0.00%)          &self.registered_tools
     4 ( 0.00%)      }
     .           }
     .           
     .           impl<'a> Resolver<'a> {
     .               /// Resolve macro path with error reporting and recovery.
     .               /// Uses dummy syntax extensions for unresolved macros or macros with unexpected resolutions
     .               /// for better error recovery.
     .               fn smart_resolve_macro_path(
     .                   &mut self,
-- line 461 ----------------------------------------
-- line 638 ----------------------------------------
     .                   res.map(|res| (self.get_macro(res), res))
     .               }
     .           
     .               // Resolve an identifier in lexical scope.
     .               // This is a variation of `fn resolve_ident_in_lexical_scope` that can be run during
     .               // expansion and import resolution (perhaps they can be merged in the future).
     .               // The function is used for resolving initial segments of macro paths (e.g., `foo` in
     .               // `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.
 1,248 ( 0.00%)      crate fn early_resolve_ident_in_lexical_scope(
     .                   &mut self,
     .                   orig_ident: Ident,
     .                   scope_set: ScopeSet<'a>,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   force: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
-- line 654 ----------------------------------------
-- line 657 ----------------------------------------
     .                           const MACRO_RULES          = 1 << 0;
     .                           const MODULE               = 1 << 1;
     .                           const MISC_SUGGEST_CRATE   = 1 << 2;
     .                           const MISC_SUGGEST_SELF    = 1 << 3;
     .                           const MISC_FROM_PRELUDE    = 1 << 4;
     .                       }
     .                   }
     .           
   294 ( 0.00%)          assert!(force || !record_used); // `record_used` implies `force`
     .           
     .                   // Make sure `self`, `super` etc produce an error when passed to here.
   480 ( 0.00%)          if orig_ident.is_path_segment_keyword() {
     .                       return Err(Determinacy::Determined);
     .                   }
     .           
   672 ( 0.00%)          let (ns, macro_kind, is_import) = match scope_set {
     .                       ScopeSet::All(ns, is_import) => (ns, None, is_import),
     .                       ScopeSet::AbsolutePath(ns) => (ns, None, false),
     .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
     .                       ScopeSet::Late(ns, ..) => (ns, None, false),
     .                   };
     .           
     .                   // This is *the* result, resolution from the scope closest to the resolved identifier.
     .                   // However, sometimes this result is "weak" because it comes from a glob import or
-- line 680 ----------------------------------------
-- line 691 ----------------------------------------
     .                   let mut determinacy = Determinacy::Determined;
     .           
     .                   // Go through all the scopes and try to resolve the name.
     .                   let break_result = self.visit_scopes(
     .                       scope_set,
     .                       parent_scope,
     .                       orig_ident.span.ctxt(),
     .                       |this, scope, use_prelude, ctxt| {
   540 ( 0.00%)                  let ident = Ident::new(orig_ident.name, orig_ident.span.with_ctxt(ctxt));
     .                           let ok = |res, span, arenas| {
     .                               Ok((
     .                                   (res, ty::Visibility::Public, span, LocalExpnId::ROOT)
     .                                       .to_name_binding(arenas),
     .                                   Flags::empty(),
     .                               ))
     .                           };
 1,350 ( 0.00%)                  let result = match scope {
     .                               Scope::DeriveHelpers(expn_id) => {
     .                                   if let Some(attr) = this
     .                                       .helper_attrs
     .                                       .get(&expn_id)
     .                                       .and_then(|attrs| attrs.iter().rfind(|i| ident == **i))
     .                                   {
     .                                       let binding = (
     .                                           Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),
-- line 715 ----------------------------------------
-- line 720 ----------------------------------------
     .                                           .to_name_binding(this.arenas);
     .                                       Ok((binding, Flags::empty()))
     .                                   } else {
     .                                       Err(Determinacy::Determined)
     .                                   }
     .                               }
     .                               Scope::DeriveHelpersCompat => {
     .                                   let mut result = Err(Determinacy::Determined);
     9 ( 0.00%)                          for derive in parent_scope.derives {
     .                                       let parent_scope = &ParentScope { derives: &[], ..*parent_scope };
     .                                       match this.resolve_macro_path(
     .                                           derive,
     .                                           Some(MacroKind::Derive),
     .                                           parent_scope,
     .                                           true,
     .                                           force,
     .                                       ) {
-- line 736 ----------------------------------------
-- line 747 ----------------------------------------
     .                                           Ok(_) | Err(Determinacy::Determined) => {}
     .                                           Err(Determinacy::Undetermined) => {
     .                                               result = Err(Determinacy::Undetermined)
     .                                           }
     .                                       }
     .                                   }
     .                                   result
     .                               }
    36 ( 0.00%)                      Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
     .                                   MacroRulesScope::Binding(macro_rules_binding)
     .                                       if ident == macro_rules_binding.ident =>
     .                                   {
     .                                       Ok((macro_rules_binding.binding, Flags::MACRO_RULES))
     .                                   }
     .                                   MacroRulesScope::Invocation(_) => Err(Determinacy::Undetermined),
     .                                   _ => Err(Determinacy::Determined),
     .                               },
-- line 763 ----------------------------------------
-- line 779 ----------------------------------------
     .                                       }
     .                                       Err((Determinacy::Undetermined, Weak::Yes)) => {
     .                                           Err(Determinacy::Undetermined)
     .                                       }
     .                                       Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),
     .                                   }
     .                               }
     .                               Scope::Module(module, derive_fallback_lint_id) => {
   800 ( 0.00%)                          let adjusted_parent_scope = &ParentScope { module, ..*parent_scope };
 1,300 ( 0.00%)                          let binding = this.resolve_ident_in_module_unadjusted_ext(
     .                                       ModuleOrUniformRoot::Module(module),
     .                                       ident,
     .                                       ns,
     .                                       adjusted_parent_scope,
     .                                       !matches!(scope_set, ScopeSet::Late(..)),
     .                                       record_used,
     .                                       path_span,
     .                                   );
   416 ( 0.00%)                          match binding {
     .                                       Ok(binding) => {
    56 ( 0.00%)                                  if let Some(lint_id) = derive_fallback_lint_id {
     .                                               this.lint_buffer.buffer_lint_with_diagnostic(
     .                                                   PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,
     .                                                   lint_id,
     .                                                   orig_ident.span,
     .                                                   &format!(
     .                                                       "cannot find {} `{}` in this scope",
     .                                                       ns.descr(),
     .                                                       ident
     .                                                   ),
     .                                                   BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(
     .                                                       orig_ident.span,
     .                                                   ),
     .                                               );
     .                                           }
    28 ( 0.00%)                                  let misc_flags = if ptr::eq(module, this.graph_root) {
     .                                               Flags::MISC_SUGGEST_CRATE
    19 ( 0.00%)                                  } else if module.is_normal() {
     .                                               Flags::MISC_SUGGEST_SELF
     .                                           } else {
     .                                               Flags::empty()
     .                                           };
     .                                           Ok((binding, Flags::MODULE | misc_flags))
     .                                       }
     .                                       Err((Determinacy::Undetermined, Weak::No)) => {
     .                                           return Some(Err(Determinacy::determined(force)));
-- line 824 ----------------------------------------
-- line 833 ----------------------------------------
     .                                   Some(ident) => ok(
     .                                       Res::NonMacroAttr(NonMacroAttrKind::Registered),
     .                                       ident.span,
     .                                       this.arenas,
     .                                   ),
     .                                   None => Err(Determinacy::Determined),
     .                               },
     .                               Scope::MacroUsePrelude => {
     6 ( 0.00%)                          match this.macro_use_prelude.get(&ident.name).cloned() {
     .                                       Some(binding) => Ok((binding, Flags::MISC_FROM_PRELUDE)),
     .                                       None => Err(Determinacy::determined(
     4 ( 0.00%)                                  this.graph_root.unexpanded_invocations.borrow().is_empty(),
     .                                       )),
     .                                   }
     .                               }
     .                               Scope::BuiltinAttrs => {
    27 ( 0.00%)                          if is_builtin_attr_name(ident.name) {
     .                                       ok(
    18 ( 0.00%)                                  Res::NonMacroAttr(NonMacroAttrKind::Builtin(ident.name)),
     .                                           DUMMY_SP,
     9 ( 0.00%)                                  this.arenas,
     .                                       )
     .                                   } else {
     .                                       Err(Determinacy::Determined)
     .                                   }
     .                               }
   312 ( 0.00%)                      Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {
     .                                   Some(binding) => Ok((binding, Flags::empty())),
     .                                   None => Err(Determinacy::determined(
    13 ( 0.00%)                              this.graph_root.unexpanded_invocations.borrow().is_empty(),
     .                                   )),
     .                               },
     .                               Scope::ToolPrelude => match this.registered_tools.get(&ident).cloned() {
     .                                   Some(ident) => ok(Res::ToolMod, ident.span, this.arenas),
     .                                   None => Err(Determinacy::Determined),
     .                               },
     .                               Scope::StdLibPrelude => {
     .                                   let mut result = Err(Determinacy::Determined);
   147 ( 0.00%)                          if let Some(prelude) = this.prelude {
     .                                       if let Ok(binding) = this.resolve_ident_in_module_unadjusted(
     .                                           ModuleOrUniformRoot::Module(prelude),
     .                                           ident,
     .                                           ns,
     .                                           parent_scope,
     .                                           false,
     .                                           path_span,
     .                                       ) {
    32 ( 0.00%)                                  if use_prelude || this.is_builtin_macro(binding.res()) {
     .                                               result = Ok((binding, Flags::MISC_FROM_PRELUDE));
     .                                           }
     .                                       }
     .                                   }
     .                                   result
     .                               }
    39 ( 0.00%)                      Scope::BuiltinTypes => match PrimTy::from_name(ident.name) {
     .                                   Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),
     .                                   None => Err(Determinacy::Determined),
     .                               },
     .                           };
     .           
   178 ( 0.00%)                  match result {
     .                               Ok((binding, flags))
    30 ( 0.00%)                          if sub_namespace_match(binding.macro_kind(), macro_kind) =>
     .                               {
   152 ( 0.00%)                          if !record_used || matches!(scope_set, ScopeSet::Late(..)) {
     .                                       return Some(Ok(binding));
     .                                   }
     .           
    36 ( 0.00%)                          if let Some((innermost_binding, innermost_flags)) = innermost_result {
     .                                       // Found another solution, if the first one was "weak", report an error.
     .                                       let (res, innermost_res) = (binding.res(), innermost_binding.res());
     .                                       if res != innermost_res {
     .                                           let is_builtin = |res| {
     .                                               matches!(res, Res::NonMacroAttr(NonMacroAttrKind::Builtin(..)))
     .                                           };
     .                                           let derive_helper =
     .                                               Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);
-- line 909 ----------------------------------------
-- line 977 ----------------------------------------
     .                       },
     .                   );
     .           
     .                   if let Some(break_result) = break_result {
     .                       return break_result;
     .                   }
     .           
     .                   // The first found solution was the only one, return it.
    76 ( 0.00%)          if let Some((binding, _)) = innermost_result {
     .                       return Ok(binding);
     .                   }
     .           
    20 ( 0.00%)          Err(Determinacy::determined(determinacy == Determinacy::Determined || force))
 1,248 ( 0.00%)      }
     .           
     8 ( 0.00%)      crate fn finalize_macro_resolutions(&mut self) {
     .                   let check_consistency = |this: &mut Self,
     .                                            path: &[Segment],
     .                                            span,
     .                                            kind: MacroKind,
     .                                            initial_res: Option<Res>,
     .                                            res: Res| {
     .                       if let Some(initial_res) = initial_res {
     .                           if res != initial_res {
-- line 1000 ----------------------------------------
-- line 1019 ----------------------------------------
     .                               );
     .                               let msg_note = "import resolution is stuck, try simplifying macro imports";
     .                               this.session.struct_span_err(span, &msg).note(msg_note).emit();
     .                           }
     .                       }
     .                   };
     .           
     .                   let macro_resolutions = mem::take(&mut self.multi_segment_macro_resolutions);
     4 ( 0.00%)          for (mut path, path_span, kind, parent_scope, initial_res) in macro_resolutions {
     .                       // FIXME: Path resolution will ICE if segment IDs present.
     .                       for seg in &mut path {
     .                           seg.id = None;
     .                       }
     .                       match self.resolve_path(
     .                           &path,
     .                           Some(MacroNS),
     .                           &parent_scope,
-- line 1035 ----------------------------------------
-- line 1101 ----------------------------------------
     .                               let mut err = self.session.struct_span_err(ident.span, &msg);
     .                               self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident);
     .                               err.emit();
     .                           }
     .                       }
     .                   }
     .           
     .                   let builtin_attrs = mem::take(&mut self.builtin_attrs);
    79 ( 0.00%)          for (ident, parent_scope) in builtin_attrs {
    90 ( 0.00%)              let _ = self.early_resolve_ident_in_lexical_scope(
     .                           ident,
     .                           ScopeSet::Macro(MacroKind::Attr),
     .                           &parent_scope,
     .                           true,
     .                           true,
    18 ( 0.00%)                  ident.span,
     .                       );
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn check_stability_and_deprecation(
     .                   &mut self,
     .                   ext: &SyntaxExtension,
     .                   path: &ast::Path,
     .                   node_id: NodeId,
     .               ) {
     .                   let span = path.span;
-- line 1127 ----------------------------------------
-- line 1173 ----------------------------------------
     .                           if let Some(binding) = binding {
     .                               err.span_note(binding.span, &format!("the {} imported here", kind.descr()));
     .                           }
     .                           err.emit();
     .                       }
     .                   }
     .               }
     .           
62,909 ( 0.07%)      crate fn check_reserved_macro_name(&mut self, ident: Ident, res: Res) {
     .                   // Reserve some names that are not quite covered by the general check
     .                   // performed on `Resolver::builtin_attrs`.
22,876 ( 0.02%)          if ident.name == sym::cfg || ident.name == sym::cfg_attr {
     6 ( 0.00%)              let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());
     2 ( 0.00%)              if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {
     .                           self.session.span_err(
     .                               ident.span,
     .                               &format!("name `{}` is reserved in attribute namespace", ident),
     .                           );
     .                       }
     .                   }
45,752 ( 0.05%)      }
     .           
     .               /// Compile the macro into a `SyntaxExtension` and possibly replace
     .               /// its expander to a pre-defined one for built-in macros.
     8 ( 0.00%)      crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> SyntaxExtension {
     3 ( 0.00%)          let mut result = compile_declarative_macro(
     1 ( 0.00%)              &self.session,
     .                       self.session.features_untracked(),
     .                       item,
     .                       edition,
     .                   );
     .           
     4 ( 0.00%)          if let Some(builtin_name) = result.builtin_name {
     .                       // The macro was marked with `#[rustc_builtin_macro]`.
     2 ( 0.00%)              if let Some(builtin_macro) = self.builtin_macros.get_mut(&builtin_name) {
     .                           // The macro is a built-in, replace its expander function
     .                           // while still taking everything else from the source code.
     .                           // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.
     3 ( 0.00%)                  match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {
    12 ( 0.00%)                      BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,
     .                               BuiltinMacroState::AlreadySeen(span) => {
     .                                   struct_span_err!(
     .                                       self.session,
     .                                       item.span,
     .                                       E0773,
     .                                       "attempted to define built-in macro more than once"
     .                                   )
     .                                   .span_note(span, "previously defined here")
-- line 1220 ----------------------------------------
-- line 1223 ----------------------------------------
     .                           }
     .                       } else {
     .                           let msg = format!("cannot find a built-in macro with name `{}`", item.ident);
     .                           self.session.span_err(item.span, &msg);
     .                       }
     .                   }
     .           
     .                   result
     9 ( 0.00%)      }
     .           }

 4,487 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdio-common/vfscanf-internal.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
35,061,973 (38.13%)  events annotated

