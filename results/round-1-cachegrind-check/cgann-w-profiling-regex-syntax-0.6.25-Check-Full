--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name regex_syntax --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="unicode" --cfg feature="unicode-age" --cfg feature="unicode-bool" --cfg feature="unicode-case" --cfg feature="unicode-gencat" --cfg feature="unicode-perl" --cfg feature="unicode-script" --cfg feature="unicode-segment" -C metadata=28fe8502d8e0f41b -C extra-filename=-28fe8502d8e0f41b --out-dir /usr/home/liquid/tmp/.tmpl4Z3kk/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpl4Z3kk/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-regex-syntax-0.6.25-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
8,753,585,064 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
272,506,239 ( 3.11%)  ./malloc/malloc.c:_int_free
255,318,918 ( 2.92%)  ./malloc/malloc.c:_int_malloc
164,436,336 ( 1.88%)  ./malloc/malloc.c:malloc
146,559,023 ( 1.67%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 79,414,343 ( 0.91%)  ./malloc/malloc.c:free
 52,346,332 ( 0.60%)  ./malloc/malloc.c:malloc_consolidate
 52,117,738 ( 0.60%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 39,564,633 ( 0.45%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 29,975,006 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 29,848,112 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 27,966,687 ( 0.32%)  ./malloc/malloc.c:realloc
 26,599,066 ( 0.30%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 25,572,060 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
 24,758,095 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 24,477,135 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 24,415,180 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 23,758,833 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 23,739,632 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 23,589,598 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 23,318,778 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 22,068,302 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 21,609,728 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 21,524,381 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 20,838,304 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 20,565,574 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 20,022,336 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 19,655,584 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 19,655,004 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 18,944,882 ( 0.22%)  ./malloc/malloc.c:_int_realloc
 18,377,266 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 18,081,414 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 18,020,794 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 17,886,767 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 17,700,691 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 17,318,587 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 17,126,952 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 16,361,109 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 16,326,753 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 16,082,728 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::read_scalar::<rustc_middle::ty::context::TyCtxt>
 15,869,765 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 15,787,217 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs:<rustc_typeck::check::coercion::Coerce>::coerce
 15,323,637 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
 15,191,613 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
 14,931,494 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 14,646,918 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
 14,602,489 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 14,577,322 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
 14,572,786 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 14,507,160 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_visit_primitive
 14,055,660 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs:<rustc_ast_pretty::pp::ring::RingBuffer<rustc_ast_pretty::pp::BufEntry>>::pop_first
 13,834,825 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
 13,288,801 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
 13,169,648 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
 13,138,578 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 13,104,116 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::aggregate_field_path_elem
 13,037,622 ( 0.15%)  ./malloc/malloc.c:calloc
 13,023,524 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:<alloc::collections::vec_deque::VecDeque<rustc_ast_pretty::pp::BufEntry>>::push_back
 13,012,544 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs:<rustc_ast_pretty::pp::Printer>::advance_left
 12,946,138 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_bytes_internal::<rustc_middle::ty::context::TyCtxt>
 12,906,341 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
 12,827,958 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 12,777,578 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 12,704,336 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 12,637,526 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
 12,489,777 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 12,462,691 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
 12,191,484 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
 12,074,892 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 11,991,132 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<_>>::ty_and_layout_field::field_ty_or_layout::<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>
 11,937,123 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 11,936,207 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 11,919,551 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>>::ty_and_layout_field
 11,906,517 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 11,804,458 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
 11,447,807 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
 11,325,688 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs:<rustc_typeck::check::regionck::RegionCtxt as rustc_hir::intravisit::Visitor>::visit_expr
 11,156,251 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 11,056,266 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
 10,954,518 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/mod.rs:<core::char::EscapeDefault as core::iter::traits::iterator::Iterator>::next
 10,937,772 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 10,669,332 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get_global_alloc
 10,579,048 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get
 10,450,674 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 10,426,510 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_relocations::<rustc_middle::ty::context::TyCtxt>
 10,342,255 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs:<rustc_middle::ty::walk::TypeWalker as core::iter::traits::iterator::Iterator>::next
 10,338,057 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs:<rustc_typeck::check::writeback::WritebackCx>::visit_node_id
 10,305,124 ( 0.12%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,291,456 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted
 10,187,829 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_operand::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
 10,108,488 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_ast_pretty::pp::Printer>::advance_left
 10,048,340 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::visit_value
  9,996,534 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs:<rustc_lint::levels::LintLevelsBuilder>::push
  9,938,142 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value
  9,881,856 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
  9,709,742 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs:<rustc_middle::mir::interpret::allocation::Allocation>::read_scalar::<rustc_middle::ty::context::TyCtxt>
  9,631,512 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  9,438,150 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs:<rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform
  9,401,352 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_from
  9,326,534 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_middle::ty::fold::RegionFolder>
  9,290,074 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeChecker>::typeck_mir
  9,271,920 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
  9,206,812 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
  9,131,837 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_assoc_expr_with
  9,096,255 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
  9,083,368 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]>>::try_reserve
  9,062,651 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  9,002,767 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::insert::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
  8,976,807 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::TyS>::is_trivially_sized
  8,893,875 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
  8,805,458 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   54,698 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   14,906 ( 0.00%)              self.file = file;
   21,169 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   39,572 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  103,194 ( 0.00%)          self.line_number = line_index + 1;
  154,681 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  614,116 ( 0.01%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    9,468 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    4,734 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   23,670 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   33,138 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   18,936 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
2,319,912 ( 0.03%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
1,325,664 ( 0.02%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  331,416 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  331,416 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  566,064 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  565,400 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
1,696,200 ( 0.02%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  565,400 ( 0.01%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  282,700 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  282,700 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  282,700 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
1,130,800 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   96,768 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  389,084 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   45,720 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   54,864 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   36,576 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
  118,716 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
  118,716 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  243,580 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  136,179 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      664 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      996 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    2,991 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    5,982 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   11,964 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   97,432 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   48,716 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   97,432 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   48,716 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  243,580 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  146,148 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  146,148 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  146,148 ( 0.00%)          Some((
   48,716 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   48,716 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
2,982,744 ( 0.03%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
3,827,315 ( 0.04%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  272,358 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   36,578 ( 0.00%)              if idx != avoid_idx
   19,899 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   45,720 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    9,144 ( 0.00%)          if !self.source_map.files().is_empty() {
   18,288 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   73,152 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   45,720 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

4,339,269 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .           
        .               /// Returns a static string we can use for printouts.
        .               fn tag(&self) -> &'static str;
        .           
        .               /// Returns `true` if the value `a` is the "expected" type in the
        .               /// relation. Just affects error messages.
        .               fn a_is_expected(&self) -> bool;
        .           
    9,424 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   f(self)
    8,302 ( 0.00%)      }
        .           
        .               /// Generic relation routine suitable for most anything.
2,108,172 ( 0.02%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
  465,520 ( 0.01%)          Relate::relate(self, a, b)
1,727,300 ( 0.02%)      }
        .           
        .               /// Relate the two substitutions for the given item. The default
        .               /// is to look up the variance for the item and proceed
        .               /// accordingly.
  128,590 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   debug!(
        .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
        .                       item_def_id, a_subst, b_subst
        .                   );
        .           
        .                   let tcx = self.tcx();
        .                   let opt_variances = tcx.variances_of(item_def_id);
   51,436 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
  115,731 ( 0.00%)      }
        .           
        .               /// Switch variance for the purpose of relating `a` and `b`.
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self>;
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Relate impls
        .           
  581,641 ( 0.01%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: ty::TypeAndMut<'tcx>,
        .               b: ty::TypeAndMut<'tcx>,
        .               base_ty: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
        .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
  105,386 ( 0.00%)      if a.mutbl != b.mutbl {
    2,268 ( 0.00%)          Err(TypeError::Mutability)
        .               } else {
        .                   let mutbl = a.mutbl;
        .                   let (variance, info) = match mutbl {
        .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
        .                       ast::Mutability::Mut => {
        .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
        .                       }
        .                   };
   46,246 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
  257,514 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
        .               }
  582,044 ( 0.01%)  }
        .           
      440 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               variances: Option<(DefId, &[ty::Variance])>,
        .               a_subst: SubstsRef<'tcx>,
        .               b_subst: SubstsRef<'tcx>,
        .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  195,067 ( 0.00%)      let tcx = relation.tcx();
   84,427 ( 0.00%)      let mut cached_ty = None;
        .           
        .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
  530,270 ( 0.01%)          let (variance, variance_info) = match variances {
   55,190 ( 0.00%)              Some((ty_def_id, variances)) => {
   82,785 ( 0.00%)                  let variance = variances[i];
   27,595 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
        .                               let ty =
   11,568 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
        .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
        .                           } else {
        .                               ty::VarianceDiagInfo::default()
        .                           };
        .                           (variance, variance_info)
        .                       }
        .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
        .                   };
  128,863 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
        .               });
        .           
        .               tcx.mk_substs(params)
      528 ( 0.00%)  }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
   15,288 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::FnSig<'tcx>,
        .                   b: ty::FnSig<'tcx>,
        .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
        .                   let tcx = relation.tcx();
        .           
    7,056 ( 0.00%)          if a.c_variadic != b.c_variadic {
        .                       return Err(TypeError::VariadicMismatch(expected_found(
        .                           relation,
        .                           a.c_variadic,
        .                           b.c_variadic,
        .                       )));
        .                   }
    5,940 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
        .                   let abi = relation.relate(a.abi, b.abi)?;
        .           
    9,966 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
        .                       return Err(TypeError::ArgCount);
        .                   }
        .           
   10,584 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    4,693 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    9,408 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    1,765 ( 0.00%)              .map(|((a, b), is_output)| {
    1,765 ( 0.00%)                  if is_output {
    1,004 ( 0.00%)                      relation.relate(a, b)
        .                           } else {
        .                               relation.relate_with_variance(
        .                                   ty::Contravariant,
        .                                   ty::VarianceDiagInfo::default(),
        .                                   a,
        .                                   b,
        .                               )
        .                           }
        .                       })
        .                       .enumerate()
    6,764 ( 0.00%)              .map(|(i, r)| match r {
        .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
        .                               Err(TypeError::ArgumentSorts(exp_found, i))
        .                           }
        .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
        .                               Err(TypeError::ArgumentMutability(i))
        .                           }
   10,909 ( 0.00%)                  r => r,
        .                       });
    8,850 ( 0.00%)          Ok(ty::FnSig {
        .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
    1,176 ( 0.00%)              c_variadic: a.c_variadic,
        .                       unsafety,
        .                       abi,
        .                   })
   10,584 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::BoundConstness,
        .                   b: ty::BoundConstness,
        .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ast::Unsafety,
        .                   b: ast::Unsafety,
        .               ) -> RelateResult<'tcx, ast::Unsafety> {
    1,176 ( 0.00%)          if a != b {
        .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
        .                   a: abi::Abi,
        .                   b: abi::Abi,
        .               ) -> RelateResult<'tcx, abi::Abi> {
        .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
   11,600 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionTy<'tcx>,
        .                   b: ty::ProjectionTy<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    3,204 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let substs = relation.relate(a.substs, b.substs)?;
    4,260 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
        .                   }
    8,256 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialProjection<'tcx>,
        .                   b: ty::ExistentialProjection<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
        .                           b.substs,
        .                       )?;
        .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
  382,576 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitRef<'tcx>,
        .                   b: ty::TraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   81,920 ( 0.00%)          if a.def_id != b.def_id {
      114 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
   27,294 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   87,528 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
        .                   }
  245,940 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
    2,464 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialTraitRef<'tcx>,
        .                   b: ty::ExistentialTraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
        .                   // Different traits cannot be related.
    4,038 ( 0.00%)          if a.def_id != b.def_id {
        .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
    1,794 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
    2,244 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
        .                   }
    1,568 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone, TypeFoldable)]
        .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
        .           
        .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
        .           
        .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
        .               #[inline]
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
1,304,445 ( 0.01%)          relation.tys(a, b)
        .               }
        .           }
        .           
        .           /// The main "type relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
2,392,872 ( 0.03%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: Ty<'tcx>,
        .               b: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, Ty<'tcx>> {
        .               let tcx = relation.tcx();
        .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
5,199,060 ( 0.06%)      match (a.kind(), b.kind()) {
        .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_tys")
        .                   }
        .           
        .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
        .                       bug!("bound types encountered in super_relate_tys")
        .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
        .           
        .                   (&ty::Never, _)
        .                   | (&ty::Char, _)
        .                   | (&ty::Bool, _)
        .                   | (&ty::Int(_), _)
        .                   | (&ty::Uint(_), _)
        .                   | (&ty::Float(_), _)
        .                   | (&ty::Str, _)
   92,451 ( 0.00%)              if a == b =>
        .                   {
        .                       Ok(a)
        .                   }
        .           
   12,076 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
        .           
        .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
        .           
  533,488 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
  166,209 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
        .                       Ok(tcx.mk_adt(a_def, substs))
        .                   }
        .           
        .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
        .           
    9,422 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
    2,692 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
        .                           relation.relate_with_variance(
        .                               ty::Contravariant,
        .                               ty::VarianceDiagInfo::default(),
    1,346 ( 0.00%)                      a_region,
        .                               b_region,
        .                           )
        .                       })?;
        .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
        .                   }
        .           
        .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
        .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
        .                       // inside the binder so we can related them
        .                       let a_types = a_types.map_bound(GeneratorWitness);
        .                       let b_types = b_types.map_bound(GeneratorWitness);
        .                       // Then remove the GeneratorWitness for the result
        .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
        .                       Ok(tcx.mk_generator_witness(types))
        .                   }
        .           
    3,880 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
        .                       // All Closure types with the same id represent
        .                       // the (anonymous) type of the same closure expression. So
        .                       // all of their regions should be equated.
      970 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_closure(a_id, &substs))
        .                   }
        .           
        .                   (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ptr(mt))
        .                   }
        .           
1,023,927 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
  444,598 ( 0.01%)              let r = relation.relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_r,
        .                           b_r,
        .                       )?;
        .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
        .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
  655,368 ( 0.01%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ref(r, mt))
        .                   }
        .           
   25,935 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
    3,051 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
   10,374 ( 0.00%)              match relation.relate(sz_a, sz_b) {
   15,561 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
        .                           Err(err) => {
        .                               // Check whether the lengths are both concrete/known values,
        .                               // but are unequal, for better diagnostics.
        .                               //
        .                               // It might seem dubious to eagerly evaluate these constants here,
        .                               // we however cannot end up with errors in `Relate` during both
        .                               // `type_of` and `predicates_of`. This means that evaluating the
        .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
        .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
        .                                   ),
        .                                   _ => Err(err),
        .                               }
        .                           }
        .                       }
        .                   }
        .           
   33,948 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
    1,066 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
        .                       Ok(tcx.mk_slice(t))
        .                   }
        .           
   39,800 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
   39,800 ( 0.00%)              if as_.len() == bs.len() {
        .                           Ok(tcx.mk_tup(
  294,271 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
        .                           )?)
        3 ( 0.00%)              } else if !(as_.is_empty() || bs.is_empty()) {
        4 ( 0.00%)                  Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
        .                       } else {
        .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
        .                       }
        .                   }
        .           
    2,838 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
    4,730 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
    3,784 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
        .                       Ok(tcx.mk_fn_def(a_def_id, substs))
        .                   }
        .           
        .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
   10,796 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
        .                       Ok(tcx.mk_fn_ptr(fty))
        .                   }
        .           
        .                   // these two are already handled downstream in case of lazy normalization
    3,390 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
        .                       let projection_ty = relation.relate(a_data, b_data)?;
        .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
        .                   }
        .           
      176 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
      440 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
      528 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
        .                       Ok(tcx.mk_opaque(a_def_id, substs))
        .                   }
        .           
        .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
        .               }
2,691,981 ( 0.03%)  }
        .           
        .           /// The main "const relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
   41,280 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
        .               let tcx = relation.tcx();
        .           
        .               // FIXME(oli-obk): once const generics can have generic types, this assertion
        .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
    8,256 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
    8,256 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
    4,128 ( 0.00%)      if a_ty != b_ty {
        .                   relation.tcx().sess.delay_span_bug(
        .                       DUMMY_SP,
        .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
        .                   );
        .               }
        .           
        .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
    4,128 ( 0.00%)      let a = eagerly_eval(a);
    8,256 ( 0.00%)      let b = eagerly_eval(b);
        .           
        .               // Currently, the values that can be unified are primitive types,
        .               // and those that derive both `PartialEq` and `Eq`, corresponding
        .               // to structural-match types.
   45,408 ( 0.00%)      let is_match = match (a.val, b.val) {
        .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
        .                   }
        .           
        .                   (ty::ConstKind::Error(_), _) => return Ok(a),
        .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
        .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
        .                               substs,
        .                               promoted: au.promoted,
        .                           }),
        .                           ty: a.ty,
        .                       }));
        .                   }
        .                   _ => false,
        .               };
   24,768 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
   37,152 ( 0.00%)  }
        .           
        .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a_val: ConstValue<'tcx>,
        .               b_val: ConstValue<'tcx>,
        .               // FIXME(oli-obk): these arguments should go away with valtrees
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .               // FIXME(oli-obk): this should just be `bool` with valtrees
        .           ) -> RelateResult<'tcx, bool> {
    4,128 ( 0.00%)      let tcx = relation.tcx();
   45,408 ( 0.00%)      Ok(match (a_val, b_val) {
   90,816 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
    4,128 ( 0.00%)              a_val == b_val
        .                   }
        .                   (
        .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
        .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
        .                   ) => {
        .                       a_val == b_val
        .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
        .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   _ => false,
        .               })
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
   13,460 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    1,346 ( 0.00%)          let tcx = relation.tcx();
        .           
        .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
        .                   // We need to perform this deduplication as we sometimes generate duplicate projections
        .                   // in `a`.
        .                   let mut a_v: Vec<_> = a.into_iter().collect();
        .                   let mut b_v: Vec<_> = b.into_iter().collect();
        .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
        .                   a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   a_v.dedup();
        .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   b_v.dedup();
    4,038 ( 0.00%)          if a_v.len() != b_v.len() {
        .                       return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
        .                   }
        .           
    5,384 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
        .                       use crate::ty::ExistentialPredicate::*;
    5,384 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
    5,384 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
        .                               .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
        .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
        .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
        .                           ))),
        .                           (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
        .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
        .                       }
        .                   });
    2,692 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
   10,768 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ClosureSubsts<'tcx>,
        .                   b: ty::ClosureSubsts<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: SubstsRef<'tcx>,
        .                   b: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    1,553 ( 0.00%)          relate_substs(relation, None, a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
  483,355 ( 0.01%)          relation.regions(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
   20,544 ( 0.00%)          relation.consts(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   19,213 ( 0.00%)          relation.binders(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
  417,476 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GenericArg<'tcx>,
        .                   b: GenericArg<'tcx>,
        .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
  522,866 ( 0.01%)          match (a.unpack(), b.unpack()) {
        .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
        .                           Ok(relation.relate(a_lt, b_lt)?.into())
        .                       }
        .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    3,066 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
        .                       }
        .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
        .                           Ok(relation.relate(a_ct, b_ct)?.into())
        .                       }
        .                       (GenericArgKind::Lifetime(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Type(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Const(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                   }
  453,105 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ImplPolarity,
        .                   b: ty::ImplPolarity,
        .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
        .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
      627 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitPredicate<'tcx>,
        .                   b: ty::TraitPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        .                   Ok(ty::TraitPredicate {
      285 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        .                       constness: relation.relate(a.constness, b.constness)?,
        .                       polarity: relation.relate(a.polarity, b.polarity)?,
        .                   })
      513 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Error handling
        .           
        .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
        .           where
        .               R: TypeRelation<'tcx>,
        .           {
       76 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
        .           }

5,272,775 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .                   RingBuffer { data: VecDeque::new(), offset: 0 }
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.data.is_empty()
        .               }
        .           
        .               pub fn push(&mut self, value: T) -> usize {
1,041,160 ( 0.01%)          let index = self.offset + self.data.len();
3,237,364 ( 0.04%)          self.data.push_back(value);
        .                   index
        .               }
        .           
        .               pub fn clear(&mut self) {
      520 ( 0.00%)          self.data.clear();
        .               }
        .           
        .               pub fn index_of_first(&self) -> usize {
        .                   self.offset
        .               }
        .           
        .               pub fn first(&self) -> Option<&T> {
        .                   self.data.front()
        .               }
        .           
        .               pub fn first_mut(&mut self) -> Option<&mut T> {
        .                   self.data.front_mut()
        .               }
        .           
2,602,900 ( 0.03%)      pub fn pop_first(&mut self) -> Option<T> {
        .                   let first = self.data.pop_front()?;
2,082,320 ( 0.02%)          self.offset += 1;
3,123,480 ( 0.04%)          Some(first)
3,644,060 ( 0.04%)      }
        .           
        .               pub fn last(&self) -> Option<&T> {
        .                   self.data.back()
        .               }
        .           
        .               pub fn last_mut(&mut self) -> Option<&mut T> {
        .                   self.data.back_mut()
        .               }
-- line 63 ----------------------------------------

2,602,900 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     1,104 ( 0.00%)      fn clone(&self) -> Self {
     2,808 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
       521 ( 0.00%)              table: self.table.clone(),
         .                   }
     1,242 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   568,182 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,144,070 ( 0.02%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,794,131 ( 0.02%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
 1,970,309 ( 0.02%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       601 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    49,179 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   538,432 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,456 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       470 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     1,350 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     1,820 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 5,765,432 ( 0.07%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 6,152,718 ( 0.07%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,349,031 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 1,916,882 ( 0.02%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,055 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     3,165 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     2,110 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     1,055 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
11,284,373 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     1,547 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        22 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 3,975,824 ( 0.05%)              self.table
 3,775,554 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   380,035 ( 0.00%)              None
         .                   }
10,831,737 ( 0.12%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   605,452 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,127,926 ( 0.02%)          match self.remove_entry(k) {
   150,099 ( 0.00%)              Some((_, v)) => Some(v),
   457,668 ( 0.01%)              None => None,
         .                   }
 1,471,520 ( 0.02%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   898,030 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 7,663,976 ( 0.09%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
20,460,795 ( 0.23%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
21,668,801 ( 0.25%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 2,393,122 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
12,341,250 ( 0.14%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,394,972 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 5,423,539 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 4,844,370 ( 0.06%)          self.from_hash(hash, equivalent(k))
 9,448,665 ( 0.11%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
10,338,957 ( 0.12%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 2,267,743 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,580 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   103,225 ( 0.00%)          IntoIter {
    58,057 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    13,740 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   688,093 ( 0.01%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     2,716 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       983 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     4,522 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       263 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       526 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       108 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    94,537 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    74,239 ( 0.00%)          let iter = iter.into_iter();
    72,953 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     5,935 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   186,048 ( 0.00%)              self.insert(k, v);
         .                   });
    65,305 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------
-- line 4604 ----------------------------------------
         .           impl<'a, K, V, S, A> Extend<(&'a K, &'a V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash + Copy,
         .               V: Copy,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
         .                   self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
        32 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (&'a K, &'a V)) {
         .                   self.insert(*k, *v);
         .               }
         .           
         .               #[inline]
-- line 4622 ----------------------------------------

 9,593,317 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                  

-- line 46 ----------------------------------------
         .           ///
         .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
         .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
         .               /// provided default definition delegates.  Implementors **should not** override
         .               /// this provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_super_fold_with` instead).
11,511,643 ( 0.13%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   167,230 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
11,664,528 ( 0.13%)      }
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
         .               /// default definition delegates.  Implementors **should not** override this
         .               /// provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_fold_with` instead).
   595,104 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   215,327 ( 0.00%)          self.try_fold_with(folder).into_ok()
   546,919 ( 0.01%)      }
         .           
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error>;
         .           
 8,999,896 ( 0.10%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
 2,281,440 ( 0.03%)          self.try_super_fold_with(folder)
 9,382,327 ( 0.11%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 1,699,615 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   962,973 ( 0.01%)          self.super_visit_with(visitor)
   804,138 ( 0.01%)      }
         .           
         .               /// Returns `true` if `self` has any late-bound regions that are either
         .               /// bound by `binder` or bound by some binder outside of `binder`.
         .               /// If `binder` is `ty::INNERMOST`, this indicates whether
         .               /// there are any late-bound regions that appear free.
         .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   615,645 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
         .               }
         .           
         .               /// Returns `true` if this `self` has any regions that escape `binder` (and
         .               /// hence are not bound by it).
         .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       174 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
         .               }
         .           
 1,708,495 ( 0.02%)      fn has_escaping_bound_vars(&self) -> bool {
   188,198 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
 1,715,413 ( 0.02%)      }
         .           
    92,781 ( 0.00%)      #[instrument(level = "trace")]
         .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
    70,995 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
         .               }
         .               fn has_projections(&self) -> bool {
    12,698 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
         .               }
         .               fn has_opaque_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
         .               }
    40,192 ( 0.00%)      fn references_error(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    40,192 ( 0.00%)      }
         .               fn has_param_types_or_consts(&self) -> bool {
       444 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
         .               }
         .               fn has_infer_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
         .               }
         .               fn has_infer_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
         .               }
         .               fn has_infer_types_or_consts(&self) -> bool {
   305,735 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
         .               }
    57,657 ( 0.00%)      fn needs_infer(&self) -> bool {
   175,348 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    58,486 ( 0.00%)      }
         .               fn has_placeholders(&self) -> bool {
         .                   self.has_type_flags(
         .                       TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER,
         .                   )
         .               }
         .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
         .               fn has_erasable_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               /// Indicates whether this value references only 'global'
         .               /// generic parameters that are the same regardless of what fn we are
         .               /// in. This is used for caching.
         .               fn is_global(&self) -> bool {
    74,186 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
         .               }
         .           
         .               /// True if there are any late-bound regions
         .               fn has_late_bound_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
         .               }
         .           
         .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
         .           
         .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
         .           
         .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
 1,485,627 ( 0.02%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
 1,332,181 ( 0.02%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   r.super_fold_with(self)
         .               }
         .           
         .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
   142,444 ( 0.00%)          c.super_fold_with(self)
         .               }
         .           
         .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
     3,681 ( 0.00%)          p.super_fold_with(self)
         .               }
         .           
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
         .           /// A blanket implementation of this trait (that defers to the relevant
         .           /// method of [`TypeFolder`]) is provided for all infallible folders in
         .           /// order to ensure the two APIs are coherent.
         .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
         .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    16,170 ( 0.00%)          t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
         .                   t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
         .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
         .                   c.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
     4,448 ( 0.00%)          p.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
         .           }
         .           
         .           // Blanket implementation of fallible trait for infallible folders
         .           // delegates to infallible methods to prevent incoherence
         .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
         .           where
         .               F: TypeFolder<'tcx, Error = !>,
         .           {
   255,972 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   456,027 ( 0.01%)          Ok(self.fold_binder(t))
   379,667 ( 0.00%)      }
         .           
    59,384 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
 6,654,142 ( 0.08%)          Ok(self.fold_ty(t))
    47,802 ( 0.00%)      }
         .           
    47,044 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
 1,041,141 ( 0.01%)          Ok(self.fold_region(r))
    47,044 ( 0.00%)      }
         .           
    22,556 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   260,260 ( 0.00%)          Ok(self.fold_const(c))
    21,376 ( 0.00%)      }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
         .                   Ok(self.fold_predicate(p))
         .               }
         .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
         .           
         .           pub trait TypeVisitor<'tcx>: Sized {
         .               type BreakTy = !;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
     1,344 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
     3,156 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   r.super_visit_with(self)
         .               }
         .           
         8 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   c.super_visit_with(self)
         7 ( 0.00%)      }
         .           
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   uv.super_visit_with(self)
         .               }
         .           
         .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   p.super_visit_with(self)
         .               }
-- line 359 ----------------------------------------
-- line 376 ----------------------------------------
         .           
         .           impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>
         .           where
         .               F: FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
         .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
         .           {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       132 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     5,453 ( 0.00%)          let t = ty.super_fold_with(self);
         .                   (self.ty_op)(t)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   let r = r.super_fold_with(self);
         .                   (self.lt_op)(r)
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        24 ( 0.00%)          let ct = ct.super_fold_with(self);
         .                   (self.ct_op)(ct)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Region folder
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
         .               }
         .           
         .               /// Invoke `callback` on every region appearing free in `value`.
    10,138 ( 0.00%)      pub fn for_each_free_region(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>),
         .               ) {
         .                   self.any_free_region_meets(value, |r| {
    97,737 ( 0.00%)              callback(r);
         .                       false
         .                   });
     8,827 ( 0.00%)      }
         .           
         .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
         .               pub fn all_free_regions_meet(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
    28,390 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
         .               }
         .           
         .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
         .               pub fn any_free_region_meets(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
         .                       F: FnMut(ty::Region<'tcx>) -> bool,
         .                   {
         .                       type BreakTy = ();
         .           
         .                       fn visit_binder<T: TypeFoldable<'tcx>>(
         .                           &mut self,
         .                           t: &Binder<'tcx, T>,
         .                       ) -> ControlFlow<Self::BreakTy> {
     2,476 ( 0.00%)                  self.outer_index.shift_in(1);
     1,792 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
     1,344 ( 0.00%)                  self.outer_index.shift_out(1);
         .                           result
         .                       }
         .           
    74,600 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   182,430 ( 0.00%)                  match *r {
       234 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
         .                                   ControlFlow::CONTINUE
         .                               }
         .                               _ => {
         .                                   if (self.callback)(r) {
         .                                       ControlFlow::BREAK
         .                                   } else {
         .                                       ControlFlow::CONTINUE
         .                                   }
         .                               }
         .                           }
   104,440 ( 0.00%)              }
         .           
         .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                           // We're only interested in types involving regions
   193,873 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   151,127 ( 0.00%)                      ty.super_visit_with(self)
         .                           } else {
         .                               ControlFlow::CONTINUE
         .                           }
         .                       }
         .                   }
         .           
   543,294 ( 0.01%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
         .               }
         .           }
         .           
         .           /// Folds over the substructure of a type, visiting its component
         .           /// types and all regions that occur *free* within it.
         .           ///
         .           /// That is, `Ty` can contain function or method types that bind
         .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
         .           
         .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   skipped_regions: &'a mut bool,
         .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
         .               ) -> RegionFolder<'a, 'tcx> {
 1,759,078 ( 0.02%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   176,619 ( 0.00%)          self.tcx
   176,619 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
     6,439 ( 0.00%)          self.current_index.shift_in(1);
     5,824 ( 0.00%)          let t = t.super_fold_with(self);
     5,865 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
     3,694 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   180,524 ( 0.00%)          match *r {
     3,694 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
         .                           debug!(?self.current_index, "skipped bound region");
     3,694 ( 0.00%)                  *self.skipped_regions = true;
         .                           r
         .                       }
         .                       _ => {
         .                           debug!(?self.current_index, "folding free region");
   530,490 ( 0.01%)                  (self.fold_region_fn)(r, self.current_index)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Bound vars replacer
         .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
         .               current_index: ty::DebruijnIndex,
         .           
         .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .           }
         .           
         .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   207,186 ( 0.00%)      fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .               ) -> Self {
   726,072 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   103,593 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    80,809 ( 0.00%)          self.tcx
    23,344 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
   172,345 ( 0.00%)          self.current_index.shift_in(1);
    26,810 ( 0.00%)          let t = t.super_fold_with(self);
   132,363 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
   313,915 ( 0.00%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   207,856 ( 0.00%)          match *t.kind() {
     6,029 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
     1,213 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
         .                               let ty = fld_t(bound_ty);
     1,213 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
         .                           }
         .                       }
   205,430 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   304,455 ( 0.00%)                  return t.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   t
   154,248 ( 0.00%)      }
         .           
   453,016 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   315,484 ( 0.00%)          match *r {
   312,372 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   156,034 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
         .                               let region = fld_r(br);
   312,794 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
         .                                   // If the callback returns a late-bound region,
         .                                   // that region should always use the INNERMOST
         .                                   // debruijn index. Then we adjust it to the
         .                                   // correct depth.
       363 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
     3,608 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
         .                               } else {
         .                                   region
         .                               };
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .                   r
   453,016 ( 0.01%)      }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       159 ( 0.00%)          match *ct {
         .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
         .                           if debruijn == self.current_index =>
         .                       {
         .                           if let Some(fld_c) = self.fld_c.as_mut() {
         .                               let ct = fld_c(bound_const, ty);
         .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
         .                           }
         .                       }
        53 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
         .                           return ct.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   ct
         .               }
         .           }
         .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
         .                   mut fld_r: F,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
         .                   let mut real_fld_r =
   249,378 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
     7,337 ( 0.00%)          let value = value.skip_binder();
    35,735 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
    63,114 ( 0.00%)              value
         .                   } else {
    44,168 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
     1,639 ( 0.00%)              value.fold_with(&mut replacer)
         .                   };
   148,905 ( 0.00%)          (value, region_map)
         .               }
         .           
         .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
         .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
         .               /// closure replaces escaping bound consts.
   865,582 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: T,
         .                   mut fld_r: F,
         .                   mut fld_t: G,
         .                   mut fld_c: H,
         .               ) -> T
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
   110,087 ( 0.00%)          if !value.has_escaping_bound_vars() {
   139,291 ( 0.00%)              value
         .                   } else {
         .                       let mut replacer =
 1,186,040 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    41,286 ( 0.00%)              value.fold_with(&mut replacer)
         .                   }
   593,449 ( 0.01%)      }
         .           
         .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
         .               /// closure replaces bound regions while the `fld_t` closure replaces bound
         .               /// types.
   473,722 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: Binder<'tcx, T>,
         .                   mut fld_r: F,
         .                   fld_t: G,
         .                   fld_c: H,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
   372,186 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
   472,176 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
   535,301 ( 0.01%)          (value, region_map)
   329,867 ( 0.00%)      }
         .           
         .               /// Replaces any late-bound regions bound in `value` with
         .               /// free variants attached to `all_outlive_scope`.
    35,431 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
         .                   self,
         .                   all_outlive_scope: DefId,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_late_bound_regions(value, |br| {
    60,788 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     9,352 ( 0.00%)                  scope: all_outlive_scope,
         .                           bound_region: br.kind,
         .                       }))
         .                   })
         .                   .0
    19,326 ( 0.00%)      }
         .           
         .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_escaping_bound_vars(
    56,655 ( 0.00%)              value,
         .                       |r| {
         .                           self.mk_region(ty::ReLateBound(
         .                               ty::INNERMOST,
         .                               ty::BoundRegion {
         .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
         .                                   kind: r.kind,
         .                               },
         .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
         .               fn collect_late_bound_regions<T>(
         .                   self,
         .                   value: &Binder<'tcx, T>,
         .                   just_constraint: bool,
         .               ) -> FxHashSet<ty::BoundRegionKind>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     3,852 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
         .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
         .                   assert!(result.is_continue()); // should never have stopped early
     7,656 ( 0.00%)          collector.regions
         .               }
         .           
         .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
         .               /// method lookup and a few other places where precise region relationships are not required.
         .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    10,936 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
         .               }
         .           
         .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
         .               /// assigned starting at 0 and increasing monotonically in the order traversed
         .               /// by the fold operation.
         .               ///
         .               /// The chief purpose of this function is to canonicalize regions so that two
         .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
         .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
         .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
    77,239 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    55,090 ( 0.00%)          let mut counter = 0;
       951 ( 0.00%)          let inner = self
         .                       .replace_late_bound_regions(sig, |_| {
         .                           let br = ty::BoundRegion {
       726 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
         .                               kind: ty::BrAnon(counter),
         .                           };
     2,904 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
     1,815 ( 0.00%)                  counter += 1;
         .                           r
         .                       })
         .                       .0;
    11,018 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    33,054 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
         .                   );
    64,008 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
    66,376 ( 0.00%)      }
         .           }
         .           
         .           pub struct ValidateBoundVars<'tcx> {
         .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
         .               binder_index: ty::DebruijnIndex,
         .               // We may encounter the same variable at different levels of binding, so
         .               // this can't just be `Ty`
         .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               current_index: ty::DebruijnIndex,
         .               amount: u32,
         .           }
         .           
         .           impl<'tcx> Shifter<'tcx> {
         .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
         .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
     2,476 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       100 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
         .                   self.current_index.shift_in(1);
         .                   let t = t.super_fold_with(self);
         .                   self.current_index.shift_out(1);
         .                   t
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
       100 ( 0.00%)          match *r {
         .                       ty::ReLateBound(debruijn, br) => {
       200 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
         .                               r
         .                           } else {
        50 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
         .                               let shifted = ty::ReLateBound(debruijn, br);
       500 ( 0.00%)                      self.tcx.mk_region(shifted)
         .                           }
         .                       }
         .                       _ => r,
         .                   }
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
     2,676 ( 0.00%)          match *ty.kind() {
         .                       ty::Bound(debruijn, bound_ty) => {
         .                           if self.amount == 0 || debruijn < self.current_index {
         .                               ty
         .                           } else {
         .                               let debruijn = debruijn.shifted_in(self.amount);
         .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
         .                           }
         .                       }
         .           
     4,122 ( 0.00%)              _ => ty.super_fold_with(self),
         .                   }
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
         .                       if self.amount == 0 || debruijn < self.current_index {
         .                           ct
         .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
         .           
         .           pub fn shift_region<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               region: ty::Region<'tcx>,
         .               amount: u32,
         .           ) -> ty::Region<'tcx> {
         .               match region {
         .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
     2,418 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
         .                   }
         .                   _ => region,
         .               }
         .           }
         .           
         .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!("shift_vars(value={:?}, amount={})", value, amount);
         .           
     2,620 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
         .           struct FoundEscapingVars;
         .           
         .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
         .           /// bound region or a bound type.
         .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
         .               type BreakTy = FoundEscapingVars;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
    81,083 ( 0.00%)          self.outer_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
   114,922 ( 0.00%)          self.outer_index.shift_out(1);
         .                   result
         .               }
         .           
         .               #[inline]
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // If the outer-exclusive-binder is *strictly greater* than
         .                   // `outer_index`, that means that `t` contains some content
         .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
         .                   // visited.
         .                   if r.bound_at_or_above_binder(self.outer_index) {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
     1,952 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // we don't have a `visit_infer_const` callback, so we have to
         .                   // hook in here to catch this case (annoying...), but
         .                   // otherwise we do want to remember to visit the rest of the
         .                   // const, as it has types/regions embedded in a lot of other
         .                   // places.
     2,930 ( 0.00%)          match ct.val {
         .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
         .                           ControlFlow::Break(FoundEscapingVars)
         .                       }
         3 ( 0.00%)              _ => ct.super_visit_with(self),
         .                   }
     1,952 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
         .               #[instrument(level = "trace")]
         .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
         .                   debug!(
         .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
         .                       t,
         .                       t.flags(),
         .                       self.flags
         .                   );
   689,429 ( 0.01%)          if t.flags().intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(skip(self), level = "trace")]
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    31,933 ( 0.00%)          let flags = r.type_flags();
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   261,520 ( 0.00%)          let flags = FlagComputation::for_const(c);
         .                   trace!(r.flags=?flags);
     6,686 ( 0.00%)          if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    35,208 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
         .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
         .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
         .               /// types may mean that `'a` and `'b` don't appear in the results,
         .               /// so they are not considered *constrained*.
         .               just_constrained: bool,
         .           }
         .           
         .           impl LateBoundRegionsCollector {
     1,914 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    13,398 ( 0.00%)          LateBoundRegionsCollector {
         .                       current_index: ty::INNERMOST,
         .                       regions: Default::default(),
         .                       just_constrained,
         .                   }
     1,914 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
         .                   self.current_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
         .                   self.current_index.shift_out(1);
         .                   result
         .               }
         .           
     7,164 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs to a projection, as they may not appear
         .                   // in the normalized form
     6,458 ( 0.00%)          if self.just_constrained {
     6,428 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
     7,283 ( 0.00%)          t.super_visit_with(self)
     4,776 ( 0.00%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs of an unevaluated const, as they may not appear
         .                   // in the normalized form
         .                   if self.just_constrained {
         .                       if let ty::ConstKind::Unevaluated(..) = c.val {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
         .                   c.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     7,396 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
     1,362 ( 0.00%)              if debruijn == self.current_index {
         .                           self.regions.insert(br.kind);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }

   723,053 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
    1,504 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
    6,000 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   15,000 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   19,500 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   21,000 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    6,000 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
    1,500 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   12,000 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   33,000 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   15,000 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    3,000 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
    1,500 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    3,000 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
   15,369 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    8,296 ( 0.00%)              if let Some(local) = place.as_local() {
   12,396 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
   12,396 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
    6,000 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    3,000 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
    6,000 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
       32 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    3,000 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    4,500 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
    1,500 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    4,500 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
   10,500 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    9,000 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
    6,690 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
    9,000 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
   12,000 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    1,500 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   18,000 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
   15,000 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
    7,500 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    4,500 ( 0.00%)          regioncx,
    6,000 ( 0.00%)          opaque_type_values,
    3,000 ( 0.00%)          polonius_input,
    4,500 ( 0.00%)          polonius_output,
    6,000 ( 0.00%)          opt_closure_req,
   15,000 ( 0.00%)          nll_errors,
   27,000 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   24,000 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    4,500 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    3,000 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   24,000 ( 0.00%)      drop(flow_inits);
        .           
    1,500 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
    9,000 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    1,500 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    9,000 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    1,500 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    9,000 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    1,500 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
    3,252 ( 0.00%)      let movable_generator = !matches!(
    9,252 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
    4,683 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
    1,338 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
   67,500 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
    6,000 ( 0.00%)          errors_buffer,
    1,500 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
    1,500 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    9,000 ( 0.00%)          dominators,
    6,000 ( 0.00%)          upvars,
    6,000 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    4,500 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
    9,000 ( 0.00%)          ever_inits: flow_ever_inits,
   12,000 ( 0.00%)          uninits: flow_uninits,
   16,500 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
    9,000 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
    1,500 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
    1,500 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
    1,500 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
    1,500 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    6,000 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    6,000 ( 0.00%)      let used_mut = mbcx.used_mut;
    1,500 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
       83 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
      498 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
      249 ( 0.00%)          match mbcx.local_names[local] {
        .                       Some(name) => {
        .                           if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
   13,500 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
    1,500 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
    6,000 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    7,500 ( 0.00%)          closure_requirements: opt_closure_req,
    9,000 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    3,000 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   21,000 ( 0.00%)      (result, body_with_facts)
   18,000 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  542,700 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  301,500 ( 0.00%)          match &stmt.kind {
   38,882 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   77,764 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
    1,650 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
    6,600 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   14,850 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  121,350 ( 0.00%)                  self.access_place(
        .                               location,
  222,475 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  482,400 ( 0.01%)      }
        .           
  127,536 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
   79,710 ( 0.00%)          match term.kind {
    6,136 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    6,136 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
    4,352 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
   13,056 ( 0.00%)                  self.access_place(
        .                               loc,
   19,584 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
       36 ( 0.00%)                  place: drop_place,
       18 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
      288 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   14,499 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   38,664 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   43,494 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   19,249 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
   57,000 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
      900 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
      150 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      450 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      500 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
  114,720 ( 0.00%)      }
        .           
  111,594 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   15,942 ( 0.00%)          let span = term.source_info.span;
        .           
   63,768 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
    4,562 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
  127,536 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   19,450 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
1,073,472 ( 0.01%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  268,368 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    2,874 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   67,092 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  402,552 ( 0.00%)          let mutability_error = self.check_access_permissions(
  268,368 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  738,012 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  201,276 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  201,276 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  536,736 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   67,092 ( 0.00%)          let mut error_reported = false;
  201,276 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  134,184 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  134,184 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  872,196 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  402,552 ( 0.00%)              (sd, place_span.0),
        .                       &borrow_set,
  402,552 ( 0.00%)              borrows_in_scope,
  756,807 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
    1,437 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  201,276 ( 0.00%)      }
        .           
  242,090 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  217,881 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   24,209 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   96,448 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  211,764 ( 0.00%)          self.access_place(
        .                       location,
   70,588 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  193,672 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  116,646 ( 0.00%)          match *rvalue {
   28,887 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
  111,942 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
    3,606 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
  202,209 ( 0.00%)                  self.access_place(
        .                               location,
   38,516 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
   67,403 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
   67,403 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
   12,816 ( 0.00%)                  self.access_place(
        .                               location,
    3,204 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
    5,607 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    5,607 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    5,150 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    3,605 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
    4,761 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
      252 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  261,660 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  118,828 ( 0.00%)          match *operand {
    6,582 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
   13,185 ( 0.00%)                  self.access_place(
        .                               location,
   10,970 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
       21 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
       18 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   38,949 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
   99,605 ( 0.00%)                  self.access_place(
        .                               location,
   64,915 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   11,632 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    8,724 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  174,440 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
        .               ) {
        .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
       23 ( 0.00%)          let place = borrow.borrowed_place;
        .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
        .           
        .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
        .                   // we just know that all locals are dropped at function exit (otherwise
        .                   // we'll have a memory leak) and assume that all statics have a destructor.
        .                   //
        .                   // FIXME: allow thread-locals to borrow other thread locals?
        .           
        .                   let (might_be_alive, will_be_dropped) =
      161 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
        .                           // Thread-locals might be dropped after the function exits
        .                           // We have to dereference the outer reference because
        .                           // borrows don't conflict behind shared references.
        .                           root_place.projection = DEREF_PROJECTION;
        .                           (true, true)
        .                       } else {
        .                           (false, self.locals_are_invalidated_at_exit)
        .                       };
        .           
      115 ( 0.00%)          if !will_be_dropped {
        .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
        .                       return;
        .                   }
        .           
        .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
        .           
      276 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
       46 ( 0.00%)              self.infcx.tcx,
        .                       &self.body,
        .                       place,
        .                       borrow.kind,
       92 ( 0.00%)              root_place,
        .                       sd,
        .                       places_conflict::PlaceConflictBias::Overlap,
        .                   ) {
        .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
        .                       // FIXME: should be talking about the region lifetime instead
        .                       // of just a span here.
        .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
        .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  152,484 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  290,463 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
    7,185 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
   17,244 ( 0.00%)              self.access_place(
        .                           location,
    8,622 ( 0.00%)                  (borrow.borrowed_place, span),
   12,933 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
   39,372 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  355,186 ( 0.00%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   27,322 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  218,576 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  299,827 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   54,514 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  190,799 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
   42,192 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   27,257 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
  109,028 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   68,588 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   34,294 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  218,056 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  355,186 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  246,265 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
       97 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
      680 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
      455 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
      390 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
      100 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
      309 ( 0.00%)                      match base_ty.kind() {
      582 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
    2,377 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      231 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
       56 ( 0.00%)                  if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
      300 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  134,184 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
1,025,196 ( 0.01%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
   18,030 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
   12,621 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  123,529 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   70,768 ( 0.00%)                  if let (Err(_), true) = (
  247,688 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  123,600 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   74,160 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   24,720 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
  113,725 ( 0.00%)          for &index in ii {
   79,130 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   98,880 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   77,800 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        .                   match root_place {
   58,350 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   37,608 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   54,474 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   73,572 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  628,991 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  176,237 ( 0.00%)          match place.last_projection() {
        .                       None => {
   54,834 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  164,502 ( 0.00%)                  match local.mutability {
   17,812 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
   53,436 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
   91,856 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
    7,041 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    2,616 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
    7,848 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    2,584 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    2,584 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
        .                                                       Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
    7,752 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2213 ----------------------------------------
        .                                               hir::Mutability::Mut => Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               }),
        .                                           }
        .                                       }
        .                                       // `Box<T>` owns its content, so mutable if its location is mutable
       16 ( 0.00%)                              _ if base_ty.is_box() => {
        .                                           self.is_mutable(place_base, is_local_mutation_allowed)
        .                                       }
        .                                       // Deref should only be for reference, pointers or boxes
        .                                       _ => bug!("Deref of unexpected type: {:?}", base_ty),
        .                                   }
        .                               }
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    2,078 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
        .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  457,448 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   20,979 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

2,116,412 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .           pub struct UnmatchedBrace {
        .               pub expected_delim: token::DelimToken,
        .               pub found_delim: Option<token::DelimToken>,
        .               pub found_span: Span,
        .               pub unclosed_span: Option<Span>,
        .               pub candidate_span: Option<Span>,
        .           }
        .           
      532 ( 0.00%)  crate fn parse_token_trees<'a>(
        .               sess: &'a ParseSess,
        .               src: &'a str,
        .               start_pos: BytePos,
        .               override_span: Option<Span>,
        .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
        .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
        .                   .into_token_trees()
      342 ( 0.00%)  }
        .           
        .           struct StringReader<'a> {
        .               sess: &'a ParseSess,
        .               /// Initial position, read-only.
        .               start_pos: BytePos,
        .               /// The absolute offset within the source_map of the current character.
        .               pos: BytePos,
        .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
        .               end_src_index: usize,
        .               /// Source text to tokenize.
        .               src: &'a str,
        .               override_span: Option<Span>,
        .           }
        .           
        .           impl<'a> StringReader<'a> {
        .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  353,111 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
        .               }
        .           
        .               /// Returns the next token, and info about preceding whitespace, if any.
2,200,107 ( 0.03%)      fn next_token(&mut self) -> (Spacing, Token) {
        .                   let mut spacing = Spacing::Joint;
        .           
        .                   // Skip `#!` at the start of the file
  628,602 ( 0.01%)          let start_src_index = self.src_index(self.pos);
  942,903 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
        .                   let is_beginning_of_file = self.pos == self.start_pos;
  314,301 ( 0.00%)          if is_beginning_of_file {
      152 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
        .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
        .                           spacing = Spacing::Alone;
        .                       }
        .                   }
        .           
        .                   // Skip trivial (whitespace & comments) tokens
        .                   loop {
  519,791 ( 0.01%)              let start_src_index = self.src_index(self.pos);
1,251,138 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
        .           
  417,046 ( 0.00%)              if text.is_empty() {
        .                           let span = self.mk_sp(self.pos, self.pos);
      190 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
        .                       }
        .           
1,251,024 ( 0.01%)              let token = rustc_lexer::first_token(text);
        .           
  834,016 ( 0.01%)              let start = self.pos;
  417,008 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
        .           
        .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
        .           
3,346,176 ( 0.04%)              match self.cook_lexer_token(token.kind, start) {
2,514,104 ( 0.03%)                  Some(kind) => {
        .                               let span = self.mk_sp(start, self.pos);
1,885,578 ( 0.02%)                      return (spacing, Token::new(kind, span));
        .                           }
        .                           None => spacing = Spacing::Alone,
        .                       }
        .                   }
2,828,709 ( 0.03%)      }
        .           
        .               /// Report a fatal lexical error with a given span.
        .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
        .                   self.sess.span_diagnostic.span_fatal(sp, m)
        .               }
        .           
        .               /// Report a lexical error with a given span.
        .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
        .               ) -> DiagnosticBuilder<'a> {
        .                   self.sess
        .                       .span_diagnostic
        .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
        .               }
        .           
        .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
        .               /// complain about it.
    3,514 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
        .                   // Opening delimiter of the length 2 is not included into the comment text.
        .                   let content_start = start + BytePos(2);
        .                   let content = self.str_from(content_start);
        .                   if contains_text_flow_control_chars(content) {
        .                       let span = self.mk_sp(start, self.pos);
        .                       self.sess.buffer_lint_with_diagnostic(
        .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
        .                           span,
        .                           ast::CRATE_NODE_ID,
        .                           "unicode codepoint changing visible direction of text present in comment",
        .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
        .                       );
        .                   }
    4,016 ( 0.00%)      }
        .           
        .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
        .               /// `rustc_ast::TokenKind`. This turns strings into interned
        .               /// symbols and runs additional validation.
        .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
2,085,040 ( 0.02%)          Some(match token {
    3,021 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
        .                           // Skip non-doc comments
   13,599 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 is not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content = self.str_from(content_start);
   12,595 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
        .                       }
       18 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
        9 ( 0.00%)                  if !terminated {
        .                               let msg = match doc_style {
        .                                   Some(_) => "unterminated block doc-comment",
        .                                   None => "unterminated block comment",
        .                               };
        .                               let last_bpos = self.pos;
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, last_bpos),
        .                                   msg,
        .                                   error_code!(E0758),
        .                               );
        .                           }
        .           
        .                           // Skip non-doc comments
       36 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
        .                           // are not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
       63 ( 0.00%)                  let content = self.str_from_to(content_start, content_end);
       36 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::Whitespace => return None,
        .                       rustc_lexer::TokenKind::Ident
        .                       | rustc_lexer::TokenKind::RawIdent
        .                       | rustc_lexer::TokenKind::UnknownPrefix => {
  155,088 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  193,860 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
        .                           let mut ident_start = start;
   77,544 ( 0.00%)                  if is_raw_ident {
        .                               ident_start = ident_start + BytePos(2);
        .                           }
  116,316 ( 0.00%)                  if is_unknown_prefix {
        .                               self.report_unknown_prefix(start);
        .                           }
  193,860 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
        .                           let span = self.mk_sp(start, self.pos);
  155,088 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   77,544 ( 0.00%)                  if is_raw_ident {
        .                               if !sym.can_be_raw() {
        .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
        .                               }
        .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
        .                           }
  271,404 ( 0.00%)                  token::Ident(sym, is_raw_ident)
        .                       }
        .                       rustc_lexer::TokenKind::InvalidIdent
        .                           // Do not recover an identifier with emoji if the codepoint is a confusable
        .                           // with a recoverable substitution token, like `➖`.
        .                           if UNICODE_ARRAY
        .                               .iter()
        .                               .find(|&&(c, _, _)| {
        .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
        .                               })
        .                               .is_none() =>
        .                       {
        .                           let sym = nfc_normalize(self.str_from(start));
        .                           let span = self.mk_sp(start, self.pos);
        .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
        .                           token::Ident(sym, false)
        .                       }
1,061,792 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
        .                           let suffix_start = start + BytePos(suffix_start as u32);
        .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  199,086 ( 0.00%)                  let suffix = if suffix_start < self.pos {
        .                               let string = self.str_from(suffix_start);
        .                               if string == "_" {
        .                                   self.sess
        .                                       .span_diagnostic
        .                                       .struct_span_warn(
        .                                           self.mk_sp(suffix_start, self.pos),
        .                                           "underscore literal suffix is not allowed",
        .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
        .                                       .note(
        .                                           "see issue #42326 \
        .                                            <https://github.com/rust-lang/rust/issues/42326> \
        .                                            for more information",
        .                                       )
        .                                       .emit();
        .                                   None
        .                               } else {
        5 ( 0.00%)                          Some(Symbol::intern(string))
        .                               }
        .                           } else {
        .                               None
        .                           };
  530,896 ( 0.01%)                  token::Literal(token::Lit { kind, symbol, suffix })
        .                       }
    1,566 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
        .                           // Include the leading `'` in the real identifier, for macro
        .                           // expansion purposes. See #12512 for the gory details of why
        .                           // this is necessary.
        .                           let lifetime_name = self.str_from(start);
      783 ( 0.00%)                  if starts_with_number {
        .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
        .                           }
    2,349 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    3,132 ( 0.00%)                  token::Lifetime(ident)
        .                       }
        .                       rustc_lexer::TokenKind::Semi => token::Semi,
        .                       rustc_lexer::TokenKind::Comma => token::Comma,
        .                       rustc_lexer::TokenKind::Dot => token::Dot,
        .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
        .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
        .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
        .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
        .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
        .                           }
        .                           err.emit();
        .                           token?
        .                       }
        .                   })
        .               }
        .           
   30,336 ( 0.00%)      fn cook_doc_comment(
        .                   &self,
        .                   content_start: BytePos,
        .                   content: &str,
        .                   comment_kind: CommentKind,
        .                   doc_style: DocStyle,
        .               ) -> TokenKind {
    2,528 ( 0.00%)          if content.contains('\r') {
        .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
        .                           self.err_span_(
        .                               content_start + BytePos(idx as u32),
        .                               content_start + BytePos(idx as u32 + 1),
        .                               match comment_kind {
        .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
        .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
        .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   let attr_style = match doc_style {
        .                       DocStyle::Outer => AttrStyle::Outer,
        .                       DocStyle::Inner => AttrStyle::Inner,
        .                   };
        .           
    7,584 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   37,920 ( 0.00%)      }
        .           
        .               fn cook_lexer_literal(
        .                   &self,
        .                   start: BytePos,
        .                   suffix_start: BytePos,
        .                   kind: rustc_lexer::LiteralKind,
        .               ) -> (token::LitKind, Symbol) {
        .                   // prefix means `"` or `br"` or `r###"`, ...
        .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
   58,668 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
   58,668 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated character literal",
        .                                   error_code!(E0762),
        .                               )
        .                           }
        .                           (token::Char, Mode::Char, 1, 1) // ' '
        .                       }
      537 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
      537 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated byte constant",
        .                                   error_code!(E0763),
        .                               )
        .                           }
        .                           (token::Byte, Mode::Byte, 2, 1) // b' '
        .                       }
    4,342 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    4,342 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated double quote string",
        .                                   error_code!(E0765),
        .                               )
        .                           }
        .                           (token::Str, Mode::Str, 1, 1) // " "
        .                       }
        8 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
        8 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated double quote byte string",
        .                                   error_code!(E0766),
        .                               )
        .                           }
        .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
        .                       }
        .                       rustc_lexer::LiteralKind::RawStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
    3,650 ( 0.00%)                  (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
        .                       }
        .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
        .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
        .                       }
    4,154 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    2,077 ( 0.00%)                  return if empty_int {
        .                               self.sess
        .                                   .span_diagnostic
        .                                   .struct_span_err_with_code(
        .                                       self.mk_sp(start, suffix_start),
        .                                       "no valid digits found for number",
        .                                       error_code!(E0768),
        .                                   )
        .                                   .emit();
        .                               (token::Integer, sym::integer(0))
        .                           } else {
        .                               self.validate_int_literal(base, start, suffix_start);
    6,231 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
        .                           };
        .                       }
        .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
        .                           if empty_exponent {
        .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
        .                           }
        .           
        .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
        .                           }
        .           
        .                           let id = self.symbol_from_to(start, suffix_start);
        .                           return (token::Float, id);
        .                       }
        .                   };
        .                   let content_start = start + BytePos(prefix_len);
        .                   let content_end = suffix_start - BytePos(postfix_len);
  192,855 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
        .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
        .                   (lit_kind, id)
        .               }
        .           
        .               #[inline]
        .               fn src_index(&self, pos: BytePos) -> usize {
        .                   (pos - self.start_pos).to_usize()
        .               }
        .           
        .               /// Slice of the source text from `start` up to but excluding `self.pos`,
        .               /// meaning the slice does not include the character `self.ch`.
        .               fn str_from(&self, start: BytePos) -> &str {
  262,558 ( 0.00%)          self.str_from_to(start, self.pos)
        .               }
        .           
        .               /// As symbol_from, with an explicit endpoint.
        .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
        .                   debug!("taking an ident from {:?} to {:?}", start, end);
  785,959 ( 0.01%)          Symbol::intern(self.str_from_to(start, end))
        .               }
        .           
        .               /// Slice of the source text spanning from `start` up to but excluding `end`.
  173,236 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
        .                   &self.src[self.src_index(start)..self.src_index(end)]
  692,944 ( 0.01%)      }
        .           
        .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
    1,460 ( 0.00%)          match opt_err {
        .                       Some(RawStrError::InvalidStarter { bad_char }) => {
        .                           self.report_non_started_raw_string(start, bad_char)
        .                       }
        .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
        .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
        .                       Some(RawStrError::TooManyDelimiters { found }) => {
        .                           self.report_too_many_hashes(start, found)
        .                       }
-- line 496 ----------------------------------------
-- line 609 ----------------------------------------
        .               fn validate_literal_escape(
        .                   &self,
        .                   mode: Mode,
        .                   content_start: BytePos,
        .                   content_end: BytePos,
        .                   prefix_len: u32,
        .                   postfix_len: u32,
        .               ) {
  385,710 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
2,223,910 ( 0.03%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
        .                       // Here we only check for errors. The actual unescaping is done later.
  202,410 ( 0.00%)              if let Err(err) = result {
        .                           let span_with_quotes = self
        .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
        .                           let (start, end) = (range.start as u32, range.end as u32);
        .                           let lo = content_start + BytePos(start);
        .                           let hi = lo + BytePos(end - start);
        .                           let span = self.mk_sp(lo, hi);
        .                           emit_unescape_error(
        .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
        .                               lit_content,
        .                               span_with_quotes,
        .                               span,
        .                               mode,
        .                               range,
        .                               err,
        .                           );
        .                       }
  910,845 ( 0.01%)          });
        .               }
        .           
        .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    8,302 ( 0.00%)          let base = match base {
        .                       Base::Binary => 2,
        .                       Base::Octal => 8,
        .                       _ => return,
        .                   };
       18 ( 0.00%)          let s = self.str_from_to(content_start + BytePos(2), content_end);
       38 ( 0.00%)          for (idx, c) in s.char_indices() {
        .                       let idx = idx as u32;
       72 ( 0.00%)              if c != '_' && c.to_digit(base).is_none() {
        .                           let lo = content_start + BytePos(2 + idx);
        .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
        .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
        .                       }
        .                   }
        .               }
        .           }
        .           
  348,948 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
        .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   77,544 ( 0.00%)      match is_nfc_quick(string.chars()) {
  387,720 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
        .                   _ => {
        .                       let normalized_str: String = string.chars().nfc().collect();
        .                       Symbol::intern(&normalized_str)
        .                   }
        .               }
        .           }

1,932,936 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
13,325,016 ( 0.15%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 9,993,762 ( 0.11%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   477,692 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   716,538 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 3,450,666 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 1,190,100 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 2,380,200 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
       386 ( 0.00%)      pub ty: Ty<'tcx>,
     1,930 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    82,666 ( 0.00%)      pub scope: DefId,
   149,208 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   709,912 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    24,897 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       858 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,579 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   145,996 ( 0.00%)      pub var: BoundVar,
   121,174 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
32,094,423 ( 0.37%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 2,014,817 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   274,498 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 4,175,600 ( 0.05%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    53,750 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     5,149 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        63 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       126 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       252 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       126 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     1,162 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    10,822 ( 0.00%)              [
     2,990 ( 0.00%)                  ref parent_substs @ ..,
     2,889 ( 0.00%)                  closure_kind_ty,
     1,608 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     2,076 ( 0.00%)                  tupled_upvars_ty,
     4,648 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     3,486 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         .               pub fn is_valid(self) -> bool {
         .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       192 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       354 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       236 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       128 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     5,267 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       663 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,326 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         2 ( 0.00%)      pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         4 ( 0.00%)      }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        23 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        24 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        46 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       692 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,384 ( 0.00%)          match ty.kind() {
     2,768 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     2,076 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       172 ( 0.00%)          let tupled_tys = match self {
       235 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       384 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       321 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       298 ( 0.00%)          match self {
       337 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    38,751 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    43,217 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        80 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        84 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     5,202 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,890 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     4,624 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 840 ----------------------------------------
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
         .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     1,740 ( 0.00%)          self[0]
     1,740 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
         .                       })
         .                       .transpose()
         .               }
         .           
       578 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     1,156 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
         .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    27,623 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,906,088 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     2,063 ( 0.00%)      pub def_id: DefId,
 1,803,266 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     3,456 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    13,824 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       576 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       256 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       384 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       512 ( 0.00%)      }
         .           
         .               #[inline]
         3 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         2 ( 0.00%)      }
         .           
     2,240 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       280 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     3,080 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     6,081 ( 0.00%)          self.skip_binder().def_id
     2,027 ( 0.00%)      }
         .           
     3,213 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     6,426 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     3,213 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        64 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    21,909 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     2,712 ( 0.00%)      pub def_id: DefId,
    24,224 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
         4 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
         .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
         .               }
         .           }
         .           
    54,865 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    57,448 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 1,097,213 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    67,095 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   455,973 ( 0.01%)          assert!(!value.has_escaping_bound_vars());
   981,060 ( 0.01%)          Binder(value, ty::List::empty())
    66,758 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    28,606 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 2,228,597 ( 0.03%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     3,777 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     4,723 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       504 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    41,842 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 1,625,532 ( 0.02%)          Binder(value, self.1)
       504 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
     7,976 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    19,267 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   334,216 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     1,015 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
       893 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    54,310 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    36,621 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    35,909 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    21,777 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     6,222 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    24,888 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    10,360 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     4,440 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     7,400 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
    13,320 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    27,477 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     3,053 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     3,053 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    33,583 ( 0.00%)      }
         .           
     6,141 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    18,423 ( 0.00%)          self.substs.type_at(0)
    12,282 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    83,069 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    54,588 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     7,103 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    67,204 ( 0.00%)      pub c_variadic: bool,
    11,936 ( 0.00%)      pub unsafety: hir::Unsafety,
    74,927 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    55,960 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   239,638 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   111,920 ( 0.00%)      }
         .           
    35,637 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   262,974 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    71,274 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     7,550 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    22,670 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       996 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    16,218 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     1,982 ( 0.00%)          self.skip_binder().c_variadic
       991 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    10,116 ( 0.00%)          self.skip_binder().unsafety
     5,058 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    11,344 ( 0.00%)          self.skip_binder().abi
     2,836 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        64 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
     2,068 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       144 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        72 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        72 ( 0.00%)          ParamTy::new(def.index, def.name)
        36 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       112 ( 0.00%)      pub index: u32,
       112 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
13,262,479 ( 0.15%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        20 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   241,512 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    23,720 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    30,881 ( 0.00%)      pub def_id: DefId,
    36,644 ( 0.00%)      pub index: u32,
    67,621 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     4,192 ( 0.00%)      pub index: u32,
       963 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     5,149 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    87,668 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
    10,018 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   318,879 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   582,352 ( 0.01%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    16,004 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     8,026 ( 0.00%)          match self.kind() {
     2,191 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   443,494 ( 0.01%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   453,167 ( 0.01%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   139,622 ( 0.00%)          match self.kind() {
    11,734 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       189 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
        12 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         .                   *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       120 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       251 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
     7,034 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    14,068 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
     7,034 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        58 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    12,640 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   420,848 ( 0.00%)          match self.kind() {
    22,541 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     1,164 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     1,164 ( 0.00%)          match self.kind() {
     2,910 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     1,164 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     2,868 ( 0.00%)          matches!(
     6,669 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
         .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    22,110 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     5,438 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     8,145 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    15,593 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     4,277 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
         3 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     2,700 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
   188,752 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
 1,188,493 ( 0.01%)          match self.kind() {
     1,968 ( 0.00%)              Adt(def, _) if def.is_box() => {
     1,506 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   194,720 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
         .                       RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
   377,504 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     1,159 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       193 ( 0.00%)      }
         .           
   109,360 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    54,680 ( 0.00%)          match self.kind() {
    41,010 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   123,030 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     2,919 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
   166,306 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       215 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    64,666 ( 0.00%)          match self.kind() {
    32,567 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       430 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       110 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       220 ( 0.00%)          match self.kind() {
       220 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       220 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Returns the type of the discriminant of this type.
    15,920 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     7,960 ( 0.00%)          match self.kind() {
    12,736 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    12,736 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,616 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     3,232 ( 0.00%)          match self.kind() {
     3,148 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,616 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 3,185,199 ( 0.04%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
 2,123,466 ( 0.02%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
   459,824 ( 0.01%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    22,254 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 3,185,199 ( 0.04%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       153 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   209,072 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   313,608 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
   104,536 ( 0.00%)      }
         .           }

45,241,671 ( 0.52%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
2,528,821 ( 0.03%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
  153,712 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
1,320,313 ( 0.02%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
2,050,168 ( 0.02%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
8,539,049 ( 0.10%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

4,179,102 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
  301,620 ( 0.00%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
   11,268 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  172,528 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
  161,148 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
8,908,407 ( 0.10%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
2,112,616 ( 0.02%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
  581,800 ( 0.01%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
   79,197 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
   28,235 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
    4,606 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 263 ----------------------------------------
        .               /// In other words, if we meet *all* bounds in `B`, that suffices.
        .               /// This is used when *some* bound in `B` is known to suffice, but
        .               /// we don't know which.
        .               AllBounds(Vec<VerifyBound<'tcx>>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub(crate) struct TwoRegions<'tcx> {
       31 ( 0.00%)      a: Region<'tcx>,
       35 ( 0.00%)      b: Region<'tcx>,
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq)]
        .           pub(crate) enum UndoLog<'tcx> {
        .               /// We added `RegionVid`.
        .               AddVar(RegionVid),
        .           
        .               /// We added the given `constraint`.
-- line 280 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
   54,840 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
   54,840 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
  348,614 ( 0.00%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
  117,552 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
   40,332 ( 0.00%)              AddConstraint(ref constraint) => {
  161,328 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    4,953 ( 0.00%)          &self.data
    4,953 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
   12,859 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
        .               ///
        .               /// We don't want to leak relationships between variables between
        .               /// points because just because (say) `r1 == r2` was true at some
        .               /// point P in the graph doesn't imply that it will be true at
        .               /// some other point Q, in NLL.
        .               ///
        .               /// Not legal during a snapshot.
       48 ( 0.00%)      pub fn take_and_reset_data(&mut self) -> RegionConstraintData<'tcx> {
        8 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .           
        .                   // If you add a new field to `RegionConstraintCollector`, you
        .                   // should think carefully about whether it needs to be cleared
        .                   // or updated in some way.
        .                   let RegionConstraintStorage {
        .                       var_infos: _,
        8 ( 0.00%)              data,
        .                       lubs,
        .                       glbs,
        .                       unification_table: _,
        .                       any_unifications,
        .                   } = self.storage;
        .           
        .                   // Clear the tables of (lubs, glbs), so that we will create
        .                   // fresh regions if we do a LUB operation. As it happens,
-- line 395 ----------------------------------------
-- line 399 ----------------------------------------
        .                   glbs.clear();
        .           
        .                   let data = mem::take(data);
        .           
        .                   // Clear all unifications and recreate the variables a "now
        .                   // un-unified" state. Note that when we unify `a` and `b`, we
        .                   // also insert `a <= b` and a `b <= a` edges, so the
        .                   // `RegionConstraintData` contains the relationship here.
       16 ( 0.00%)          if *any_unifications {
        2 ( 0.00%)              *any_unifications = false;
        6 ( 0.00%)              self.unification_table().reset_unifications(|_| UnifiedRegion(None));
        .                   }
        .           
        .                   data
       64 ( 0.00%)      }
        .           
        .               pub fn data(&self) -> &RegionConstraintData<'tcx> {
        .                   &self.data
        .               }
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
  123,320 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
1,035,120 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
  172,520 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  517,560 ( 0.01%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  172,520 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
1,380,160 ( 0.02%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
   64,813 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
1,050,830 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  594,474 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  396,316 ( 0.00%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
    4,192 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
        .                       if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
    2,096 ( 0.00%)          let index = self.data.verifys.len();
   31,440 ( 0.00%)          self.data.verifys.push(verify);
    2,096 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
       72 ( 0.00%)      pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        8 ( 0.00%)              self.undo_log.push(AddGiven(sub, sup));
        .                   }
       56 ( 0.00%)      }
        .           
  390,820 ( 0.00%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
  195,410 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
  223,152 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  251,046 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
  139,576 ( 0.00%)              match (sub, sup) {
   75,630 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
  126,050 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
   10,312 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
  195,258 ( 0.00%)      }
        .           
      126 ( 0.00%)      pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
        .                   debug!("member_constraint({:?} in {:#?})", member_region, choice_regions);
        .           
        9 ( 0.00%)          if choice_regions.iter().any(|&r| r == member_region) {
        .                       return;
        .                   }
        .           
       81 ( 0.00%)          self.data.member_constraints.push(MemberConstraint {
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
       72 ( 0.00%)      }
        .           
1,422,346 ( 0.02%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
1,036,292 ( 0.01%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
   77,277 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  540,939 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
   74,774 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
    7,789 ( 0.00%)              (&ReVar(sub_id), _) => {
   54,523 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
   30,226 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
   10,480 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
   27,248 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
   10,480 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
        .                       _ if a == b => {
        .                           a // LUB(a,a) = a
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
        .                   }
        .               }
        .           
    1,056 ( 0.00%)      pub fn glb_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
      528 ( 0.00%)          match (a, b) {
        .                       (&ReStatic, r) | (r, &ReStatic) => {
        .                           r // static lives longer than everything else
        .                       }
        .           
      178 ( 0.00%)              _ if a == b => {
        .                           a // GLB(a,a) = a
        .                       }
        .           
    1,068 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
    1,056 ( 0.00%)      }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
  102,814 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
        .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
        .                           })
        .                       }
        .                       _ => region,
        .                   }
        .               }
        .           
        .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
      712 ( 0.00%)          match t {
        .                       Glb => &mut self.glbs,
        .                       Lub => &mut self.lubs,
        .                   }
        .               }
        .           
    1,068 ( 0.00%)      fn combine_vars(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   t: CombineMapType,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .               ) -> Region<'tcx> {
        .                   let vars = TwoRegions { a, b };
        .                   if let Some(&c) = self.combine_map(t).get(&vars) {
        .                       return tcx.mk_region(ReVar(c));
        .                   }
        .                   let a_universe = self.universe(a);
        .                   let b_universe = self.universe(b);
        .                   let c_universe = cmp::max(a_universe, b_universe);
      445 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
        .                   self.combine_map(t).insert(vars, c);
       89 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
      445 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
      712 ( 0.00%)          for old_r in [a, b] {
      178 ( 0.00%)              match t {
    1,513 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
      801 ( 0.00%)      }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
   75,058 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
   10,238 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
   18,880 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
   22,656 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
   22,656 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
   23,274 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    7,758 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
    6,154 ( 0.00%)              .map(|&elt| match elt {
    1,664 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
   31,032 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  452,025 ( 0.01%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
    1,864 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
   40,644 ( 0.00%)          match *self {
    2,938 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
       90 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
    1,864 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
    3,180 ( 0.00%)      pub fn must_hold(&self) -> bool {
    4,580 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
        .                       VerifyBound::IsEmpty => false,
      880 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
        .                   }
    3,710 ( 0.00%)      }
        .           
    1,350 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
    1,980 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
        .                       VerifyBound::IsEmpty => false,
        .                       VerifyBound::OutlivedBy(_) => false,
      180 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
        .                   }
    1,890 ( 0.00%)      }
        .           
      540 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
      720 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
        .                       self
      360 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
      360 ( 0.00%)              vb
        .                   } else {
        .                       VerifyBound::AnyBound(vec![self, vb])
        .                   }
      720 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    4,500 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
  348,610 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  278,888 ( 0.00%)          self.rollback_undo_entry(undo)
  348,610 ( 0.00%)      }
        .           }

4,041,218 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 35 ----------------------------------------
        .           
        .               /// Contains the successors for all the Sccs, concatenated. The
        .               /// range of indices corresponding to a given SCC is found in its
        .               /// SccData.
        .               all_successors: Vec<S>,
        .           }
        .           
        .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
   13,633 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
        .                   SccsConstruction::construct(graph)
   13,671 ( 0.00%)      }
        .           
        .               /// Returns the number of SCCs in the graph.
        .               pub fn num_sccs(&self) -> usize {
        .                   self.scc_data.len()
        .               }
        .           
        .               /// Returns an iterator over the SCCs in the graph.
        .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
        .               /// This is convenient when the edges represent dependencies: when you visit
        .               /// `S1`, the value for `S2` will already have been computed.
        .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
        .                   (0..self.scc_data.len()).map(S::new)
        .               }
        .           
        .               /// Returns the SCC to which a node `r` belongs.
        .               pub fn scc(&self, r: N) -> S {
  200,943 ( 0.00%)          self.scc_indices[r]
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               pub fn successors(&self, scc: S) -> &[S] {
        .                   self.scc_data.successors(scc)
        .               }
        .           
        .               /// Construct the reverse graph of the SCC graph.
        .               pub fn reverse(&self) -> VecGraph<S> {
        8 ( 0.00%)          VecGraph::new(
        .                       self.num_sccs(),
        .                       self.all_sccs()
        .                           .flat_map(|source| {
        .                               self.successors(source).iter().map(move |&target| (target, source))
        .                           })
        .                           .collect(),
        .                   )
        .               }
-- line 82 ----------------------------------------
-- line 116 ----------------------------------------
        .                   self.ranges.len()
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               fn successors(&self, scc: S) -> &[S] {
        .                   // Annoyingly, `range` does not implement `Copy`, so we have
        .                   // to do `range.start..range.end`:
        .                   let range = &self.ranges[scc];
  417,740 ( 0.00%)          &self.all_successors[range.start..range.end]
        .               }
        .           
        .               /// Creates a new SCC with `successors` as its successors and
        .               /// returns the resulting index.
        .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
        .                   // Store the successors on `scc_successors_vec`, remembering
        .                   // the range of indices.
   52,180 ( 0.00%)          let all_successors_start = self.all_successors.len();
        .                   self.all_successors.extend(successors);
        .                   let all_successors_end = self.all_successors.len();
        .           
        .                   debug!(
        .                       "create_scc({:?}) successors={:?}",
        .                       self.ranges.len(),
        .                       &self.all_successors[all_successors_start..all_successors_end],
        .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
        .               /// into the successors_stack, we sometimes get duplicate entries.
        .               /// We use this set to remove those -- we also keep its storage
        .               /// around between successors to amortize memory allocation costs.
        .               duplicate_set: FxHashSet<S>,
        .           
        .               scc_data: SccData<S>,
        .           }
        .           
    7,595 ( 0.00%)  #[derive(Copy, Clone, Debug)]
        .           enum NodeState<N, S> {
        .               /// This node has not yet been visited as part of the DFS.
        .               ///
        .               /// After SCC construction is complete, this state ought to be
        .               /// impossible.
        .               NotVisited,
        .           
        .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// N with depth D can reach some other node N' with lower depth
        .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
        .               /// between them on the stack are part of an SCC.
        .               ///
        .               /// [wikipedia]: https://bit.ly/2EZIx84
        .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
        .                   let num_nodes = graph.num_nodes();
        .           
   16,709 ( 0.00%)          let mut this = Self {
        .                       graph,
        .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
        .                       node_stack: Vec::with_capacity(num_nodes),
        .                       successors_stack: Vec::new(),
        .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
        .                       duplicate_set: FxHashSet::default(),
        .                   };
        .           
        .                   let scc_indices = (0..num_nodes)
        .                       .map(G::Node::new)
  584,826 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
        .                           WalkReturn::Complete { scc_index } => scc_index,
        .                           WalkReturn::Cycle { min_depth } => panic!(
        .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
        .                               node, min_depth
        .                           ),
        .                       })
        .                       .collect();
        .           
    9,114 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
        .               }
        .           
  877,239 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
  389,884 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
        .                       result
        .                   } else {
        .                       self.walk_unvisited_node(node)
        .                   }
  974,710 ( 0.01%)      }
        .           
        .               /// Inspect a node during the DFS. We first examine its current
        .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
        .               /// that the caller might push it onto the stack and start walking its
        .               /// successors.
        .               ///
        .               /// If it is already on the DFS stack it will be in the state
        .               /// `BeingVisited`. In that case, we have found a cycle and we
        .               /// return the depth from the stack.
        .               ///
        .               /// Otherwise, we are looking at a node that has already been
        .               /// completely visited. We therefore return `WalkReturn::Complete`
        .               /// with its associated SCC index.
1,136,912 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
2,273,824 ( 0.03%)          Some(match self.find_state(node) {
  417,723 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
        .           
  142,548 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
        .           
        .                       NodeState::NotVisited => return None,
        .           
        .                       NodeState::InCycleWith { parent } => panic!(
        .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
        .                           parent
        .                       ),
        .                   })
1,989,596 ( 0.02%)      }
        .           
        .               /// Fetches the state of the node `r`. If `r` is recorded as being
        .               /// in a cycle with some other node `r2`, then fetches the state
        .               /// of `r2` (and updates `r` to reflect current result). This is
        .               /// basically the "find" part of a standard union-find algorithm
        .               /// (with path compression).
        .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
        .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
        .                   // following links downwards is then simply as soon as we have
        .                   // found the initial self-loop.
        .                   let mut previous_node = node;
        .           
        .                   // Ultimately assigned by the parent when following
        .                   // `InCycleWith` upwards.
        .                   let node_state = loop {
        .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
2,491,158 ( 0.03%)              match self.node_states[node] {
  556,964 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
  190,064 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
   97,471 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
  103,069 ( 0.00%)                  NodeState::InCycleWith { parent } => {
        .                               // We test this, to be extremely sure that we never
        .                               // ever break our termination condition for the
        .                               // reverse iteration loop.
  103,069 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
        .                               // Store the previous node as an inverted list link
  515,345 ( 0.01%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
        .                               // Update to parent node.
        .                               previous_node = node;
        .                               node = parent;
        .                           }
        .                       }
        .                   };
        .           
        .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
        .                   // We can then walk backwards, starting from `previous_node`, and assign
        .                   // each node in the list with the updated state. The loop terminates
        .                   // when we reach the self-cycle.
        .           
        .                   // Move backwards until we found the node where we started. We
        .                   // will know when we hit the state where previous_node == node.
        .                   loop {
        .                       // Back at the beginning, we can return.
  499,987 ( 0.01%)              if previous_node == node {
        .                           return node_state;
        .                       }
        .                       // Update to previous node in the link.
  206,138 ( 0.00%)              match self.node_states[previous_node] {
  103,069 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
        .                               node = previous_node;
        .                               previous_node = previous;
        .                           }
        .                           // Only InCycleWith nodes were added to the reverse linked list.
        .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
        .                       }
        .           
        .                       debug!("find_state: parent_state = {:?}", node_state);
        .           
        .                       // Update the node state from the parent state. The assigned
        .                       // state is actually a loop invariant but it will only be
        .                       // evaluated if there is at least one backlink to follow.
        .                       // Fully trusting llvm here to find this loop optimization.
  412,276 ( 0.00%)              match node_state {
        .                           // Path compression, make current node point to the same root.
        .                           NodeState::InCycle { .. } => {
   90,582 ( 0.00%)                      self.node_states[node] = node_state;
        .                           }
        .                           // Still visiting nodes, compress to cycle to the node
        .                           // at that depth.
   57,778 ( 0.00%)                  NodeState::BeingVisited { depth } => {
  115,556 ( 0.00%)                      self.node_states[node] =
   57,778 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
        .                           }
        .                           // These are never allowed as parent nodes. InCycleWith
        .                           // should have been followed to a real parent and
        .                           // NotVisited can not be part of a cycle since it should
        .                           // have instead gotten explored.
        .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
        .                               panic!("invalid parent state: {:?}", node_state)
        .                           }
        .                       }
        .                   }
  568,456 ( 0.01%)      }
        .           
        .               /// Walks a node that has never been visited before.
        .               ///
        .               /// Call this method when `inspect_node` has returned `None`. Having the
        .               /// caller decide avoids mutual recursion between the two methods and allows
        .               /// us to maintain an allocated stack for nodes on the path between calls.
        .               #[instrument(skip(self, initial), level = "debug")]
        .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
        .                       successor_node: G::Node,
        .                   }
        .           
        .                   // Move the stack to a local variable. We want to utilize the existing allocation and
        .                   // mutably borrow it without borrowing self at the same time.
        .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
        .                   debug_assert_eq!(successors_stack.len(), 0);
        .           
   10,822 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
        .                       node: initial,
        .                       depth: 0,
        .                       min_depth: 0,
        .                       iter: None,
        .                       successors_len: 0,
        .                       min_cycle_root: initial,
        .                       successor_node: initial,
        .                   }];
        .           
        .                   let mut return_value = None;
        .           
   97,471 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
        .                       let VisitingNodeFrame {
  386,604 ( 0.00%)                  node,
        .                           depth,
        .                           iter,
  386,792 ( 0.00%)                  successors_len,
        .                           min_depth,
        .                           min_cycle_root,
        .                           successor_node,
        .                       } = frame;
        .           
  193,396 ( 0.00%)              let node = *node;
  386,980 ( 0.00%)              let depth = *depth;
        .           
  580,188 ( 0.01%)              let successors = match iter {
        .                           Some(iter) => iter,
        .                           None => {
        .                               // This None marks that we still have the initialize this node's frame.
        .                               debug!(?depth, ?node);
        .           
        .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
        .           
        .                               // Push `node` onto the stack.
  389,884 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
        .                               self.node_stack.push(node);
        .           
        .                               // Walk each successor of the node, looking to see if any of
        .                               // them can reach a node that is presently on the stack. If
        .                               // so, that means they can also reach us.
  194,942 ( 0.00%)                      *successors_len = successors_stack.len();
        .                               // Set and return a reference, this is currently empty.
  389,767 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
        .                           }
        .                       };
        .           
        .                       // Now that iter is initialized, this is a constant for this frame.
  386,792 ( 0.00%)              let successors_len = *successors_len;
        .           
        .                       // Construct iterators for the nodes and walk results. There are two cases:
        .                       // * The walk of a successor node returned.
        .                       // * The remaining successor nodes.
        .                       let returned_walk =
        .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
        .           
        .                       let successor_walk = successors.by_ref().map(|successor_node| {
        .                           debug!(?node, ?successor_node);
  560,271 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
        .                       });
        .           
  760,494 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
  945,114 ( 0.01%)                  match walk {
        .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
        .                                   // Track the minimum depth we can reach.
  185,614 ( 0.00%)                          assert!(successor_min_depth <= depth);
  231,641 ( 0.00%)                          if successor_min_depth < *min_depth {
        .                                       debug!(?node, ?successor_min_depth);
  138,010 ( 0.00%)                              *min_depth = successor_min_depth;
   46,027 ( 0.00%)                              *min_cycle_root = successor_node;
        .                                   }
        .                               }
        .           
        .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
        .                                   // Push the completed SCC indices onto
        .                                   // the `successors_stack` for later.
        .                                   debug!(?node, ?successor_scc_index);
        .                                   successors_stack.push(successor_scc_index);
        .                               }
        .           
        .                               None => {
  191,850 ( 0.00%)                          let depth = depth + 1;
        .                                   debug!(?depth, ?successor_node);
        .                                   // Remember which node the return value will come from.
   95,925 ( 0.00%)                          frame.successor_node = successor_node;
        .                                   // Start a new stack frame the step into it.
        .                                   stack.push(VisitingNodeFrame {
        .                                       node: successor_node,
        .                                       depth,
        .                                       iter: None,
        .                                       successors_len: 0,
        .                                       min_depth: depth,
        .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
        .                       let frame = stack.pop().unwrap();
        .           
        .                       // If `min_depth == depth`, then we are the root of the
        .                       // cycle: we can't reach anyone further down the stack.
        .           
        .                       // Pass the 'return value' down the stack.
        .                       // We return one frame at a time so there can't be another return value.
        .                       debug_assert!(return_value.is_none());
  194,942 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
        .                           // Note that successor stack may have duplicates, so we
        .                           // want to remove those:
        .                           let deduplicated_successors = {
        .                               let duplicate_set = &mut self.duplicate_set;
        .                               duplicate_set.clear();
        .                               successors_stack
        .                                   .drain(successors_len..)
   93,950 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
        .                           };
        .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
  313,080 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
        .                           WalkReturn::Complete { scc_index }
        .                       } else {
        .                           // We are not the head of the cycle. Return back to our
        .                           // caller. They will take ownership of the
        .                           // `self.successors` data that we pushed.
  271,746 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
        .                           WalkReturn::Cycle { min_depth: frame.min_depth }
        .                       });
        .                   }
        .           
        .                   // Keep the allocation we used for successors_stack.
   13,914 ( 0.00%)          self.successors_stack = successors_stack;
        .                   debug_assert_eq!(self.successors_stack.len(), 0);
        .           
        .                   return_value.unwrap()
        .               }
        .           }

4,487,565 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                           self.extend(remainder.iter().cloned());
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {
   24,479 ( 0.00%)      fn drop(&mut self) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
        .           
        .                   let (front, back) = self.as_mut_slices();
        .                   unsafe {
        .                       let _back_dropper = Dropper(back);
        .                       // use drop for [T]
        .                       ptr::drop_in_place(front);
        .                   }
        .                   // RawVec handles deallocation
   27,976 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Default for VecDeque<T> {
        .               /// Creates an empty `VecDeque<T>`.
        .               #[inline]
        .               fn default() -> VecDeque<T> {
        .                   VecDeque::new()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Marginally more convenient
        .               #[inline]
        .               fn ptr(&self) -> *mut T {
1,052,751 ( 0.01%)          self.buf.ptr()
        .               }
        .           
        .               /// Marginally more convenient
        .               #[inline]
        .               fn cap(&self) -> usize {
        .                   if mem::size_of::<T>() == 0 {
        .                       // For zero sized types, we are always at maximum capacity
        .                       MAXIMUM_ZST_CAPACITY
        .                   } else {
1,157,031 ( 0.01%)              self.buf.capacity()
        .                   }
        .               }
        .           
        .               /// Turn ptr into a slice
        .               #[inline]
        .               unsafe fn buffer_as_slice(&self) -> &[T] {
        .                   unsafe { slice::from_raw_parts(self.ptr(), self.cap()) }
        .               }
-- line 188 ----------------------------------------
-- line 191 ----------------------------------------
        .               #[inline]
        .               unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.ptr(), self.cap()) }
        .               }
        .           
        .               /// Moves an element out of the buffer
        .               #[inline]
        .               unsafe fn buffer_read(&mut self, off: usize) -> T {
  225,051 ( 0.00%)          unsafe { ptr::read(self.ptr().add(off)) }
        .               }
        .           
        .               /// Writes an element into the buffer, moving it.
        .               #[inline]
        .               unsafe fn buffer_write(&mut self, off: usize, value: T) {
        .                   unsafe {
        .                       ptr::write(self.ptr().add(off), value);
        .                   }
        .               }
        .           
        .               /// Returns `true` if the buffer is at full capacity.
        .               #[inline]
        .               fn is_full(&self) -> bool {
2,774,121 ( 0.03%)          self.cap() - self.len() == 1
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index.
        .               #[inline]
        .               fn wrap_index(&self, idx: usize) -> usize {
        .                   wrap_index(idx, self.cap())
        .               }
-- line 221 ----------------------------------------
-- line 452 ----------------------------------------
        .                   //   [o o . o o o o o ]
        .                   //          T             H
        .                   // B [. . . o o o o o o o . . . . . . ]
        .                   //              H T
        .                   //   [o o o o o . o o ]
        .                   //              H                 T
        .                   // C [o o o o o . . . . . . . . . o o ]
        .           
    8,520 ( 0.00%)          if self.tail <= self.head {
        .                       // A
        .                       // Nop
      111 ( 0.00%)          } else if self.head < old_capacity - self.tail {
        .                       // B
        .                       unsafe {
       16 ( 0.00%)                  self.copy_nonoverlapping(old_capacity, 0, self.head);
        .                       }
       67 ( 0.00%)              self.head += old_capacity;
        .                       debug_assert!(self.head > self.tail);
        .                   } else {
        .                       // C
        4 ( 0.00%)              let new_tail = new_capacity - (old_capacity - self.tail);
        .                       unsafe {
        .                           self.copy_nonoverlapping(new_tail, self.tail, old_capacity - self.tail);
        .                       }
        2 ( 0.00%)              self.tail = new_tail;
        .                       debug_assert!(self.head < self.tail);
        .                   }
        .                   debug_assert!(self.head < self.cap());
        .                   debug_assert!(self.tail < self.cap());
        .                   debug_assert!(self.cap().count_ones() == 1);
        .               }
        .           }
        .           
-- line 484 ----------------------------------------
-- line 507 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> VecDeque<T> {
   13,008 ( 0.00%)          Self::with_capacity_in(capacity, Global)
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Creates an empty `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 523 ----------------------------------------
-- line 524 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::new();
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn new_in(alloc: A) -> VecDeque<T, A> {
    3,944 ( 0.00%)          VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)
        .               }
        .           
        .               /// Creates an empty `VecDeque` with space for at least `capacity` elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[unstable(feature = "allocator_api", issue = "32838")]
   33,904 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
   22,916 ( 0.00%)          assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
        .                   // +1 since the ringbuffer always leaves one space empty
        .                   let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();
        .           
   51,334 ( 0.00%)          VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }
   50,856 ( 0.00%)      }
        .           
        .               /// Provides a reference to the element at the given index.
        .               ///
        .               /// Element at index 0 is the front of the queue.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 559 ----------------------------------------
-- line 562 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(3);
        .               /// buf.push_back(4);
        .               /// buf.push_back(5);
        .               /// assert_eq!(buf.get(1), Some(&4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self, index: usize) -> Option<&T> {
3,889,732 ( 0.04%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&*self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Provides a mutable reference to the element at the given index.
-- line 578 ----------------------------------------
-- line 591 ----------------------------------------
        .               /// if let Some(elem) = buf.get_mut(1) {
        .               ///     *elem = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(buf[1], 7);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
2,130,424 ( 0.02%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&mut *self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Swaps elements at indices `i` and `j`.
-- line 607 ----------------------------------------
-- line 692 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf: VecDeque<i32> = [1].into();
        .               /// buf.reserve(10);
        .               /// assert!(buf.capacity() >= 11);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        3 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
        .                   let old_cap = self.cap();
       18 ( 0.00%)          let used_cap = self.len() + 1;
        .                   let new_cap = used_cap
        .                       .checked_add(additional)
        .                       .and_then(|needed_cap| needed_cap.checked_next_power_of_two())
        .                       .expect("capacity overflow");
        .           
       34 ( 0.00%)          if new_cap > old_cap {
       52 ( 0.00%)              self.buf.reserve_exact(used_cap, new_cap - used_cap);
        .                       unsafe {
        .                           self.handle_capacity_increase(old_cap);
        .                       }
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Tries to reserve the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `VecDeque<T>`. After calling `try_reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 722 ----------------------------------------
-- line 924 ----------------------------------------
        .               /// buf.push_back(5);
        .               /// buf.push_back(10);
        .               /// buf.push_back(15);
        .               /// assert_eq!(buf, [5, 10, 15]);
        .               /// buf.truncate(1);
        .               /// assert_eq!(buf, [5]);
        .               /// ```
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
    4,160 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 940 ----------------------------------------
-- line 945 ----------------------------------------
        .                   // Safe because:
        .                   //
        .                   // * Any slice passed to `drop_in_place` is valid; the second case has
        .                   //   `len <= front.len()` and returning on `len > self.len()` ensures
        .                   //   `begin <= back.len()` in the first case
        .                   // * The head of the VecDeque is moved before calling `drop_in_place`,
        .                   //   so no value is dropped twice if `drop_in_place` panics
        .                   unsafe {
    1,040 ( 0.00%)              if len > self.len() {
        .                           return;
        .                       }
        .                       let num_dropped = self.len() - len;
        .                       let (front, back) = self.as_mut_slices();
    1,040 ( 0.00%)              if len > front.len() {
        .                           let begin = len - front.len();
        .                           let drop_back = back.get_unchecked_mut(begin..) as *mut _;
        .                           self.head = self.wrap_sub(self.head, num_dropped);
        .                           ptr::drop_in_place(drop_back);
        .                       } else {
        .                           let drop_back = back as *mut _;
        .                           let drop_front = front.get_unchecked_mut(len..) as *mut _;
      520 ( 0.00%)                  self.head = self.wrap_sub(self.head, num_dropped);
        .           
        .                           // Make sure the second half is dropped even when a destructor
        .                           // in the first one panics.
        .                           let _back_dropper = Dropper(&mut *drop_back);
        .                           ptr::drop_in_place(drop_front);
        .                       }
        .                   }
    4,160 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   self.buf.allocator()
        .               }
        .           
-- line 982 ----------------------------------------
-- line 1085 ----------------------------------------
        .               /// vector.as_mut_slices().0[0] = 42;
        .               /// vector.as_mut_slices().1[0] = 24;
        .               /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "deque_extras_15", since = "1.5.0")]
        .               pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
        .                   unsafe {
   16,489 ( 0.00%)              let head = self.head;
   16,489 ( 0.00%)              let tail = self.tail;
   19,016 ( 0.00%)              let buf = self.buffer_as_mut_slice();
        .                       RingSlices::ring_slices(buf, head, tail)
        .                   }
        .               }
        .           
        .               /// Returns the number of elements in the `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 1103 ----------------------------------------
-- line 1106 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert_eq!(v.len(), 0);
        .               /// v.push_back(1);
        .               /// assert_eq!(v.len(), 1);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
1,767,634 ( 0.02%)          count(self.tail, self.head, self.cap())
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
-- line 1122 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert!(v.is_empty());
        .               /// v.push_front(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
3,623,406 ( 0.04%)          self.tail == self.head
        .               }
        .           
        .               fn range_tail_head<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   let Range { start, end } = slice::range(range, ..self.len());
        .                   let tail = self.wrap_add(self.tail, start);
-- line 1139 ----------------------------------------
-- line 1307 ----------------------------------------
        .               /// let mut v = VecDeque::new();
        .               /// v.push_back(1);
        .               /// v.clear();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn clear(&mut self) {
    1,040 ( 0.00%)          self.truncate(0);
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` contains an element equal to the
        .               /// given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1323 ----------------------------------------
-- line 1396 ----------------------------------------
        .               /// assert_eq!(d.back(), None);
        .               ///
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               /// assert_eq!(d.back(), Some(&2));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn back(&self) -> Option<&T> {
   60,703 ( 0.00%)          self.get(self.len().wrapping_sub(1))
        .               }
        .           
        .               /// Provides a mutable reference to the back element, or `None` if the
        .               /// `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1412 ----------------------------------------
-- line 1441 ----------------------------------------
        .               /// d.push_back(2);
        .               ///
        .               /// assert_eq!(d.pop_front(), Some(1));
        .               /// assert_eq!(d.pop_front(), Some(2));
        .               /// assert_eq!(d.pop_front(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_front(&mut self) -> Option<T> {
  715,918 ( 0.01%)          if self.is_empty() {
        .                       None
        .                   } else {
        .                       let tail = self.tail;
1,211,146 ( 0.01%)              self.tail = self.wrap_add(self.tail, 1);
   75,185 ( 0.00%)              unsafe { Some(self.buffer_read(tail)) }
        .                   }
        .               }
        .           
        .               /// Removes the last element from the `VecDeque` and returns it, or `None` if
        .               /// it is empty.
        .               ///
        .               /// # Examples
        .               ///
-- line 1462 ----------------------------------------
-- line 1466 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// assert_eq!(buf.pop_back(), None);
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(buf.pop_back(), Some(3));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_back(&mut self) -> Option<T> {
  314,530 ( 0.00%)          if self.is_empty() {
        .                       None
        .                   } else {
  494,575 ( 0.01%)              self.head = self.wrap_sub(self.head, 1);
        .                       let head = self.head;
        .                       unsafe { Some(self.buffer_read(head)) }
        .                   }
        .               }
        .           
        .               /// Prepends an element to the `VecDeque`.
        .               ///
        .               /// # Examples
-- line 1485 ----------------------------------------
-- line 1513 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(3, *buf.back().unwrap());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
2,082,320 ( 0.02%)      pub fn push_back(&mut self, value: T) {
2,774,079 ( 0.03%)          if self.is_full() {
    3,617 ( 0.00%)              self.grow();
        .                   }
        .           
    2,113 ( 0.00%)          let head = self.head;
  926,799 ( 0.01%)          self.head = self.wrap_add(self.head, 1);
  404,106 ( 0.00%)          unsafe { self.buffer_write(head, value) }
2,082,320 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn is_contiguous(&self) -> bool {
        .                   // FIXME: Should we consider `head == 0` to mean
        .                   // that `self` is contiguous?
        .                   self.tail <= self.head
        .               }
        .           
-- line 1537 ----------------------------------------
-- line 2209 ----------------------------------------
        .                       self.truncate(idx);
        .                   }
        .               }
        .           
        .               // Double the buffer size. This method is inline(never), so we expect it to only
        .               // be called in cold paths.
        .               // This may panic or abort
        .               #[inline(never)]
   12,678 ( 0.00%)      fn grow(&mut self) {
        .                   // Extend or possibly remove this assertion when valid use-cases for growing the
        .                   // buffer without it being full emerge
        .                   debug_assert!(self.is_full());
        .                   let old_cap = self.cap();
    6,339 ( 0.00%)          self.buf.reserve_exact(old_cap, old_cap);
   10,565 ( 0.00%)          assert!(self.cap() == old_cap * 2);
        .                   unsafe {
        .                       self.handle_capacity_increase(old_cap);
        .                   }
        .                   debug_assert!(!self.is_full());
   12,678 ( 0.00%)      }
        .           
        .               /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,
        .               /// either by removing excess elements from the back or by appending
        .               /// elements generated by calling `generator` to the back.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2236 ----------------------------------------
-- line 2751 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Returns the index in the underlying buffer for a given logical element index.
        .           #[inline]
        .           fn wrap_index(index: usize, size: usize) -> usize {
        .               // size is always a power of 2
        .               debug_assert!(size.is_power_of_two());
4,908,573 ( 0.06%)      index & (size - 1)
        .           }
        .           
        .           /// Calculate the number of elements left to be read in the buffer
        .           #[inline]
        .           fn count(tail: usize, head: usize, size: usize) -> usize {
        .               // size is always a power of 2
7,738,493 ( 0.09%)      (head.wrapping_sub(tail)) & (size - 1)
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialEq, A: Allocator> PartialEq for VecDeque<T, A> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   if self.len() != other.len() {
        .                       return false;
        .                   }
-- line 2774 ----------------------------------------
-- line 2902 ----------------------------------------
        .           
        .               fn into_iter(self) -> IterMut<'a, T> {
        .                   self.iter_mut()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {
    1,624 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iter.into_iter() {
        .                   //          self.push_back(item);
        .                   //      }
        .                   let mut iter = iter.into_iter();
        .                   while let Some(element) = iter.next() {
    6,222 ( 0.00%)              if self.len() == self.capacity() {
        .                           let (lower, _) = iter.size_hint();
        2 ( 0.00%)                  self.reserve(lower.saturating_add(1));
        .                       }
        .           
        1 ( 0.00%)              let head = self.head;
    1,407 ( 0.00%)              self.head = self.wrap_add(self.head, 1);
        .                       unsafe {
      224 ( 0.00%)                  self.buffer_write(head, element);
        .                       }
        .                   }
    1,856 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, elem: T) {
        .                   self.push_back(elem);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2937 ----------------------------------------

1,082,080 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               PushRegionObligation,
        .           }
        .           
        .           macro_rules! impl_from {
        .               ($($ctor: ident ($ty: ty),)*) => {
        .                   $(
        .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
        .                       fn from(x: $ty) -> Self {
    2,183 ( 0.00%)                  UndoLog::$ctor(x.into())
        .                       }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           // Upcast from a single kind of "undoable action" to the general enum
        .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
        .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
        .           
        .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
        .               ProjectionCache(traits::UndoLog<'tcx>),
        .           }
        .           
        .           /// The Rollback trait defines how to rollback a particular action.
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
1,776,207 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
2,960,345 ( 0.03%)          match undo {
4,627,510 ( 0.05%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      706 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    3,370 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
        .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
        .                       UndoLog::RegionConstraintCollector(undo) => {
  488,054 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
        .                       }
        .                       UndoLog::RegionUnificationTable(undo) => {
  114,546 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
        .                       }
        .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
        .                       UndoLog::PushRegionObligation => {
        .                           self.region_obligations.pop();
        .                       }
        .                   }
2,368,276 ( 0.03%)      }
        .           }
        .           
        .           /// The combined undo log for all the various unification tables. For each change to the storage
        .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
        .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
        .               logs: Vec<UndoLog<'tcx>>,
        .               num_open_snapshots: usize,
        .           }
        .           
        .           impl Default for InferCtxtUndoLogs<'_> {
        .               fn default() -> Self {
   54,840 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
        .               }
        .           }
        .           
        .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
        .           /// action that is convertable into an UndoLog (per the From impls above).
        .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
        .           where
        .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
        .           {
        .               #[inline]
        .               fn num_open_snapshots(&self) -> usize {
        .                   self.num_open_snapshots
        .               }
        .           
        .               #[inline]
        .               fn push(&mut self, undo: T) {
  427,002 ( 0.00%)          if self.in_snapshot() {
   17,464 ( 0.00%)              self.logs.push(undo.into())
        .                   }
        .               }
        .           
        .               fn clear(&mut self) {
        .                   self.logs.clear();
        .                   self.num_open_snapshots = 0;
        .               }
        .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
        .               {
        .                   if self.in_snapshot() {
        .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  739,920 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("rollback_to({})", snapshot.undo_len);
        .                   self.undo_log.assert_open_snapshot(&snapshot);
        .           
2,022,847 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
        .                       let undo = self.undo_log.logs.pop().unwrap();
7,104,828 ( 0.08%)              self.reverse(undo);
        .                   }
        .           
  333,528 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   39,682 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  389,801 ( 0.00%)          self.undo_log.num_open_snapshots -= 1;
  863,240 ( 0.01%)      }
        .           
        .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("commit({})", snapshot.undo_len);
        .           
1,484,424 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
  259,872 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
1,614,360 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
        .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
2,472,512 ( 0.03%)          self.num_open_snapshots += 1;
        .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
        .               }
        .           
        .               pub(crate) fn region_constraints_in_snapshot(
        .                   &self,
        .                   s: &Snapshot<'tcx>,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
   30,050 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               pub(crate) fn region_constraints(
        .                   &self,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
      729 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
        .                   // Failures here may indicate a failure to follow a stack discipline.
  369,960 ( 0.00%)          assert!(self.logs.len() >= snapshot.undo_len);
  369,960 ( 0.00%)          assert!(self.num_open_snapshots > 0);
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
        .               type Output = UndoLog<'tcx>;
        .           
        .               fn index(&self, key: usize) -> &Self::Output {
        .                   &self.logs[key]
-- line 204 ----------------------------------------

  717,869 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
     3,316 ( 0.00%)          let old = self.replace(val);
     6,008 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   595,574 ( 0.01%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
 2,011,015 ( 0.02%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
   135,847 ( 0.00%)          RefCell {
   115,252 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
     7,972 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    16,729 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    50,187 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
   171,379 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   514,137 ( 0.01%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
        24 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 2,934,858 ( 0.03%)          let b = borrow.get().wrapping_add(1);
 1,719,185 ( 0.02%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
 1,379,917 ( 0.02%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 2,753,335 ( 0.03%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
14,289,576 ( 0.16%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
27,538,831 ( 0.31%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
29,343,755 ( 0.34%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
     2,000 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
10,599,867 ( 0.12%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

21,368,234 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 72 ----------------------------------------
        .               /// it might do things like invoke `sub_regions`, which would be
        .               /// bad, because it would create subregion relationships that are
        .               /// not captured in the return value.
        .               fn perform_query(
        .                   tcx: TyCtxt<'tcx>,
        .                   canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,
        .               ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;
        .           
2,843,045 ( 0.03%)      fn fully_perform_into(
        .                   query_key: ParamEnvAnd<'tcx, Self>,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,
        .               ) -> Fallible<(
        .                   Self::QueryResponse,
        .                   Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,
        .                   PredicateObligations<'tcx>,
        .                   Certainty,
        .               )> {
  693,261 ( 0.01%)          if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {
1,276,819 ( 0.01%)              return Ok((result, None, vec![], Certainty::Proven));
        .                   }
        .           
        .                   // FIXME(#33684) -- We need to use
        .                   // `canonicalize_query_keep_static` here because of things
        .                   // like the subtype query, which go awry around
        .                   // `'static` otherwise.
   59,382 ( 0.00%)          let mut canonical_var_values = OriginalQueryValues::default();
    1,914 ( 0.00%)          let old_param_env = query_key.param_env;
        .                   let canonical_self =
   37,838 ( 0.00%)              infcx.canonicalize_query_keep_static(query_key, &mut canonical_var_values);
  291,707 ( 0.00%)          let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;
        .           
  380,751 ( 0.00%)          let InferOk { value, obligations } = infcx
        .                       .instantiate_nll_query_response_and_region_obligations(
        .                           &ObligationCause::dummy(),
        .                           old_param_env,
        .                           &canonical_var_values,
        .                           canonical_result,
        .                           output_query_region_constraints,
        .                       )?;
        .           
  472,471 ( 0.01%)          Ok((value, Some(canonical_self), obligations, canonical_result.value.certainty))
2,533,201 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx, Q> TypeOp<'tcx> for ParamEnvAnd<'tcx, Q>
        .           where
        .               Q: QueryTypeOp<'tcx>,
        .           {
        .               type Output = Q::QueryResponse;
        .           
2,337,040 ( 0.03%)      fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {
        .                   let mut region_constraints = QueryRegionConstraints::default();
1,805,785 ( 0.02%)          let (output, canonicalized_query, mut obligations, _) =
  350,699 ( 0.00%)              Q::fully_perform_into(self, infcx, &mut region_constraints)?;
        .           
        .                   // Typically, instantiating NLL query results does not
        .                   // create obligations. However, in some cases there
        .                   // are unresolved type variables, and unify them *can*
        .                   // create obligations. In that case, we have to go
        .                   // fulfill them. We do this via a (recursive) query.
  292,153 ( 0.00%)          while !obligations.is_empty() {
        .                       trace!("{:#?}", obligations);
        .                       let mut progress = false;
      547 ( 0.00%)              for obligation in std::mem::take(&mut obligations) {
      144 ( 0.00%)                  let obligation = infcx.resolve_vars_if_possible(obligation);
      576 ( 0.00%)                  match ProvePredicate::fully_perform_into(
      144 ( 0.00%)                      obligation.param_env.and(ProvePredicate::new(obligation.predicate)),
        .                               infcx,
        .                               &mut region_constraints,
        .                           ) {
      144 ( 0.00%)                      Ok(((), _, new, certainty)) => {
        .                                   obligations.extend(new);
        .                                   progress = true;
       72 ( 0.00%)                          if let Certainty::Ambiguous = certainty {
        .                                       obligations.push(obligation);
        .                                   }
        .                               }
        .                               Err(_) => obligations.push(obligation),
        .                           }
        .                       }
       46 ( 0.00%)              if !progress {
        .                           return Err(NoSolution);
        .                       }
        .                   }
        .           
        .                   // Promote the final query-region-constraints into a
        .                   // (optional) ref-counted vector:
        .                   let region_constraints =
1,168,520 ( 0.01%)              if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };
        .           
3,647,002 ( 0.04%)          Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })
2,921,300 ( 0.03%)      }
        .           }

2,043,890 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs
--------------------------------------------------------------------------------
Ir                 

-- line 30 ----------------------------------------
        .           // the final TypeckResults since all of the types should have been
        .           // inferred once typeck is done.
        .           // When type inference is running however, having to update the typeck
        .           // typeck results every time a new type is inferred would be unreasonably slow,
        .           // so instead all of the replacement happens at the end in
        .           // resolve_type_vars_in_body, which creates a new TypeTables which
        .           // doesn't contain any inference types.
        .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
   12,933 ( 0.00%)      pub fn resolve_type_vars_in_body(
        .                   &self,
        .                   body: &'tcx hir::Body<'tcx>,
        .               ) -> &'tcx ty::TypeckResults<'tcx> {
   14,370 ( 0.00%)          let item_id = self.tcx.hir().body_owner(body.id());
    8,622 ( 0.00%)          let item_def_id = self.tcx.hir().local_def_id(item_id);
        .           
        .                   // This attribute causes us to dump some writeback information
        .                   // in the form of errors, which is used for unit tests.
        .                   let rustc_dump_user_substs =
    8,622 ( 0.00%)              self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);
        .           
        .                   let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);
    5,748 ( 0.00%)          for param in body.params {
   12,609 ( 0.00%)              wbcx.visit_node_id(param.pat.span, param.hir_id);
        .                   }
        .                   // Type only exists for constants and statics, not functions.
   15,807 ( 0.00%)          match self.tcx.hir().body_owner_kind(item_id) {
        .                       hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {
    2,520 ( 0.00%)                  wbcx.visit_node_id(body.value.span, item_id);
        .                       }
        .                       hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),
        .                   }
        .                   wbcx.visit_body(body);
    1,437 ( 0.00%)          wbcx.visit_min_capture_map();
    1,437 ( 0.00%)          wbcx.eval_closure_size();
    1,437 ( 0.00%)          wbcx.visit_fake_reads_map();
    1,437 ( 0.00%)          wbcx.visit_closures();
    1,437 ( 0.00%)          wbcx.visit_liberated_fn_sigs();
    1,437 ( 0.00%)          wbcx.visit_fru_field_types();
    4,311 ( 0.00%)          wbcx.visit_opaque_types(body.value.span);
    1,437 ( 0.00%)          wbcx.visit_coercion_casts();
    1,437 ( 0.00%)          wbcx.visit_user_provided_tys();
    1,437 ( 0.00%)          wbcx.visit_user_provided_sigs();
    1,437 ( 0.00%)          wbcx.visit_generator_interior_types();
        .           
        .                   let used_trait_imports =
    2,874 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().used_trait_imports);
        .                   debug!("used_trait_imports({:?}) = {:?}", item_def_id, used_trait_imports);
    2,874 ( 0.00%)          wbcx.typeck_results.used_trait_imports = used_trait_imports;
        .           
    7,185 ( 0.00%)          wbcx.typeck_results.treat_byte_string_as_slice =
    1,437 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);
        .           
    4,311 ( 0.00%)          if self.is_tainted_by_errors() {
        .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
        .                       wbcx.typeck_results.tainted_by_errors = Some(ErrorReported);
        .                   }
        .           
        .                   debug!("writeback: typeck results for {:?} are {:#?}", item_def_id, wbcx.typeck_results);
        .           
    2,874 ( 0.00%)          self.tcx.arena.alloc(wbcx.typeck_results)
   12,933 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The Writeback context. This visitor walks the HIR, checking the
        .           // fn-specific typeck results to find references to types or regions. It
        .           // resolves those regions to remove inference variables and writes the
        .           // final result back into the master typeck results in the tcx. Here and
        .           // there, it applies a few ad-hoc checks that were not convenient to
-- line 98 ----------------------------------------
-- line 109 ----------------------------------------
        .           }
        .           
        .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
        .               fn new(
        .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
        .                   body: &'tcx hir::Body<'tcx>,
        .                   rustc_dump_user_substs: bool,
        .               ) -> WritebackCx<'cx, 'tcx> {
    2,874 ( 0.00%)          let owner = body.id().hir_id.owner;
        .           
   12,933 ( 0.00%)          WritebackCx {
        .                       fcx,
    5,748 ( 0.00%)              typeck_results: ty::TypeckResults::new(owner),
        .                       body,
        .                       rustc_dump_user_substs,
        .                   }
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    4,194 ( 0.00%)          self.fcx.tcx
        .               }
        .           
        .               fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {
        .                   debug!("write_ty_to_typeck_results({:?}, {:?})", hir_id, ty);
  422,946 ( 0.00%)          assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());
  563,498 ( 0.01%)          self.typeck_results.node_types_mut().insert(hir_id, ty);
        .               }
        .           
        .               // Hacky hack: During type-checking, we treat *all* operators
        .               // as potentially overloaded. But then, during writeback, if
        .               // we observe that something like `a+b` is (known to be)
        .               // operating on scalars, we clear the overload.
        .               fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {
  884,147 ( 0.01%)          match e.kind {
      158 ( 0.00%)              hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {
      632 ( 0.00%)                  let inner_ty = self.fcx.node_ty(inner.hir_id);
        .                           let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);
        .           
        .                           if inner_ty.is_scalar() {
      158 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
      948 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      316 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .                           }
        .                       }
        .                       hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {
    5,145 ( 0.00%)                  let lhs_ty = self.fcx.node_ty(lhs.hir_id);
        .                           let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);
        .           
    4,116 ( 0.00%)                  let rhs_ty = self.fcx.node_ty(rhs.hir_id);
        .                           let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);
        .           
        .                           if lhs_ty.is_scalar() && rhs_ty.is_scalar() {
      732 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
    3,660 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      732 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .           
    1,544 ( 0.00%)                      match e.kind {
        .                                   hir::ExprKind::Binary(..) => {
    2,768 ( 0.00%)                              if !op.node.is_by_value() {
      307 ( 0.00%)                                  let mut adjustments = typeck_results.adjustments_mut();
    1,842 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(lhs.hir_id) {
        .                                               a.pop();
        .                                           }
    1,228 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(rhs.hir_id) {
        .                                               a.pop();
        .                                           }
        .                                       }
        .                                   }
        .                                   hir::ExprKind::AssignOp(..)
      200 ( 0.00%)                              if let Some(a) = typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>
        .                                   {
        .                                       a.pop();
        .                                   }
        .                                   _ => {}
        .                               }
        .                           }
        .                       }
        .                       _ => {}
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
        .                   }
        .               }
        .           
        .               // Similar to operators, indexing is always assumed to be overloaded
        .               // Here, correct cases where an indexing expression can be simplified
        .               // to use builtin indexing because the index type is known to be
        .               // usize-ish
        .               fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {
  254,520 ( 0.00%)          if let hir::ExprKind::Index(ref base, ref index) = e.kind {
      286 ( 0.00%)              let mut typeck_results = self.fcx.typeck_results.borrow_mut();
        .           
        .                       // All valid indexing looks like this; might encounter non-valid indexes at this point.
      286 ( 0.00%)              let base_ty = typeck_results
      143 ( 0.00%)                  .expr_ty_adjusted_opt(base)
        .                           .map(|t| self.fcx.resolve_vars_if_possible(t).kind());
        .                       if base_ty.is_none() {
        .                           // When encountering `return [0][0]` outside of a `fn` body we can encounter a base
        .                           // that isn't in the type table. We assume more relevant errors have already been
        .                           // emitted, so we delay an ICE if none have. (#64638)
        .                           self.tcx().sess.delay_span_bug(e.span, &format!("bad base: `{:?}`", base));
        .                       }
      286 ( 0.00%)              if let Some(ty::Ref(_, base_ty, _)) = base_ty {
      572 ( 0.00%)                  let index_ty = typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {
        .                               // When encountering `return [0][0]` outside of a `fn` body we would attempt
        .                               // to access an unexistend index. We assume that more relevant errors will
        .                               // already have been emitted, so we only gate on this with an ICE if no
        .                               // error has been emitted. (#64638)
        .                               self.fcx.tcx.ty_error_with_message(
        .                                   e.span,
        .                                   &format!("bad index {:?} for base: `{:?}`", index, base),
        .                               )
        .                           });
        .                           let index_ty = self.fcx.resolve_vars_if_possible(index_ty);
        .           
      579 ( 0.00%)                  if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {
        .                               // Remove the method call record
      300 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      300 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .           
      500 ( 0.00%)                      if let Some(a) = typeck_results.adjustments_mut().get_mut(base.hir_id) {
        .                                   // Discard the need for a mutable borrow
        .           
        .                                   // Extra adjustment made when indexing causes a drop
        .                                   // of size information - we need to get rid of it
        .                                   // Since this is "after" the other adjustment to be
        .                                   // discarded, we do an extra `pop()`
      100 ( 0.00%)                          if let Some(Adjustment {
        .                                       kind: Adjust::Pointer(PointerCast::Unsize), ..
        .                                   }) = a.pop()
        .                                   {
        .                                       // So the borrow discard actually happens here
        .                                       a.pop();
        .                                   }
        .                               }
        .                           }
-- line 241 ----------------------------------------
-- line 248 ----------------------------------------
        .           // Impl of Visitor for Resolver
        .           //
        .           // This is the master code which walks the AST. It delegates most of
        .           // the heavy lifting to the generic visit and resolve functions
        .           // below. In general, a function is made into a `visitor` if it must
        .           // traffic in node-ids or update typeck results in the type context etc.
        .           
        .           impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {
1,129,239 ( 0.01%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
  125,471 ( 0.00%)          self.fix_scalar_builtin_expr(e);
        .                   self.fix_index_builtin_expr(e);
        .           
  627,355 ( 0.01%)          self.visit_node_id(e.span, e.hir_id);
        .           
  501,884 ( 0.01%)          match e.kind {
      126 ( 0.00%)              hir::ExprKind::Closure(_, _, body, _, _) => {
      378 ( 0.00%)                  let body = self.fcx.tcx.hir().body(body);
      126 ( 0.00%)                  for param in body.params {
      295 ( 0.00%)                      self.visit_node_id(e.span, param.hir_id);
        .                           }
        .           
        .                           self.visit_body(body);
        .                       }
      267 ( 0.00%)              hir::ExprKind::Struct(_, fields, _) => {
        .                           for field in fields {
    2,220 ( 0.00%)                      self.visit_field_id(field.hir_id);
        .                           }
        .                       }
        .                       hir::ExprKind::Field(..) => {
    4,950 ( 0.00%)                  self.visit_field_id(e.hir_id);
        .                       }
        .                       hir::ExprKind::ConstBlock(anon_const) => {
        .                           self.visit_node_id(e.span, anon_const.hir_id);
        .           
        .                           let body = self.tcx().hir().body(anon_const.body);
        .                           self.visit_body(body);
        .                       }
        .                       _ => {}
        .                   }
        .           
  376,413 ( 0.00%)          intravisit::walk_expr(self, e);
1,003,768 ( 0.01%)      }
        .           
   22,005 ( 0.00%)      fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
    9,780 ( 0.00%)          self.visit_node_id(b.span, b.hir_id);
        .                   intravisit::walk_block(self, b);
    5,288 ( 0.00%)      }
        .           
   76,023 ( 0.00%)      fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {
   34,015 ( 0.00%)          match p.kind {
        .                       hir::PatKind::Binding(..) => {
    8,220 ( 0.00%)                  let typeck_results = self.fcx.typeck_results.borrow();
   12,330 ( 0.00%)                  if let Some(bm) =
   32,880 ( 0.00%)                      typeck_results.extract_binding_mode(self.tcx().sess, p.hir_id, p.span)
        .                           {
   12,330 ( 0.00%)                      self.typeck_results.pat_binding_modes_mut().insert(p.hir_id, bm);
        .                           }
        .                       }
      759 ( 0.00%)              hir::PatKind::Struct(_, fields, _) => {
        .                           for field in fields {
    4,308 ( 0.00%)                      self.visit_field_id(field.hir_id);
        .                           }
        .                       }
        .                       _ => {}
        .                   };
        .           
   33,788 ( 0.00%)          self.visit_pat_adjustments(p.span, p.hir_id);
        .           
   42,235 ( 0.00%)          self.visit_node_id(p.span, p.hir_id);
   25,341 ( 0.00%)          intravisit::walk_pat(self, p);
   67,576 ( 0.00%)      }
        .           
    8,552 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
        .                   intravisit::walk_local(self, l);
    6,414 ( 0.00%)          let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;
        .                   let var_ty = self.resolve(var_ty, &l.span);
        .                   self.write_ty_to_typeck_results(l.hir_id, var_ty);
        .               }
        .           
    9,597 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
    1,801 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
    6,344 ( 0.00%)          let ty = self.fcx.node_ty(hir_ty.hir_id);
    1,371 ( 0.00%)          let ty = self.resolve(ty, &hir_ty.span);
        .                   self.write_ty_to_typeck_results(hir_ty.hir_id, ty);
        .               }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   intravisit::walk_inf(self, inf);
        .                   // Ignore cases where the inference is a const.
        .                   if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {
        .                       let ty = self.resolve(ty, &inf.span);
        .                       self.write_ty_to_typeck_results(inf.hir_id, ty);
        .                   }
        .               }
        .           }
        .           
        .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
   10,059 ( 0.00%)      fn eval_closure_size(&mut self) {
        .                   let mut res: FxHashMap<DefId, ClosureSizeProfileData<'tcx>> = Default::default();
    4,311 ( 0.00%)          for (closure_def_id, data) in self.fcx.typeck_results.borrow().closure_size_eval.iter() {
        .                       let closure_hir_id =
        .                           self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
        .           
        .                       let data = self.resolve(*data, &closure_hir_id);
        .           
        .                       res.insert(*closure_def_id, data);
        .                   }
        .           
   14,370 ( 0.00%)          self.typeck_results.closure_size_eval = res;
   11,496 ( 0.00%)      }
   10,059 ( 0.00%)      fn visit_min_capture_map(&mut self) {
        .                   let mut min_captures_wb = ty::MinCaptureInformationMap::with_capacity_and_hasher(
    2,874 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.len(),
        .                       Default::default(),
        .                   );
        .                   for (closure_def_id, root_min_captures) in
    2,874 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.iter()
        .                   {
        .                       let mut root_var_map_wb = ty::RootVariableMinCaptureList::with_capacity_and_hasher(
        .                           root_min_captures.len(),
        .                           Default::default(),
        .                       );
        .                       for (var_hir_id, min_list) in root_min_captures.iter() {
        .                           let min_list_wb = min_list
        .                               .iter()
        .                               .map(|captured_place| {
       96 ( 0.00%)                          let locatable = captured_place.info.path_expr_id.unwrap_or_else(|| {
        .                                       self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local())
        .                                   });
        .           
        .                                   self.resolve(captured_place.clone(), &locatable)
        .                               })
        .                               .collect();
       64 ( 0.00%)                  root_var_map_wb.insert(*var_hir_id, min_list_wb);
        .                       }
       46 ( 0.00%)              min_captures_wb.insert(*closure_def_id, root_var_map_wb);
        .                   }
        .           
   12,933 ( 0.00%)          self.typeck_results.closure_min_captures = min_captures_wb;
   11,496 ( 0.00%)      }
        .           
   10,059 ( 0.00%)      fn visit_fake_reads_map(&mut self) {
        .                   let mut resolved_closure_fake_reads: FxHashMap<
        .                       DefId,
        .                       Vec<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>,
        .                   > = Default::default();
        .                   for (closure_def_id, fake_reads) in
    2,874 ( 0.00%)              self.fcx.typeck_results.borrow().closure_fake_reads.iter()
        .                   {
        .                       let mut resolved_fake_reads = Vec::<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>::new();
        .                       for (place, cause, hir_id) in fake_reads.iter() {
        .                           let locatable =
        .                               self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
        .           
        .                           let resolved_fake_read = self.resolve(place.clone(), &locatable);
        .                           resolved_fake_reads.push((resolved_fake_read, *cause, *hir_id));
        .                       }
      126 ( 0.00%)              resolved_closure_fake_reads.insert(*closure_def_id, resolved_fake_reads);
        .                   }
   12,933 ( 0.00%)          self.typeck_results.closure_fake_reads = resolved_closure_fake_reads;
   11,496 ( 0.00%)      }
        .           
   10,059 ( 0.00%)      fn visit_closures(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    4,311 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
    1,437 ( 0.00%)          for (id, origin) in fcx_typeck_results.closure_kind_origins().iter() {
        .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id: *id };
        .                       let place_span = origin.0;
        .                       let place = self.resolve(origin.1.clone(), &place_span);
        .                       self.typeck_results.closure_kind_origins_mut().insert(hir_id, (place_span, place));
        .                   }
   11,496 ( 0.00%)      }
        .           
   10,059 ( 0.00%)      fn visit_coercion_casts(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    1,437 ( 0.00%)          let fcx_coercion_casts = fcx_typeck_results.coercion_casts();
    2,874 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .           
        .                   for local_id in fcx_coercion_casts {
        .                       self.typeck_results.set_coercion_cast(*local_id);
        .                   }
   11,496 ( 0.00%)      }
        .           
   11,496 ( 0.00%)      fn visit_user_provided_tys(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    5,748 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
        .                   let mut errors_buffer = Vec::new();
    3,519 ( 0.00%)          for (&local_id, c_ty) in fcx_typeck_results.user_provided_types().iter() {
        .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
        .           
        .                       if cfg!(debug_assertions) && c_ty.needs_infer() {
        .                           span_bug!(
        .                               hir_id.to_span(self.fcx.tcx),
        .                               "writeback: `{:?}` has inference variables",
        .                               c_ty
        .                           );
        .                       };
        .           
    9,369 ( 0.00%)              self.typeck_results.user_provided_types_mut().insert(hir_id, *c_ty);
        .           
    6,332 ( 0.00%)              if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {
    1,700 ( 0.00%)                  if self.rustc_dump_user_substs {
        .                               // This is a unit-testing mechanism.
        .                               let span = self.tcx().hir().span(hir_id);
        .                               // We need to buffer the errors in order to guarantee a consistent
        .                               // order when emitting them.
        .                               let err = self
        .                                   .tcx()
        .                                   .sess
        .                                   .struct_span_err(span, &format!("user substs: {:?}", user_substs));
        .                               err.buffer(&mut errors_buffer);
        .                           }
        .                       }
        .                   }
        .           
    1,437 ( 0.00%)          if !errors_buffer.is_empty() {
        .                       errors_buffer.sort_by_key(|diag| diag.span.primary_span());
        .                       for diag in errors_buffer.drain(..) {
        .                           self.tcx().sess.diagnostic().emit_diagnostic(&diag);
        .                       }
        .                   }
   11,496 ( 0.00%)      }
        .           
   10,059 ( 0.00%)      fn visit_user_provided_sigs(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    2,874 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .           
      126 ( 0.00%)          for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {
        .                       if cfg!(debug_assertions) && c_sig.needs_infer() {
        .                           span_bug!(
        .                               self.fcx.tcx.hir().span_if_local(def_id).unwrap(),
        .                               "writeback: `{:?}` has inference variables",
        .                               c_sig
        .                           );
        .                       };
        .           
      378 ( 0.00%)              self.typeck_results.user_provided_sigs.insert(def_id, *c_sig);
        .                   }
   11,496 ( 0.00%)      }
        .           
    7,185 ( 0.00%)      fn visit_generator_interior_types(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    2,874 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
    8,622 ( 0.00%)          self.typeck_results.generator_interior_types =
    2,874 ( 0.00%)              fcx_typeck_results.generator_interior_types.clone();
    8,622 ( 0.00%)      }
        .           
   22,992 ( 0.00%)      #[instrument(skip(self, span), level = "debug")]
        .               fn visit_opaque_types(&mut self, span: Span) {
    1,437 ( 0.00%)          let opaque_types = self.fcx.infcx.inner.borrow().opaque_types.clone();
    5,756 ( 0.00%)          for (opaque_type_key, opaque_defn) in opaque_types {
        .                       let hir_id =
        8 ( 0.00%)                  self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());
        .                       let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);
        .           
        .                       debug_assert!(!instantiated_ty.has_escaping_bound_vars());
        .           
       20 ( 0.00%)              let opaque_type_key = self.fcx.fully_resolve(opaque_type_key).unwrap();
        .           
        .                       // Prevent:
        .                       // * `fn foo<T>() -> Foo<T>`
        .                       // * `fn foo<T: Bound + Other>() -> Foo<T>`
        .                       // from being defining.
        .           
        .                       // Also replace all generic params with the ones from the opaque type
        .                       // definition so that
        .                       // ```rust
        .                       // type Foo<T> = impl Baz + 'static;
        .                       // fn foo<U>() -> Foo<U> { .. }
        .                       // ```
        .                       // figures out the concrete type with `U`, but the stored type is with `T`.
        .           
        .                       // FIXME: why are we calling this here? This seems too early, and duplicated.
       24 ( 0.00%)              let definition_ty = self.fcx.infer_opaque_definition_from_instantiation(
        .                           opaque_type_key,
        .                           instantiated_ty,
        .                           span,
        .                       );
        .           
        .                       let mut skip_add = false;
        .           
       16 ( 0.00%)              if let ty::Opaque(definition_ty_def_id, _substs) = *definition_ty.kind() {
        .                           if opaque_defn.origin == hir::OpaqueTyOrigin::TyAlias {
        .                               if opaque_type_key.def_id == definition_ty_def_id {
        .                                   debug!(
        .                                       "skipping adding concrete definition for opaque type {:?} {:?}",
        .                                       opaque_defn, opaque_type_key.def_id
        .                                   );
        .                                   skip_add = true;
        .                               }
-- line 541 ----------------------------------------
-- line 546 ----------------------------------------
        .                           span_bug!(span, "{:#?} has inference variables", opaque_type_key.substs)
        .                       }
        .           
        .                       // We only want to add an entry into `concrete_opaque_types`
        .                       // if we actually found a defining usage of this opaque type.
        .                       // Otherwise, we do nothing - we'll either find a defining usage
        .                       // in some other location, or we'll end up emitting an error due
        .                       // to the lack of defining usage
        8 ( 0.00%)              if !skip_add {
        .                           self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);
        .                       }
        .                   }
        .               }
        .           
   15,732 ( 0.00%)      fn visit_field_id(&mut self, hir_id: hir::HirId) {
   13,110 ( 0.00%)          if let Some(index) = self.fcx.typeck_results.borrow_mut().field_indices_mut().remove(hir_id)
        .                   {
    7,866 ( 0.00%)              self.typeck_results.field_indices_mut().insert(hir_id, index);
        .                   }
   18,354 ( 0.00%)      }
        .           
2,489,886 ( 0.03%)      #[instrument(skip(self, span), level = "debug")]
        .               fn visit_node_id(&mut self, span: Span, hir_id: hir::HirId) {
        .                   // Export associated path extensions and method resolutions.
  553,308 ( 0.01%)          if let Some(def) =
  414,981 ( 0.00%)              self.fcx.typeck_results.borrow_mut().type_dependent_defs_mut().remove(hir_id)
        .                   {
    9,120 ( 0.00%)              self.typeck_results.type_dependent_defs_mut().insert(hir_id, def);
        .                   }
        .           
        .                   // Resolve any borrowings for the node with id `node_id`
        .                   self.visit_adjustments(span, hir_id);
        .           
        .                   // Resolve the type of the node with id `node_id`
  553,308 ( 0.01%)          let n_ty = self.fcx.node_ty(hir_id);
        .                   let n_ty = self.resolve(n_ty, &span);
        .                   self.write_ty_to_typeck_results(hir_id, n_ty);
        .                   debug!(?n_ty);
        .           
        .                   // Resolve any substitutions
  829,962 ( 0.01%)          if let Some(substs) = self.fcx.typeck_results.borrow().node_substs_opt(hir_id) {
        .                       let substs = self.resolve(substs, &span);
        .                       debug!("write_substs_to_tcx({:?}, {:?})", hir_id, substs);
        .                       assert!(!substs.needs_infer() && !substs.has_placeholders());
    7,796 ( 0.00%)              self.typeck_results.node_substs_mut().insert(hir_id, substs);
        .                   }
        .               }
        .           
        .               #[instrument(skip(self, span), level = "debug")]
        .               fn visit_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
  414,981 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().adjustments_mut().remove(hir_id);
  691,635 ( 0.01%)          match adjustment {
        .                       None => {
        .                           debug!("no adjustments for node");
        .                       }
        .           
        .                       Some(adjustment) => {
   21,394 ( 0.00%)                  let resolved_adjustment = self.resolve(adjustment, &span);
        .                           debug!(?resolved_adjustment);
   64,182 ( 0.00%)                  self.typeck_results.adjustments_mut().insert(hir_id, resolved_adjustment);
        .                       }
        .                   }
        .               }
        .           
        .               #[instrument(skip(self, span), level = "debug")]
        .               fn visit_pat_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
   25,341 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().pat_adjustments_mut().remove(hir_id);
   16,894 ( 0.00%)          match adjustment {
        .                       None => {
        .                           debug!("no pat_adjustments for node");
        .                       }
        .           
        .                       Some(adjustment) => {
        .                           let resolved_adjustment = self.resolve(adjustment, &span);
        .                           debug!(?resolved_adjustment);
        .                           self.typeck_results.pat_adjustments_mut().insert(hir_id, resolved_adjustment);
        .                       }
        .                   }
        .               }
        .           
   11,496 ( 0.00%)      fn visit_liberated_fn_sigs(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    5,748 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
    5,421 ( 0.00%)          for (&local_id, &fn_sig) in fcx_typeck_results.liberated_fn_sigs().iter() {
    2,988 ( 0.00%)              let hir_id = hir::HirId { owner: common_hir_owner, local_id };
        .                       let fn_sig = self.resolve(fn_sig, &hir_id);
    2,988 ( 0.00%)              self.typeck_results.liberated_fn_sigs_mut().insert(hir_id, fn_sig);
        .                   }
   11,496 ( 0.00%)      }
        .           
   11,496 ( 0.00%)      fn visit_fru_field_types(&mut self) {
    2,874 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    5,748 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
    1,443 ( 0.00%)          for (&local_id, ftys) in fcx_typeck_results.fru_field_types().iter() {
        6 ( 0.00%)              let hir_id = hir::HirId { owner: common_hir_owner, local_id };
       21 ( 0.00%)              let ftys = self.resolve(ftys.clone(), &hir_id);
       21 ( 0.00%)              self.typeck_results.fru_field_types_mut().insert(hir_id, ftys);
        .                   }
   11,496 ( 0.00%)      }
        .           
       21 ( 0.00%)      fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  302,523 ( 0.00%)          let mut resolver = Resolver::new(self.fcx, span, self.body);
    8,413 ( 0.00%)          let x = x.fold_with(&mut resolver);
        .                   if cfg!(debug_assertions) && x.needs_infer() {
        .                       span_bug!(span.to_span(self.fcx.tcx), "writeback: `{:?}` has inference variables", x);
        .                   }
        .           
        .                   // We may have introduced e.g. `ty::Error`, if inference failed, make sure
        .                   // to mark the `TypeckResults` as tainted in that case, so that downstream
        .                   // users of the typeck results don't produce extra errors, or worse, ICEs.
  373,515 ( 0.00%)          if resolver.replaced_with_error {
        .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
        .                       self.typeck_results.tainted_by_errors = Some(ErrorReported);
        .                   }
        .           
        .                   x
       24 ( 0.00%)      }
        .           }
        .           
        .           crate trait Locatable {
        .               fn to_span(&self, tcx: TyCtxt<'_>) -> Span;
        .           }
        .           
        .           impl Locatable for Span {
        .               fn to_span(&self, _: TyCtxt<'_>) -> Span {
-- line 677 ----------------------------------------
-- line 698 ----------------------------------------
        .           }
        .           
        .           impl<'cx, 'tcx> Resolver<'cx, 'tcx> {
        .               fn new(
        .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
        .                   span: &'cx dyn Locatable,
        .                   body: &'tcx hir::Body<'tcx>,
        .               ) -> Resolver<'cx, 'tcx> {
1,543,748 ( 0.02%)          Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }
        .               }
        .           
        .               fn report_type_error(&self, t: Ty<'tcx>) {
        .                   if !self.tcx.sess.has_errors() {
        .                       self.infcx
        .                           .emit_inference_failure_err(
        .                               Some(self.body.id()),
        .                               self.span.to_span(self.tcx),
-- line 714 ----------------------------------------
-- line 736 ----------------------------------------
        .           }
        .           
        .           struct EraseEarlyRegions<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   38,430 ( 0.00%)          self.tcx
        .               }
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  200,759 ( 0.00%)          if ty.has_type_flags(ty::TypeFlags::HAS_FREE_REGIONS) {
   69,432 ( 0.00%)              ty.super_fold_with(self)
        .                   } else {
        .                       ty
        .                   }
        .               }
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   97,868 ( 0.00%)          if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }
        .               }
        .           }
        .           
        .           impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {
    4,567 ( 0.00%)          self.tcx
        .               }
        .           
1,516,671 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  505,557 ( 0.01%)          match self.infcx.fully_resolve(t) {
        .                       Ok(t) => {
        .                           // Do not anonymize late-bound regions
        .                           // (e.g. keep `for<'a>` named `for<'a>`).
        .                           // This allows NLL to generate error messages that
        .                           // refer to the higher-ranked lifetime names written by the user.
  337,038 ( 0.00%)                  EraseEarlyRegions { tcx: self.infcx.tcx }.fold_ty(t)
        .                       }
        .                       Err(_) => {
        .                           debug!("Resolver::fold_ty: input type `{:?}` not fully resolvable", t);
        .                           self.report_type_error(t);
        .                           self.replaced_with_error = true;
        .                           self.tcx().ty_error()
        .                       }
        .                   }
1,348,152 ( 0.02%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   debug_assert!(!r.is_late_bound(), "Should not be resolving bound region.");
   39,140 ( 0.00%)          self.tcx.lifetimes.re_erased
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match self.infcx.fully_resolve(ct) {
        .                       Ok(ct) => self.infcx.tcx.erase_regions(ct),
        .                       Err(_) => {
        .                           debug!("Resolver::fold_const: input const `{:?}` not fully resolvable", ct);
        .                           self.report_const_error(ct);
-- line 791 ----------------------------------------

1,930,383 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,437 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,437 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,874 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  137,100 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  932,280 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   82,260 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  164,520 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    9,404 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
1,805,863 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   19,325 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    5,920 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  284,011 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  331,642 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  489,376 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  499,082 ( 0.01%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   28,072 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    4,577 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    4,295 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    4,004 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   27,420 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   82,260 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   27,420 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   32,382 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   39,578 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   17,990 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   25,186 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    3,008 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,504 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   10,204 ( 0.00%)          self
    4,512 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   39,180 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   61,392 ( 0.00%)              let (value, subst) =
    3,306 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   88,772 ( 0.00%)              f(infcx, value, subst)
        .                   })
   42,288 ( 0.00%)      }
        .           
  157,180 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   78,001 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
1,168,404 ( 0.01%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   27,420 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   27,420 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  166,815 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
    1,616 ( 0.00%)          let InferOk { value, obligations } = self;
    6,626 ( 0.00%)          for obligation in obligations {
      156 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   30,937 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  123,748 ( 0.00%)          self.obligations
   30,937 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   85,742 ( 0.00%)      }
        .           
  867,064 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  975,447 ( 0.01%)          t.fold_with(&mut self.freshener())
  975,447 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      700 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    1,400 ( 0.00%)          match *ty.kind() {
      317 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,268 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
       33 ( 0.00%)              _ => None,
        .                   }
    1,400 ( 0.00%)      }
        .           
  108,383 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
  108,383 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  245,154 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  245,154 ( 0.00%)      }
        .           
    6,300 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    3,150 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    3,150 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      634 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      850 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
       33 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
   11,025 ( 0.00%)      }
        .           
  224,660 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  898,936 ( 0.01%)          CombineFields {
        .                       infcx: self,
2,247,340 ( 0.03%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
  224,660 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       16 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   22,662 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       18 ( 0.00%)      }
        .           
1,236,256 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
3,708,768 ( 0.04%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  618,128 ( 0.01%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
2,472,512 ( 0.03%)      }
        .           
1,356,520 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  123,320 ( 0.00%)              undo_snapshot,
  123,320 ( 0.00%)              region_constraints_snapshot,
  123,320 ( 0.00%)              universe,
  123,320 ( 0.00%)              was_in_snapshot,
  246,640 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
  123,320 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
7,422,120 ( 0.08%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  494,808 ( 0.01%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  494,808 ( 0.01%)              was_in_snapshot,
  989,616 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
  147,222 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  180,708 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   16,428 ( 0.00%)          let snapshot = self.start_snapshot();
   51,631 ( 0.00%)          let r = f(&snapshot);
  114,996 ( 0.00%)          self.commit_from(snapshot);
  100,086 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
2,571,014 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
3,195,654 ( 0.04%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  643,775 ( 0.01%)          let snapshot = self.start_snapshot();
1,482,682 ( 0.02%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  834,066 ( 0.01%)          match r {
        .                       Ok(_) => {
3,368,707 ( 0.04%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  849,715 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
4,035,785 ( 0.05%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  257,923 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  302,890 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   70,625 ( 0.00%)          let snapshot = self.start_snapshot();
  128,662 ( 0.00%)          let r = f(&snapshot);
  345,409 ( 0.00%)          self.rollback_to("probe", snapshot);
   84,745 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      216 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      288 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       48 ( 0.00%)          let snapshot = self.start_snapshot();
       24 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       48 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       96 ( 0.00%)          let r = f(&snapshot);
      216 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      288 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   15,516 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   31,032 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   23,274 ( 0.00%)      }
        .           
       16 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
       32 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
       24 ( 0.00%)      }
        .           
    2,832 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    2,124 ( 0.00%)      }
        .           
   19,008 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   14,256 ( 0.00%)      }
        .           
  240,450 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  216,405 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       45 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       45 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       60 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       40 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      100 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       80 ( 0.00%)      }
        .           
    8,328 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      694 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      694 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    5,336 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,288 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,288 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       50 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      100 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    6,246 ( 0.00%)      }
        .           
   82,284 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   68,570 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   54,856 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      138 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      276 ( 0.00%)      }
        .           
  172,844 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  864,220 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  259,266 ( 0.00%)      }
        .           
  169,514 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  603,291 ( 0.01%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  254,271 ( 0.00%)      }
        .           
    1,908 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   10,494 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      954 ( 0.00%)          self.tcx.mk_ty_var(vid)
    2,862 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
    1,210 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      726 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      968 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   34,530 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  916,865 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   69,060 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  344,862 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
2,241,603 ( 0.03%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  862,155 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  517,293 ( 0.01%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   24,370 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   36,555 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   12,126 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   18,189 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   89,450 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  178,900 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      396 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    2,916 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      792 ( 0.00%)      }
        .           
  500,616 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  259,801 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   26,542 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
  142,880 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  178,600 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   35,720 ( 0.00%)                              param.name,
   35,720 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   35,720 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    3,465 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      315 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    2,520 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   80,307 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  462,669 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   53,538 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    3,590 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   80,719 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    5,385 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   79,513 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  215,821 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   11,359 ( 0.00%)              assert!(
   34,077 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   11,359 ( 0.00%)          };
        .           
        .                   let region_rels =
   11,359 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
  102,231 ( 0.00%)          let (lexical_region_resolutions, errors) =
  272,616 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   45,436 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   11,359 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
  102,231 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  113,590 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   22,718 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   34,077 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   22,718 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   56,795 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
       24 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
        8 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
       32 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
       40 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   19,812 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    7,500 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   28,500 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,500 ( 0.00%)              .into_infos_and_data();
    1,500 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   12,000 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   11,910 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   35,730 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   41,685 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
1,401,574 ( 0.02%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   21,158 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   31,737 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    4,700 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  655,187 ( 0.01%)          if !value.needs_infer() {
  557,055 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  415,789 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  479,998 ( 0.01%)          value.fold_with(&mut r)
    5,707 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   34,911 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  248,926 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  238,500 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   23,274 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   16,768 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    6,288 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   35,632 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   14,672 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,316 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,632 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    1,974 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
1,661,025 ( 0.02%)          self.universe.get()
  602,842 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      636 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      964 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      636 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
       26 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
        2 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
        2 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        .                   let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
        4 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
       24 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
       18 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
7,369,728 ( 0.08%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
2,968,307 ( 0.03%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
1,043,528 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
   22,444 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    6,081 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
8,290,944 ( 0.09%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  735,674 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    4,114 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   10,210 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   10,210 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,276 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  102,656 ( 0.00%)          match *ty.kind() {
   22,314 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      634 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,276 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
1,591,990 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    5,808 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    3,774 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    2,175 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
    1,305 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    7,260 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
      178 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
      445 ( 0.00%)          match *self {
       89 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   82,587 ( 0.00%)          match *cause.code() {
    9,721 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   48,605 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

3,917,554 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs
--------------------------------------------------------------------------------
Ir                 

-- line 114 ----------------------------------------
        .           
        .               /// Lets us implement `HasDataLayout`, which is awfully convenient.
        .               pub tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
   28,200 ( 0.00%)          &self.tcx.data_layout
        .               }
        .           }
        .           
        .           /// A reference to some allocation that was already bounds-checked for the given region
        .           /// and had the on-access machine hooks run.
        .           #[derive(Copy, Clone)]
        .           pub struct AllocRef<'a, 'tcx, Tag, Extra> {
        .               alloc: &'a Allocation<Tag, Extra>,
-- line 130 ----------------------------------------
-- line 138 ----------------------------------------
        .               alloc: &'a mut Allocation<Tag, Extra>,
        .               range: AllocRange,
        .               tcx: TyCtxt<'tcx>,
        .               alloc_id: AllocId,
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               pub fn new(tcx: TyCtxt<'tcx>, extra: M::MemoryExtra) -> Self {
   12,818 ( 0.00%)          Memory {
        .                       alloc_map: M::MemoryMap::default(),
        .                       extra_fn_ptr_map: FxHashMap::default(),
        .                       dead_alloc_map: FxHashMap::default(),
        .                       extra,
        .                       tcx,
        .                   }
        .               }
        .           
-- line 154 ----------------------------------------
-- line 157 ----------------------------------------
        .               /// for any other pointers, nor for TLS statics.
        .               ///
        .               /// Using the resulting pointer represents a *direct* access to that memory
        .               /// (e.g. by directly using a `static`),
        .               /// as opposed to access through a pointer that was created by the program.
        .               ///
        .               /// This function can fail only if `ptr` points to an `extern static`.
        .               #[inline]
   62,244 ( 0.00%)      pub fn global_base_pointer(
        .                   &self,
        .                   ptr: Pointer<AllocId>,
        .               ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {
        .                   // We know `offset` is relative to the allocation, so we can use `into_parts`.
        .                   let (alloc_id, offset) = ptr.into_parts();
        .                   // We need to handle `extern static`.
   20,748 ( 0.00%)          match self.tcx.get_global_alloc(alloc_id) {
        .                       Some(GlobalAlloc::Static(def_id)) if self.tcx.is_thread_local_static(def_id) => {
        .                           bug!("global memory cannot point to thread-local static")
        .                       }
        .                       Some(GlobalAlloc::Static(def_id)) if self.tcx.is_foreign_item(def_id) => {
        .                           return M::extern_static_base_pointer(self, def_id);
        .                       }
        .                       _ => {}
        .                   }
        .                   // And we need to get the tag.
   15,561 ( 0.00%)          Ok(M::tag_alloc_base_pointer(self, Pointer::new(alloc_id, offset)))
   41,496 ( 0.00%)      }
        .           
        .               pub fn create_fn_alloc(
        .                   &mut self,
        .                   fn_val: FnVal<'tcx, M::ExtraFnVal>,
        .               ) -> Pointer<M::PointerTag> {
        .                   let id = match fn_val {
        .                       FnVal::Instance(instance) => self.tcx.create_fn_alloc(instance),
        .                       FnVal::Other(extra) => {
-- line 191 ----------------------------------------
-- line 196 ----------------------------------------
        .                           id
        .                       }
        .                   };
        .                   // Functions are global allocations, so make sure we get the right base pointer.
        .                   // We know this is not an `extern static` so this cannot fail.
        .                   self.global_base_pointer(Pointer::from(id)).unwrap()
        .               }
        .           
  310,977 ( 0.00%)      pub fn allocate(
        .                   &mut self,
        .                   size: Size,
        .                   align: Align,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> InterpResult<'static, Pointer<M::PointerTag>> {
  138,212 ( 0.00%)          let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;
  310,977 ( 0.00%)          Ok(self.allocate_with(alloc, kind))
  241,871 ( 0.00%)      }
        .           
        .               pub fn allocate_bytes(
        .                   &mut self,
        .                   bytes: &[u8],
        .                   align: Align,
        .                   kind: MemoryKind<M::MemoryKind>,
        .                   mutability: Mutability,
        .               ) -> Pointer<M::PointerTag> {
-- line 220 ----------------------------------------
-- line 222 ----------------------------------------
        .                   self.allocate_with(alloc, kind)
        .               }
        .           
        .               pub fn allocate_with(
        .                   &mut self,
        .                   alloc: Allocation,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> Pointer<M::PointerTag> {
   69,106 ( 0.00%)          let id = self.tcx.reserve_alloc_id();
        .                   debug_assert_ne!(
        .                       Some(kind),
        .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
        .                       "dynamically allocating global memory"
        .                   );
        .                   let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));
  829,272 ( 0.01%)          self.alloc_map.insert(id, (kind, alloc.into_owned()));
        .                   M::tag_alloc_base_pointer(self, Pointer::from(id))
        .               }
        .           
        .               pub fn reallocate(
        .                   &mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   old_size_and_align: Option<(Size, Align)>,
        .                   new_size: Size,
-- line 245 ----------------------------------------
-- line 361 ----------------------------------------
        .                   let align = M::enforce_alignment(&self.extra).then_some(align);
        .                   self.check_and_deref_ptr(
        .                       ptr,
        .                       size,
        .                       align,
        .                       CheckInAllocMsg::MemoryAccessTest,
        .                       |alloc_id, offset, ptr| {
        .                           let (size, align) =
  396,412 ( 0.00%)                      self.get_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;
        .                           Ok((size, align, (alloc_id, offset, ptr)))
        .                       },
        .                   )
        .               }
        .           
        .               /// Check if the given pointer points to live memory of given `size` and `align`
        .               /// (ignoring `M::enforce_alignment`). The caller can control the error message for the
        .               /// out-of-bounds case.
-- line 377 ----------------------------------------
-- line 378 ----------------------------------------
        .               #[inline(always)]
        .               pub fn check_ptr_access_align(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .                   msg: CheckInAllocMsg,
        .               ) -> InterpResult<'tcx> {
  138,161 ( 0.00%)          self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {
   67,188 ( 0.00%)              let check = match msg {
        .                           CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {
        .                               AllocCheck::Dereferenceable
        .                           }
        .                           CheckInAllocMsg::PointerArithmeticTest | CheckInAllocMsg::InboundsTest => {
        .                               AllocCheck::Live
        .                           }
        .                       };
   33,594 ( 0.00%)              let (size, align) = self.get_size_and_align(alloc_id, check)?;
        .                       Ok((size, align, ()))
        .                   })?;
        .                   Ok(())
        .               }
        .           
        .               /// Low-level helper function to check if a ptr is in-bounds and potentially return a reference
        .               /// to the allocation it points to. Supports both shared and mutable references, as the actual
        .               /// checking is offloaded to a helper closure. `align` defines whether and which alignment check
        .               /// is done. Returns `None` for size 0, and otherwise `Some` of what `alloc_size` returned.
  235,158 ( 0.00%)      fn check_and_deref_ptr<T>(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Option<Align>,
        .                   msg: CheckInAllocMsg,
        .                   alloc_size: impl FnOnce(
        .                       AllocId,
        .                       Size,
        .                       Pointer<M::PointerTag>,
        .                   ) -> InterpResult<'tcx, (Size, Align, T)>,
        .               ) -> InterpResult<'tcx, Option<T>> {
   33,594 ( 0.00%)          fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {
   83,985 ( 0.00%)              if offset % align.bytes() == 0 {
        .                           Ok(())
        .                       } else {
        .                           // The biggest power of two through which `offset` is divisible.
        .                           let offset_pow2 = 1 << offset.trailing_zeros();
        .                           throw_ub!(AlignmentCheckFailed {
        .                               has: Align::from_bytes(offset_pow2).unwrap(),
        .                               required: align,
        .                           })
        .                       }
   50,391 ( 0.00%)          }
        .           
        .                   // Extract from the pointer an `Option<AllocId>` and an offset, which is relative to the
        .                   // allocation or (if that is `None`) an absolute address.
  855,780 ( 0.01%)          let ptr_or_addr = if size.bytes() == 0 {
        .                       // Let's see what we can do, but don't throw errors if there's nothing there.
        .                       self.ptr_try_get_alloc(ptr)
        .                   } else {
        .                       // A "real" access, we insist on getting an `AllocId`.
        .                       Ok(self.ptr_get_alloc(ptr)?)
        .                   };
        .                   Ok(match ptr_or_addr {
        .                       Err(addr) => {
-- line 440 ----------------------------------------
-- line 460 ----------------------------------------
        .                                   alloc_size,
        .                                   ptr_offset: self.machine_usize_to_isize(offset.bytes()),
        .                                   ptr_size: size,
        .                                   msg,
        .                               })
        .                           }
        .                           // Test align. Check this last; if both bounds and alignment are violated
        .                           // we want the error to be about the bounds.
   33,594 ( 0.00%)                  if let Some(align) = align {
        .                               if M::force_int_for_alignment_check(&self.extra) {
        .                                   let addr = Scalar::from_pointer(ptr, &self.tcx)
        .                                       .to_machine_usize(&self.tcx)
        .                                       .expect("ptr-to-int cast for align check should never fail");
        .                                   check_offset_align(addr, align)?;
        .                               } else {
        .                                   // Check allocation alignment and offset alignment.
   33,594 ( 0.00%)                          if alloc_align.bytes() < align.bytes() {
        .                                       throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });
        .                                   }
   83,985 ( 0.00%)                          check_offset_align(offset.bytes(), align)?;
        .                               }
        .                           }
        .           
        .                           // We can still be zero-sized in this branch, in which case we have to
        .                           // return `None`.
        .                           if size.bytes() == 0 { None } else { Some(ret_val) }
        .                       }
        .                   })
  251,955 ( 0.00%)      }
        .           
        .               /// Test if the pointer might be null.
        .               pub fn ptr_may_be_null(&self, ptr: Pointer<Option<M::PointerTag>>) -> bool {
        .                   match self.ptr_try_get_alloc(ptr) {
        .                       Ok((alloc_id, offset, _)) => {
        .                           let (size, _align) = self
        .                               .get_size_and_align(alloc_id, AllocCheck::MaybeDead)
        .                               .expect("alloc info with MaybeDead cannot fail");
-- line 496 ----------------------------------------
-- line 505 ----------------------------------------
        .           
        .           /// Allocation accessors
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               /// Helper function to obtain a global (tcx) allocation.
        .               /// This attempts to return a reference to an existing allocation if
        .               /// one can be found in `tcx`. That, however, is only possible if `tcx` and
        .               /// this machine use the same pointer tag, so it is indirected through
        .               /// `M::tag_allocation`.
2,729,364 ( 0.03%)      fn get_global_alloc(
        .                   &self,
        .                   id: AllocId,
        .                   is_write: bool,
        .               ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {
2,233,116 ( 0.03%)          let (alloc, def_id) = match self.tcx.get_global_alloc(id) {
  248,124 ( 0.00%)              Some(GlobalAlloc::Memory(mem)) => {
        .                           // Memory of a constant or promoted or anonymous memory referenced by a static.
        .                           (mem, None)
        .                       }
        .                       Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),
        .                       None => throw_ub!(PointerUseAfterFree(id)),
        .                       Some(GlobalAlloc::Static(def_id)) => {
        .                           assert!(self.tcx.is_static(def_id));
        .                           assert!(!self.tcx.is_thread_local_static(def_id));
-- line 527 ----------------------------------------
-- line 537 ----------------------------------------
        .                           // to another static), those inner references only exist in "resolved" form.
        .                           if self.tcx.is_foreign_item(def_id) {
        .                               throw_unsup!(ReadExternStatic(def_id));
        .                           }
        .           
        .                           (self.tcx.eval_static_initializer(def_id)?, Some(def_id))
        .                       }
        .                   };
1,984,992 ( 0.02%)          M::before_access_global(&self.extra, id, alloc, def_id, is_write)?;
        .                   let alloc = Cow::Borrowed(alloc);
        .                   // We got tcx memory. Let the machine initialize its "extra" stuff.
        .                   let alloc = M::init_allocation_extra(
        .                       self,
        .                       id, // always use the ID we got as input, not the "hidden" one.
        .                       alloc,
        .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
        .                   );
  992,496 ( 0.01%)          Ok(alloc)
1,984,992 ( 0.02%)      }
        .           
        .               /// Gives raw access to the `Allocation`, without bounds or alignment checks.
        .               /// The caller is responsible for calling the access hooks!
1,131,212 ( 0.01%)      fn get_raw(
        .                   &self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, &Allocation<M::PointerTag, M::AllocExtra>> {
        .                   // The error type of the inner closure here is somewhat funny.  We have two
        .                   // ways of "erroring": An actual error, or because we got a reference from
        .                   // `get_global_alloc` that we can actually use directly without inserting anything anywhere.
        .                   // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.
        .                   let a = self.alloc_map.get_or(id, || {
  992,496 ( 0.01%)              let alloc = self.get_global_alloc(id, /*is_write*/ false).map_err(Err)?;
  496,248 ( 0.01%)              match alloc {
        .                           Cow::Borrowed(alloc) => {
        .                               // We got a ref, cheaply return that as an "error" so that the
        .                               // map does not get mutated.
        .                               Err(Ok(alloc))
        .                           }
        .                           Cow::Owned(alloc) => {
        .                               // Need to put it into the map and return a ref to that
        .                               let kind = M::GLOBAL_KIND.expect(
-- line 577 ----------------------------------------
-- line 578 ----------------------------------------
        .                                   "I got a global allocation that I have to copy but the machine does \
        .                                       not expect that to happen",
        .                               );
        .                               Ok((MemoryKind::Machine(kind), alloc))
        .                           }
        .                       }
        .                   });
        .                   // Now unpack that funny error type
   69,358 ( 0.00%)          match a {
        .                       Ok(a) => Ok(&a.1),
        .                       Err(a) => a,
        .                   }
  848,409 ( 0.01%)      }
        .           
        .               /// "Safe" (bounds and align-checked) allocation access.
3,340,752 ( 0.04%)      pub fn get<'a>(
        .                   &'a self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .               ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   let align = M::enforce_alignment(&self.extra).then_some(align);
        .                   let ptr_and_alloc = self.check_and_deref_ptr(
        .                       ptr,
        .                       size,
        .                       align,
        .                       CheckInAllocMsg::MemoryAccessTest,
        .                       |alloc_id, offset, ptr| {
1,113,584 ( 0.01%)                  let alloc = self.get_raw(alloc_id)?;
        .                           Ok((alloc.size(), alloc.align, (alloc_id, offset, ptr, alloc)))
        .                       },
        .                   )?;
  556,792 ( 0.01%)          if let Some((alloc_id, offset, ptr, alloc)) = ptr_and_alloc {
        .                       let range = alloc_range(offset, size);
        .                       M::memory_read(&self.extra, &alloc.extra, ptr.provenance, range)?;
1,948,772 ( 0.02%)              Ok(Some(AllocRef { alloc, range, tcx: self.tcx, alloc_id }))
        .                   } else {
        .                       // Even in this branch we have to be sure that we actually access the allocation, in
        .                       // order to ensure that `static FOO: Type = FOO;` causes a cycle error instead of
        .                       // magically pulling *any* ZST value from the ether. However, the `get_raw` above is
        .                       // always called when `ptr` has an `AllocId`.
        .                       Ok(None)
        .                   }
2,505,564 ( 0.03%)      }
        .           
        .               /// Return the `extra` field of the given allocation.
        .               pub fn get_alloc_extra<'a>(&'a self, id: AllocId) -> InterpResult<'tcx, &'a M::AllocExtra> {
        .                   Ok(&self.get_raw(id)?.extra)
        .               }
        .           
        .               /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.
        .               /// The caller is responsible for calling the access hooks!
        .               ///
        .               /// Also returns a ptr to `self.extra` so that the caller can use it in parallel with the
        .               /// allocation.
  757,568 ( 0.01%)      fn get_raw_mut(
        .                   &mut self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, (&mut Allocation<M::PointerTag, M::AllocExtra>, &mut M::MemoryExtra)>
        .               {
        .                   // We have "NLL problem case #3" here, which cannot be worked around without loss of
        .                   // efficiency even for the common case where the key is in the map.
        .                   // <https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions>
        .                   // (Cannot use `get_mut_or` since `get_global_alloc` needs `&self`.)
   94,696 ( 0.00%)          if self.alloc_map.get_mut(id).is_none() {
        .                       // Slow path.
        .                       // Allocation not found locally, go look global.
        .                       let alloc = self.get_global_alloc(id, /*is_write*/ true)?;
        .                       let kind = M::GLOBAL_KIND.expect(
        .                           "I got a global allocation that I have to copy but the machine does \
        .                               not expect that to happen",
        .                       );
        .                       self.alloc_map.insert(id, (MemoryKind::Machine(kind), alloc.into_owned()));
        .                   }
        .           
   94,696 ( 0.00%)          let (_kind, alloc) = self.alloc_map.get_mut(id).unwrap();
   94,696 ( 0.00%)          if alloc.mutability == Mutability::Not {
        .                       throw_ub!(WriteToReadOnly(id))
        .                   }
  378,784 ( 0.00%)          Ok((alloc, &mut self.extra))
  473,480 ( 0.01%)      }
        .           
        .               /// "Safe" (bounds and align-checked) allocation access.
1,083,468 ( 0.01%)      pub fn get_mut<'a>(
        .                   &'a mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .               ) -> InterpResult<'tcx, Option<AllocRefMut<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   let parts = self.get_ptr_access(ptr, size, align)?;
  180,578 ( 0.00%)          if let Some((alloc_id, offset, ptr)) = parts {
        .                       let tcx = self.tcx;
        .                       // FIXME: can we somehow avoid looking up the allocation twice here?
        .                       // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.
  270,867 ( 0.00%)              let (alloc, extra) = self.get_raw_mut(alloc_id)?;
        .                       let range = alloc_range(offset, size);
        .                       M::memory_written(extra, &mut alloc.extra, ptr.provenance, range)?;
  541,734 ( 0.01%)              Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))
        .                   } else {
        .                       Ok(None)
        .                   }
  812,601 ( 0.01%)      }
        .           
        .               /// Return the `extra` field of the given allocation.
        .               pub fn get_alloc_extra_mut<'a>(
        .                   &'a mut self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, (&'a mut M::AllocExtra, &'a mut M::MemoryExtra)> {
        .                   let (alloc, memory_extra) = self.get_raw_mut(id)?;
        .                   Ok((&mut alloc.extra, memory_extra))
        .               }
        .           
        .               /// Obtain the size and alignment of an allocation, even if that allocation has
        .               /// been deallocated.
        .               ///
        .               /// If `liveness` is `AllocCheck::MaybeDead`, this function always returns `Ok`.
1,274,900 ( 0.01%)      pub fn get_size_and_align(
        .                   &self,
        .                   id: AllocId,
        .                   liveness: AllocCheck,
        .               ) -> InterpResult<'static, (Size, Align)> {
        .                   // # Regular allocations
        .                   // Don't use `self.get_raw` here as that will
        .                   // a) cause cycles in case `id` refers to a static
        .                   // b) duplicate a global's allocation in miri
  579,500 ( 0.01%)          if let Some((_, alloc)) = self.alloc_map.get(id) {
  101,908 ( 0.00%)              return Ok((alloc.size(), alloc.align));
        .                   }
        .           
        .                   // # Function pointers
        .                   // (both global from `alloc_map` and local from `extra_fn_ptr_map`)
   55,968 ( 0.00%)          if self.get_fn_alloc(id).is_some() {
        .                       return if let AllocCheck::Dereferenceable = liveness {
        .                           // The caller requested no function pointers.
        .                           throw_ub!(DerefFunctionPointer(id))
        .                       } else {
        .                           Ok((Size::ZERO, Align::ONE))
        .                       };
        .                   }
        .           
        .                   // # Statics
        .                   // Can't do this in the match argument, we may get cycle errors since the lock would
        .                   // be held throughout the match.
  153,912 ( 0.00%)          match self.tcx.get_global_alloc(id) {
        .                       Some(GlobalAlloc::Static(did)) => {
        .                           assert!(!self.tcx.is_thread_local_static(did));
        .                           // Use size and align of the type.
        .                           let ty = self.tcx.type_of(did);
        .                           let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();
        .                           Ok((layout.size, layout.align.abi))
        .                       }
   13,992 ( 0.00%)              Some(GlobalAlloc::Memory(alloc)) => {
        .                           // Need to duplicate the logic here, because the global allocations have
        .                           // different associated types than the interpreter-local ones.
   27,984 ( 0.00%)                  Ok((alloc.size(), alloc.align))
        .                       }
        .                       Some(GlobalAlloc::Function(_)) => bug!("We already checked function pointers above"),
        .                       // The rest must be dead.
        .                       None => {
        .                           if let AllocCheck::MaybeDead = liveness {
        .                               // Deallocated pointers are allowed, we should be able to find
        .                               // them in the map.
        .                               Ok(*self
-- line 740 ----------------------------------------
-- line 741 ----------------------------------------
        .                                   .dead_alloc_map
        .                                   .get(&id)
        .                                   .expect("deallocated pointers should all be recorded in `dead_alloc_map`"))
        .                           } else {
        .                               throw_ub!(PointerUseAfterFree(id))
        .                           }
        .                       }
        .                   }
  927,200 ( 0.01%)      }
        .           
   55,968 ( 0.00%)      fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {
        .                   if let Some(extra) = self.extra_fn_ptr_map.get(&id) {
        .                       Some(FnVal::Other(*extra))
        .                   } else {
   69,960 ( 0.00%)              match self.tcx.get_global_alloc(id) {
        .                           Some(GlobalAlloc::Function(instance)) => Some(FnVal::Instance(instance)),
   13,992 ( 0.00%)                  _ => None,
        .                       }
        .                   }
   55,968 ( 0.00%)      }
        .           
        .               pub fn get_fn(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .               ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {
        .                   trace!("get_fn({:?})", ptr);
        .                   let (alloc_id, offset, _ptr) = self.ptr_get_alloc(ptr)?;
        .                   if offset.bytes() != 0 {
-- line 768 ----------------------------------------
-- line 903 ----------------------------------------
        .                       writeln!(fmt)?;
        .                   }
        .                   Ok(())
        .               }
        .           }
        .           
        .           /// Reading and writing.
        .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {
1,103,940 ( 0.01%)      pub fn write_scalar(
        .                   &mut self,
        .                   range: AllocRange,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> InterpResult<'tcx> {
  613,300 ( 0.01%)          Ok(self
        .                       .alloc
1,349,260 ( 0.02%)              .write_scalar(&self.tcx, self.range.subrange(range), val)
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
  735,960 ( 0.01%)      }
        .           
        .               pub fn write_ptr_sized(
        .                   &mut self,
        .                   offset: Size,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> InterpResult<'tcx> {
        .                   self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)
        .               }
        .           }
        .           
        .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {
  363,144 ( 0.00%)      pub fn read_scalar(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
3,317,381 ( 0.04%)          Ok(self
        .                       .alloc
1,929,153 ( 0.02%)              .read_scalar(&self.tcx, self.range.subrange(range))
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
  363,144 ( 0.00%)      }
        .           
        .               pub fn read_ptr_sized(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
        .                   self.read_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size))
        .               }
        .           
        .               pub fn check_bytes(&self, range: AllocRange, allow_uninit_and_ptr: bool) -> InterpResult<'tcx> {
        .                   Ok(self
        .                       .alloc
-- line 945 ----------------------------------------
-- line 947 ----------------------------------------
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               /// Reads the given number of bytes from memory. Returns them as a slice.
        .               ///
        .               /// Performs appropriate bounds checks.
   21,688 ( 0.00%)      pub fn read_bytes(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .               ) -> InterpResult<'tcx, &[u8]> {
   16,266 ( 0.00%)          let alloc_ref = match self.get(ptr, size, Align::ONE)? {
   32,532 ( 0.00%)              Some(a) => a,
        .                       None => return Ok(&[]), // zero-sized access
        .                   };
        .                   // Side-step AllocRef and directly access the underlying bytes more efficiently.
        .                   // (We are staying inside the bounds here so all is good.)
   10,844 ( 0.00%)          Ok(alloc_ref
        .                       .alloc
   16,266 ( 0.00%)              .get_bytes(&alloc_ref.tcx, alloc_ref.range)
        .                       .map_err(|e| e.to_interp_error(alloc_ref.alloc_id))?)
   21,688 ( 0.00%)      }
        .           
        .               /// Writes the given stream of bytes into memory.
        .               ///
        .               /// Performs appropriate bounds checks.
        .               pub fn write_bytes(
        .                   &mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   src: impl IntoIterator<Item = u8>,
-- line 978 ----------------------------------------
-- line 1016 ----------------------------------------
        .                   &mut self,
        .                   src: Pointer<Option<M::PointerTag>>,
        .                   src_align: Align,
        .                   dest: Pointer<Option<M::PointerTag>>,
        .                   dest_align: Align,
        .                   size: Size,
        .                   nonoverlapping: bool,
        .               ) -> InterpResult<'tcx> {
   22,035 ( 0.00%)          self.copy_repeatedly(src, src_align, dest, dest_align, size, 1, nonoverlapping)
        .               }
        .           
   57,291 ( 0.00%)      pub fn copy_repeatedly(
        .                   &mut self,
        .                   src: Pointer<Option<M::PointerTag>>,
        .                   src_align: Align,
        .                   dest: Pointer<Option<M::PointerTag>>,
        .                   dest_align: Align,
        .                   size: Size,
        .                   num_copies: u64,
        .                   nonoverlapping: bool,
        .               ) -> InterpResult<'tcx> {
    8,814 ( 0.00%)          let tcx = self.tcx;
        .                   // We need to do our own bounds-checks.
        .                   let src_parts = self.get_ptr_access(src, size, src_align)?;
        .                   let dest_parts = self.get_ptr_access(dest, size * num_copies, dest_align)?; // `Size` multiplication
        .           
        .                   // FIXME: we look up both allocations twice here, once ebfore for the `check_ptr_access`
        .                   // and once below to get the underlying `&[mut] Allocation`.
        .           
        .                   // Source alloc preparations and access hooks.
    8,814 ( 0.00%)          let (src_alloc_id, src_offset, src) = match src_parts {
        .                       None => return Ok(()), // Zero-sized *source*, that means dst is also zero-sized and we have nothing to do.
        .                       Some(src_ptr) => src_ptr,
        .                   };
   17,628 ( 0.00%)          let src_alloc = self.get_raw(src_alloc_id)?;
        .                   let src_range = alloc_range(src_offset, size);
        .                   M::memory_read(&self.extra, &src_alloc.extra, src.provenance, src_range)?;
        .                   // We need the `dest` ptr for the next operation, so we get it now.
        .                   // We already did the source checks and called the hooks so we are good to return early.
    8,814 ( 0.00%)          let (dest_alloc_id, dest_offset, dest) = match dest_parts {
        .                       None => return Ok(()), // Zero-sized *destiantion*.
        .                       Some(dest_ptr) => dest_ptr,
        .                   };
        .           
        .                   // This checks relocation edges on the src, which needs to happen before
        .                   // `prepare_relocation_copy`.
        .                   let src_bytes = src_alloc
        .                       .get_bytes_with_uninit_and_ptr(&tcx, src_range)
        .                       .map_err(|e| e.to_interp_error(src_alloc_id))?
        .                       .as_ptr(); // raw ptr, so we can also get a ptr to the destination allocation
        .                   // first copy the relocations to a temporary buffer, because
        .                   // `get_bytes_mut` will clear the relocations, which is correct,
        .                   // since we don't want to keep any relocations at the target.
        .                   let relocations =
   52,884 ( 0.00%)              src_alloc.prepare_relocation_copy(self, src_range, dest_offset, num_copies);
        .                   // Prepare a copy of the initialization mask.
   17,628 ( 0.00%)          let compressed = src_alloc.compress_uninit_range(src_range);
        .           
        .                   // Destination alloc preparations and access hooks.
   13,221 ( 0.00%)          let (dest_alloc, extra) = self.get_raw_mut(dest_alloc_id)?;
   13,221 ( 0.00%)          let dest_range = alloc_range(dest_offset, size * num_copies);
        .                   M::memory_written(extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;
   17,628 ( 0.00%)          let dest_bytes = dest_alloc
        .                       .get_bytes_mut_ptr(&tcx, dest_range)
        .                       .map_err(|e| e.to_interp_error(dest_alloc_id))?
        .                       .as_mut_ptr();
        .           
   13,221 ( 0.00%)          if compressed.no_bytes_init() {
        .                       // Fast path: If all bytes are `uninit` then there is nothing to copy. The target range
        .                       // is marked as uninitialized but we otherwise omit changing the byte representation which may
        .                       // be arbitrary for uninitialized bytes.
        .                       // This also avoids writing to the target bytes so that the backing allocation is never
        .                       // touched if the bytes stay uninitialized for the whole interpreter execution. On contemporary
        .                       // operating system this can avoid physically allocating the page.
        .                       dest_alloc.mark_init(dest_range, false); // `Size` multiplication
        .                       dest_alloc.mark_relocation_range(relocations);
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .                   }
        .           
        .                   // SAFE: The above indexing would have panicked if there weren't at least `size` bytes
        .                   // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and
        .                   // `dest` could possibly overlap.
        .                   // The pointers above remain valid even if the `HashMap` table is moved around because they
        .                   // point into the `Vec` storing the bytes.
        .                   unsafe {
    4,407 ( 0.00%)              if src_alloc_id == dest_alloc_id {
        .                           if nonoverlapping {
        .                               // `Size` additions
        .                               if (src_offset <= dest_offset && src_offset + size > dest_offset)
        .                                   || (dest_offset <= src_offset && dest_offset + size > src_offset)
        .                               {
        .                                   throw_ub_format!("copy_nonoverlapping called on overlapping ranges")
        .                               }
        .                           }
-- line 1109 ----------------------------------------
-- line 1114 ----------------------------------------
        .                                   dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication
        .                                   size.bytes_usize(),
        .                               );
        .                           }
        .                       } else {
        .                           for i in 0..num_copies {
        .                               ptr::copy_nonoverlapping(
        .                                   src_bytes,
   13,221 ( 0.00%)                          dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication
        .                                   size.bytes_usize(),
        .                               );
        .                           }
        .                       }
        .                   }
        .           
        .                   // now fill in all the "init" data
   22,035 ( 0.00%)          dest_alloc.mark_compressed_init_range(
        .                       &compressed,
        .                       alloc_range(dest_offset, size), // just a single copy (i.e., not full `dest_range`)
        .                       num_copies,
        .                   );
        .                   // copy the relocations to the destination
   39,663 ( 0.00%)          dest_alloc.mark_relocation_range(relocations);
        .           
        .                   Ok(())
   39,663 ( 0.00%)      }
        .           }
        .           
        .           /// Machine pointer introspection.
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
   23,793 ( 0.00%)      pub fn scalar_to_ptr(&self, scalar: Scalar<M::PointerTag>) -> Pointer<Option<M::PointerTag>> {
        .                   // We use `to_bits_or_ptr_internal` since we are just implementing the method people need to
        .                   // call to force getting out a pointer.
  118,965 ( 0.00%)          match scalar.to_bits_or_ptr_internal(self.pointer_size()) {
        .                       Err(ptr) => ptr.into(),
        .                       Ok(bits) => {
        .                           let addr = u64::try_from(bits).unwrap();
        .                           let ptr = M::ptr_from_addr(&self, addr);
        .                           if addr == 0 {
        .                               assert!(ptr.provenance.is_none(), "null pointer can never have an AllocId");
        .                           }
        .                           ptr
        .                       }
        .                   }
   47,586 ( 0.00%)      }
        .           
        .               /// Turning a "maybe pointer" into a proper pointer (and some information
        .               /// about where it points), or an absolute address.
        .               pub fn ptr_try_get_alloc(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .               ) -> Result<(AllocId, Size, Pointer<M::PointerTag>), u64> {
        .                   match ptr.into_pointer_or_addr() {
-- line 1166 ----------------------------------------

2,573,351 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  462,751 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
1,945,281 ( 0.02%)          match undo {
  368,474 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  190,522 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  366,506 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  925,502 ( 0.01%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
1,705,164 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
  857,110 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
   82,260 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    1,059 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    6,699 ( 0.00%)          self.eq_relations().union(a, b);
    5,742 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    6,286 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  605,730 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  848,022 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  605,730 ( 0.01%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  743,028 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
1,114,542 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  619,190 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
  123,838 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
1,114,542 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  495,352 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  866,866 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    3,776 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  400,233 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      399 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  368,496 ( 0.00%)          self.sub_relations().find(vid)
      798 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
3,649,605 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
3,649,605 ( 0.04%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
1,750,296 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,053,726 ( 0.01%)          match *t.kind() {
  911,071 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
3,083,164 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  251,295 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   18,880 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   22,656 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   22,656 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
  142,216 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
1,446,478 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  489,369 ( 0.01%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
      957 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
      957 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
    3,828 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  336,781 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           };
        .           use crate::ty;
        .           
        .           /// This type represents an Allocation in the Miri/CTFE core engine.
        .           ///
        .           /// Its public API is rather low-level, working directly with allocation offsets and a custom error
        .           /// type to account for the lack of an AllocId on this level. The Miri/CTFE core engine `memory`
        .           /// module provides higher-level access.
  247,888 ( 0.00%)  #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Allocation<Tag = AllocId, Extra = ()> {
        .               /// The actual bytes of the allocation.
        .               /// Note that the bytes of a pointer represent the offset of the pointer.
   33,507 ( 0.00%)      bytes: Box<[u8]>,
        .               /// Maps from byte addresses to extra data for each pointer.
        .               /// Only the first byte of a pointer is inserted into the map; i.e.,
        .               /// every entry in this map applies to `pointer_size` consecutive bytes starting
        .               /// at the given offset.
    3,291 ( 0.00%)      relocations: Relocations<Tag>,
        .               /// Denotes which part of this allocation is initialized.
        3 ( 0.00%)      init_mask: InitMask,
        .               /// The alignment of the allocation to detect unaligned reads.
        .               /// (`Align` guarantees that this is a power of two.)
   12,234 ( 0.00%)      pub align: Align,
        .               /// `true` if the allocation is mutable.
        .               /// Also used by codegen to determine if a static should be put into mutable memory,
        .               /// which happens for `static mut` and `static` with interior mutability.
    6,068 ( 0.00%)      pub mutability: Mutability,
        .               /// Extra state for the machine.
        .               pub extra: Extra,
        .           }
        .           
        .           /// We have our own error type that does not know about the `AllocId`; that information
        .           /// is added when converting to `InterpError`.
        .           #[derive(Debug)]
        .           pub enum AllocError {
-- line 53 ----------------------------------------
-- line 91 ----------------------------------------
        .           impl AllocRange {
        .               #[inline(always)]
        .               pub fn end(self) -> Size {
        .                   self.start + self.size // This does overflow checking.
        .               }
        .           
        .               /// Returns the `subrange` within this range; panics if it is not a subrange.
        .               #[inline]
  436,620 ( 0.00%)      pub fn subrange(self, subrange: AllocRange) -> AllocRange {
        .                   let sub_start = self.start + subrange.start;
        .                   let range = alloc_range(sub_start, subrange.size);
  436,620 ( 0.00%)          assert!(range.end() <= self.end(), "access outside the bounds for given AllocRange");
        .                   range
1,309,860 ( 0.01%)      }
        .           }
        .           
        .           // The constructors are all without extra; the extra gets added by a machine hook later.
        .           impl<Tag> Allocation<Tag> {
        .               /// Creates an allocation initialized by the given bytes
        .               pub fn from_bytes<'a>(
        .                   slice: impl Into<Cow<'a, [u8]>>,
        .                   align: Align,
        .                   mutability: Mutability,
        .               ) -> Self {
        .                   let bytes = Box::<[u8]>::from(slice.into());
        .                   let size = Size::from_bytes(bytes.len());
   12,716 ( 0.00%)          Self {
        .                       bytes,
        .                       relocations: Relocations::new(),
    4,752 ( 0.00%)              init_mask: InitMask::new(size, true),
        .                       align,
        .                       mutability,
        .                       extra: (),
        .                   }
        .               }
        .           
       32 ( 0.00%)      pub fn from_bytes_byte_aligned_immutable<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {
        .                   Allocation::from_bytes(slice, Align::ONE, Mutability::Not)
       28 ( 0.00%)      }
        .           
        .               /// Try to create an Allocation of `size` bytes, failing if there is not enough memory
        .               /// available to the compiler to do so.
  380,083 ( 0.00%)      pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {
        .                   let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {
        .                       // This results in an error that can happen non-deterministically, since the memory
        .                       // available to the compiler can change between runs. Normally queries are always
        .                       // deterministic. However, we can be non-determinstic here because all uses of const
        .                       // evaluation (including ConstProp!) will make compilation fail (via hard error
        .                       // or ICE) upon encountering a `MemoryExhausted` error.
        .                       if panic_on_fail {
        .                           panic!("Allocation::uninit called with panic_on_fail had allocation failure")
-- line 141 ----------------------------------------
-- line 142 ----------------------------------------
        .                       }
        .                       ty::tls::with(|tcx| {
        .                           tcx.sess.delay_span_bug(DUMMY_SP, "exhausted memory during interpreation")
        .                       });
        .                       InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)
        .                   })?;
        .                   // SAFETY: the box was zero-allocated, which is a valid initial value for Box<[u8]>
        .                   let bytes = unsafe { bytes.assume_init() };
  483,742 ( 0.01%)          Ok(Allocation {
        .                       bytes,
        .                       relocations: Relocations::new(),
  103,659 ( 0.00%)              init_mask: InitMask::new(size, false),
        .                       align,
        .                       mutability: Mutability::Mut,
        .                       extra: (),
        .                   })
  310,977 ( 0.00%)      }
        .           }
        .           
        .           impl Allocation {
        .               /// Convert Tag and add Extra fields
        .               pub fn convert_tag_add_extra<Tag, Extra>(
        .                   self,
        .                   cx: &impl HasDataLayout,
        .                   extra: Extra,
-- line 166 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .           /// Raw accessors. Provide access to otherwise private bytes.
        .           impl<Tag, Extra> Allocation<Tag, Extra> {
        .               pub fn len(&self) -> usize {
        .                   self.bytes.len()
        .               }
        .           
        .               pub fn size(&self) -> Size {
  394,296 ( 0.00%)          Size::from_bytes(self.len())
        .               }
        .           
        .               /// Looks at a slice which may describe uninitialized bytes or describe a relocation. This differs
        .               /// from `get_bytes_with_uninit_and_ptr` in that it does no relocation checks (even on the
        .               /// edges) at all.
        .               /// This must not be used for reads affecting the interpreter execution.
        .               pub fn inspect_with_uninit_and_ptr_outside_interpreter(&self, range: Range<usize>) -> &[u8] {
        .                   &self.bytes[range]
-- line 210 ----------------------------------------
-- line 227 ----------------------------------------
        .               /// or pointer bytes. You should never call this, call `get_bytes` or
        .               /// `get_bytes_with_uninit_and_ptr` instead,
        .               ///
        .               /// This function also guarantees that the resulting pointer will remain stable
        .               /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies
        .               /// on that.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
3,885,468 ( 0.04%)      fn get_bytes_internal(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   check_init_and_ptr: bool,
        .               ) -> AllocResult<&[u8]> {
  647,578 ( 0.01%)          if check_init_and_ptr {
   21,688 ( 0.00%)              self.check_init(range)?;
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // We still don't want relocations on the *edges*.
        .                       self.check_relocation_edges(cx, range)?;
        .                   }
        .           
1,295,156 ( 0.01%)          Ok(&self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
2,914,101 ( 0.03%)      }
        .           
        .               /// Checks that these bytes are initialized and not pointer bytes, and then return them
        .               /// as a slice.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
        .               #[inline]
        .               pub fn get_bytes(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult<&[u8]> {
   10,844 ( 0.00%)          self.get_bytes_internal(cx, range, true)
        .               }
        .           
        .               /// It is the caller's responsibility to handle uninitialized and pointer bytes.
        .               /// However, this still checks that there are no relocations on the *edges*.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               #[inline]
        .               pub fn get_bytes_with_uninit_and_ptr(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&[u8]> {
  658,769 ( 0.01%)          self.get_bytes_internal(cx, range, false)
        .               }
        .           
        .               /// Just calling this already marks everything as defined and removes relocations,
        .               /// so be sure to actually put data there!
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
1,349,260 ( 0.02%)      pub fn get_bytes_mut(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&mut [u8]> {
        .                   self.mark_init(range, true);
  613,300 ( 0.01%)          self.clear_relocations(cx, range)?;
        .           
  490,640 ( 0.01%)          Ok(&mut self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
  981,280 ( 0.01%)      }
        .           
        .               /// A raw pointer variant of `get_bytes_mut` that avoids invalidating existing aliases into this memory.
   48,477 ( 0.00%)      pub fn get_bytes_mut_ptr(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<*mut [u8]> {
        .                   self.mark_init(range, true);
   22,035 ( 0.00%)          self.clear_relocations(cx, range)?;
        .           
    8,814 ( 0.00%)          assert!(range.end().bytes_usize() <= self.bytes.len()); // need to do our own bounds-check
        .                   let begin_ptr = self.bytes.as_mut_ptr().wrapping_add(range.start.bytes_usize());
    8,814 ( 0.00%)          let len = range.end().bytes_usize() - range.start.bytes_usize();
   17,628 ( 0.00%)          Ok(ptr::slice_from_raw_parts_mut(begin_ptr, len))
   35,256 ( 0.00%)      }
        .           }
        .           
        .           /// Reading and writing.
        .           impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {
        .               /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a
        .               /// relocation. If `allow_uninit_and_ptr` is `false`, also enforces that the memory in the
        .               /// given range contains neither relocations nor uninitialized bytes.
        .               pub fn check_bytes(
-- line 314 ----------------------------------------
-- line 329 ----------------------------------------
        .           
        .               /// Reads a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.
4,081,480 ( 0.05%)      pub fn read_scalar(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<ScalarMaybeUninit<Tag>> {
        .                   // `get_bytes_with_uninit_and_ptr` tests relocation edges.
        .                   // We deliberately error when loading data that partially has provenance, or partially
        .                   // initialized data (that's the check below), into a scalar. The LLVM semantics of this are
        .                   // unclear so we are conservative. See <https://github.com/rust-lang/rust/issues/69488> for
-- line 345 ----------------------------------------
-- line 348 ----------------------------------------
        .                   // Uninit check happens *after* we established that the alignment is correct.
        .                   // We must not return `Ok()` for unaligned pointers!
        .                   if self.is_init(range).is_err() {
        .                       // This inflates uninitialized bytes to the entire scalar, even if only a few
        .                       // bytes are uninitialized.
        .                       return Ok(ScalarMaybeUninit::Uninit);
        .                   }
        .                   // Now we do the actual reading.
  313,960 ( 0.00%)          let bits = read_target_uint(cx.data_layout().endian, bytes).unwrap();
        .                   // See if we got a pointer.
  313,960 ( 0.00%)          if range.size != cx.data_layout().pointer_size {
        .                       // Not a pointer.
        .                       // *Now*, we better make sure that the inside is free of relocations too.
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // Maybe a pointer.
        .                       if let Some(&prov) = self.relocations.get(&range.start) {
        .                           let ptr = Pointer::new(prov, Size::from_bytes(bits));
  104,990 ( 0.00%)                  return Ok(ScalarMaybeUninit::from_pointer(ptr, cx));
        .                       }
        .                   }
        .                   // We don't. Just return the bits.
1,757,772 ( 0.02%)          Ok(ScalarMaybeUninit::Scalar(Scalar::from_uint(bits, range.size)))
2,825,640 ( 0.03%)      }
        .           
        .               /// Writes a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::write_scalar` instead of this method.
  858,620 ( 0.01%)      pub fn write_scalar(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> AllocResult {
  122,660 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
        .           
  367,980 ( 0.00%)          let val = match val {
        .                       ScalarMaybeUninit::Scalar(scalar) => scalar,
        .                       ScalarMaybeUninit::Uninit => {
        .                           self.mark_init(range, false);
        .                           return Ok(());
        .                       }
        .                   };
        .           
        .                   // `to_bits_or_ptr_internal` is the right method because we just want to store this data
        .                   // as-is into memory.
  490,640 ( 0.01%)          let (bytes, provenance) = match val.to_bits_or_ptr_internal(range.size) {
        .                       Err(val) => {
        .                           let (provenance, offset) = val.into_parts();
        .                           (u128::from(offset.bytes()), Some(provenance))
        .                       }
        .                       Ok(data) => (data, None),
        .                   };
        .           
  367,980 ( 0.00%)          let endian = cx.data_layout().endian;
  367,980 ( 0.00%)          let dst = self.get_bytes_mut(cx, range)?;
        .                   write_target_uint(endian, dst, bytes).unwrap();
        .           
        .                   // See if we have to also write a relocation.
  360,984 ( 0.00%)          if let Some(provenance) = provenance {
   27,984 ( 0.00%)              self.relocations.0.insert(range.start, provenance);
        .                   }
        .           
        .                   Ok(())
1,103,940 ( 0.01%)      }
        .           }
        .           
        .           /// Relocations.
        .           impl<Tag: Copy, Extra> Allocation<Tag, Extra> {
        .               /// Returns all relocations overlapping with the given pointer-offset pair.
3,127,953 ( 0.04%)      pub fn get_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> &[(Size, Tag)] {
        .                   // We have to go back `pointer_size - 1` bytes, as that one would still overlap with
        .                   // the beginning of this range.
3,141,174 ( 0.04%)          let start = range.start.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);
        .                   self.relocations.range(Size::from_bytes(start)..range.end())
4,170,604 ( 0.05%)      }
        .           
        .               /// Checks that there are no relocations overlapping with the given range.
        .               #[inline(always)]
        .               fn check_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
5,493,504 ( 0.06%)          if self.get_relocations(cx, range).is_empty() {
        .                       Ok(())
        .                   } else {
        .                       Err(AllocError::ReadPointerAsBytes)
        .                   }
        .               }
        .           
        .               /// Removes all relocations inside the given range.
        .               /// If there are relocations overlapping with the edges, they
        .               /// are removed as well *and* the bytes they cover are marked as
        .               /// uninitialized. This is a somewhat odd "spooky action at a distance",
        .               /// but it allows strictly more code to run than if we would just error
        .               /// immediately in that case.
1,397,737 ( 0.02%)      fn clear_relocations(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult
        .               where
        .                   Tag: Provenance,
        .               {
        .                   // Find the start and end of the given range and its outermost relocations.
        .                   let (first, last) = {
        .                       // Find all relocations overlapping the given range.
  635,335 ( 0.01%)              let relocations = self.get_relocations(cx, range);
  127,067 ( 0.00%)              if relocations.is_empty() {
        .                           return Ok(());
        .                       }
        .           
        .                       (
        .                           relocations.first().unwrap().0,
        .                           relocations.last().unwrap().0 + cx.data_layout().pointer_size,
        .                       )
        .                   };
-- line 461 ----------------------------------------
-- line 478 ----------------------------------------
        .                       }
        .                       self.init_mask.set_range(end, last, false);
        .                   }
        .           
        .                   // Forget all the relocations.
        .                   self.relocations.0.remove_range(first..last);
        .           
        .                   Ok(())
  889,469 ( 0.01%)      }
        .           
        .               /// Errors if there are relocations overlapping with the edges of the
        .               /// given memory range.
        .               #[inline]
        .               fn check_relocation_edges(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
        .                   self.check_relocations(cx, alloc_range(range.start, Size::ZERO))?;
        .                   self.check_relocations(cx, alloc_range(range.end(), Size::ZERO))?;
        .                   Ok(())
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
        .           }
        .           
        .           /// "Relocations" stores the provenance information of pointers stored in memory.
        .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           pub struct Relocations<Tag = AllocId>(SortedMap<Size, Tag>);
        .           
        .           impl<Tag> Relocations<Tag> {
        .               pub fn new() -> Self {
   72,278 ( 0.00%)          Relocations(SortedMap::new())
        .               }
        .           
        .               // The caller must guarantee that the given relocations are already sorted
        .               // by address and contain no duplicates.
        .               pub fn from_presorted(r: Vec<(Size, Tag)>) -> Self {
        .                   Relocations(SortedMap::from_presorted_elements(r))
        .               }
        .           }
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
        .           }
        .           
        .           /// A partial, owned list of relocations to transfer into another allocation.
        .           pub struct AllocationRelocations<Tag> {
        .               relative_relocations: Vec<(Size, Tag)>,
        .           }
        .           
        .           impl<Tag: Copy, Extra> Allocation<Tag, Extra> {
   44,070 ( 0.00%)      pub fn prepare_relocation_copy(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   src: AllocRange,
        .                   dest: Size,
        .                   count: u64,
        .               ) -> AllocationRelocations<Tag> {
        .                   let relocations = self.get_relocations(cx, src);
    4,407 ( 0.00%)          if relocations.is_empty() {
        .                       return AllocationRelocations { relative_relocations: Vec::new() };
        .                   }
        .           
    4,407 ( 0.00%)          let size = src.size;
   13,221 ( 0.00%)          let mut new_relocations = Vec::with_capacity(relocations.len() * (count as usize));
        .           
    4,407 ( 0.00%)          for i in 0..count {
        .                       new_relocations.extend(relocations.iter().map(|&(offset, reloc)| {
        .                           // compute offset for current repetition
   24,064 ( 0.00%)                  let dest_offset = dest + size * i; // `Size` operations
        .                           (
        .                               // shift offsets from source allocation to destination allocation
    6,016 ( 0.00%)                      (offset + dest_offset) - src.start, // `Size` operations
        .                               reloc,
        .                           )
        .                       }));
        .                   }
        .           
   30,849 ( 0.00%)          AllocationRelocations { relative_relocations: new_relocations }
   39,663 ( 0.00%)      }
        .           
        .               /// Applies a relocation copy.
        .               /// The affected range, as defined in the parameters to `prepare_relocation_copy` is expected
        .               /// to be clear of relocations.
   30,849 ( 0.00%)      pub fn mark_relocation_range(&mut self, relocations: AllocationRelocations<Tag>) {
   17,628 ( 0.00%)          self.relocations.0.insert_presorted(relocations.relative_relocations);
   35,256 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Uninitialized byte tracking
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           type Block = u64;
        .           
-- line 571 ----------------------------------------
-- line 582 ----------------------------------------
        .               pub const BLOCK_SIZE: u64 = 64;
        .           
        .               #[inline]
        .               fn bit_index(bits: Size) -> (usize, usize) {
        .                   // BLOCK_SIZE is the number of bits that can fit in a `Block`.
        .                   // Each bit in a `Block` represents the initialization state of one byte of an allocation,
        .                   // so we use `.bytes()` here.
        .                   let bits = bits.bytes();
1,360,424 ( 0.02%)          let a = bits / InitMask::BLOCK_SIZE;
  346,420 ( 0.00%)          let b = bits % InitMask::BLOCK_SIZE;
        .                   (usize::try_from(a).unwrap(), usize::try_from(b).unwrap())
        .               }
        .           
        .               #[inline]
        .               fn size_from_bit_index(block: impl TryInto<u64>, bit: impl TryInto<u64>) -> Size {
        .                   let block = block.try_into().ok().unwrap();
        .                   let bit = bit.try_into().ok().unwrap();
  107,881 ( 0.00%)          Size::from_bytes(block * InitMask::BLOCK_SIZE + bit)
        .               }
        .           
  144,548 ( 0.00%)      pub fn new(size: Size, state: bool) -> Self {
   72,286 ( 0.00%)          let mut m = InitMask { blocks: vec![], len: Size::ZERO };
   36,149 ( 0.00%)          m.grow(size, state);
        .                   m
  180,685 ( 0.00%)      }
        .           
1,016,536 ( 0.01%)      pub fn set_range(&mut self, start: Size, end: Size, new_state: bool) {
  254,134 ( 0.00%)          let len = self.len;
  127,067 ( 0.00%)          if end > len {
        .                       self.grow(end - len, new_state);
        .                   }
1,270,670 ( 0.01%)          self.set_range_inbounds(start, end, new_state);
        .               }
        .           
  692,840 ( 0.01%)      pub fn set_range_inbounds(&mut self, start: Size, end: Size, new_state: bool) {
        .                   let (blocka, bita) = Self::bit_index(start);
        .                   let (blockb, bitb) = Self::bit_index(end);
  346,420 ( 0.00%)          if blocka == blockb {
        .                       // First set all bits except the first `bita`,
        .                       // then unset the last `64 - bitb` bits.
  332,490 ( 0.00%)              let range = if bitb == 0 {
        .                           u64::MAX << bita
        .                       } else {
1,163,715 ( 0.01%)                  (u64::MAX << bita) & (u64::MAX >> (64 - bitb))
        .                       };
  332,490 ( 0.00%)              if new_state {
  129,438 ( 0.00%)                  self.blocks[blocka] |= range;
        .                       } else {
   73,614 ( 0.00%)                  self.blocks[blocka] &= !range;
        .                       }
        .                       return;
        .                   }
        .                   // across block boundaries
   13,930 ( 0.00%)          if new_state {
        .                       // Set `bita..64` to `1`.
   19,263 ( 0.00%)              self.blocks[blocka] |= u64::MAX << bita;
        .                       // Set `0..bitb` to `1`.
   12,842 ( 0.00%)              if bitb != 0 {
    5,295 ( 0.00%)                  self.blocks[blockb] |= u64::MAX >> (64 - bitb);
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
        .                           self.blocks[block] = u64::MAX;
        .                       }
        .                   } else {
        .                       // Set `bita..64` to `0`.
    2,176 ( 0.00%)              self.blocks[blocka] &= !(u64::MAX << bita);
        .                       // Set `0..bitb` to `0`.
    1,088 ( 0.00%)              if bitb != 0 {
      954 ( 0.00%)                  self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
    4,718 ( 0.00%)                  self.blocks[block] = 0;
        .                       }
        .                   }
  346,420 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn get(&self, i: Size) -> bool {
        .                   let (block, bit) = Self::bit_index(i);
   30,849 ( 0.00%)          (self.blocks[block] & (1 << bit)) != 0
        .               }
        .           
        .               #[inline]
        .               pub fn set(&mut self, i: Size, new_state: bool) {
        .                   let (block, bit) = Self::bit_index(i);
        .                   self.set_bit(block, bit, new_state);
        .               }
        .           
-- line 671 ----------------------------------------
-- line 673 ----------------------------------------
        .               fn set_bit(&mut self, block: usize, bit: usize, new_state: bool) {
        .                   if new_state {
        .                       self.blocks[block] |= 1 << bit;
        .                   } else {
        .                       self.blocks[block] &= !(1 << bit);
        .                   }
        .               }
        .           
  216,846 ( 0.00%)      pub fn grow(&mut self, amount: Size, new_state: bool) {
   72,282 ( 0.00%)          if amount.bytes() == 0 {
        .                       return;
        .                   }
        .                   let unused_trailing_bits =
  289,120 ( 0.00%)              u64::try_from(self.blocks.len()).unwrap() * Self::BLOCK_SIZE - self.len.bytes();
   72,280 ( 0.00%)          if amount.bytes() > unused_trailing_bits {
  108,420 ( 0.00%)              let additional_blocks = amount.bytes() / Self::BLOCK_SIZE + 1;
        .                       self.blocks.extend(
        .                           // FIXME(oli-obk): optimize this by repeating `new_state as Block`.
        .                           iter::repeat(0).take(usize::try_from(additional_blocks).unwrap()),
        .                       );
        .                   }
   36,140 ( 0.00%)          let start = self.len;
        .                   self.len += amount;
  325,260 ( 0.00%)          self.set_range_inbounds(start, start + amount, new_state); // `Size` operation
        7 ( 0.00%)      }
        .           
        .               /// Returns the index of the first bit in `start..end` (end-exclusive) that is equal to is_init.
  658,770 ( 0.01%)      fn find_bit(&self, start: Size, end: Size, is_init: bool) -> Option<Size> {
        .                   /// A fast implementation of `find_bit`,
        .                   /// which skips over an entire block at a time if it's all 0s (resp. 1s),
        .                   /// and finds the first 1 (resp. 0) bit inside a block using `trailing_zeros` instead of a loop.
        .                   ///
        .                   /// Note that all examples below are written with 8 (instead of 64) bit blocks for simplicity,
        .                   /// and with the least significant bit (and lowest block) first:
        .                   ///
        .                   ///          00000000|00000000
-- line 708 ----------------------------------------
-- line 728 ----------------------------------------
        .                           //   start_bit = 3
        .                           //   is_init = false
        .                           // Note that, for the examples in this function, the most significant bit is written first,
        .                           // which is backwards compared to the comments in `find_bit`/`find_bit_fast`.
        .           
        .                           // Invert bits so we're always looking for the first set bit.
        .                           //        ! 0b00111011
        .                           //   bits = 0b11000100
1,317,540 ( 0.02%)                  let bits = if is_init { bits } else { !bits };
        .                           // Mask off unused start bits.
        .                           //          0b11000100
        .                           //        & 0b11111000
        .                           //   bits = 0b11000000
  988,155 ( 0.01%)                  let bits = bits & (!0 << start_bit);
        .                           // Find set bit, if any.
        .                           //   bit = trailing_zeros(0b11000000)
        .                           //   bit = 6
  658,770 ( 0.01%)                  if bits == 0 {
        .                               None
        .                           } else {
        .                               let bit = bits.trailing_zeros();
        .                               Some(InitMask::size_from_bit_index(block, bit))
        .                           }
        .                       }
        .           
  329,385 ( 0.00%)              if start >= end {
        .                           return None;
        .                       }
        .           
        .                       // Convert `start` and `end` to block indexes and bit indexes within each block.
        .                       // We must convert `end` to an inclusive bound to handle block boundaries correctly.
        .                       //
        .                       // For example:
        .                       //
-- line 761 ----------------------------------------
-- line 819 ----------------------------------------
        .                       // The block marked (3) in this example is the first block that will be handled by this loop,
        .                       // and it will be skipped for that reason:
        .                       //
        .                       //                   (3)
        .                       //                --------
        .                       //   (e) 01000000|00000000|00000001
        .                       //          ^~~~~~~~~~~~~~~~~~^
        .                       //        start              end
  443,008 ( 0.01%)              if start_block < end_block_inclusive {
        .                           // This loop is written in a specific way for performance.
        .                           // Notably: `..end_block_inclusive + 1` is used for an inclusive range instead of `..=end_block_inclusive`,
        .                           // and `.zip(start_block + 1..)` is used to track the index instead of `.enumerate().skip().take()`,
        .                           // because both alternatives result in significantly worse codegen.
        .                           // `end_block_inclusive + 1` is guaranteed not to wrap, because `end_block_inclusive <= end / BLOCK_SIZE`,
        .                           // and `BLOCK_SIZE` (the number of bits per block) will always be at least 8 (1 byte).
        .                           for (&bits, block) in init_mask.blocks[start_block + 1..end_block_inclusive + 1]
        .                               .iter()
-- line 835 ----------------------------------------
-- line 879 ----------------------------------------
        .                       "optimized implementation of find_bit is wrong for start={:?} end={:?} is_init={} init_mask={:#?}",
        .                       start,
        .                       end,
        .                       is_init,
        .                       self
        .                   );
        .           
        .                   result
  658,770 ( 0.01%)      }
        .           }
        .           
        .           /// A contiguous chunk of initialized or uninitialized memory.
        .           pub enum InitChunk {
        .               Init(Range<Size>),
        .               Uninit(Range<Size>),
        .           }
        .           
-- line 895 ----------------------------------------
-- line 913 ----------------------------------------
        .           
        .           impl InitMask {
        .               /// Checks whether the range `start..end` (end-exclusive) is entirely initialized.
        .               ///
        .               /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte
        .               /// indexes for the first contiguous span of the uninitialized access.
        .               #[inline]
        .               pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {
  324,804 ( 0.00%)          if end > self.len {
        .                       return Err(self.len..end);
        .                   }
        .           
1,596,910 ( 0.02%)          let uninit_start = self.find_bit(start, end, false);
        .           
  638,764 ( 0.01%)          match uninit_start {
        .                       Some(uninit_start) => {
        .                           let uninit_end = self.find_bit(uninit_start, end, true).unwrap_or(end);
        .                           Err(uninit_start..uninit_end)
        .                       }
        .                       None => Ok(()),
        .                   }
        .               }
        .           
-- line 935 ----------------------------------------
-- line 938 ----------------------------------------
        .               ///
        .               /// The iterator guarantees the following:
        .               /// - Chunks are nonempty.
        .               /// - Chunks are adjacent (each range's start is equal to the previous range's end).
        .               /// - Chunks span exactly `start..end` (the first starts at `start`, the last ends at `end`).
        .               /// - Chunks alternate between [`InitChunk::Init`] and [`InitChunk::Uninit`].
        .               #[inline]
        .               pub fn range_as_init_chunks(&self, start: Size, end: Size) -> InitChunkIter<'_> {
    4,407 ( 0.00%)          assert!(end <= self.len);
        .           
    4,407 ( 0.00%)          let is_init = if start < end {
        .                       self.get(start)
        .                   } else {
        .                       // `start..end` is empty: there are no chunks, so use some arbitrary value
        .                       false
        .                   };
        .           
        .                   InitChunkIter { init_mask: self, is_init, start, end }
        .               }
-- line 956 ----------------------------------------
-- line 968 ----------------------------------------
        .               end: Size,
        .           }
        .           
        .           impl<'a> Iterator for InitChunkIter<'a> {
        .               type Item = InitChunk;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
   10,003 ( 0.00%)          if self.start >= self.end {
        .                       return None;
        .                   }
        .           
        .                   let end_of_chunk =
   61,207 ( 0.00%)              self.init_mask.find_bit(self.start, self.end, !self.is_init).unwrap_or(self.end);
        .                   let range = self.start..end_of_chunk;
        .           
        .                   let ret =
   34,416 ( 0.00%)              Some(if self.is_init { InitChunk::Init(range) } else { InitChunk::Uninit(range) });
        .           
        .                   self.is_init = !self.is_init;
        .                   self.start = end_of_chunk;
        .           
        .                   ret
        .               }
        .           }
        .           
-- line 993 ----------------------------------------
-- line 998 ----------------------------------------
        .               /// Returns `Ok(())` if it's initialized. Otherwise returns the range of byte
        .               /// indexes of the first contiguous uninitialized access.
        .               fn is_init(&self, range: AllocRange) -> Result<(), Range<Size>> {
        .                   self.init_mask.is_range_initialized(range.start, range.end()) // `Size` addition
        .               }
        .           
        .               /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`
        .               /// error which will report the first range of bytes which is uninitialized.
   48,798 ( 0.00%)      fn check_init(&self, range: AllocRange) -> AllocResult {
        .                   self.is_init(range).map_err(|idx_range| {
        .                       AllocError::InvalidUninitBytes(Some(UninitBytesAccess {
        .                           access_offset: range.start,
        .                           access_size: range.size,
        .                           uninit_offset: idx_range.start,
        .                           uninit_size: idx_range.end - idx_range.start, // `Size` subtraction
        .                       }))
        .                   })
   43,376 ( 0.00%)      }
        .           
        .               pub fn mark_init(&mut self, range: AllocRange, is_init: bool) {
  254,134 ( 0.00%)          if range.size.bytes() == 0 {
        .                       return;
        .                   }
  127,067 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
  508,268 ( 0.01%)          self.init_mask.set_range(range.start, range.end(), is_init);
        .               }
        .           }
        .           
        .           /// Run-length encoding of the uninit mask.
        .           /// Used to copy parts of a mask multiple times to another allocation.
        .           pub struct InitMaskCompressed {
        .               /// Whether the first range is initialized.
        .               initial: bool,
-- line 1030 ----------------------------------------
-- line 1032 ----------------------------------------
        .               /// The initialization state of the ranges alternate starting with `initial`.
        .               ranges: smallvec::SmallVec<[u64; 1]>,
        .           }
        .           
        .           impl InitMaskCompressed {
        .               pub fn no_bytes_init(&self) -> bool {
        .                   // The `ranges` are run-length encoded and of alternating initialization state.
        .                   // So if `ranges.len() > 1` then the second block is an initialized range.
    8,814 ( 0.00%)          !self.initial && self.ranges.len() == 1
    4,407 ( 0.00%)      }
        .           }
        .           
        .           /// Transferring the initialization mask to other allocations.
        .           impl<Tag, Extra> Allocation<Tag, Extra> {
        .               /// Creates a run-length encoding of the initialization mask; panics if range is empty.
        .               ///
        .               /// This is essentially a more space-efficient version of
        .               /// `InitMask::range_as_init_chunks(...).collect::<Vec<_>>()`.
   30,849 ( 0.00%)      pub fn compress_uninit_range(&self, range: AllocRange) -> InitMaskCompressed {
        .                   // Since we are copying `size` bytes from `src` to `dest + i * size` (`for i in 0..repeat`),
        .                   // a naive initialization mask copying algorithm would repeatedly have to read the initialization mask from
        .                   // the source and write it to the destination. Even if we optimized the memory accesses,
        .                   // we'd be doing all of this `repeat` times.
        .                   // Therefore we precompute a compressed version of the initialization mask of the source value and
        .                   // then write it back `repeat` times without computing any more information from the source.
        .           
        .                   // A precomputed cache for ranges of initialized / uninitialized bits
-- line 1058 ----------------------------------------
-- line 1062 ----------------------------------------
        .           
        .                   let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();
        .           
        .                   let mut chunks = self.init_mask.range_as_init_chunks(range.start, range.end()).peekable();
        .           
        .                   let initial = chunks.peek().expect("range should be nonempty").is_init();
        .           
        .                   // Here we rely on `range_as_init_chunks` to yield alternating init/uninit chunks.
   11,192 ( 0.00%)          for chunk in chunks {
   20,006 ( 0.00%)              let len = chunk.range().end.bytes() - chunk.range().start.bytes();
        .                       ranges.push(len);
        .                   }
        .           
   30,849 ( 0.00%)          InitMaskCompressed { ranges, initial }
   35,256 ( 0.00%)      }
        .           
        .               /// Applies multiple instances of the run-length encoding to the initialization mask.
   48,477 ( 0.00%)      pub fn mark_compressed_init_range(
        .                   &mut self,
        .                   defined: &InitMaskCompressed,
        .                   range: AllocRange,
        .                   repeat: u64,
        .               ) {
        .                   // An optimization where we can just overwrite an entire range of initialization
        .                   // bits if they are going to be uniformly `1` or `0`.
    8,814 ( 0.00%)          if defined.ranges.len() <= 1 {
   16,090 ( 0.00%)              self.init_mask.set_range_inbounds(
        .                           range.start,
        .                           range.start + range.size * repeat, // `Size` operations
    1,609 ( 0.00%)                  defined.initial,
        .                       );
        .                       return;
        .                   }
        .           
        .                   for mut j in 0..repeat {
    8,394 ( 0.00%)              j *= range.size.bytes();
    5,596 ( 0.00%)              j += range.start.bytes();
        .                       let mut cur = defined.initial;
        .                       for range in &defined.ranges {
        .                           let old_j = j;
        .                           j += range;
   25,182 ( 0.00%)                  self.init_mask.set_range_inbounds(
        .                               Size::from_bytes(old_j),
        .                               Size::from_bytes(j),
   33,576 ( 0.00%)                      cur,
        .                           );
        .                           cur = !cur;
        .                       }
        .                   }
   22,384 ( 0.00%)      }
        .           }

5,535,903 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
    40,910 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
       854 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
   201,134 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
     4,294 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
   178,121 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         6 ( 0.00%)      pub kind: LitKind,
         6 ( 0.00%)      pub symbol: Symbol,
         6 ( 0.00%)      pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
   300,800 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   541,440 ( 0.01%)          let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         .                       Byte => write!(f, "b'{}'", symbol)?,
   172,299 ( 0.00%)              Char => write!(f, "'{}'", symbol)?,
     8,142 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
         .                       StrRaw(n) => write!(
         .                           f,
         .                           "r{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
         .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
         .                       ByteStrRaw(n) => write!(
         .                           f,
         .                           "br{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
        39 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
         .                   }
         .           
   120,320 ( 0.00%)          if let Some(suffix) = suffix {
         .                       write!(f, "{}", suffix)?;
         .                   }
         .           
         .                   Ok(())
   300,800 ( 0.00%)      }
         .           }
         .           
         .           impl LitKind {
         .               /// An English article for the literal token kind.
         .               pub fn article(self) -> &'static str {
         .                   match self {
         .                       Integer | Err => "an",
         .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
         .                       Float => "float",
         .                       Str | StrRaw(..) => "string",
         .                       ByteStr | ByteStrRaw(..) => "byte string",
         .                       Err => "error",
         .                   }
         .               }
         .           
         .               crate fn may_have_suffix(self) -> bool {
         2 ( 0.00%)          matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
   427,959 ( 0.00%)      }
         .           }
         .           
     1,264 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
     2,212 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
       855 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
     1,580 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
     2,214 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
       814 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
27,255,218 ( 0.31%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
   104,781 ( 0.00%)      BinOp(BinOpToken),
       228 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
   173,460 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
   614,760 ( 0.01%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
   222,274 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
    69,044 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
     4,101 ( 0.00%)      Lifetime(Symbol),
         .           
       541 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
     7,584 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
 1,150,994 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
    23,403 ( 0.00%)      pub kind: TokenKind,
        20 ( 0.00%)      pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
         .               }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
    10,396 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    41,937 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
    10,354 ( 0.00%)              _ => return None,
         .                   })
    10,396 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
     1,958 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
       434 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   354,116 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 1,081,843 ( 0.01%)          Token { kind, span }
   354,116 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
     5,585 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
     5,585 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
     7,040 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
   212,541 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
   212,541 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
     8,360 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
     4,180 ( 0.00%)              _ => self.span,
         .                   }
     4,180 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
   637,623 ( 0.01%)          !matches!(
   212,541 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
   212,541 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
    34,999 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
     6,975 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
       469 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
     2,357 ( 0.00%)          match self.uninterpolate().kind {
     2,844 ( 0.00%)              Ident(name, is_raw)              =>
       948 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
         .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
       938 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
     2,016 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
     3,130 ( 0.00%)          match self.uninterpolate().kind {
     3,321 ( 0.00%)              Ident(name, is_raw)        =>
       369 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
         .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
     3,024 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
     2,140 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
         .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
       428 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
         .               }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
       435 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
     4,056 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
     1,460 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
       870 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
   115,673 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 1,836,901 ( 0.02%)          match &self.kind {
     2,100 ( 0.00%)              Interpolated(nt) => match **nt {
        44 ( 0.00%)                  NtIdent(ident, is_raw) => {
       110 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
   115,673 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
   384,127 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
 1,232,291 ( 0.01%)          match token.kind {
 2,997,078 ( 0.03%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 2,470,657 ( 0.03%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
     2,185 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
    17,410 ( 0.00%)          match token.kind {
    11,022 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
    15,295 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
     6,480 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
     6,520 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
    13,040 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
     6,647 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    13,294 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
    58,260 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   false
         .               }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
       696 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
       348 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         .               pub fn is_mutability(&self) -> bool {
         .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
         .               }
         .           
     5,358 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    34,506 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
    58,320 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    86,878 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
    12,928 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    72,900 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
   176,964 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
   353,928 ( 0.00%)      }
         .           
     2,563 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
       951 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
       951 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
       951 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
     2,563 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
     5,126 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        12 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 2,600,389 ( 0.03%)          match self.ident() {
    12,666 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
        15 ( 0.00%)      }
         .           
   559,730 ( 0.01%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   279,865 ( 0.00%)          let kind = match self.kind {
     4,303 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
       265 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
       771 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
        28 ( 0.00%)              Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
     6,091 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
       110 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        57 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       603 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
     2,136 ( 0.00%)              Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
        21 ( 0.00%)              DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
     8,404 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
    87,061 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   503,757 ( 0.01%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
 1,385,835 ( 0.02%)          self.kind == *rhs
         .               }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
       208 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
       448 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
       208 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

 9,984,740 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 71 ----------------------------------------
        .               AlreadyParsed(P<Expr>),
        .           }
        .           
        .           impl From<Option<AttrWrapper>> for LhsExpr {
        .               /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`
        .               /// and `None` into `LhsExpr::NotYetParsed`.
        .               ///
        .               /// This conversion does not allocate.
      283 ( 0.00%)      fn from(o: Option<AttrWrapper>) -> Self {
  244,401 ( 0.00%)          if let Some(attrs) = o { LhsExpr::AttributesParsed(attrs) } else { LhsExpr::NotYetParsed }
      283 ( 0.00%)      }
        .           }
        .           
        .           impl From<P<Expr>> for LhsExpr {
        .               /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.
        .               ///
        .               /// This conversion does not allocate.
        .               fn from(expr: P<Expr>) -> Self {
        .                   LhsExpr::AlreadyParsed(expr)
-- line 89 ----------------------------------------
-- line 96 ----------------------------------------
        .               pub fn parse_expr(&mut self) -> PResult<'a, P<Expr>> {
        .                   self.current_closure.take();
        .           
        .                   self.parse_expr_res(Restrictions::empty(), None)
        .               }
        .           
        .               /// Parses an expression, forcing tokens to be collected
        .               pub fn parse_expr_force_collect(&mut self) -> PResult<'a, P<Expr>> {
      426 ( 0.00%)          self.collect_tokens_no_attrs(|this| this.parse_expr())
        .               }
        .           
       24 ( 0.00%)      pub fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {
        .                   self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })
       24 ( 0.00%)      }
        .           
  517,416 ( 0.01%)      fn parse_expr_catch_underscore(&mut self) -> PResult<'a, P<Expr>> {
  129,354 ( 0.00%)          match self.parse_expr() {
        .                       Ok(expr) => Ok(expr),
        .                       Err(mut err) => match self.token.ident() {
        .                           Some((Ident { name: kw::Underscore, .. }, false))
        .                               if self.look_ahead(1, |t| t == &token::Comma) =>
        .                           {
        .                               // Special-case handling of `foo(_, _, _)`
        .                               err.emit();
        .                               self.bump();
        .                               Ok(self.mk_expr(self.prev_token.span, ExprKind::Err, AttrVec::new()))
        .                           }
        .                           _ => Err(err),
        .                       },
        .                   }
  646,770 ( 0.01%)      }
        .           
        .               /// Parses a sequence of expressions delimited by parentheses.
        .               fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {
   22,000 ( 0.00%)          self.parse_paren_comma_seq(|p| p.parse_expr_catch_underscore()).map(|(r, _)| r)
        .               }
        .           
        .               /// Parses an expression, subject to the given restrictions.
        .               #[inline]
        .               pub(super) fn parse_expr_res(
        .                   &mut self,
        .                   r: Restrictions,
        .                   already_parsed_attrs: Option<AttrWrapper>,
-- line 138 ----------------------------------------
-- line 144 ----------------------------------------
        .               ///
        .               /// This parses an expression accounting for associativity and precedence of the operators in
        .               /// the expression.
        .               #[inline]
        .               fn parse_assoc_expr(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, P<Expr>> {
  343,105 ( 0.00%)          self.parse_assoc_expr_with(0, already_parsed_attrs.into())
        .               }
        .           
        .               /// Parses an associative expression with operators of at least `min_prec` precedence.
  950,589 ( 0.01%)      pub(super) fn parse_assoc_expr_with(
        .                   &mut self,
        .                   min_prec: usize,
        .                   lhs: LhsExpr,
        .               ) -> PResult<'a, P<Expr>> {
  528,669 ( 0.01%)          let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {
    6,812 ( 0.00%)              expr
        .                   } else {
  207,836 ( 0.00%)              let attrs = match lhs {
  211,896 ( 0.00%)                  LhsExpr::AttributesParsed(attrs) => Some(attrs),
        .                           _ => None,
        .                       };
  103,918 ( 0.00%)              if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {
      128 ( 0.00%)                  return self.parse_prefix_range_expr(attrs);
        .                       } else {
1,246,632 ( 0.01%)                  self.parse_prefix_expr(attrs)?
        .                       }
        .                   };
  211,178 ( 0.00%)          let last_type_ascription_set = self.last_type_ascription.is_some();
        .           
        .                   if !self.should_continue_as_assoc_expr(&lhs) {
    2,646 ( 0.00%)              self.last_type_ascription = None;
        .                       return Ok(lhs);
        .                   }
        .           
        .                   self.expected_tokens.push(TokenType::Operator);
    3,456 ( 0.00%)          while let Some(op) = self.check_assoc_op() {
        .                       // Adjust the span for interpolated LHS to point to the `$lhs` token
        .                       // and not to what it refers to.
    5,184 ( 0.00%)              let lhs_span = match self.prev_token.kind {
        .                           TokenKind::Interpolated(..) => self.prev_token.span,
        .                           _ => lhs.span,
        .                       };
        .           
    1,728 ( 0.00%)              let cur_op_span = self.token.span;
    6,912 ( 0.00%)              let restrictions = if op.node.is_assign_like() {
        .                           self.restrictions & Restrictions::NO_STRUCT_LITERAL
        .                       } else {
        .                           self.restrictions
        .                       };
    2,592 ( 0.00%)              let prec = op.node.precedence();
    1,728 ( 0.00%)              if prec < min_prec {
        .                           break;
        .                       }
        .                       // Check for deprecated `...` syntax
    3,068 ( 0.00%)              if self.token == token::DotDotDot && op.node == AssocOp::DotDotEq {
        .                           self.err_dotdotdot_syntax(self.token.span);
        .                       }
        .           
    3,068 ( 0.00%)              if self.token == token::LArrow {
        .                           self.err_larrow_operator(self.token.span);
        .                       }
        .           
      767 ( 0.00%)              self.bump();
    3,068 ( 0.00%)              if op.node.is_comparison() {
        .                           if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {
        .                               return Ok(expr);
        .                           }
        .                       }
        .           
        .                       // Look for JS' `===` and `!==` and recover
    1,003 ( 0.00%)              if (op.node == AssocOp::Equal || op.node == AssocOp::NotEqual)
      236 ( 0.00%)                  && self.token.kind == token::Eq
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           let sugg = match op.node {
        .                               AssocOp::Equal => "==",
        .                               AssocOp::NotEqual => "!=",
        .                               _ => unreachable!(),
        .                           };
-- line 226 ----------------------------------------
-- line 231 ----------------------------------------
        .                                   sugg.to_string(),
        .                                   Applicability::MachineApplicable,
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
        .                       // Look for PHP's `<>` and recover
      158 ( 0.00%)              if op.node == AssocOp::Less
       40 ( 0.00%)                  && self.token.kind == token::Gt
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           self.struct_span_err(sp, "invalid comparison operator `<>`")
        .                               .span_suggestion_short(
        .                                   sp,
        .                                   "`<>` is not a valid comparison operator, use `!=`",
        .                                   "!=".to_string(),
        .                                   Applicability::MachineApplicable,
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
        .                       // Look for C++'s `<=>` and recover
      112 ( 0.00%)              if op.node == AssocOp::LessEqual
      112 ( 0.00%)                  && self.token.kind == token::Gt
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           self.struct_span_err(sp, "invalid comparison operator `<=>`")
        .                               .span_label(
        .                                   sp,
        .                                   "`<=>` is not a valid comparison operator, use `std::cmp::Ordering`",
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
    1,534 ( 0.00%)              let op = op.node;
        .                       // Special cases:
        .                       if op == AssocOp::As {
      325 ( 0.00%)                  lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;
        .                           continue;
        .                       } else if op == AssocOp::Colon {
        .                           lhs = self.parse_assoc_op_ascribe(lhs, lhs_span)?;
        .                           continue;
        .                       } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {
        .                           // If we didn’t have to handle `x..`/`x..=`, it would be pretty easy to
        .                           // generalise it to the Fixity::None code.
      236 ( 0.00%)                  lhs = self.parse_range_expr(prec, lhs, op, cur_op_span)?;
        .                           break;
        .                       }
        .           
      643 ( 0.00%)              let fixity = op.fixity();
    1,929 ( 0.00%)              let prec_adjustment = match fixity {
        .                           Fixity::Right => 0,
        .                           Fixity::Left => 1,
        .                           // We currently have no non-associative operators that are not handled above by
        .                           // the special cases. The code is here only for future convenience.
        .                           Fixity::None => 1,
        .                       };
    1,286 ( 0.00%)              let rhs = self.with_res(restrictions - Restrictions::STMT_EXPR, |this| {
    3,215 ( 0.00%)                  this.parse_assoc_expr_with(prec + prec_adjustment, LhsExpr::NotYetParsed)
        .                       })?;
        .           
        .                       let span = self.mk_expr_sp(&lhs, lhs_span, rhs.span);
    6,027 ( 0.00%)              lhs = match op {
        .                           AssocOp::Add
        .                           | AssocOp::Subtract
        .                           | AssocOp::Multiply
        .                           | AssocOp::Divide
        .                           | AssocOp::Modulus
        .                           | AssocOp::LAnd
        .                           | AssocOp::LOr
        .                           | AssocOp::BitXor
-- line 306 ----------------------------------------
-- line 309 ----------------------------------------
        .                           | AssocOp::ShiftLeft
        .                           | AssocOp::ShiftRight
        .                           | AssocOp::Equal
        .                           | AssocOp::Less
        .                           | AssocOp::LessEqual
        .                           | AssocOp::NotEqual
        .                           | AssocOp::Greater
        .                           | AssocOp::GreaterEqual => {
      966 ( 0.00%)                      let ast_op = op.to_ast_binop().unwrap();
        .                               let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);
        .                               self.mk_expr(span, binary, AttrVec::new())
        .                           }
        .                           AssocOp::Assign => {
        .                               self.mk_expr(span, ExprKind::Assign(lhs, rhs, cur_op_span), AttrVec::new())
        .                           }
        .                           AssocOp::AssignOp(k) => {
        .                               let aop = match k {
-- line 325 ----------------------------------------
-- line 337 ----------------------------------------
        .                               let aopexpr = self.mk_assign_op(source_map::respan(cur_op_span, aop), lhs, rhs);
        .                               self.mk_expr(span, aopexpr, AttrVec::new())
        .                           }
        .                           AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotEq => {
        .                               self.span_bug(span, "AssocOp should have been handled by special case")
        .                           }
        .                       };
        .           
    1,286 ( 0.00%)              if let Fixity::None = fixity {
        .                           break;
        .                       }
        .                   }
  104,707 ( 0.00%)          if last_type_ascription_set {
        .                       self.last_type_ascription = None;
        .                   }
  209,414 ( 0.00%)          Ok(lhs)
1,793,504 ( 0.02%)      }
        .           
        .               fn should_continue_as_assoc_expr(&mut self, lhs: &Expr) -> bool {
  740,908 ( 0.01%)          match (self.expr_is_complete(lhs), AssocOp::from_token(&self.token)) {
        .                       // Semi-statement forms are odd:
        .                       // See https://github.com/rust-lang/rust/issues/29071
        .                       (true, None) => false,
        .                       (false, _) => true, // Continue parsing the expression.
        .                       // An exhaustive check is done in the following block, but these are checked first
        .                       // because they *are* ambiguous but also reasonable looking incorrect syntax, so we
        .                       // want to keep their span info to improve diagnostics in these cases in a later stage.
        .                       (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`
-- line 364 ----------------------------------------
-- line 375 ----------------------------------------
        .                       (true, Some(AssocOp::LAnd)) => {
        .                           // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the
        .                           // above due to #74233.
        .                           // These cases are ambiguous and can't be identified in the parser alone.
        .                           let sp = self.sess.source_map().start_point(self.token.span);
        .                           self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);
        .                           false
        .                       }
        9 ( 0.00%)              (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => false,
        .                       (true, Some(_)) => {
        .                           self.error_found_expr_would_be_stmt(lhs);
        .                           true
        .                       }
        .                   }
        .               }
        .           
        .               /// We've found an expression that would be parsed as a statement,
-- line 391 ----------------------------------------
-- line 401 ----------------------------------------
        .                   err.emit();
        .               }
        .           
        .               /// Possibly translate the current token to an associative operator.
        .               /// The method does not advance the current token.
        .               ///
        .               /// Also performs recovery for `and` / `or` which are mistaken for `&&` and `||` respectively.
        .               fn check_assoc_op(&self) -> Option<Spanned<AssocOp>> {
1,160,509 ( 0.01%)          let (op, span) = match (AssocOp::from_token(&self.token), self.token.ident()) {
        .                       // When parsing const expressions, stop parsing when encountering `>`.
        .                       (
        .                           Some(
        .                               AssocOp::ShiftRight
        .                               | AssocOp::Greater
        .                               | AssocOp::GreaterEqual
        .                               | AssocOp::AssignOp(token::BinOpToken::Shr),
        .                           ),
        .                           _,
       53 ( 0.00%)              ) if self.restrictions.contains(Restrictions::CONST_EXPR) => {
        .                           return None;
        .                       }
    1,728 ( 0.00%)              (Some(op), _) => (op, self.token.span),
        .                       (None, Some((Ident { name: sym::and, span }, false))) => {
        .                           self.error_bad_logical_op("and", "&&", "conjunction");
        .                           (AssocOp::LAnd, span)
        .                       }
        .                       (None, Some((Ident { name: sym::or, span }, false))) => {
        .                           self.error_bad_logical_op("or", "||", "disjunction");
        .                           (AssocOp::LOr, span)
        .                       }
-- line 430 ----------------------------------------
-- line 443 ----------------------------------------
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .note("unlike in e.g., python and PHP, `&&` and `||` are used for logical operators")
        .                       .emit();
        .               }
        .           
        .               /// Checks if this expression is a successfully parsed statement.
        .               fn expr_is_complete(&self, e: &Expr) -> bool {
  212,951 ( 0.00%)          self.restrictions.contains(Restrictions::STMT_EXPR)
   17,850 ( 0.00%)              && !classify::expr_requires_semi_to_be_stmt(e)
        .               }
        .           
        .               /// Parses `x..y`, `x..=y`, and `x..`/`x..=`.
        .               /// The other two variants are handled in `parse_prefix_range_expr` below.
        .               fn parse_range_expr(
        .                   &mut self,
        .                   prec: usize,
        .                   lhs: P<Expr>,
        .                   op: AssocOp,
        .                   cur_op_span: Span,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let rhs = if self.is_at_start_of_range_notation_rhs() {
      324 ( 0.00%)              Some(self.parse_assoc_expr_with(prec + 1, LhsExpr::NotYetParsed)?)
        .                   } else {
       46 ( 0.00%)              None
        .                   };
       72 ( 0.00%)          let rhs_span = rhs.as_ref().map_or(cur_op_span, |x| x.span);
        .                   let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);
        .                   let limits =
        .                       if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };
      177 ( 0.00%)          let range = self.mk_range(Some(lhs), rhs, limits);
        .                   Ok(self.mk_expr(span, range, AttrVec::new()))
        .               }
        .           
        .               fn is_at_start_of_range_notation_rhs(&self) -> bool {
      396 ( 0.00%)          if self.token.can_begin_expr() {
        .                       // Parse `for i in 1.. { }` as infinite loop, not as `for i in (1..{})`.
      280 ( 0.00%)              if self.token == token::OpenDelim(token::Brace) {
        .                           return !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);
        .                       }
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Parses prefix-forms of range notation: `..expr`, `..`, `..=expr`.
        .               fn parse_prefix_range_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
        .                   // Check for deprecated `...` syntax.
      160 ( 0.00%)          if self.token == token::DotDotDot {
        .                       self.err_dotdotdot_syntax(self.token.span);
        .                   }
        .           
        .                   debug_assert!(
        .                       [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind),
        .                       "parse_prefix_range_expr: token {:?} is not DotDot/DotDotEq",
        .                       self.token
        .                   );
        .           
       96 ( 0.00%)          let limits = match self.token.kind {
        .                       token::DotDot => RangeLimits::HalfOpen,
        .                       _ => RangeLimits::Closed,
        .                   };
       64 ( 0.00%)          let op = AssocOp::from_token(&self.token);
        .                   // FIXME: `parse_prefix_range_expr` is called when the current
        .                   // token is `DotDot`, `DotDotDot`, or `DotDotEq`. If we haven't already
        .                   // parsed attributes, then trying to parse them here will always fail.
        .                   // We should figure out how we want attributes on range expressions to work.
      128 ( 0.00%)          let attrs = self.parse_or_use_outer_attributes(attrs)?;
        .                   self.collect_tokens_for_expr(attrs, |this, attrs| {
       64 ( 0.00%)              let lo = this.token.span;
       64 ( 0.00%)              this.bump();
        .                       let (span, opt_end) = if this.is_at_start_of_range_notation_rhs() {
        .                           // RHS must be parsed with more associativity than the dots.
      200 ( 0.00%)                  this.parse_assoc_expr_with(op.unwrap().precedence() + 1, LhsExpr::NotYetParsed)
      100 ( 0.00%)                      .map(|x| (lo.to(x.span), Some(x)))?
        .                       } else {
        .                           (lo, None)
        .                       };
       96 ( 0.00%)              let range = this.mk_range(None, opt_end, limits);
      224 ( 0.00%)              Ok(this.mk_expr(span, range, attrs.into()))
        .                   })
        .               }
        .           
        .               /// Parses a prefix-unary-operator expr.
  756,875 ( 0.01%)      fn parse_prefix_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
  865,000 ( 0.01%)          let attrs = self.parse_or_use_outer_attributes(attrs)?;
  540,625 ( 0.01%)          let lo = self.token.span;
        .           
        .                   macro_rules! make_it {
        .                       ($this:ident, $attrs:expr, |this, _| $body:expr) => {
   37,839 ( 0.00%)                  $this.collect_tokens_for_expr($attrs, |$this, attrs| {
   67,383 ( 0.00%)                      let (hi, ex) = $body?;
   67,824 ( 0.00%)                      Ok($this.mk_expr(lo.to(hi), ex, attrs.into()))
   42,078 ( 0.00%)                  })
        .                       };
        .                   }
        .           
        .                   let this = self;
        .           
        .                   // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()
  665,374 ( 0.01%)          match this.token.uninterpolate().kind {
      142 ( 0.00%)              token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`
        .                       token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`
        .                       token::BinOp(token::Minus) => {
        .                           make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))
        .                       } // `-expr`
        .                       token::BinOp(token::Star) => {
      161 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))
        .                       } // `*expr`
        .                       token::BinOp(token::And) | token::AndAnd => {
    7,854 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))
        .                       }
        .                       token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {
        .                           let mut err = this.struct_span_err(lo, "leading `+` is not supported");
        .                           err.span_label(lo, "unexpected `+`");
        .           
        .                           // a block on the LHS might have been intended to be an expression instead
        .                           if let Some(sp) = this.sess.ambiguous_block_expr_parse.borrow().get(&lo) {
        .                               this.sess.expr_parentheses_needed(&mut err, *sp);
-- line 562 ----------------------------------------
-- line 568 ----------------------------------------
        .                                   Applicability::MachineApplicable,
        .                               );
        .                           }
        .                           err.emit();
        .           
        .                           this.bump();
        .                           this.parse_prefix_expr(None)
        .                       } // `+expr`
   26,624 ( 0.00%)              token::Ident(..) if this.token.is_keyword(kw::Box) => {
        9 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_box_expr(lo))
        .                       }
        .                       token::Ident(..) if this.is_mistaken_not_ident_negation() => {
        .                           make_it!(this, attrs, |this, _| this.recover_not_expr(lo))
        .                       }
        .                       _ => return this.parse_dot_or_call_expr(Some(attrs)),
        .                   }
1,081,250 ( 0.01%)      }
        .           
        .               fn parse_prefix_expr_common(&mut self, lo: Span) -> PResult<'a, (Span, P<Expr>)> {
      624 ( 0.00%)          self.bump();
    1,248 ( 0.00%)          let expr = self.parse_prefix_expr(None);
      312 ( 0.00%)          let (span, expr) = self.interpolated_or_expr_span(expr)?;
      624 ( 0.00%)          Ok((lo.to(span), expr))
        .               }
        .           
        .               fn parse_unary_expr(&mut self, lo: Span, op: UnOp) -> PResult<'a, (Span, ExprKind)> {
        .                   let (span, expr) = self.parse_prefix_expr_common(lo)?;
        .                   Ok((span, self.mk_unary(op, expr)))
        .               }
        .           
        .               // Recover on `!` suggesting for bitwise negation instead.
-- line 598 ----------------------------------------
-- line 606 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   self.parse_unary_expr(lo, UnOp::Not)
        .               }
        .           
        .               /// Parse `box expr`.
        .               fn parse_box_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
       18 ( 0.00%)          let (span, expr) = self.parse_prefix_expr_common(lo)?;
       36 ( 0.00%)          self.sess.gated_spans.gate(sym::box_syntax, span);
        .                   Ok((span, ExprKind::Box(expr)))
        .               }
        .           
        .               fn is_mistaken_not_ident_negation(&self) -> bool {
        .                   let token_cannot_continue_expr = |t: &Token| match t.uninterpolate().kind {
        .                       // These tokens can start an expression after `!`, but
        .                       // can't continue an expression after an ident
        .                       token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),
        .                       token::Literal(..) | token::Pound => true,
        .                       _ => t.is_whole_expr(),
        .                   };
   26,588 ( 0.00%)          self.token.is_ident_named(sym::not) && self.look_ahead(1, token_cannot_continue_expr)
        .               }
        .           
        .               /// Recover on `not expr` in favor of `!expr`.
        .               fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
        .                   // Emit the error...
        .                   let not_token = self.look_ahead(1, |t| t.clone());
        .                   self.struct_span_err(
        .                       not_token.span,
-- line 635 ----------------------------------------
-- line 651 ----------------------------------------
        .           
        .               /// Returns the span of expr, if it was not interpolated or the span of the interpolated token.
        .               fn interpolated_or_expr_span(
        .                   &self,
        .                   expr: PResult<'a, P<Expr>>,
        .               ) -> PResult<'a, (Span, P<Expr>)> {
        .                   expr.map(|e| {
        .                       (
  436,739 ( 0.00%)                  match self.prev_token.kind {
        .                               TokenKind::Interpolated(..) => self.prev_token.span,
        .                               _ => e.span,
        .                           },
        .                           e,
        .                       )
        .                   })
        .               }
        .           
      910 ( 0.00%)      fn parse_assoc_op_cast(
        .                   &mut self,
        .                   lhs: P<Expr>,
        .                   lhs_span: Span,
        .                   expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let mk_expr = |this: &mut Self, lhs: P<Expr>, rhs: P<Ty>| {
        .                       this.mk_expr(
        .                           this.mk_expr_sp(&lhs, lhs_span, rhs.span),
      195 ( 0.00%)                  expr_kind(lhs, rhs),
        .                           AttrVec::new(),
        .                       )
        .                   };
        .           
        .                   // Save the state of the parser before parsing type normally, in case there is a
        .                   // LessThan comparison after this cast.
      130 ( 0.00%)          let parser_snapshot_before_type = self.clone();
      195 ( 0.00%)          let cast_expr = match self.parse_as_cast_ty() {
        .                       Ok(rhs) => mk_expr(self, lhs, rhs),
        .                       Err(mut type_err) => {
        .                           // Rewind to before attempting to parse the type with generics, to recover
        .                           // from situations like `x as usize < y` in which we first tried to parse
        .                           // `usize < y` as a type with generic arguments.
        .                           let parser_snapshot_after_type = mem::replace(self, parser_snapshot_before_type);
        .           
        .                           // Check for typo of `'a: loop { break 'a }` with a missing `'`.
-- line 693 ----------------------------------------
-- line 779 ----------------------------------------
        .                                   *self = parser_snapshot_after_type;
        .                                   return Err(type_err);
        .                               }
        .                           }
        .                       }
        .                   };
        .           
        .                   self.parse_and_disallow_postfix_after_cast(cast_expr)
      780 ( 0.00%)      }
        .           
        .               /// Parses a postfix operators such as `.`, `?`, or index (`[]`) after a cast,
        .               /// then emits an error and returns the newly parsed tree.
        .               /// The resulting parse tree for `&x as T[0]` has a precedence of `((&x) as T)[0]`.
        .               fn parse_and_disallow_postfix_after_cast(
        .                   &mut self,
        .                   cast_expr: P<Expr>,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Save the memory location of expr before parsing any following postfix operators.
        .                   // This will be compared with the memory location of the output expression.
        .                   // If they different we can assume we parsed another expression because the existing expression is not reallocated.
        .                   let addr_before = &*cast_expr as *const _ as usize;
        .                   let span = cast_expr.span;
      390 ( 0.00%)          let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;
        .                   let changed = addr_before != &*with_postfix as *const _ as usize;
        .           
        .                   // Check if an illegal postfix operator has been added after the cast.
        .                   // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.
      390 ( 0.00%)          if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {
        .                       let msg = format!(
        .                           "casts cannot be followed by {}",
        .                           match with_postfix.kind {
        .                               ExprKind::Index(_, _) => "indexing",
        .                               ExprKind::Try(_) => "`?`",
        .                               ExprKind::Field(_, _) => "a field access",
        .                               ExprKind::MethodCall(_, _, _) => "a method call",
        .                               ExprKind::Call(_, _) => "a function call",
-- line 814 ----------------------------------------
-- line 844 ----------------------------------------
        .                   let lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;
        .                   self.sess.gated_spans.gate(sym::type_ascription, lhs.span);
        .                   Ok(lhs)
        .               }
        .           
        .               /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.
        .               fn parse_borrow_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
        .                   self.expect_and()?;
   19,635 ( 0.00%)          let has_lifetime = self.token.is_lifetime() && self.look_ahead(1, |t| t != &token::Colon);
        .                   let lifetime = has_lifetime.then(|| self.expect_lifetime()); // For recovery, see below.
        .                   let (borrow_kind, mutbl) = self.parse_borrow_modifiers(lo);
   15,708 ( 0.00%)          let expr = self.parse_prefix_expr(None);
    7,854 ( 0.00%)          let (hi, expr) = self.interpolated_or_expr_span(expr)?;
    3,927 ( 0.00%)          let span = lo.to(hi);
    7,854 ( 0.00%)          if let Some(lt) = lifetime {
        .                       self.error_remove_borrow_lifetime(span, lt.ident.span);
        .                   }
        .                   Ok((span, ExprKind::AddrOf(borrow_kind, mutbl, expr)))
        .               }
        .           
        .               fn error_remove_borrow_lifetime(&self, span: Span, lt_span: Span) {
        .                   self.struct_span_err(span, "borrow expressions cannot be annotated with lifetimes")
        .                       .span_label(lt_span, "annotated with lifetime here")
-- line 866 ----------------------------------------
-- line 870 ----------------------------------------
        .                           String::new(),
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .               }
        .           
        .               /// Parse `mut?` or `raw [ const | mut ]`.
        .               fn parse_borrow_modifiers(&mut self, lo: Span) -> (ast::BorrowKind, ast::Mutability) {
    7,854 ( 0.00%)          if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {
        .                       // `raw [ const | mut ]`.
        .                       let found_raw = self.eat_keyword(kw::Raw);
        .                       assert!(found_raw);
        .                       let mutability = self.parse_const_or_mut().unwrap();
        .                       self.sess.gated_spans.gate(sym::raw_ref_op, lo.to(self.prev_token.span));
        .                       (ast::BorrowKind::Raw, mutability)
        .                   } else {
        .                       // `mut?`
-- line 886 ----------------------------------------
-- line 889 ----------------------------------------
        .               }
        .           
        .               /// Parses `a.b` or `a(13)` or `a[4]` or just `a`.
        .               fn parse_dot_or_call_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
        .                   let attrs = self.parse_or_use_outer_attributes(attrs)?;
        .                   self.collect_tokens_for_expr(attrs, |this, attrs| {
        .                       let base = this.parse_bottom_expr();
        .                       let (span, base) = this.interpolated_or_expr_span(base)?;
  415,544 ( 0.00%)              this.parse_dot_or_call_expr_with(base, span, attrs)
        .                   })
        .               }
        .           
      372 ( 0.00%)      pub(super) fn parse_dot_or_call_expr_with(
        .                   &mut self,
        .                   e0: P<Expr>,
        .                   lo: Span,
        .                   mut attrs: Vec<ast::Attribute>,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Stitch the list of outer attributes onto the return value.
        .                   // A little bit ugly, but the best way given the current code
        .                   // structure
  738,565 ( 0.01%)          self.parse_dot_or_call_expr_with_(e0, lo).map(|expr| {
  738,751 ( 0.01%)              expr.map(|mut expr| {
  105,527 ( 0.00%)                  attrs.extend::<Vec<_>>(expr.attrs.into());
  211,054 ( 0.00%)                  expr.attrs = attrs.into();
1,477,378 ( 0.02%)                  expr
        .                       })
        .                   })
      496 ( 0.00%)      }
        .           
3,273,352 ( 0.04%)      fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
        .                   loop {
        .                       if self.eat(&token::Question) {
        .                           // `expr?`
      604 ( 0.00%)                  e = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Try(e), AttrVec::new());
        .                           continue;
        .                       }
        .                       if self.eat(&token::Dot) {
        .                           // expr.f
   13,704 ( 0.00%)                  e = self.parse_dot_suffix_expr(lo, e)?;
        .                           continue;
        .                       }
    7,896 ( 0.00%)              if self.expr_is_complete(&e) {
        .                           return Ok(e);
        .                       }
  228,943 ( 0.00%)              e = match self.token.kind {
    4,851 ( 0.00%)                  token::OpenDelim(token::Paren) => self.parse_fn_call_expr(lo, e),
      306 ( 0.00%)                  token::OpenDelim(token::Bracket) => self.parse_index_expr(lo, e)?,
  104,710 ( 0.00%)                  _ => return Ok(e),
        .                       }
        .                   }
  950,328 ( 0.01%)      }
        .           
        .               fn look_ahead_type_ascription_as_field(&mut self) -> bool {
    8,736 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
        .                       && self.look_ahead(2, |t| t == &token::Colon)
        .                       && self.look_ahead(3, |t| t.can_begin_expr())
        .               }
        .           
        .               fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
   37,784 ( 0.00%)          match self.token.uninterpolate().kind {
        .                       token::Ident(..) => self.parse_dot_suffix(base, lo),
       84 ( 0.00%)              token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {
      126 ( 0.00%)                  Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix, None))
        .                       }
        .                       token::Literal(token::Lit { kind: token::Float, symbol, suffix }) => {
        .                           Ok(self.parse_tuple_field_access_expr_float(lo, base, symbol, suffix))
        .                       }
        .                       _ => {
        .                           self.error_unexpected_after_dot();
        .                           Ok(base)
        .                       }
-- line 960 ----------------------------------------
-- line 1071 ----------------------------------------
        .                           // See the FIXME about `TokenCursor` above.
        .                           self.error_unexpected_after_dot();
        .                           base
        .                       }
        .                       _ => panic!("unexpected components in a float token: {:?}", components),
        .                   }
        .               }
        .           
      182 ( 0.00%)      fn parse_tuple_field_access_expr(
        .                   &mut self,
        .                   lo: Span,
        .                   base: P<Expr>,
        .                   field: Symbol,
        .                   suffix: Option<Symbol>,
        .                   next_token: Option<(Token, Spacing)>,
        .               ) -> P<Expr> {
       28 ( 0.00%)          match next_token {
        .                       Some(next_token) => self.bump_with(next_token),
       42 ( 0.00%)              None => self.bump(),
        .                   }
       14 ( 0.00%)          let span = self.prev_token.span;
       56 ( 0.00%)          let field = ExprKind::Field(base, Ident::new(field, span));
       84 ( 0.00%)          self.expect_no_suffix(span, "a tuple index", suffix);
       42 ( 0.00%)          self.mk_expr(lo.to(span), field, AttrVec::new())
      112 ( 0.00%)      }
        .           
        .               /// Parse a function call expression, `expr(...)`.
        .               fn parse_fn_call_expr(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {
    8,085 ( 0.00%)          let snapshot = if self.token.kind == token::OpenDelim(token::Paren)
        .                       && self.look_ahead_type_ascription_as_field()
        .                   {
        .                       Some((self.clone(), fun.kind.clone()))
        .                   } else {
    4,851 ( 0.00%)              None
        .                   };
    1,617 ( 0.00%)          let open_paren = self.token.span;
        .           
    3,234 ( 0.00%)          let mut seq = self.parse_paren_expr_seq().map(|args| {
    4,851 ( 0.00%)              self.mk_expr(lo.to(self.prev_token.span), self.mk_call(fun, args), AttrVec::new())
        .                   });
        .                   if let Some(expr) =
        .                       self.maybe_recover_struct_lit_bad_delims(lo, open_paren, &mut seq, snapshot)
        .                   {
        .                       return expr;
        .                   }
    8,085 ( 0.00%)          self.recover_seq_parse_error(token::Paren, lo, seq)
        .               }
        .           
        .               /// If we encounter a parser state that looks like the user has written a `struct` literal with
        .               /// parentheses instead of braces, recover the parser state and provide suggestions.
        .               #[instrument(skip(self, seq, snapshot), level = "trace")]
        .               fn maybe_recover_struct_lit_bad_delims(
        .                   &mut self,
        .                   lo: Span,
        .                   open_paren: Span,
        .                   seq: &mut PResult<'a, P<Expr>>,
        .                   snapshot: Option<(Self, ExprKind)>,
        .               ) -> Option<P<Expr>> {
   16,170 ( 0.00%)          match (seq.as_mut(), snapshot) {
        .                       (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {
        .                           let name = pprust::path_to_string(&path);
        .                           snapshot.bump(); // `(`
        .                           match snapshot.parse_struct_fields(path, false, token::Paren) {
        .                               Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {
        .                                   // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest
        .                                   // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.
        .                                   *self = snapshot;
-- line 1137 ----------------------------------------
-- line 1165 ----------------------------------------
        .                                   }
        .                                   return Some(self.mk_expr_err(span));
        .                               }
        .                               Ok(_) => {}
        .                               Err(mut err) => err.emit(),
        .                           }
        .                       }
        .                       _ => {}
    4,851 ( 0.00%)          }
        .                   None
        .               }
        .           
        .               /// Parse an indexing expression `expr[...]`.
        .               fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
      306 ( 0.00%)          self.bump(); // `[`
      306 ( 0.00%)          let index = self.parse_expr()?;
      459 ( 0.00%)          self.expect(&token::CloseDelim(token::Bracket))?;
      459 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), self.mk_index(base, index), AttrVec::new()))
        .               }
        .           
        .               /// Assuming we have just parsed `.`, continue parsing into an expression.
        .               fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
    6,824 ( 0.00%)          if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {
        .                       return Ok(self.mk_await_expr(self_arg, lo));
        .                   }
        .           
    3,412 ( 0.00%)          let fn_span_lo = self.token.span;
   20,472 ( 0.00%)          let mut segment = self.parse_path_segment(PathStyle::Expr, None)?;
   17,060 ( 0.00%)          self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);
        .                   self.check_turbofish_missing_angle_brackets(&mut segment);
        .           
   17,060 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // Method call `expr.f()`
    2,389 ( 0.00%)              let mut args = self.parse_paren_expr_seq()?;
    9,556 ( 0.00%)              args.insert(0, self_arg);
        .           
    7,167 ( 0.00%)              let fn_span = fn_span_lo.to(self.prev_token.span);
    7,167 ( 0.00%)              let span = lo.to(self.prev_token.span);
   11,945 ( 0.00%)              Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))
        .                   } else {
        .                       // Field access `expr.f`
    2,046 ( 0.00%)              if let Some(args) = segment.args {
        .                           self.struct_span_err(
        .                               args.span(),
        .                               "field expressions cannot have generic arguments",
        .                           )
        .                           .emit();
        .                       }
        .           
    3,069 ( 0.00%)              let span = lo.to(self.prev_token.span);
    5,115 ( 0.00%)              Ok(self.mk_expr(span, ExprKind::Field(self_arg, segment.ident), AttrVec::new()))
        .                   }
        .               }
        .           
        .               /// At the bottom (top?) of the precedence hierarchy,
        .               /// Parses things like parenthesized exprs, macros, `return`, etc.
        .               ///
        .               /// N.B., this does not parse outer attributes, and is private because it only works
        .               /// correctly if called from `parse_dot_or_call_expr()`.
        .               fn parse_bottom_expr(&mut self) -> PResult<'a, P<Expr>> {
  243,845 ( 0.00%)          maybe_recover_from_interpolated_ty_qpath!(self, true);
  314,584 ( 0.00%)          maybe_whole_expr!(self);
        .           
        .                   // Outer attributes are already parsed and will be
        .                   // added to the return value after the fact.
        .                   //
        .                   // Therefore, prevent sub-parser from parsing
        .                   // attributes by giving them an empty "already-parsed" list.
  103,677 ( 0.00%)          let attrs = AttrVec::new();
        .           
        .                   // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.
   41,625 ( 0.00%)          let lo = self.token.span;
  311,031 ( 0.00%)          if let token::Literal(_) = self.token.kind {
        .                       // This match arm is a special-case of the `_` match arm below and
        .                       // could be removed without changing functionality, but it's faster
        .                       // to have it here, especially for programs with large constants.
  248,208 ( 0.00%)              self.parse_lit_expr(attrs)
  208,125 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Paren)) {
   92,832 ( 0.00%)              self.parse_tuple_parens_expr(attrs)
   53,405 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
    2,784 ( 0.00%)              self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)
  102,990 ( 0.00%)          } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {
      316 ( 0.00%)              self.parse_closure_expr(attrs)
   51,270 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Bracket)) {
   17,945 ( 0.00%)              self.parse_array_or_repeat_expr(attrs, token::Bracket)
   26,660 ( 0.00%)          } else if self.check_path() {
   22,352 ( 0.00%)              self.parse_path_start_expr(attrs)
   10,770 ( 0.00%)          } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {
        .                       self.parse_closure_expr(attrs)
    5,385 ( 0.00%)          } else if self.eat_keyword(kw::If) {
    1,332 ( 0.00%)              self.parse_if_expr(attrs)
    3,720 ( 0.00%)          } else if self.check_keyword(kw::For) {
      340 ( 0.00%)              if self.choose_generics_over_qpath(1) {
        .                           // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,
        .                           // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.
        .                           // When `for <Foo as Bar>::Proj in $expr $block` is wanted,
        .                           // you can disambiguate in favor of a pattern with `(...)`.
        .                           self.recover_quantified_closure_expr(attrs)
        .                       } else {
      340 ( 0.00%)                  assert!(self.eat_keyword(kw::For));
      476 ( 0.00%)                  self.parse_for_expr(None, self.prev_token.span, attrs)
        .                       }
    3,380 ( 0.00%)          } else if self.eat_keyword(kw::While) {
      140 ( 0.00%)              self.parse_while_expr(None, self.prev_token.span, attrs)
    2,624 ( 0.00%)          } else if let Some(label) = self.eat_label() {
       24 ( 0.00%)              self.parse_labeled_expr(label, attrs, true)
    3,260 ( 0.00%)          } else if self.eat_keyword(kw::Loop) {
       70 ( 0.00%)              self.parse_loop_expr(None, self.prev_token.span, attrs)
    3,210 ( 0.00%)          } else if self.eat_keyword(kw::Continue) {
      135 ( 0.00%)              let kind = ExprKind::Continue(self.eat_label());
      108 ( 0.00%)              Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))
    2,460 ( 0.00%)          } else if self.eat_keyword(kw::Match) {
      414 ( 0.00%)              let match_sp = self.prev_token.span;
    1,656 ( 0.00%)              self.parse_match_expr(attrs).map_err(|mut err| {
        .                           err.span_label(match_sp, "while parsing this match expression");
        .                           err
        .                       })
    1,632 ( 0.00%)          } else if self.eat_keyword(kw::Unsafe) {
        .                       self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)
    1,632 ( 0.00%)          } else if self.check_inline_const(0) {
        .                       self.parse_const_block(lo.to(self.token.span), false)
    1,224 ( 0.00%)          } else if self.is_do_catch_block() {
        .                       self.recover_do_catch(attrs)
    1,224 ( 0.00%)          } else if self.is_try_block() {
        .                       self.expect_keyword(kw::Try)?;
        .                       self.parse_try_block(lo, attrs)
    1,632 ( 0.00%)          } else if self.eat_keyword(kw::Return) {
      600 ( 0.00%)              self.parse_return_expr(attrs)
    1,032 ( 0.00%)          } else if self.eat_keyword(kw::Break) {
       60 ( 0.00%)              self.parse_break_expr(attrs)
      972 ( 0.00%)          } else if self.eat_keyword(kw::Yield) {
        .                       self.parse_yield_expr(attrs)
      972 ( 0.00%)          } else if self.eat_keyword(kw::Let) {
      188 ( 0.00%)              self.parse_let_expr(attrs)
      784 ( 0.00%)          } else if self.eat_keyword(kw::Underscore) {
        .                       Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))
      196 ( 0.00%)          } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {
        .                       // Don't complain about bare semicolons after unclosed braces
        .                       // recovery in order to keep the error count down. Fixing the
        .                       // delimiters will possibly also fix the bare semicolon found in
        .                       // expression context. For example, silence the following error:
        .                       //
        .                       //     error: expected expression, found `;`
        .                       //      --> file.rs:2:13
        .                       //       |
        .                       //     2 |     foo(bar(;
        .                       //       |             ^ expected expression
        .                       self.bump();
        .                       Ok(self.mk_expr_err(self.token.span))
      392 ( 0.00%)          } else if self.token.uninterpolated_span().rust_2018() {
        .                       // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.
      784 ( 0.00%)              if self.check_keyword(kw::Async) {
        .                           if self.is_async_block() {
        .                               // Check for `async {` and `async move {`.
        .                               self.parse_async_block(attrs)
        .                           } else {
        .                               self.parse_closure_expr(attrs)
        .                           }
      784 ( 0.00%)              } else if self.eat_keyword(kw::Await) {
        .                           self.recover_incorrect_await_syntax(lo, self.prev_token.span, attrs)
        .                       } else {
      784 ( 0.00%)                  self.parse_lit_expr(attrs)
        .                       }
        .                   } else {
        .                       self.parse_lit_expr(attrs)
        .                   }
        .               }
        .           
  622,480 ( 0.01%)      fn parse_lit_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
  124,496 ( 0.00%)          let lo = self.token.span;
  248,992 ( 0.00%)          match self.parse_opt_lit() {
  373,488 ( 0.00%)              Some(literal) => {
  560,232 ( 0.01%)                  let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);
  622,480 ( 0.01%)                  self.maybe_recover_from_bad_qpath(expr, true)
        .                       }
        .                       None => self.try_macro_suggestion(),
        .                   }
        .               }
        .           
        .               fn parse_tuple_parens_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
   61,888 ( 0.00%)          let lo = self.token.span;
   92,832 ( 0.00%)          self.expect(&token::OpenDelim(token::Paren))?;
        .                   let (es, trailing_comma) = match self.parse_seq_to_end(
        .                       &token::CloseDelim(token::Paren),
        .                       SeqSep::trailing_allowed(token::Comma),
  123,378 ( 0.00%)              |p| p.parse_expr_catch_underscore(),
        .                   ) {
        .                       Ok(x) => x,
        .                       Err(err) => return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err))),
        .                   };
  154,720 ( 0.00%)          let kind = if es.len() == 1 && !trailing_comma {
        .                       // `(e)` is parenthesized `e`.
      255 ( 0.00%)              ExprKind::Paren(es.into_iter().next().unwrap())
        .                   } else {
        .                       // `(e,)` is a tuple with only one field, `e`.
  154,295 ( 0.00%)              ExprKind::Tup(es)
        .                   };
   92,832 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
   92,832 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
        .               }
        .           
   39,479 ( 0.00%)      fn parse_array_or_repeat_expr(
        .                   &mut self,
        .                   attrs: AttrVec,
        .                   close_delim: token::DelimToken,
        .               ) -> PResult<'a, P<Expr>> {
   10,767 ( 0.00%)          let lo = self.token.span;
    3,589 ( 0.00%)          self.bump(); // `[` or other open delim
        .           
   10,767 ( 0.00%)          let close = &token::CloseDelim(close_delim);
        .                   let kind = if self.eat(close) {
        .                       // Empty vector
       29 ( 0.00%)              ExprKind::Array(Vec::new())
        .                   } else {
        .                       // Non-empty vector
    7,120 ( 0.00%)              let first_expr = self.parse_expr()?;
        .                       if self.eat(&token::Semi) {
        .                           // Repeating array syntax: `[ 0; 512 ]`
       15 ( 0.00%)                  let count = self.parse_anon_const_expr()?;
       10 ( 0.00%)                  self.expect(close)?;
       25 ( 0.00%)                  ExprKind::Repeat(first_expr, count)
        .                       } else if self.eat(&token::Comma) {
        .                           // Vector with two or more elements.
        .                           let sep = SeqSep::trailing_allowed(token::Comma);
        .                           let (remaining_exprs, _) = self.parse_seq_to_end(close, sep, |p| p.parse_expr())?;
      616 ( 0.00%)                  let mut exprs = vec![first_expr];
        .                           exprs.extend(remaining_exprs);
    3,080 ( 0.00%)                  ExprKind::Array(exprs)
        .                       } else {
        .                           // Vector with one element
    5,878 ( 0.00%)                  self.expect(close)?;
   14,695 ( 0.00%)                  ExprKind::Array(vec![first_expr])
        .                       }
        .                   };
   10,767 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
   10,767 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
   35,890 ( 0.00%)      }
        .           
   55,880 ( 0.00%)      fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
   44,704 ( 0.00%)          let (qself, path) = if self.eat_lt() {
       27 ( 0.00%)              let (qself, path) = self.parse_qpath(PathStyle::Expr)?;
        .                       (Some(qself), path)
        .                   } else {
   11,158 ( 0.00%)              (None, self.parse_path(PathStyle::Expr)?)
        .                   };
    5,588 ( 0.00%)          let lo = path.span;
        .           
        .                   // `!`, as an operator, is prefix, so we know this isn't that.
   82,050 ( 0.00%)          let (hi, kind) = if self.eat(&token::Not) {
        .                       // MACRO INVOCATION expression
      240 ( 0.00%)              if qself.is_some() {
        .                           self.struct_span_err(path.span, "macros cannot use qualified paths").emit();
        .                       }
    1,440 ( 0.00%)              let mac = MacCall {
    1,680 ( 0.00%)                  path,
        .                           args: self.parse_mac_args()?,
        .                           prior_type_ascription: self.last_type_ascription,
        .                       };
    5,280 ( 0.00%)              (self.prev_token.span, ExprKind::MacCall(mac))
   26,740 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
      236 ( 0.00%)              if let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path, &attrs) {
      118 ( 0.00%)                  if qself.is_some() {
        .                               self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);
        .                           }
        .                           return expr;
        .                       } else {
        .                           (path.span, ExprKind::Path(qself, path))
        .                       }
        .                   } else {
        .                       (path.span, ExprKind::Path(qself, path))
        .                   };
        .           
   10,940 ( 0.00%)          let expr = self.mk_expr(lo.to(hi), kind, attrs);
   16,410 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
   66,820 ( 0.00%)      }
        .           
        .               /// Parse `'label: $expr`. The label is already parsed.
       60 ( 0.00%)      fn parse_labeled_expr(
        .                   &mut self,
        .                   label: Label,
        .                   attrs: AttrVec,
        .                   mut consume_colon: bool,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let lo = label.ident.span;
        .                   let label = Some(label);
        .                   let ate_colon = self.eat(&token::Colon);
        8 ( 0.00%)          let expr = if self.eat_keyword(kw::While) {
       21 ( 0.00%)              self.parse_while_expr(label, lo, attrs)
        .                   } else if self.eat_keyword(kw::For) {
        .                       self.parse_for_expr(label, lo, attrs)
        .                   } else if self.eat_keyword(kw::Loop) {
        7 ( 0.00%)              self.parse_loop_expr(label, lo, attrs)
        .                   } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {
        .                       self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)
        .                   } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {
        .                       // We're probably inside of a `Path<'a>` that needs a turbofish, so suppress the
        .                       // "must be followed by a colon" error, and the "expected one of" error.
        .                       self.diagnostic().delay_span_bug(lo, "this label wasn't parsed correctly");
        .                       consume_colon = false;
        .                       Ok(self.mk_expr_err(lo))
        .                   } else {
        .                       let msg = "expected `while`, `for`, `loop` or `{` after a label";
        .                       self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();
        .                       // Continue as an expression in an effort to recover on `'label: non_block_expr`.
        .                       self.parse_expr()
        .                   }?;
        .           
        8 ( 0.00%)          if !ate_colon && consume_colon {
        .                       self.error_labeled_expr_must_be_followed_by_colon(lo, expr.span);
        .                   }
        .           
        .                   Ok(expr)
       48 ( 0.00%)      }
        .           
        .               fn error_labeled_expr_must_be_followed_by_colon(&self, lo: Span, span: Span) {
        .                   self.struct_span_err(span, "labeled expression must be followed by `:`")
        .                       .span_label(lo, "the label")
        .                       .span_suggestion_short(
        .                           lo.shrink_to_hi(),
        .                           "add `:` after the label",
        .                           ": ".to_string(),
-- line 1485 ----------------------------------------
-- line 1507 ----------------------------------------
        .                       .note("following RFC #2388, the new non-placeholder syntax is `try`")
        .                       .emit();
        .           
        .                   self.parse_try_block(lo, attrs)
        .               }
        .           
        .               /// Parse an expression if the token can begin one.
        .               fn parse_expr_opt(&mut self) -> PResult<'a, Option<P<Expr>>> {
      786 ( 0.00%)          Ok(if self.token.can_begin_expr() { Some(self.parse_expr()?) } else { None })
        .               }
        .           
        .               /// Parse `"return" expr?`.
    1,500 ( 0.00%)      fn parse_return_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
      150 ( 0.00%)          let lo = self.prev_token.span;
      300 ( 0.00%)          let kind = ExprKind::Ret(self.parse_expr_opt()?);
      450 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
      900 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
    1,500 ( 0.00%)      }
        .           
        .               /// Parse `"break" (('label (:? expr)?) | expr?)` with `"break"` token already eaten.
        .               /// If the label is followed immediately by a `:` token, the label and `:` are
        .               /// parsed as part of the expression (i.e. a labeled loop). The language team has
        .               /// decided in #87026 to require parentheses as a visual aid to avoid confusion if
        .               /// the break expression of an unlabeled break is a labeled loop (as in
        .               /// `break 'lbl: loop {}`); a labeled break with an unlabeled loop as its value
        .               /// expression only gets a warning for compatibility reasons; and a labeled break
        .               /// with a labeled loop does not even get a warning because there is no ambiguity.
      150 ( 0.00%)      fn parse_break_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       30 ( 0.00%)          let lo = self.prev_token.span;
        .                   let mut label = self.eat_label();
        .                   let kind = if label.is_some() && self.token == token::Colon {
        .                       // The value expression can be a labeled loop, see issue #86948, e.g.:
        .                       // `loop { break 'label: loop { break 'label 42; }; }`
        .                       let lexpr = self.parse_labeled_expr(label.take().unwrap(), AttrVec::new(), true)?;
        .                       self.struct_span_err(
        .                           lexpr.span,
        .                           "parentheses are required around this expression to avoid confusion with a labeled break expression",
-- line 1543 ----------------------------------------
-- line 1547 ----------------------------------------
        .                           vec![
        .                               (lexpr.span.shrink_to_lo(), "(".to_string()),
        .                               (lexpr.span.shrink_to_hi(), ")".to_string()),
        .                           ],
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .                       Some(lexpr)
       30 ( 0.00%)          } else if self.token != token::OpenDelim(token::Brace)
        .                       || !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)
        .                   {
        .                       let expr = self.parse_expr_opt()?;
        .                       if let Some(ref expr) = expr {
        .                           if label.is_some()
        .                               && matches!(
        .                                   expr.kind,
        .                                   ExprKind::While(_, _, None)
-- line 1563 ----------------------------------------
-- line 1570 ----------------------------------------
        .                                   BREAK_WITH_LABEL_AND_LOOP,
        .                                   lo.to(expr.span),
        .                                   ast::CRATE_NODE_ID,
        .                                   "this labeled break expression is easy to confuse with an unlabeled break with a labeled value expression",
        .                                   BuiltinLintDiagnostics::BreakWithLabelAndLoop(expr.span),
        .                               );
        .                           }
        .                       }
       30 ( 0.00%)              expr
        .                   } else {
        .                       None
        .                   };
       45 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Break(label, kind), attrs);
       75 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
      150 ( 0.00%)      }
        .           
        .               /// Parse `"yield" expr?`.
        .               fn parse_yield_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let lo = self.prev_token.span;
        .                   let kind = ExprKind::Yield(self.parse_expr_opt()?);
        .                   let span = lo.to(self.prev_token.span);
        .                   self.sess.gated_spans.gate(sym::generators, span);
        .                   let expr = self.mk_expr(span, kind, attrs);
-- line 1592 ----------------------------------------
-- line 1607 ----------------------------------------
        .                               symbol_unescaped,
        .                           }),
        .                           _ => Err(Some(lit)),
        .                       },
        .                       None => Err(None),
        .                   }
        .               }
        .           
   11,817 ( 0.00%)      pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {
    1,313 ( 0.00%)          self.parse_opt_lit().ok_or_else(|| {
    1,902 ( 0.00%)              if let token::Interpolated(inner) = &self.token.kind {
        .                           let expr = match inner.as_ref() {
        .                               token::NtExpr(expr) => Some(expr),
        .                               token::NtLiteral(expr) => Some(expr),
        .                               _ => None,
        .                           };
        .                           if let Some(expr) = expr {
        .                               if matches!(expr.kind, ExprKind::Err) {
        .                                   self.diagnostic()
        .                                       .delay_span_bug(self.token.span, &"invalid interpolated expression");
        .                                   return self.diagnostic().struct_dummy();
        .                               }
        .                           }
        .                       }
   10,461 ( 0.00%)              let msg = format!("unexpected token: {}", super::token_descr(&self.token));
      951 ( 0.00%)              self.struct_span_err(self.token.span, &msg)
        .                   })
    9,191 ( 0.00%)      }
        .           
        .               /// Matches `lit = true | false | token_lit`.
        .               /// Returns `None` if the next token is not a literal.
  572,049 ( 0.01%)      pub(super) fn parse_opt_lit(&mut self) -> Option<Lit> {
   63,561 ( 0.00%)          let mut recovered = None;
  381,366 ( 0.00%)          if self.token == token::Dot {
        .                       // Attempt to recover `.4` as `0.4`. We don't currently have any syntax where
        .                       // dot would follow an optional literal, so we do this unconditionally.
        .                       recovered = self.look_ahead(1, |next_token| {
        .                           if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =
        .                               next_token.kind
        .                           {
        .                               if self.token.span.hi() == next_token.span.lo() {
        .                                   let s = String::from("0.") + symbol.as_str();
-- line 1648 ----------------------------------------
-- line 1654 ----------------------------------------
        .                       });
        .                       if let Some(token) = &recovered {
        .                           self.bump();
        .                           self.error_float_lits_must_have_int_part(&token);
        .                       }
        .                   }
        .           
        .                   let token = recovered.as_ref().unwrap_or(&self.token);
  193,536 ( 0.00%)          match Lit::from_token(token) {
  375,660 ( 0.00%)              Ok(lit) => {
  125,220 ( 0.00%)                  self.bump();
  375,660 ( 0.00%)                  Some(lit)
        .                       }
      951 ( 0.00%)              Err(LitError::NotLiteral) => None,
        .                       Err(err) => {
        .                           let span = token.span;
        .                           let lit = match token.kind {
        .                               token::Literal(lit) => lit,
        .                               _ => unreachable!(),
        .                           };
        .                           self.bump();
        .                           self.report_lit_error(err, lit, span);
-- line 1675 ----------------------------------------
-- line 1676 ----------------------------------------
        .                           // Pack possible quotes and prefixes from the original literal into
        .                           // the error literal's symbol so they can be pretty-printed faithfully.
        .                           let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);
        .                           let symbol = Symbol::intern(&suffixless_lit.to_string());
        .                           let lit = token::Lit::new(token::Err, symbol, lit.suffix);
        .                           Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))
        .                       }
        .                   }
  508,488 ( 0.01%)      }
        .           
        .               fn error_float_lits_must_have_int_part(&self, token: &Token) {
        .                   self.struct_span_err(token.span, "float literals must have an integer part")
        .                       .span_suggestion(
        .                           token.span,
        .                           "must have an integer part",
        .                           pprust::token_to_string(token).into(),
        .                           Applicability::MachineApplicable,
-- line 1692 ----------------------------------------
-- line 1759 ----------------------------------------
        .                               .emit();
        .                       }
        .                       LitError::IntTooLarge => {
        .                           self.struct_span_err(span, "integer literal is too large").emit();
        .                       }
        .                   }
        .               }
        .           
       98 ( 0.00%)      pub(super) fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<Symbol>) {
       28 ( 0.00%)          if let Some(suf) = suffix {
        .                       let mut err = if kind == "a tuple index"
        .                           && [sym::i32, sym::u32, sym::isize, sym::usize].contains(&suf)
        .                       {
        .                           // #59553: warn instead of reject out of hand to allow the fix to percolate
        .                           // through the ecosystem when people fix their macros
        .                           let mut err = self
        .                               .sess
        .                               .span_diagnostic
-- line 1776 ----------------------------------------
-- line 1791 ----------------------------------------
        .                           );
        .                           err
        .                       } else {
        .                           self.struct_span_err(sp, &format!("suffixes on {} are invalid", kind))
        .                       };
        .                       err.span_label(sp, format!("invalid suffix `{}`", suf));
        .                       err.emit();
        .                   }
       84 ( 0.00%)      }
        .           
        .               /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).
        .               /// Keep this in sync with `Token::can_begin_literal_maybe_minus`.
    1,768 ( 0.00%)      pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {
      442 ( 0.00%)          maybe_whole_expr!(self);
        .           
      221 ( 0.00%)          let lo = self.token.span;
        .                   let minus_present = self.eat(&token::BinOp(token::Minus));
      442 ( 0.00%)          let lit = self.parse_lit()?;
      221 ( 0.00%)          let expr = self.mk_expr(lit.span, ExprKind::Lit(lit), AttrVec::new());
        .           
      442 ( 0.00%)          if minus_present {
        .                       Ok(self.mk_expr(
        .                           lo.to(self.prev_token.span),
        .                           self.mk_unary(UnOp::Neg, expr),
        .                           AttrVec::new(),
        .                       ))
        .                   } else {
        .                       Ok(expr)
        .                   }
    1,989 ( 0.00%)      }
        .           
        .               fn is_array_like_block(&mut self) -> bool {
    1,044 ( 0.00%)          self.look_ahead(1, |t| matches!(t.kind, TokenKind::Ident(..) | TokenKind::Literal(_)))
        .                       && self.look_ahead(2, |t| t == &token::Comma)
        .                       && self.look_ahead(3, |t| t.can_begin_expr())
        .               }
        .           
        .               /// Emits a suggestion if it looks like the user meant an array but
        .               /// accidentally used braces, causing the code to be interpreted as a block
        .               /// expression.
        .               fn maybe_suggest_brackets_instead_of_braces(
-- line 1831 ----------------------------------------
-- line 1855 ----------------------------------------
        .                       Err(mut e) => {
        .                           e.cancel();
        .                           None
        .                       }
        .                   }
        .               }
        .           
        .               /// Parses a block or unsafe block.
    4,872 ( 0.00%)      pub(super) fn parse_block_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   blk_mode: BlockCheckMode,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        .                   if self.is_array_like_block() {
        .                       if let Some(arr) = self.maybe_suggest_brackets_instead_of_braces(lo, attrs.clone()) {
        .                           return Ok(arr);
        .                       }
        .                   }
        .           
      696 ( 0.00%)          if let Some(label) = opt_label {
        .                       self.sess.gated_spans.gate(sym::label_break_value, label.ident.span);
        .                   }
        .           
    1,392 ( 0.00%)          if self.token.is_whole_block() {
        .                       self.struct_span_err(self.token.span, "cannot use a `block` macro fragment here")
        .                           .span_label(lo.to(self.token.span), "the `block` fragment is within this context")
        .                           .emit();
        .                   }
        .           
    2,436 ( 0.00%)          let (inner_attrs, blk) = self.parse_block_common(lo, blk_mode)?;
    1,740 ( 0.00%)          attrs.extend(inner_attrs);
      696 ( 0.00%)          Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs))
    3,480 ( 0.00%)      }
        .           
        .               /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.
        .               fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let lo = self.token.span;
        .                   let _ = self.parse_late_bound_lifetime_defs()?;
        .                   let span_for = lo.to(self.prev_token.span);
        .                   let closure = self.parse_closure_expr(attrs)?;
        .           
-- line 1897 ----------------------------------------
-- line 1904 ----------------------------------------
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .           
        .                   Ok(self.mk_expr_err(lo.to(closure.span)))
        .               }
        .           
        .               /// Parses a closure expression (e.g., `move |args| expr`).
      790 ( 0.00%)      fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
      158 ( 0.00%)          let lo = self.token.span;
        .           
        .                   let movability =
        .                       if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };
        .           
      237 ( 0.00%)          let asyncness = if self.token.uninterpolated_span().rust_2018() {
        .                       self.parse_asyncness()
        .                   } else {
        .                       Async::No
        .                   };
        .           
      237 ( 0.00%)          let capture_clause = self.parse_capture_clause()?;
       79 ( 0.00%)          let decl = self.parse_fn_block_decl()?;
      158 ( 0.00%)          let decl_hi = self.prev_token.span;
      237 ( 0.00%)          let mut body = match decl.output {
        .                       FnRetTy::Default(_) => {
       79 ( 0.00%)                  let restrictions = self.restrictions - Restrictions::STMT_EXPR;
        .                           self.parse_expr_res(restrictions, None)?
        .                       }
        .                       _ => {
        .                           // If an explicit return type is given, require a block to appear (RFC 968).
        .                           let body_lo = self.token.span;
        .                           self.parse_block_expr(None, body_lo, BlockCheckMode::Default, AttrVec::new())?
        .                       }
        .                   };
        .           
      158 ( 0.00%)          if let Async::Yes { span, .. } = asyncness {
        .                       // Feature-gate `async ||` closures.
        .                       self.sess.gated_spans.gate(sym::async_closure, span);
        .                   }
        .           
      403 ( 0.00%)          if self.token.kind == TokenKind::Semi && self.token_cursor.frame.delim == DelimToken::Paren
        .                   {
        .                       // It is likely that the closure body is a block but where the
        .                       // braces have been removed. We will recover and eat the next
        .                       // statements later in the parsing process.
        .                       body = self.mk_expr_err(body.span);
        .                   }
        .           
      158 ( 0.00%)          let body_span = body.span;
        .           
        .                   let closure = self.mk_expr(
      158 ( 0.00%)              lo.to(body.span),
      395 ( 0.00%)              ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),
        .                       attrs,
        .                   );
        .           
        .                   // Disable recovery for closure body
        .                   let spans =
        .                       ClosureSpans { whole_closure: closure.span, closing_pipe: decl_hi, body: body_span };
      632 ( 0.00%)          self.current_closure = Some(spans);
        .           
        .                   Ok(closure)
      790 ( 0.00%)      }
        .           
        .               /// Parses an optional `move` prefix to a closure-like construct.
      395 ( 0.00%)      fn parse_capture_clause(&mut self) -> PResult<'a, CaptureBy> {
        .                   if self.eat_keyword(kw::Move) {
        .                       // Check for `move async` and recover
        .                       if self.check_keyword(kw::Async) {
        .                           let move_async_span = self.token.span.with_lo(self.prev_token.span.data().lo);
        .                           Err(self.incorrect_move_async_order_found(move_async_span))
        .                       } else {
        .                           Ok(CaptureBy::Value)
        .                       }
        .                   } else {
        .                       Ok(CaptureBy::Ref)
        .                   }
      711 ( 0.00%)      }
        .           
        .               /// Parses the `|arg, arg|` header of a closure.
        .               fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> {
        .                   let inputs = if self.eat(&token::OrOr) {
        .                       Vec::new()
        .                   } else {
      204 ( 0.00%)              self.expect(&token::BinOp(token::Or))?;
       68 ( 0.00%)              let args = self
        .                           .parse_seq_to_before_tokens(
        .                               &[&token::BinOp(token::Or), &token::OrOr],
        .                               SeqSep::trailing_allowed(token::Comma),
        .                               TokenExpectType::NoExpect,
      216 ( 0.00%)                      |p| p.parse_fn_block_param(),
        .                           )?
        .                           .0;
        .                       self.expect_or()?;
      340 ( 0.00%)              args
        .                   };
        .                   let output =
      395 ( 0.00%)              self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes, RecoverReturnSign::Yes)?;
        .           
        .                   Ok(P(FnDecl { inputs, output }))
        .               }
        .           
        .               /// Parses a parameter in a closure header (e.g., `|arg, arg|`).
      648 ( 0.00%)      fn parse_fn_block_param(&mut self) -> PResult<'a, Param> {
      216 ( 0.00%)          let lo = self.token.span;
       72 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
      792 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
      144 ( 0.00%)              let pat = this.parse_pat_no_top_alt(PARAM_EXPECTED)?;
        .                       let ty = if this.eat(&token::Colon) {
        .                           this.parse_ty()?
        .                       } else {
       72 ( 0.00%)                  this.mk_ty(this.prev_token.span, TyKind::Infer)
        .                       };
        .           
      576 ( 0.00%)              Ok((
        .                           Param {
      288 ( 0.00%)                      attrs: attrs.into(),
       72 ( 0.00%)                      ty,
      144 ( 0.00%)                      pat,
      216 ( 0.00%)                      span: lo.to(this.token.span),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::MaybeComma,
        .                       ))
      576 ( 0.00%)          })
      576 ( 0.00%)      }
        .           
        .               /// Parses an `if` expression (`if` token already eaten).
    3,430 ( 0.00%)      fn parse_if_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
      343 ( 0.00%)          let lo = self.prev_token.span;
      343 ( 0.00%)          let cond = self.parse_cond_expr()?;
        .           
        .                   let missing_then_block_binop_span = || {
        .                       match cond.kind {
        .                           ExprKind::Binary(Spanned { span: binop_span, .. }, _, ref right)
        .                               if let ExprKind::Block(..) = right.kind => Some(binop_span),
        .                           _ => None
        .                       }
        .                   };
        .           
        .                   // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then
        .                   // verify that the last statement is either an implicit return (no `;`) or an explicit
        .                   // return. This won't catch blocks with an explicit `return`, but that would be caught by
        .                   // the dead code lint.
    3,430 ( 0.00%)          let thn = if self.token.is_keyword(kw::Else) || !cond.returns() {
        .                       if let Some(binop_span) = missing_then_block_binop_span() {
        .                           self.error_missing_if_then_block(lo, None, Some(binop_span)).emit();
        .                           self.mk_block_err(cond.span)
        .                       } else {
        .                           self.error_missing_if_cond(lo, cond.span)
        .                       }
        .                   } else {
    1,029 ( 0.00%)              let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.
        .                       let not_block = self.token != token::OpenDelim(token::Brace);
    1,029 ( 0.00%)              let block = self.parse_block().map_err(|err| {
        .                           if not_block {
        .                               self.error_missing_if_then_block(lo, Some(err), missing_then_block_binop_span())
        .                           } else {
        .                               err
        .                           }
        .                       })?;
    1,372 ( 0.00%)              self.error_on_if_block_attrs(lo, false, block.span, &attrs);
      686 ( 0.00%)              block
      343 ( 0.00%)          };
      686 ( 0.00%)          let els = if self.eat_keyword(kw::Else) { Some(self.parse_else_expr()?) } else { None };
    1,029 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::If(cond, thn, els), attrs))
    3,430 ( 0.00%)      }
        .           
        .               fn error_missing_if_then_block(
        .                   &self,
        .                   if_span: Span,
        .                   err: Option<DiagnosticBuilder<'a>>,
        .                   binop_span: Option<Span>,
        .               ) -> DiagnosticBuilder<'a> {
        .                   let msg = "this `if` expression has a condition, but no block";
-- line 2079 ----------------------------------------
-- line 2097 ----------------------------------------
        .                   self.struct_span_err(sp, "missing condition for `if` expression")
        .                       .span_label(sp, "expected if condition here")
        .                       .emit();
        .                   self.mk_block_err(span)
        .               }
        .           
        .               /// Parses the condition of a `if` or `while` expression.
        .               fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {
      732 ( 0.00%)          let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
        .           
      732 ( 0.00%)          if let ExprKind::Let(..) = cond.kind {
        .                       // Remove the last feature gating of a `let` expression since it's stable.
      188 ( 0.00%)              self.sess.gated_spans.ungate_last(sym::let_chains, cond.span);
        .                   }
        .           
        .                   Ok(cond)
        .               }
        .           
        .               /// Parses a `let $pat = $expr` pseudo-expression.
        .               /// The `let` token has already been eaten.
      470 ( 0.00%)      fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       94 ( 0.00%)          let lo = self.prev_token.span;
      141 ( 0.00%)          let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
      141 ( 0.00%)          self.expect(&token::Eq)?;
      141 ( 0.00%)          let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {
      282 ( 0.00%)              this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())
        .                   })?;
      141 ( 0.00%)          let span = lo.to(expr.span);
      188 ( 0.00%)          self.sess.gated_spans.gate(sym::let_chains, span);
        .                   Ok(self.mk_expr(span, ExprKind::Let(pat, expr, span), attrs))
      470 ( 0.00%)      }
        .           
        .               /// Parses an `else { ... }` expression (`else` token already eaten).
        .               fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {
      330 ( 0.00%)          let ctx_span = self.prev_token.span; // `else`
      330 ( 0.00%)          let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.
        .                   let expr = if self.eat_keyword(kw::If) {
       50 ( 0.00%)              self.parse_if_expr(AttrVec::new())?
        .                   } else {
      300 ( 0.00%)              let blk = self.parse_block()?;
      100 ( 0.00%)              self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new())
        .                   };
      550 ( 0.00%)          self.error_on_if_block_attrs(ctx_span, true, expr.span, &attrs);
        .                   Ok(expr)
        .               }
        .           
    4,983 ( 0.00%)      fn error_on_if_block_attrs(
        .                   &self,
        .                   ctx_span: Span,
        .                   is_ctx_else: bool,
        .                   branch_span: Span,
        .                   attrs: &[ast::Attribute],
        .               ) {
        .                   let (span, last) = match attrs {
    1,812 ( 0.00%)              [] => return,
        .                       [x0 @ xn] | [x0, .., xn] => (x0.span.to(xn.span), xn.span),
        .                   };
        .                   let ctx = if is_ctx_else { "else" } else { "if" };
        .                   self.struct_span_err(last, "outer attributes are not allowed on `if` and `else` branches")
        .                       .span_label(branch_span, "the attributes are attached to this branch")
        .                       .span_label(ctx_span, format!("the branch belongs to this `{}`", ctx))
        .                       .span_suggestion(
        .                           span,
        .                           "remove the attributes",
        .                           String::new(),
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
    3,624 ( 0.00%)      }
        .           
        .               /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten).
      884 ( 0.00%)      fn parse_for_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Record whether we are about to parse `for (`.
        .                   // This is used below for recovery in case of `for ( $stuff ) $block`
        .                   // in which case we will suggest `for $stuff $block`.
      144 ( 0.00%)          let begin_paren = match self.token.kind {
       20 ( 0.00%)              token::OpenDelim(token::Paren) => Some(self.token.span),
        .                       _ => None,
        .                   };
        .           
      204 ( 0.00%)          let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
        .                   if !self.eat_keyword(kw::In) {
        .                       self.error_missing_in_for_loop();
        .                   }
       68 ( 0.00%)          self.check_for_for_in_in_typo(self.prev_token.span);
      136 ( 0.00%)          let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
        .           
       68 ( 0.00%)          let pat = self.recover_parens_around_for_head(pat, begin_paren);
        .           
      136 ( 0.00%)          let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;
      340 ( 0.00%)          attrs.extend(iattrs);
        .           
      544 ( 0.00%)          let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);
      272 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))
      680 ( 0.00%)      }
        .           
        .               fn error_missing_in_for_loop(&mut self) {
        .                   let (span, msg, sugg) = if self.token.is_ident_named(sym::of) {
        .                       // Possibly using JS syntax (#75311).
        .                       let span = self.token.span;
        .                       self.bump();
        .                       (span, "try using `in` here instead", "in")
        .                   } else {
-- line 2204 ----------------------------------------
-- line 2211 ----------------------------------------
        .                           sugg.into(),
        .                           // Has been misleading, at least in the past (closed Issue #48492).
        .                           Applicability::MaybeIncorrect,
        .                       )
        .                       .emit();
        .               }
        .           
        .               /// Parses a `while` or `while let` expression (`while` token already eaten).
      299 ( 0.00%)      fn parse_while_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
       23 ( 0.00%)          let cond = self.parse_cond_expr()?;
       46 ( 0.00%)          let (iattrs, body) = self.parse_inner_attrs_and_block()?;
      115 ( 0.00%)          attrs.extend(iattrs);
       92 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::While(cond, body, opt_label), attrs))
      230 ( 0.00%)      }
        .           
        .               /// Parses `loop { ... }` (`loop` token already eaten).
      143 ( 0.00%)      fn parse_loop_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
       22 ( 0.00%)          let (iattrs, body) = self.parse_inner_attrs_and_block()?;
       55 ( 0.00%)          attrs.extend(iattrs);
       44 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::Loop(body, opt_label), attrs))
      110 ( 0.00%)      }
        .           
    2,732 ( 0.00%)      fn eat_label(&mut self) -> Option<Label> {
    2,777 ( 0.00%)          self.token.lifetime().map(|ident| {
       24 ( 0.00%)              self.bump();
        .                       Label { ident }
        .                   })
    2,732 ( 0.00%)      }
        .           
        .               /// Parses a `match ... { ... }` expression (`match` token already eaten).
    2,070 ( 0.00%)      fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
      414 ( 0.00%)          let match_span = self.prev_token.span;
        .                   let lo = self.prev_token.span;
      414 ( 0.00%)          let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
    1,035 ( 0.00%)          if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {
        .                       if self.token == token::Semi {
        .                           e.span_suggestion_short(
        .                               match_span,
        .                               "try removing this `match`",
        .                               String::new(),
        .                               Applicability::MaybeIncorrect, // speculative
        .                           );
        .                       }
        .                       return Err(e);
        .                   }
    1,242 ( 0.00%)          attrs.extend(self.parse_inner_attributes()?);
        .           
        .                   let mut arms: Vec<Arm> = Vec::new();
    2,046 ( 0.00%)          while self.token != token::CloseDelim(token::Brace) {
    2,448 ( 0.00%)              match self.parse_arm() {
    6,528 ( 0.00%)                  Ok(arm) => arms.push(arm),
        .                           Err(mut e) => {
        .                               // Recover by skipping to the end of the block.
        .                               e.emit();
        .                               self.recover_stmt();
        .                               let span = lo.to(self.token.span);
        .                               if self.token == token::CloseDelim(token::Brace) {
        .                                   self.bump();
        .                               }
        .                               return Ok(self.mk_expr(span, ExprKind::Match(scrutinee, arms), attrs));
        .                           }
        .                       }
        .                   }
      207 ( 0.00%)          let hi = self.token.span;
      414 ( 0.00%)          self.bump();
      828 ( 0.00%)          Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs))
    2,070 ( 0.00%)      }
        .           
        .               /// Attempt to recover from match arm body with statements and no surrounding braces.
        .               fn parse_arm_body_missing_braces(
        .                   &mut self,
        .                   first_expr: &P<Expr>,
        .                   arrow_span: Span,
        .               ) -> Option<P<Expr>> {
    2,605 ( 0.00%)          if self.token.kind != token::Semi {
        .                       return None;
        .                   }
        .                   let start_snapshot = self.clone();
        .                   let semi_sp = self.token.span;
        .                   self.bump(); // `;`
        .                   let mut stmts =
        .                       vec![self.mk_stmt(first_expr.span, ast::StmtKind::Expr(first_expr.clone()))];
        .                   let err = |this: &mut Parser<'_>, stmts: Vec<ast::Stmt>| {
-- line 2303 ----------------------------------------
-- line 2378 ----------------------------------------
        .                               break;
        .                           }
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {
      195 ( 0.00%)          fn check_let_expr(expr: &Expr) -> (bool, bool) {
      325 ( 0.00%)              match expr.kind {
        .                           ExprKind::Binary(_, ref lhs, ref rhs) => {
       27 ( 0.00%)                      let lhs_rslt = check_let_expr(lhs);
        9 ( 0.00%)                      let rhs_rslt = check_let_expr(rhs);
       45 ( 0.00%)                      (lhs_rslt.0 || rhs_rslt.0, false)
        .                           }
        .                           ExprKind::Let(..) => (true, true),
        .                           _ => (false, true),
        .                       }
      260 ( 0.00%)          }
    2,448 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
    8,160 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
    1,632 ( 0.00%)              let lo = this.token.span;
    2,448 ( 0.00%)              let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
        .                       let guard = if this.eat_keyword(kw::If) {
       47 ( 0.00%)                  let if_span = this.prev_token.span;
       94 ( 0.00%)                  let cond = this.parse_expr()?;
       94 ( 0.00%)                  let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);
       47 ( 0.00%)                  if has_let_expr {
        .                               if does_not_have_bin_op {
        .                                   // Remove the last feature gating of a `let` expression since it's stable.
        .                                   this.sess.gated_spans.ungate_last(sym::let_chains, cond.span);
        .                               }
        .                               let span = if_span.to(cond.span);
        .                               this.sess.gated_spans.gate(sym::if_let_guard, span);
        .                           }
       47 ( 0.00%)                  Some(cond)
        .                       } else {
    3,076 ( 0.00%)                  None
        .                       };
    1,632 ( 0.00%)              let arrow_span = this.token.span;
    4,080 ( 0.00%)              if let Err(mut err) = this.expect(&token::FatArrow) {
        .                           // We might have a `=>` -> `=` or `->` typo (issue #89396).
        .                           if TokenKind::FatArrow
        .                               .similar_tokens()
        .                               .map_or(false, |similar_tokens| similar_tokens.contains(&this.token.kind))
        .                           {
        .                               err.span_suggestion(
        .                                   this.token.span,
        .                                   "try using a fat arrow here",
-- line 2426 ----------------------------------------
-- line 2428 ----------------------------------------
        .                                   Applicability::MaybeIncorrect,
        .                               );
        .                               err.emit();
        .                               this.bump();
        .                           } else {
        .                               return Err(err);
        .                           }
        .                       }
    1,632 ( 0.00%)              let arm_start_span = this.token.span;
        .           
    2,448 ( 0.00%)              let expr = this.parse_expr_res(Restrictions::STMT_EXPR, None).map_err(|mut err| {
        .                           err.span_label(arrow_span, "while parsing the `match` arm starting here");
        .                           err
        .                       })?;
        .           
    3,264 ( 0.00%)              let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)
        .                           && this.token != token::CloseDelim(token::Brace);
        .           
    1,632 ( 0.00%)              let hi = this.prev_token.span;
        .           
    1,042 ( 0.00%)              if require_comma {
    1,042 ( 0.00%)                  let sm = this.sess.source_map();
    2,084 ( 0.00%)                  if let Some(body) = this.parse_arm_body_missing_braces(&expr, arrow_span) {
        .                               let span = body.span;
        .                               return Ok((
        .                                   ast::Arm {
        .                                       attrs: attrs.into(),
        .                                       pat,
        .                                       guard,
        .                                       body,
        .                                       span,
        .                                       id: DUMMY_NODE_ID,
        .                                       is_placeholder: false,
        .                                   },
        .                                   TrailingToken::None,
        .                               ));
      521 ( 0.00%)                  }
    5,210 ( 0.00%)                  this.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]).map_err(
    4,689 ( 0.00%)                      |mut err| {
        .                                   match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {
        .                                       (Ok(ref expr_lines), Ok(ref arm_start_lines))
        .                                           if arm_start_lines.lines[0].end_col
        .                                               == expr_lines.lines[0].end_col
        .                                               && expr_lines.lines.len() == 2
        .                                               && this.token == token::FatArrow =>
        .                                       {
        .                                           // We check whether there's any trailing code in the parse span,
-- line 2474 ----------------------------------------
-- line 2498 ----------------------------------------
        .                                   }
        .                                   err
        .                               },
        .                           )?;
        .                       } else {
        .                           this.eat(&token::Comma);
        .                       }
        .           
    8,160 ( 0.00%)              Ok((
        .                           ast::Arm {
    3,264 ( 0.00%)                      attrs: attrs.into(),
    1,632 ( 0.00%)                      pat,
    1,632 ( 0.00%)                      guard,
    3,264 ( 0.00%)                      body: expr,
      816 ( 0.00%)                      span: lo.to(hi),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::None,
        .                       ))
    6,528 ( 0.00%)          })
        .               }
        .           
        .               /// Parses a `try {...}` expression (`try` token already eaten).
        .               fn parse_try_block(&mut self, span_lo: Span, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
        .                   attrs.extend(iattrs);
        .                   if self.eat_keyword(kw::Catch) {
        .                       let mut error = self.struct_span_err(
-- line 2526 ----------------------------------------
-- line 2532 ----------------------------------------
        .                       Err(error)
        .                   } else {
        .                       let span = span_lo.to(body.span);
        .                       self.sess.gated_spans.gate(sym::try_blocks, span);
        .                       Ok(self.mk_expr(span, ExprKind::TryBlock(body), attrs))
        .                   }
        .               }
        .           
    3,264 ( 0.00%)      fn is_do_catch_block(&self) -> bool {
    2,040 ( 0.00%)          self.token.is_keyword(kw::Do)
        .                       && self.is_keyword_ahead(1, &[kw::Catch])
        .                       && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
        .                       && !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)
    3,264 ( 0.00%)      }
        .           
    3,264 ( 0.00%)      fn is_try_block(&self) -> bool {
    2,448 ( 0.00%)          self.token.is_keyword(kw::Try)
        .                       && self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
        .                       && self.token.uninterpolated_span().rust_2018()
    3,264 ( 0.00%)      }
        .           
        .               /// Parses an `async move? {...}` expression.
        .               fn parse_async_block(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let lo = self.token.span;
        .                   self.expect_keyword(kw::Async)?;
        .                   let capture_clause = self.parse_capture_clause()?;
        .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
        .                   attrs.extend(iattrs);
-- line 2559 ----------------------------------------
-- line 2569 ----------------------------------------
        .                               && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
        .                       ) || (
        .                           // `async {`
        .                           self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
        .                       ))
        .               }
        .           
        .               fn is_certainly_not_a_block(&self) -> bool {
      664 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
      319 ( 0.00%)              && (
        .                           // `{ ident, ` cannot start a block.
        .                           self.look_ahead(2, |t| t == &token::Comma)
      302 ( 0.00%)                      || self.look_ahead(2, |t| t == &token::Colon)
        .                                   && (
        .                                       // `{ ident: token, ` cannot start a block.
        .                                       self.look_ahead(4, |t| t == &token::Comma) ||
        .                           // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`.
        .                           self.look_ahead(3, |t| !t.can_begin_type())
        .                                   )
        .                       )
        .               }
        .           
        .               fn maybe_parse_struct_expr(
        .                   &mut self,
        .                   qself: Option<&ast::QSelf>,
        .                   path: &ast::Path,
        .                   attrs: &AttrVec,
        .               ) -> Option<PResult<'a, P<Expr>>> {
      568 ( 0.00%)          let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);
      284 ( 0.00%)          if struct_allowed || self.is_certainly_not_a_block() {
      590 ( 0.00%)              if let Err(err) = self.expect(&token::OpenDelim(token::Brace)) {
        .                           return Some(Err(err));
        .                       }
      944 ( 0.00%)              let expr = self.parse_struct_expr(qself.cloned(), path.clone(), attrs.clone(), true);
      354 ( 0.00%)              if let (Ok(expr), false) = (&expr, struct_allowed) {
        .                           // This is a struct literal, but we don't can't accept them here.
        .                           self.error_struct_lit_not_allowed_here(path.span, expr.span);
        .                       }
        .                       return Some(expr);
        .                   }
        .                   None
        .               }
        .           
-- line 2611 ----------------------------------------
-- line 2614 ----------------------------------------
        .                       .multipart_suggestion(
        .                           "surround the struct literal with parentheses",
        .                           vec![(lo.shrink_to_lo(), "(".to_string()), (sp.shrink_to_hi(), ")".to_string())],
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .               }
        .           
    1,826 ( 0.00%)      pub(super) fn parse_struct_fields(
        .                   &mut self,
        .                   pth: ast::Path,
        .                   recover: bool,
        .                   close_delim: token::DelimToken,
        .               ) -> PResult<'a, (Vec<ExprField>, ast::StructRest, bool)> {
        .                   let mut fields = Vec::new();
        .                   let mut base = ast::StructRest::None;
    2,324 ( 0.00%)          let mut recover_async = false;
        .           
        .                   let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {
        .                       recover_async = true;
        .                       e.span_label(span, "`async` blocks are only allowed in Rust 2018 or later");
        .                       e.help(&format!("set `edition = \"{}\"` in `Cargo.toml`", LATEST_STABLE_EDITION));
        .                       e.note("for more on editions, read https://doc.rust-lang.org/edition-guide");
        .                   };
        .           
    2,795 ( 0.00%)          while self.token != token::CloseDelim(close_delim) {
        .                       if self.eat(&token::DotDot) {
       14 ( 0.00%)                  let exp_span = self.prev_token.span;
        .                           // We permit `.. }` on the left-hand side of a destructuring assignment.
       49 ( 0.00%)                  if self.check(&token::CloseDelim(close_delim)) {
        .                               base = ast::StructRest::Rest(self.prev_token.span.shrink_to_hi());
        .                               break;
        .                           }
       14 ( 0.00%)                  match self.parse_expr() {
       14 ( 0.00%)                      Ok(e) => base = ast::StructRest::Base(e),
        .                               Err(mut e) if recover => {
        .                                   e.emit();
        .                                   self.recover_stmt();
        .                               }
        .                               Err(e) => return Err(e),
        .                           }
        .                           self.recover_struct_comma_after_dotdot(exp_span);
        .                           break;
        .                       }
        .           
        .                       let recovery_field = self.find_struct_error_after_field_looking_code();
    1,572 ( 0.00%)              let parsed_field = match self.parse_expr_field() {
    3,144 ( 0.00%)                  Ok(f) => Some(f),
        .                           Err(mut e) => {
        .                               if pth == kw::Async {
        .                                   async_block_err(&mut e, pth.span);
        .                               } else {
        .                                   e.span_label(pth.span, "while parsing this struct");
        .                               }
        .                               e.emit();
        .           
-- line 2669 ----------------------------------------
-- line 2675 ----------------------------------------
        .                                   if self.token != token::Comma {
        .                                       break;
        .                                   }
        .                               }
        .                               None
        .                           }
        .                       };
        .           
    4,323 ( 0.00%)              match self.expect_one_of(&[token::Comma], &[token::CloseDelim(close_delim)]) {
        .                           Ok(_) => {
    2,751 ( 0.00%)                      if let Some(f) = parsed_field.or(recovery_field) {
        .                                   // Only include the field if there's no parse error for the field name.
    3,144 ( 0.00%)                          fields.push(f);
        .                               }
        .                           }
        .                           Err(mut e) => {
        .                               if pth == kw::Async {
        .                                   async_block_err(&mut e, pth.span);
        .                               } else {
        .                                   e.span_label(pth.span, "while parsing this struct");
        .                                   if let Some(f) = recovery_field {
-- line 2695 ----------------------------------------
-- line 2706 ----------------------------------------
        .                                   return Err(e);
        .                               }
        .                               e.emit();
        .                               self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);
        .                               self.eat(&token::Comma);
        .                           }
        .                       }
        .                   }
    2,324 ( 0.00%)          Ok((fields, base, recover_async))
    1,328 ( 0.00%)      }
        .           
        .               /// Precondition: already parsed the '{'.
    1,992 ( 0.00%)      pub(super) fn parse_struct_expr(
        .                   &mut self,
        .                   qself: Option<ast::QSelf>,
        .                   pth: ast::Path,
        .                   attrs: AttrVec,
        .                   recover: bool,
        .               ) -> PResult<'a, P<Expr>> {
      996 ( 0.00%)          let lo = pth.span;
      830 ( 0.00%)          let (fields, base, recover_async) =
    1,162 ( 0.00%)              self.parse_struct_fields(pth.clone(), recover, token::Brace)?;
      498 ( 0.00%)          let span = lo.to(self.token.span);
      498 ( 0.00%)          self.expect(&token::CloseDelim(token::Brace))?;
      166 ( 0.00%)          let expr = if recover_async {
        .                       ExprKind::Err
        .                   } else {
    2,656 ( 0.00%)              ExprKind::Struct(P(ast::StructExpr { qself, path: pth, fields, rest: base }))
        .                   };
        .                   Ok(self.mk_expr(span, expr, attrs))
    1,826 ( 0.00%)      }
        .           
        .               /// Use in case of error after field-looking code: `S { foo: () with a }`.
        .               fn find_struct_error_after_field_looking_code(&self) -> Option<ExprField> {
    1,572 ( 0.00%)          match self.token.ident() {
        .                       Some((ident, is_raw))
    2,751 ( 0.00%)                  if (is_raw || !ident.is_reserved())
    1,967 ( 0.00%)                      && self.look_ahead(1, |t| *t == token::Colon) =>
        .                       {
    3,880 ( 0.00%)                  Some(ast::ExprField {
        .                               ident,
      388 ( 0.00%)                      span: self.token.span,
        .                               expr: self.mk_expr_err(self.token.span),
        .                               is_shorthand: false,
        .                               attrs: AttrVec::new(),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           })
        .                       }
       15 ( 0.00%)              _ => None,
        .                   }
        .               }
        .           
        .               fn recover_struct_comma_after_dotdot(&mut self, span: Span) {
       14 ( 0.00%)          if self.token != token::Comma {
        .                       return;
        .                   }
        .                   self.struct_span_err(
        .                       span.to(self.prev_token.span),
        .                       "cannot use a comma after the base struct",
        .                   )
        .                   .span_suggestion_short(
        .                       self.token.span,
-- line 2768 ----------------------------------------
-- line 2772 ----------------------------------------
        .                   )
        .                   .note("the base struct must always be the last field")
        .                   .emit();
        .                   self.recover_stmt();
        .               }
        .           
        .               /// Parses `ident (COLON expr)?`.
        .               fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {
    1,179 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
    3,930 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
      786 ( 0.00%)              let lo = this.token.span;
        .           
        .                       // Check if a colon exists one ahead. This means we're parsing a fieldname.
      786 ( 0.00%)              let is_shorthand = !this.look_ahead(1, |t| t == &token::Colon || t == &token::Eq);
      403 ( 0.00%)              let (ident, expr) = if is_shorthand {
        .                           // Mimic `x: x` for the `x` field shorthand.
       45 ( 0.00%)                  let ident = this.parse_ident_common(false)?;
       20 ( 0.00%)                  let path = ast::Path::from_ident(ident);
       30 ( 0.00%)                  (ident, this.mk_expr(ident.span, ExprKind::Path(None, path), AttrVec::new()))
        .                       } else {
        .                           let ident = this.parse_field_name()?;
        .                           this.error_on_eq_field_init(ident);
      776 ( 0.00%)                  this.bump(); // `:`
      388 ( 0.00%)                  (ident, this.parse_expr()?)
        .                       };
        .           
    4,716 ( 0.00%)              Ok((
        .                           ast::ExprField {
        .                               ident,
    1,179 ( 0.00%)                      span: lo.to(expr.span),
      393 ( 0.00%)                      expr,
        .                               is_shorthand,
    1,179 ( 0.00%)                      attrs: attrs.into(),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::MaybeComma,
        .                       ))
    3,144 ( 0.00%)          })
        .               }
        .           
        .               /// Check for `=`. This means the source incorrectly attempts to
        .               /// initialize a field with an eq rather than a colon.
        .               fn error_on_eq_field_init(&self, field_name: Ident) {
    1,164 ( 0.00%)          if self.token != token::Eq {
        .                       return;
        .                   }
        .           
        .                   self.struct_span_err(self.token.span, "expected `:`, found `=`")
        .                       .span_suggestion(
        .                           field_name.span.shrink_to_hi().to(self.token.span),
        .                           "replace equals symbol with a colon",
        .                           ":".to_string(),
-- line 2824 ----------------------------------------
-- line 2855 ----------------------------------------
        .                       )
        .                       .emit();
        .               }
        .           
        .               fn mk_assign_op(&self, binop: BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ExprKind {
        .                   ExprKind::AssignOp(binop, lhs, rhs)
        .               }
        .           
      472 ( 0.00%)      fn mk_range(
        .                   &mut self,
        .                   start: Option<P<Expr>>,
        .                   end: Option<P<Expr>>,
        .                   limits: RangeLimits,
        .               ) -> ExprKind {
      161 ( 0.00%)          if end.is_none() && limits == RangeLimits::Closed {
        .                       self.inclusive_range_with_incorrect_end(self.prev_token.span);
        .                       ExprKind::Err
        .                   } else {
      236 ( 0.00%)              ExprKind::Range(start, end, limits)
        .                   }
      295 ( 0.00%)      }
        .           
        .               fn mk_unary(&self, unop: UnOp, expr: P<Expr>) -> ExprKind {
        .                   ExprKind::Unary(unop, expr)
        .               }
        .           
        .               fn mk_binary(&self, binop: BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ExprKind {
        .                   ExprKind::Binary(binop, lhs, rhs)
        .               }
-- line 2883 ----------------------------------------
-- line 2893 ----------------------------------------
        .               fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {
        .                   let span = lo.to(self.prev_token.span);
        .                   let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), AttrVec::new());
        .                   self.recover_from_await_method_call();
        .                   await_expr
        .               }
        .           
        .               crate fn mk_expr(&self, span: Span, kind: ExprKind, attrs: AttrVec) -> P<Expr> {
    2,276 ( 0.00%)          P(Expr { kind, span, attrs, id: DUMMY_NODE_ID, tokens: None })
        .               }
        .           
        .               pub(super) fn mk_expr_err(&self, span: Span) -> P<Expr> {
        .                   self.mk_expr(span, ExprKind::Err, AttrVec::new())
        .               }
        .           
        .               /// Create expression span ensuring the span of the parent node
        .               /// is larger than the span of lhs and rhs, including the attributes.
        .               fn mk_expr_sp(&self, lhs: &P<Expr>, lhs_span: Span, rhs_span: Span) -> Span {
      832 ( 0.00%)          lhs.attrs
        .                       .iter()
        .                       .find(|a| a.style == AttrStyle::Outer)
        .                       .map_or(lhs_span, |a| a.span)
        .                       .to(rhs_span)
        .               }
        .           
        .               fn collect_tokens_for_expr(
        .                   &mut self,
        .                   attrs: AttrWrapper,
        .                   f: impl FnOnce(&mut Self, Vec<ast::Attribute>) -> PResult<'a, P<Expr>>,
        .               ) -> PResult<'a, P<Expr>> {
  935,326 ( 0.01%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
  778,294 ( 0.01%)              let res = f(this, attrs)?;
  109,785 ( 0.00%)              let trailing = if this.restrictions.contains(Restrictions::STMT_EXPR)
    6,816 ( 0.00%)                  && this.token.kind == token::Semi
        .                       {
        .                           TrailingToken::Semi
        .                       } else {
        .                           // FIXME - pass this through from the place where we know
        .                           // we need a comma, rather than assuming that `#[attr] expr,`
        .                           // always captures a trailing comma
        .                           TrailingToken::MaybeComma
        .                       };
  311,786 ( 0.00%)              Ok((res, trailing))
  831,344 ( 0.01%)          })
        .               }
        .           }

3,622,756 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 140 ----------------------------------------
        .               Backslash,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Iterator for EscapeUnicode {
        .               type Item = char;
        .           
        .               fn next(&mut self) -> Option<char> {
2,554,705 ( 0.03%)          match self.state {
        .                       EscapeUnicodeState::Backslash => {
  113,934 ( 0.00%)                  self.state = EscapeUnicodeState::Type;
        .                           Some('\\')
        .                       }
        .                       EscapeUnicodeState::Type => {
  113,934 ( 0.00%)                  self.state = EscapeUnicodeState::LeftBrace;
        .                           Some('u')
        .                       }
        .                       EscapeUnicodeState::LeftBrace => {
  113,934 ( 0.00%)                  self.state = EscapeUnicodeState::Value;
        .                           Some('{')
        .                       }
        .                       EscapeUnicodeState::Value => {
2,487,166 ( 0.03%)                  let hex_digit = ((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf;
        .                           let c = from_digit(hex_digit, 16).unwrap();
  452,212 ( 0.01%)                  if self.hex_digit_idx == 0 {
   56,967 ( 0.00%)                      self.state = EscapeUnicodeState::RightBrace;
        .                           } else {
  338,278 ( 0.00%)                      self.hex_digit_idx -= 1;
        .                           }
        .                           Some(c)
        .                       }
        .                       EscapeUnicodeState::RightBrace => {
  113,934 ( 0.00%)                  self.state = EscapeUnicodeState::Done;
        .                           Some('}')
        .                       }
        .                       EscapeUnicodeState::Done => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
-- line 180 ----------------------------------------
-- line 200 ----------------------------------------
        .               }
        .           }
        .           
        .           #[stable(feature = "exact_size_escape", since = "1.11.0")]
        .           impl ExactSizeIterator for EscapeUnicode {
        .               #[inline]
        .               fn len(&self) -> usize {
        .                   // The match is a single memory access with no branching
  113,934 ( 0.00%)          self.hex_digit_idx
        .                       + match self.state {
        .                           EscapeUnicodeState::Done => 0,
        .                           EscapeUnicodeState::RightBrace => 1,
        .                           EscapeUnicodeState::Value => 2,
        .                           EscapeUnicodeState::LeftBrace => 3,
        .                           EscapeUnicodeState::Type => 4,
        .                           EscapeUnicodeState::Backslash => 5,
        .                       }
-- line 216 ----------------------------------------
-- line 240 ----------------------------------------
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub struct EscapeDefault {
        .               state: EscapeDefaultState,
        .           }
        .           
        .           #[derive(Clone, Debug)]
        .           enum EscapeDefaultState {
        .               Done,
       30 ( 0.00%)      Char(char),
        2 ( 0.00%)      Backslash(char),
        .               Unicode(EscapeUnicode),
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Iterator for EscapeDefault {
        .               type Item = char;
        .           
  512,036 ( 0.01%)      fn next(&mut self) -> Option<char> {
3,312,399 ( 0.04%)          match self.state {
        .                       EscapeDefaultState::Backslash(c) => {
       70 ( 0.00%)                  self.state = EscapeDefaultState::Char(c);
        .                           Some('\\')
        .                       }
      530 ( 0.00%)              EscapeDefaultState::Char(c) => {
      530 ( 0.00%)                  self.state = EscapeDefaultState::Done;
        .                           Some(c)
        .                       }
        .                       EscapeDefaultState::Done => None,
        .                       EscapeDefaultState::Unicode(ref mut iter) => iter.next(),
        .                   }
1,024,072 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
   57,497 ( 0.00%)          let n = self.len();
        .                   (n, Some(n))
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        .                   self.len()
        .               }
        .           
-- line 282 ----------------------------------------
-- line 310 ----------------------------------------
        .                       EscapeDefaultState::Done => None,
        .                       EscapeDefaultState::Backslash(c) | EscapeDefaultState::Char(c) => Some(c),
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "exact_size_escape", since = "1.11.0")]
        .           impl ExactSizeIterator for EscapeDefault {
   57,497 ( 0.00%)      fn len(&self) -> usize {
  172,491 ( 0.00%)          match self.state {
        .                       EscapeDefaultState::Done => 0,
        .                       EscapeDefaultState::Char(_) => 1,
        .                       EscapeDefaultState::Backslash(_) => 2,
   56,967 ( 0.00%)              EscapeDefaultState::Unicode(ref iter) => iter.len(),
        .                   }
  114,994 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "fused", since = "1.26.0")]
        .           impl FusedIterator for EscapeDefault {}
        .           
        .           #[stable(feature = "char_struct_display", since = "1.16.0")]
        .           impl fmt::Display for EscapeDefault {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 333 ----------------------------------------
-- line 382 ----------------------------------------
        .           #[derive(Debug, Clone)]
        .           pub struct ToLowercase(CaseMappingIter);
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Iterator for ToLowercase {
        .               type Item = char;
        .               fn next(&mut self) -> Option<char> {
        .                   self.0.next()
   11,562 ( 0.00%)      }
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.0.size_hint()
        .               }
        .           }
        .           
        .           #[stable(feature = "case_mapping_double_ended", since = "1.59.0")]
        .           impl DoubleEndedIterator for ToLowercase {
        .               fn next_back(&mut self) -> Option<char> {
-- line 398 ----------------------------------------
-- line 444 ----------------------------------------
        .           enum CaseMappingIter {
        .               Three(char, char, char),
        .               Two(char, char),
        .               One(char),
        .               Zero,
        .           }
        .           
        .           impl CaseMappingIter {
   80,836 ( 0.00%)      fn new(chars: [char; 3]) -> CaseMappingIter {
   11,548 ( 0.00%)          if chars[2] == '\0' {
        .                       if chars[1] == '\0' {
        .                           CaseMappingIter::One(chars[0]) // Including if chars[0] == '\0'
        .                       } else {
        .                           CaseMappingIter::Two(chars[0], chars[1])
        .                       }
        .                   } else {
        .                       CaseMappingIter::Three(chars[0], chars[1], chars[2])
        .                   }
  115,480 ( 0.00%)      }
        .           }
        .           
        .           impl Iterator for CaseMappingIter {
        .               type Item = char;
        .               fn next(&mut self) -> Option<char> {
   69,372 ( 0.00%)          match *self {
        .                       CaseMappingIter::Three(a, b, c) => {
        .                           *self = CaseMappingIter::Two(b, c);
        .                           Some(a)
        .                       }
        .                       CaseMappingIter::Two(b, c) => {
        .                           *self = CaseMappingIter::One(c);
        .                           Some(b)
        .                       }
   11,548 ( 0.00%)              CaseMappingIter::One(c) => {
   11,548 ( 0.00%)                  *self = CaseMappingIter::Zero;
        .                           Some(c)
        .                       }
        .                       CaseMappingIter::Zero => None,
        .                   }
        .               }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   let size = match self {
-- line 486 ----------------------------------------

   29,512 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
        .           use rustc_span::def_id::DefId;
        .           use rustc_span::Span;
        .           use rustc_target::abi::VariantIdx;
        .           
        .           impl<'tcx> Cx<'tcx> {
        .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
        .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
  137,369 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
        .               }
        .           
    4,110 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  301,821 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
    8,220 ( 0.00%)      }
        .           
1,123,020 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
  873,460 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
        .                   let expr_scope =
        .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
        .           
        .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
        .           
  499,120 ( 0.01%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
        .           
  748,680 ( 0.01%)          let adjustment_span = match self.adjustment_span {
   28,757 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
        .                       _ => None,
        .                   };
        .           
        .                   // Now apply adjustments, if any.
  499,120 ( 0.01%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
        .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
   40,172 ( 0.00%)              let span = expr.span;
  147,119 ( 0.00%)              expr =
  378,306 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
        .                   }
        .           
        .                   // Next, wrap this up in the expr's scope.
1,622,140 ( 0.02%)          expr = Expr {
        .                       temp_lifetime,
  114,737 ( 0.00%)              ty: expr.ty,
  124,780 ( 0.00%)              span: hir_expr.span,
        .                       kind: ExprKind::Scope {
        .                           region_scope: expr_scope,
2,246,040 ( 0.03%)                  value: self.thir.exprs.push(expr),
  249,560 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
        .                       },
        .                   };
        .           
        .                   // Finally, create a destruction scope, if any.
  374,340 ( 0.00%)          if let Some(region_scope) =
  249,560 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
        .                   {
   60,420 ( 0.00%)              expr = Expr {
        .                           temp_lifetime,
        .                           ty: expr.ty,
    5,035 ( 0.00%)                  span: hir_expr.span,
        .                           kind: ExprKind::Scope {
        .                               region_scope,
   70,490 ( 0.00%)                      value: self.thir.exprs.push(expr),
        .                               lint_level: LintLevel::Inherited,
        .                           },
        .                       };
        .                   }
        .           
        .                   // OK, all done!
2,745,160 ( 0.03%)          self.thir.exprs.push(expr)
1,123,020 ( 0.01%)      }
        .           
        .               fn apply_adjustment(
        .                   &mut self,
        .                   hir_expr: &'tcx hir::Expr<'tcx>,
        .                   mut expr: Expr<'tcx>,
        .                   adjustment: &Adjustment<'tcx>,
        .                   mut span: Span,
        .               ) -> Expr<'tcx> {
   42,034 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
        .           
        .                   // Adjust the span from the block, to the last expression of the
        .                   // block. This is a better span when returning a mutable reference
        .                   // with too short a lifetime. The error message will use the span
        .                   // from the assignment to the return place, which should only point
        .                   // at the returned value, not the entire function body.
        .                   //
        .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
        .                   //      x
        .                   //   // ^ error message points at this expression.
        .                   // }
        .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
   23,382 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
       75 ( 0.00%)                  if let Some(last_expr) = body.expr {
       75 ( 0.00%)                      span = self.thir[last_expr].span;
       50 ( 0.00%)                      expr.span = span;
        .                           }
        .                       }
        .                   };
        .           
  191,913 ( 0.00%)          let kind = match adjustment.kind {
        .                       Adjust::Pointer(PointerCast::Unsize) => {
        .                           adjust_span(&mut expr);
   63,665 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
        .                       }
    1,275 ( 0.00%)              Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
    9,010 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
        .                       Adjust::Deref(None) => {
        .                           adjust_span(&mut expr);
  135,082 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
        .                       }
      568 ( 0.00%)              Adjust::Deref(Some(deref)) => {
        .                           // We don't need to do call adjust_span here since
        .                           // deref coercions always start with a built-in deref.
      710 ( 0.00%)                  let call = deref.method_call(self.tcx(), expr.ty);
        .           
      852 ( 0.00%)                  expr = Expr {
        .                               temp_lifetime,
      142 ( 0.00%)                      ty: self
        .                                   .tcx
      284 ( 0.00%)                          .mk_ref(deref.region, ty::TypeAndMut { ty: expr.ty, mutbl: deref.mutbl }),
        .                               span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind: deref.mutbl.to_borrow_kind(),
    2,130 ( 0.00%)                          arg: self.thir.exprs.push(expr),
        .                               },
        .                           };
        .           
    2,982 ( 0.00%)                  let expr = Box::new([self.thir.exprs.push(expr)]);
        .           
    1,846 ( 0.00%)                  self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
        .                       }
   34,316 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
        .                           borrow_kind: m.to_borrow_kind(),
  120,106 ( 0.00%)                  arg: self.thir.exprs.push(expr),
        .                       },
        .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
        .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
        .                       }
        .                   };
        .           
  399,323 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
        .               }
        .           
1,247,800 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
  499,120 ( 0.01%)          let expr_ty = self.typeck_results().expr_ty(expr);
  124,780 ( 0.00%)          let expr_span = expr.span;
  623,900 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
        .           
  765,075 ( 0.01%)          let kind = match expr.kind {
        .                       // Here comes the interesting stuff:
    6,609 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
        .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
   15,421 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
        .                           // When we apply adjustments to the receiver, use the span of
        .                           // the overall method call for better diagnostics. args[0]
        .                           // is guaranteed to exist, since a method call always has a receiver.
    8,812 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
        .                           tracing::info!("Using method span: {:?}", expr.span);
    2,203 ( 0.00%)                  let args = self.mirror_exprs(args);
    4,406 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
   15,421 ( 0.00%)                  ExprKind::Call {
    2,203 ( 0.00%)                      ty: expr.ty,
   30,842 ( 0.00%)                      fun: self.thir.exprs.push(expr),
        .                               args,
        .                               from_hir_call: true,
        .                               fn_span,
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Call(ref fun, ref args) => {
   10,444 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               // The callee is something implementing Fn, FnMut, or FnOnce.
        .                               // Find the actual method implementation being called and
        .                               // build the appropriate UFCS call expression with the
        .                               // callee-object as expr parameter.
        .           
        .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
        .           
      176 ( 0.00%)                      let method = self.method_callee(expr, fun.span, None);
        .           
      100 ( 0.00%)                      let arg_tys = args.iter().map(|e| self.typeck_results().expr_ty_adjusted(e));
        .                               let tupled_args = Expr {
       44 ( 0.00%)                          ty: self.tcx.mk_tup(arg_tys),
        .                                   temp_lifetime,
       22 ( 0.00%)                          span: expr.span,
       88 ( 0.00%)                          kind: ExprKind::Tuple { fields: self.mirror_exprs(args) },
        .                               };
      286 ( 0.00%)                      let tupled_args = self.thir.exprs.push(tupled_args);
        .           
      110 ( 0.00%)                      ExprKind::Call {
       44 ( 0.00%)                          ty: method.ty,
      418 ( 0.00%)                          fun: self.thir.exprs.push(method),
       88 ( 0.00%)                          args: Box::new([self.mirror_expr(fun), tupled_args]),
        .                                   from_hir_call: true,
       44 ( 0.00%)                          fn_span: expr.span,
        .                               }
        .                           } else {
        .                               let adt_data =
   12,945 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
        .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
    9,282 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
    1,112 ( 0.00%)                                  Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
    2,224 ( 0.00%)                                      Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
        .                                           }
        .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
        .                                           _ => None,
        .                                       })
        .                                   } else {
        .                                       None
        .                                   };
    2,276 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
    2,780 ( 0.00%)                          let substs = self.typeck_results().node_substs(fun.hir_id);
    1,668 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
        .                                   let user_ty =
    2,780 ( 0.00%)                              user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
        .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
        .                                               *did = adt_def.did;
        .                                           }
        .                                           u_ty
        .                                       });
        .                                   debug!("make_mirror_unadjusted: (call) user_ty={:?}", user_ty);
        .           
      556 ( 0.00%)                          let field_refs = args
        .                                       .iter()
        .                                       .enumerate()
        .                                       .map(|(idx, e)| FieldExpr {
        .                                           name: Field::new(idx),
        .                                           expr: self.mirror_expr(e),
        .                                       })
        .                                       .collect();
        .                                   ExprKind::Adt(Box::new(Adt {
-- line 246 ----------------------------------------
-- line 247 ----------------------------------------
        .                                       adt_def,
        .                                       substs,
        .                                       variant_index: index,
        .                                       fields: field_refs,
        .                                       user_ty,
        .                                       base: None,
        .                                   }))
        .                               } else {
    8,132 ( 0.00%)                          ExprKind::Call {
   10,747 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
    2,033 ( 0.00%)                              fun: self.mirror_expr(fun),
    8,132 ( 0.00%)                              args: self.mirror_exprs(args),
        .                                       from_hir_call: true,
    2,033 ( 0.00%)                              fn_span: expr.span,
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
   25,370 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
        .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
        .                       }
        .           
   32,956 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
        .           
        .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
      672 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
        .                       }
        .           
       40 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
      160 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
      200 ( 0.00%)                      ExprKind::AssignOp {
      120 ( 0.00%)                          op: bin_op(op.node),
       40 ( 0.00%)                          lhs: self.mirror_expr(lhs),
       40 ( 0.00%)                          rhs: self.mirror_expr(rhs),
        .                               }
        .                           }
        .                       }
        .           
   61,760 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  247,040 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
        .                           user_ty: None,
        .                           const_id: None,
        .                       },
        .           
      989 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
    3,956 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      297 ( 0.00%)                      let lhs = self.mirror_expr(lhs);
      297 ( 0.00%)                      let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
        .                               // FIXME overflow
    2,400 ( 0.00%)                      match op.node {
      736 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
        .                                       op: LogicalOp::And,
      184 ( 0.00%)                              lhs: self.mirror_expr(lhs),
      184 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
      400 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
        .                                       op: LogicalOp::Or,
      100 ( 0.00%)                              lhs: self.mirror_expr(lhs),
      100 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   _ => {
    1,632 ( 0.00%)                              let op = bin_op(op.node);
    2,040 ( 0.00%)                              ExprKind::Binary {
        .                                           op,
      408 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
      408 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Index(ref lhs, ref index) => {
      715 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let index = self.mirror_expr(index);
    1,209 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
        .                           } else {
      200 ( 0.00%)                      ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
    9,095 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
       36 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
        .                           } else {
    5,445 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
      790 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else {
      474 ( 0.00%)                      ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {
        .                           if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else if let hir::ExprKind::Lit(ref lit) = arg.kind {
-- line 362 ----------------------------------------
-- line 365 ----------------------------------------
        .                                   user_ty: None,
        .                                   const_id: None,
        .                               }
        .                           } else {
        .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
      534 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
      534 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
        .                               AdtKind::Struct | AdtKind::Union => {
      693 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
      924 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
      924 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
      462 ( 0.00%)                              adt_def: adt,
        .                                       variant_index: VariantIdx::new(0),
      462 ( 0.00%)                              substs,
        .                                       user_ty,
      462 ( 0.00%)                              fields: self.field_refs(fields),
      924 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
        .                                           base: self.mirror_expr(base),
       18 ( 0.00%)                                  field_types: self.typeck_results().fru_field_types()[expr.hir_id]
        .                                               .iter()
        .                                               .copied()
        .                                               .collect(),
        .                                       }),
        .                                   }))
        .                               }
        .                               AdtKind::Enum => {
      216 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
      144 ( 0.00%)                          match res {
      108 ( 0.00%)                              Res::Def(DefKind::Variant, variant_id) => {
       36 ( 0.00%)                                  assert!(base.is_none());
        .           
      108 ( 0.00%)                                  let index = adt.variant_index_with_id(variant_id);
        .                                           let user_provided_types =
      144 ( 0.00%)                                      self.typeck_results().user_provided_types();
      144 ( 0.00%)                                  let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                           debug!("make_mirror_unadjusted: (variant) user_ty={:?}", user_ty);
        .                                           ExprKind::Adt(Box::new(Adt {
       36 ( 0.00%)                                      adt_def: adt,
        .                                               variant_index: index,
       72 ( 0.00%)                                      substs,
        .                                               user_ty,
       72 ( 0.00%)                                      fields: self.field_refs(fields),
        .                                               base: None,
        .                                           }))
        .                                       }
        .                                       _ => {
        .                                           span_bug!(expr.span, "unexpected res: {:?}", res);
        .                                       }
        .                                   }
        .                               }
        .                           },
        .                           _ => {
        .                               span_bug!(expr.span, "unexpected type for struct literal: {:?}", expr_ty);
        .                           }
        .                       },
        .           
        .                       hir::ExprKind::Closure(..) => {
      189 ( 0.00%)                  let closure_ty = self.typeck_results().expr_ty(expr);
      189 ( 0.00%)                  let (def_id, substs, movability) = match *closure_ty.kind() {
        .                               ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),
        .                               ty::Generator(def_id, substs, movability) => {
        .                                   (def_id, UpvarSubsts::Generator(substs), Some(movability))
        .                               }
        .                               _ => {
        .                                   span_bug!(expr.span, "closure expr w/o closure type: {:?}", closure_ty);
        .                               }
        .                           };
        .           
      378 ( 0.00%)                  let upvars = self
        .                               .typeck_results
        .                               .closure_min_captures_flattened(def_id)
        .                               .zip(substs.upvar_tys())
        .                               .map(|(captured_place, ty)| {
      160 ( 0.00%)                          let upvars = self.capture_upvar(expr, captured_place, ty);
      448 ( 0.00%)                          self.thir.exprs.push(upvars)
        .                               })
        .                               .collect();
        .           
        .                           // Convert the closure fake reads, if any, from hir `Place` to ExprRef
       63 ( 0.00%)                  let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {
        .                               Some(fake_reads) => fake_reads
        .                                   .iter()
        .                                   .map(|(place, cause, hir_id)| {
        .                                       let expr = self.convert_captured_hir_place(expr, place.clone());
        .                                       (self.thir.exprs.push(expr), *cause, *hir_id)
        .                                   })
        .                                   .collect(),
        .                               None => Vec::new(),
        .                           };
        .           
    1,197 ( 0.00%)                  ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
        .                       }
        .           
    9,753 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
   39,012 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
   39,012 ( 0.00%)                  self.convert_path_expr(expr, res)
        .                       }
        .           
        .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
        .                           template: asm.template,
        .                           operands: asm
        .                               .operands
        .                               .iter()
        .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 572 ----------------------------------------
        .                       hir::ExprKind::ConstBlock(ref anon_const) => {
        .                           let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);
        .                           let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);
        .           
        .                           ExprKind::ConstBlock { value }
        .                       }
        .                       // Now comes the rote stuff:
        .                       hir::ExprKind::Repeat(ref v, _) => {
       12 ( 0.00%)                  let ty = self.typeck_results().expr_ty(expr);
        8 ( 0.00%)                  let count = match ty.kind() {
        .                               ty::Array(_, ct) => ct,
        .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
        .                           };
        .           
       24 ( 0.00%)                  ExprKind::Repeat { value: self.mirror_expr(v), count }
        .                       }
        .                       hir::ExprKind::Ret(ref v) => {
      903 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
        .                       }
      285 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
      475 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
        .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
        .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
        .                           },
        .                           Err(err) => bug!("invalid loop id for break: {}", err),
        .                       },
       72 ( 0.00%)              hir::ExprKind::Continue(dest) => match dest.target_id {
       96 ( 0.00%)                  Ok(loop_id) => ExprKind::Continue {
        .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
        .                           },
        .                           Err(err) => bug!("invalid loop id for continue: {}", err),
        .                       },
      376 ( 0.00%)              hir::ExprKind::Let(let_expr) => ExprKind::Let {
       47 ( 0.00%)                  expr: self.mirror_expr(let_expr.init),
      141 ( 0.00%)                  pat: self.pattern_from_hir(let_expr.pat),
        .                       },
    4,796 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
        .                           if_then_scope: region::Scope {
      436 ( 0.00%)                      id: then.hir_id.local_id,
        .                               data: region::ScopeData::IfThen,
        .                           },
        .                           cond: self.mirror_expr(cond),
        .                           then: self.mirror_expr(then),
        .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
        .                       },
    4,280 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
      856 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
    7,255 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
        .                       },
        .                       hir::ExprKind::Loop(ref body, ..) => {
      455 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
      546 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
      364 ( 0.00%)                  let block = self.mirror_block(body);
    1,365 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
        .                               ty: block_ty,
        .                               temp_lifetime,
       91 ( 0.00%)                      span: block.span,
      728 ( 0.00%)                      kind: ExprKind::Block { body: block },
        .                           });
      273 ( 0.00%)                  ExprKind::Loop { body }
        .                       }
    3,960 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
      990 ( 0.00%)                  lhs: self.mirror_expr(source),
    5,940 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
        .                       },
        .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
        .                           // Check for a user-given type annotation on this `cast`
      232 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
      348 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
        .           
        .                           debug!(
        .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
        .                               expr, cast_ty.hir_id, user_ty,
        .                           );
        .           
        .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
        .                           // using a coercion (or is a no-op).
      348 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
        .                               // Convert the lexpr to a vexpr.
        .                               ExprKind::Use { source: self.mirror_expr(source) }
      174 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
        .                               // Special cased so that we can type check that the element
        .                               // type of the source matches the pointed to type of the
        .                               // destination.
        .                               ExprKind::Pointer {
        .                                   source: self.mirror_expr(source),
        .                                   cast: PointerCast::ArrayToPointer,
        .                               }
        .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
        .                               // enum's layout (or its tag type) to compute it during const eval
        .                               // Example:
        .                               // enum Foo {
        .                               //     A,
        .                               //     B = A as isize + 4,
        .                               // }
        .                               // The correct solution would be to add symbolic computations to miri,
        .                               // so we wouldn't have to compute and store the actual value
      201 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
      162 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
      189 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
        .                                       |adt_def| match res {
        .                                           Res::Def(
        .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
        .                                               variant_ctor_id,
        .                                           ) => {
        .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
        .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
        .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
        .                                               let ty = adt_def.repr.discr_type();
        .                                               let ty = ty.to_ty(self.tcx());
        .                                               Some((d, o, ty))
        .                                           }
        .                                           _ => None,
        .                                       },
        .                                   )
        .                               } else {
       62 ( 0.00%)                          None
        .                               };
        .           
       81 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
        .                                   let mk_const = |literal| Expr {
        .                                       temp_lifetime,
        .                                       ty: var_ty,
        .                                       span: expr.span,
        .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
        .                                   };
        .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
        .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
        .                                               ty: var_ty,
        .                                               span: expr.span,
        .                                               kind: bin,
        .                                           })
        .                                       }
        .                                       None => offset,
        .                                   }
        .                               } else {
       27 ( 0.00%)                          self.mirror_expr(source)
        .                               };
        .           
        .                               ExprKind::Cast { source: source }
        .                           };
        .           
      116 ( 0.00%)                  if let Some(user_ty) = user_ty {
        .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
        .                               //       inefficient, revisit this when performance becomes an issue.
        .                               let cast_expr = self.thir.exprs.push(Expr {
        .                                   temp_lifetime,
        .                                   ty: expr_ty,
        .                                   span: expr.span,
        .                                   kind: cast,
        .                               });
        .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
        .           
        .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
        .                           } else {
      232 ( 0.00%)                      cast
        .                           }
        .                       }
        .                       hir::ExprKind::Type(ref source, ref ty) => {
        .                           let user_provided_types = self.typeck_results.user_provided_types();
        .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
        .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
        .                           let mirrored = self.mirror_expr(source);
        .                           if source.is_syntactic_place_expr() {
        .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
        .                           } else {
        .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
        .                           }
        .                       }
        .                       hir::ExprKind::DropTemps(ref source) => {
    1,784 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
        .                       }
       36 ( 0.00%)              hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
        .                       hir::ExprKind::Array(ref fields) => {
   17,585 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
        .                       }
  152,800 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
        .           
        .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
        .                       hir::ExprKind::Err => unreachable!(),
        .                   };
        .           
4,242,520 ( 0.05%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
  998,240 ( 0.01%)      }
        .           
   47,529 ( 0.00%)      fn user_substs_applied_to_res(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   res: Res,
        .               ) -> Option<ty::CanonicalUserType<'tcx>> {
        .                   debug!("user_substs_applied_to_res: res={:?}", res);
   31,689 ( 0.00%)          let user_provided_type = match res {
        .                       // A reference to something callable -- e.g., a fn, method, or
        .                       // a tuple-struct or tuple-variant. This has the type of a
        .                       // `Fn` but with the user-given substitutions.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::Def(DefKind::Const, _)
        .                       | Res::Def(DefKind::AssocConst, _) => {
   36,967 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
        .                       }
        .           
        .                       // A unit struct/variant which is used as a value (e.g.,
        .                       // `None`). This has the type of the enum/struct that defines
        .                       // this variant -- but with the substitutions given by the
        .                       // user.
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
        .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
        .           
        .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
        .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
        .           
        .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
        .                   };
        .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
        .                   user_provided_type
   31,686 ( 0.00%)      }
        .           
   35,893 ( 0.00%)      fn method_callee(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   span: Span,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .               ) -> Expr<'tcx> {
   16,566 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
   22,088 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
        .                       Some((def_id, substs)) => (def_id, substs, None),
        .                       None => {
        .                           let (kind, def_id) =
   23,571 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
        .                                   span_bug!(expr.span, "no type-dependent def for method callee")
        .                               });
   39,285 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
        .                           debug!("method_callee: user_ty={:?}", user_ty);
   39,285 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
        .                       }
        .                   };
        .                   let ty = self.tcx().mk_fn_def(def_id, substs);
   35,893 ( 0.00%)          Expr {
        .                       temp_lifetime,
        .                       ty,
        .                       span,
        .                       kind: ExprKind::Literal {
        .                           literal: ty::Const::zero_sized(self.tcx(), ty),
   16,566 ( 0.00%)                  user_ty,
        .                           const_id: None,
        .                       },
        .                   }
   22,088 ( 0.00%)      }
        .           
   19,197 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
   17,064 ( 0.00%)          let arm = Arm {
    6,399 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
       94 ( 0.00%)              guard: arm.guard.as_ref().map(|g| match g {
       47 ( 0.00%)                  hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
        .                           hir::Guard::IfLet(ref pat, ref e) => {
        .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
        .                           }
        .                       }),
    2,133 ( 0.00%)              body: self.mirror_expr(arm.body),
    4,266 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
        .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
    2,133 ( 0.00%)              span: arm.span,
        .                   };
   31,995 ( 0.00%)          self.thir.arms.push(arm)
   19,197 ( 0.00%)      }
        .           
        .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
   68,271 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
   70,264 ( 0.00%)          match res {
        .                       // A regular function, constructor function or a constant.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::SelfCtor(..) => {
   21,300 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
    2,130 ( 0.00%)                  ExprKind::Literal {
        .                               literal: ty::Const::zero_sized(
    4,260 ( 0.00%)                          self.tcx,
    6,390 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
        .                               ),
   17,040 ( 0.00%)                      user_ty,
        .                               const_id: None,
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::ConstParam, def_id) => {
        .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
        .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
        .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
        .                                   ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
        .                               user_ty: None,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
    4,788 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
    2,660 ( 0.00%)                  ExprKind::Literal {
    6,384 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
        .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
        .                                       ty::WithOptConstParam::unknown(def_id),
        .                                       substs,
        .                                   )),
    1,596 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
    4,256 ( 0.00%)                      user_ty,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
    1,990 ( 0.00%)              Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
    1,990 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
    1,592 ( 0.00%)                  let user_provided_type = user_provided_types.get(expr.hir_id).copied();
        .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
    1,592 ( 0.00%)                  let ty = self.typeck_results().node_type(expr.hir_id);
      796 ( 0.00%)                  match ty.kind() {
        .                               // A unit struct/variant which is used as a value.
        .                               // We return a completely different ExprKind here to account for this special case.
        .                               ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {
      398 ( 0.00%)                          adt_def,
    1,990 ( 0.00%)                          variant_index: adt_def.variant_index_with_ctor_id(def_id),
      398 ( 0.00%)                          substs,
        .                                   user_ty: user_provided_type,
        .                                   fields: Box::new([]),
        .                                   base: None,
        .                               })),
        .                               _ => bug!("unexpected ty: {:?}", ty),
        .                           }
        .                       }
        .           
-- line 937 ----------------------------------------
-- line 953 ----------------------------------------
        .                                   def_id: id,
        .                               }
        .                           };
        .                           ExprKind::Deref {
        .                               arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
        .                           }
        .                       }
        .           
   53,544 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
        .           
        .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
        .                   }
        .               }
        .           
   67,250 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
        .                   // We want upvars here not captures.
        .                   // Captures will be handled in MIR.
        .                   let is_upvar = self
        .                       .tcx
        .                       .upvars_mentioned(self.body_owner)
        .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
        .           
        .                   debug!(
        .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
        .                       var_hir_id, is_upvar, self.body_owner
        .                   );
        .           
       59 ( 0.00%)          if is_upvar {
      259 ( 0.00%)              ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
        .                   } else {
   20,064 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
        .                   }
   53,800 ( 0.00%)      }
        .           
    3,267 ( 0.00%)      fn overloaded_operator(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: Box<[ExprId]>,
        .               ) -> ExprKind<'tcx> {
    2,079 ( 0.00%)          let fun = self.method_callee(expr, expr.span, None);
    4,455 ( 0.00%)          let fun = self.thir.exprs.push(fun);
    2,079 ( 0.00%)          ExprKind::Call {
    1,485 ( 0.00%)              ty: self.thir[fun].ty,
        .                       fun,
        .                       args,
        .                       from_hir_call: false,
        .                       fn_span: expr.span,
        .                   }
    2,376 ( 0.00%)      }
        .           
    3,346 ( 0.00%)      fn overloaded_place(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   place_ty: Ty<'tcx>,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .                   args: Box<[ExprId]>,
        .                   span: Span,
        .               ) -> ExprKind<'tcx> {
        .                   // For an overloaded *x or x[y] expression of type T, the method
        .                   // call returns an &T and we must add the deref so that the types
        .                   // line up (this is because `*x` and `x[y]` represent places):
        .           
        .                   // Reconstruct the output assuming it's a reference with the
        .                   // same region and mutability as the receiver. This holds for
        .                   // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.
    1,912 ( 0.00%)          let (region, mutbl) = match *self.thir[args[0]].ty.kind() {
      478 ( 0.00%)              ty::Ref(region, _, mutbl) => (region, mutbl),
        .                       _ => span_bug!(span, "overloaded_place: receiver is not a reference"),
        .                   };
      239 ( 0.00%)          let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
        .           
        .                   // construct the complete expression `foo()` for the overloaded call,
        .                   // which will yield the &T type
      956 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
    1,434 ( 0.00%)          let fun = self.method_callee(expr, span, overloaded_callee);
    3,346 ( 0.00%)          let fun = self.thir.exprs.push(fun);
    1,434 ( 0.00%)          let fun_ty = self.thir[fun].ty;
    3,346 ( 0.00%)          let ref_expr = self.thir.exprs.push(Expr {
        .                       temp_lifetime,
        .                       ty: ref_ty,
        .                       span,
        .                       kind: ExprKind::Call { ty: fun_ty, fun, args, from_hir_call: false, fn_span: span },
        .                   });
        .           
        .                   // construct and return a deref wrapper `*foo()`
      478 ( 0.00%)          ExprKind::Deref { arg: ref_expr }
    1,912 ( 0.00%)      }
        .           
      352 ( 0.00%)      fn convert_captured_hir_place(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   place: HirPlace<'tcx>,
        .               ) -> Expr<'tcx> {
      128 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .                   let var_ty = place.base_ty;
        .           
        .                   // The result of capture analysis in `rustc_typeck/check/upvar.rs`represents a captured path
        .                   // as it's seen for use within the closure and not at the time of closure creation.
        .                   //
        .                   // That is we see expect to see it start from a captured upvar and not something that is local
        .                   // to the closure's parent.
       64 ( 0.00%)          let var_hir_id = match place.base {
       64 ( 0.00%)              HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,
        .                       base => bug!("Expected an upvar, found {:?}", base),
        .                   };
        .           
      544 ( 0.00%)          let mut captured_place_expr = Expr {
        .                       temp_lifetime,
        .                       ty: var_ty,
       32 ( 0.00%)              span: closure_expr.span,
      160 ( 0.00%)              kind: self.convert_var(var_hir_id),
        .                   };
        .           
        .                   for proj in place.projections.iter() {
        .                       let kind = match proj.kind {
        .                           HirProjectionKind::Deref => {
        .                               ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }
        .                           }
        .                           HirProjectionKind::Field(field, ..) => {
-- line 1071 ----------------------------------------
-- line 1082 ----------------------------------------
        .                           }
        .                       };
        .           
        .                       captured_place_expr =
        .                           Expr { temp_lifetime, ty: proj.ty, span: closure_expr.span, kind };
        .                   }
        .           
        .                   captured_place_expr
      288 ( 0.00%)      }
        .           
      320 ( 0.00%)      fn capture_upvar(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   captured_place: &'tcx ty::CapturedPlace<'tcx>,
        .                   upvar_ty: Ty<'tcx>,
        .               ) -> Expr<'tcx> {
        .                   let upvar_capture = captured_place.info.capture_kind;
        .                   let captured_place_expr =
      224 ( 0.00%)              self.convert_captured_hir_place(closure_expr, captured_place.place.clone());
       96 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .           
       64 ( 0.00%)          match upvar_capture {
        .                       ty::UpvarCapture::ByValue => captured_place_expr,
        .                       ty::UpvarCapture::ByRef(upvar_borrow) => {
      160 ( 0.00%)                  let borrow_kind = match upvar_borrow {
        .                               ty::BorrowKind::ImmBorrow => BorrowKind::Shared,
        .                               ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,
        .                               ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                           };
      224 ( 0.00%)                  Expr {
        .                               temp_lifetime,
        .                               ty: upvar_ty,
       32 ( 0.00%)                      span: closure_expr.span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind,
      480 ( 0.00%)                          arg: self.thir.exprs.push(captured_place_expr),
        .                               },
        .                           }
        .                       }
        .                   }
      288 ( 0.00%)      }
        .           
        .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
        .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
        .                   fields
        .                       .iter()
        .                       .map(|field| FieldExpr {
    1,665 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
        .                           expr: self.mirror_expr(field.expr),
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
        .           trait ToBorrowKind {
        .               fn to_borrow_kind(&self) -> BorrowKind;
        .           }
        .           
        .           impl ToBorrowKind for AutoBorrowMutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
   60,053 ( 0.00%)          match *self {
        .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
        .                           allow_two_phase_borrow: match allow_two_phase_borrow {
        .                               AllowTwoPhase::Yes => true,
        .                               AllowTwoPhase::No => false,
        .                           },
        .                       },
        .                       AutoBorrowMutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
        .           impl ToBorrowKind for hir::Mutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
      284 ( 0.00%)          match *self {
        .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                       hir::Mutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
      896 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
    4,032 ( 0.00%)      match op {
        .                   hir::BinOpKind::Add => BinOp::Add,
        .                   hir::BinOpKind::Sub => BinOp::Sub,
        .                   hir::BinOpKind::Mul => BinOp::Mul,
        .                   hir::BinOpKind::Div => BinOp::Div,
        .                   hir::BinOpKind::Rem => BinOp::Rem,
        .                   hir::BinOpKind::BitXor => BinOp::BitXor,
        .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
        .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
        .                   hir::BinOpKind::Eq => BinOp::Eq,
        .                   hir::BinOpKind::Lt => BinOp::Lt,
        .                   hir::BinOpKind::Le => BinOp::Le,
        .                   hir::BinOpKind::Ne => BinOp::Ne,
        .                   hir::BinOpKind::Ge => BinOp::Ge,
        .                   hir::BinOpKind::Gt => BinOp::Gt,
        .                   _ => bug!("no equivalent for ast binop {:?}", op),
        .               }
      896 ( 0.00%)  }

1,574,685 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs
--------------------------------------------------------------------------------
Ir                 

-- line 52 ----------------------------------------
        .                   &self,
        .                   _ecx: &InterpCx<'mir, 'tcx, M>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   Ok(*self)
        .               }
        .           
        .               #[inline(always)]
        .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
1,077,804 ( 0.01%)          mplace.into()
        .               }
        .           
        .               #[inline(always)]
        .               fn project_downcast(
        .                   &self,
        .                   ecx: &InterpCx<'mir, 'tcx, M>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, Self> {
-- line 68 ----------------------------------------
-- line 70 ----------------------------------------
        .               }
        .           
        .               #[inline(always)]
        .               fn project_field(
        .                   &self,
        .                   ecx: &InterpCx<'mir, 'tcx, M>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, Self> {
  683,808 ( 0.01%)          ecx.operand_field(self, field)
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>
        .               for MPlaceTy<'tcx, M::PointerTag>
        .           {
        .               #[inline(always)]
        .               fn layout(&self) -> TyAndLayout<'tcx> {
-- line 86 ----------------------------------------
-- line 87 ----------------------------------------
        .                   self.layout
        .               }
        .           
        .               #[inline(always)]
        .               fn to_op(
        .                   &self,
        .                   _ecx: &InterpCx<'mir, 'tcx, M>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
    9,885 ( 0.00%)          Ok((*self).into())
        .               }
        .           
        .               #[inline(always)]
        .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
        .                   mplace
        .               }
        .           
        .               #[inline(always)]
-- line 103 ----------------------------------------
-- line 170 ----------------------------------------
        .                       /// we are descending through.
        .                       #[inline(always)]
        .                       fn visit_field(
        .                           &mut self,
        .                           _old_val: &Self::V,
        .                           _field: usize,
        .                           new_val: &Self::V,
        .                       ) -> InterpResult<'tcx> {
  220,586 ( 0.00%)                  self.visit_value(new_val)
        .                       }
        .                       /// Called when recursing into an enum variant.
        .                       /// This gives the visitor the chance to track the stack of nested fields that
        .                       /// we are descending through.
        .                       #[inline(always)]
        .                       fn visit_variant(
        .                           &mut self,
        .                           _old_val: &Self::V,
        .                           _variant: VariantIdx,
        .                           new_val: &Self::V,
        .                       ) -> InterpResult<'tcx> {
        .                           self.visit_value(new_val)
        .                       }
        .           
        .                       // Default recursors. Not meant to be overloaded.
  265,241 ( 0.00%)              fn walk_aggregate(
        .                           &mut self,
        .                           v: &Self::V,
        .                           fields: impl Iterator<Item=InterpResult<'tcx, Self::V>>,
        .                       ) -> InterpResult<'tcx> {
        .                           // Now iterate over it.
  923,741 ( 0.01%)                  for (idx, field_val) in fields.enumerate() {
5,155,478 ( 0.06%)                      self.visit_field(v, idx, &field_val?)?;
        .                           }
        .                           Ok(())
  298,808 ( 0.00%)              }
1,142,820 ( 0.01%)              fn walk_value(&mut self, v: &Self::V) -> InterpResult<'tcx>
        .                       {
        .                           trace!("walk_value: type: {}", v.layout().ty);
        .           
        .                           // Special treatment for special types, where the (static) layout is not sufficient.
  780,905 ( 0.01%)                  match *v.layout().ty.kind() {
        .                               // If it is a trait object, switch to the real type that was used to create it.
        .                               ty::Dynamic(..) => {
        .                                   // immediate trait objects are not a thing
        .                                   let op = v.to_op(self.ecx())?;
        .                                   let dest = op.assert_mem_place();
        .                                   let inner = self.ecx().unpack_dyn_trait(&dest)?.1;
        .                                   trace!("walk_value: dyn object layout: {:#?}", inner.layout);
        .                                   // recurse with the inner type
-- line 218 ----------------------------------------
-- line 220 ----------------------------------------
        .                               },
        .                               // Slices do not need special handling here: they have `Array` field
        .                               // placement with length 0, so we enter the `Array` case below which
        .                               // indirectly uses the metadata to determine the actual length.
        .                               _ => {},
        .                           };
        .           
        .                           // Visit the fields of this value.
  975,019 ( 0.01%)                  match v.layout().fields {
        .                               FieldsShape::Primitive => {},
        .                               FieldsShape::Union(fields) => {
        .                                   self.visit_union(v, fields)?;
        .                               },
        .                               FieldsShape::Arbitrary { ref offsets, .. } => {
        .                                   // FIXME: We collect in a vec because otherwise there are lifetime
        .                                   // errors: Projecting to a field needs access to `ecx`.
        .                                   let fields: Vec<InterpResult<'tcx, Self::V>> =
  144,240 ( 0.00%)                              (0..offsets.len()).map(|i| {
  288,480 ( 0.00%)                                  v.project_field(self.ecx(), i)
        .                                       })
        .                                       .collect();
        .                                   self.visit_aggregate(v, fields.into_iter())?;
        .                               },
        .                               FieldsShape::Array { .. } => {
        .                                   // Let's get an mplace first.
   78,072 ( 0.00%)                          let op = v.to_op(self.ecx())?;
        .                                   let mplace = op.assert_mem_place();
        .                                   // Now we can go over all the fields.
        .                                   // This uses the *run-time length*, i.e., if we are a slice,
        .                                   // the dynamic info from the metadata is used.
   58,638 ( 0.00%)                          let iter = self.ecx().mplace_array_fields(&mplace)?
        .                                       .map(|f| f.and_then(|f| {
        .                                           Ok(Value::from_mem_place(f))
        .                                       }));
        .                                   self.visit_aggregate(v, iter)?;
        .                               }
        .                           }
        .           
  653,925 ( 0.01%)                  match v.layout().variants {
        .                               // If this is a multi-variant layout, find the right variant and proceed
        .                               // with *its* fields.
        .                               Variants::Multiple { .. } => {
        .                                   let op = v.to_op(self.ecx())?;
        .                                   let idx = self.read_discriminant(&op)?;
        .                                   let inner = v.project_downcast(self.ecx(), idx)?;
        .                                   trace!("walk_value: variant layout: {:#?}", inner.layout());
        .                                   // recurse with the inner type
        .                                   self.visit_variant(v, idx, &inner)
        .                               }
        .                               // For single-variant layouts, we already did anything there is to do.
        .                               Variants::Single { .. } => Ok(())
        .                           }
1,142,820 ( 0.01%)              }
        .                   }
        .               }
        .           }
        .           
        .           make_value_visitor!(ValueVisitor,);
        .           make_value_visitor!(MutValueVisitor, mut);

  194,812 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .               const_freshen_count: u32,
        .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
        .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
        .               keep_static: bool,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
        .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
1,767,685 ( 0.02%)          TypeFreshener {
        .                       infcx,
        .                       ty_freshen_count: 0,
        .                       const_freshen_count: 0,
        .                       ty_freshen_map: Default::default(),
        .                       const_freshen_map: Default::default(),
        .                       keep_static,
        .                   }
        .               }
        .           
1,353,160 ( 0.02%)      fn freshen_ty<F>(
        .                   &mut self,
        .                   opt_ty: Option<Ty<'tcx>>,
        .                   key: ty::InferTy,
        .                   freshener: F,
        .               ) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferTy,
        .               {
  338,290 ( 0.00%)          if let Some(ty) = opt_ty {
        .                       return ty.fold_with(self);
        .                   }
        .           
   42,014 ( 0.00%)          match self.ty_freshen_map.entry(key) {
    2,137 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
   18,870 ( 0.00%)                  let index = self.ty_freshen_count;
   75,480 ( 0.00%)                  self.ty_freshen_count += 1;
   37,740 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
        .                           entry.insert(t);
        .                           t
        .                       }
        .                   }
  189,063 ( 0.00%)      }
        .           
        .               fn freshen_const<F>(
        .                   &mut self,
        .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
        .                   key: ty::InferConst<'tcx>,
        .                   freshener: F,
        .                   ty: Ty<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
        .                           ct
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  601,644 ( 0.01%)          self.infcx.tcx
  188,847 ( 0.00%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  333,760 ( 0.00%)          match *r {
        .                       ty::ReLateBound(..) => {
        .                           // leave bound regions alone
        .                           r
        .                       }
        .           
        .                       ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReVar(_)
        .                       | ty::RePlaceholder(..)
        .                       | ty::ReEmpty(_)
        .                       | ty::ReErased => {
        .                           // replace all free regions with 'erased
        .                           self.tcx().lifetimes.re_erased
        .                       }
        .                       ty::ReStatic => {
    4,052 ( 0.00%)                  if self.keep_static {
        .                               r
        .                           } else {
        .                               self.tcx().lifetimes.re_erased
        .                           }
        .                       }
        .                   }
       58 ( 0.00%)      }
        .           
3,771,720 ( 0.04%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,885,860 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
        .                       return t;
        .                   }
        .           
        .                   let tcx = self.infcx.tcx;
        .           
1,962,104 ( 0.02%)          match *t.kind() {
  167,673 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
1,341,384 ( 0.02%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
1,509,057 ( 0.02%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
        .                       }
        .           
    5,888 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
   11,776 ( 0.00%)                  self.infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .probe_value(v)
        .                               .map(|v| v.to_type(tcx)),
        .                           ty::IntVar(v),
        .                           ty::FreshIntTy,
        .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Closure(..)
        .                       | ty::GeneratorWitness(..)
  721,744 ( 0.01%)              | ty::Opaque(..) => t.super_fold_with(self),
        .           
        .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
        .                   }
2,595,103 ( 0.03%)      }
        .           
    5,988 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    5,988 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
        .                           let opt_ct = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .probe_value(v)
        .                               .val
-- line 233 ----------------------------------------
-- line 256 ----------------------------------------
        .                       }
        .           
        .                       ty::ConstKind::Param(_)
        .                       | ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Unevaluated(..)
        .                       | ty::ConstKind::Error(_) => {}
        .                   }
        .           
    7,984 ( 0.00%)          ct.super_fold_with(self)
        .               }
        .           }

  908,217 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .           ///
        .           /// It's very easy to produce a deeply
        .           /// nested type tree with a lot of
        .           /// identical subtrees. In order to work efficiently
        .           /// in this situation walker only visits each type once.
        .           /// It maintains a set of visited types and
        .           /// skips any types that are already there.
        .           impl<'tcx> TypeWalker<'tcx> {
  156,115 ( 0.00%)      pub fn new(root: GenericArg<'tcx>) -> Self {
  624,460 ( 0.01%)          Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }
  156,115 ( 0.00%)      }
        .           
        .               /// Skips the subtree corresponding to the last type
        .               /// returned by `next()`.
        .               ///
        .               /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.
        .               ///
        .               /// ```
        .               /// let mut iter: TypeWalker = ...;
        .               /// iter.next(); // yields Foo
        .               /// iter.next(); // yields Bar<i32>
        .               /// iter.skip_current_subtree(); // skips i32
        .               /// iter.next(); // yields usize
        .               /// ```
        .               pub fn skip_current_subtree(&mut self) {
    1,088 ( 0.00%)          self.stack.truncate(self.last_subtree);
      544 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Iterator for TypeWalker<'tcx> {
        .               type Item = GenericArg<'tcx>;
        .           
4,270,050 ( 0.05%)      fn next(&mut self) -> Option<GenericArg<'tcx>> {
        .                   debug!("next(): stack={:?}", self.stack);
        .                   loop {
  718,420 ( 0.01%)              let next = self.stack.pop()?;
  359,210 ( 0.00%)              self.last_subtree = self.stack.len();
  718,420 ( 0.01%)              if self.visited.insert(next) {
  955,005 ( 0.01%)                  push_inner(&mut self.stack, next);
        .                           debug!("next: stack={:?}", self.stack);
        .                           return Some(next);
        .                       }
        .                   }
3,321,150 ( 0.04%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               /// Iterator that walks `self` and any types reachable from
        .               /// `self`, in depth-first order. Note that just walks the types
        .               /// that appear in `self`, it does not descend into the fields of
        .               /// structs or variants. For example:
        .               ///
        .               /// ```text
        .               /// isize => { isize }
        .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
        .               /// [isize] => { [isize], isize }
        .               /// ```
   52,200 ( 0.00%)      pub fn walk(self) -> TypeWalker<'tcx> {
   26,100 ( 0.00%)          TypeWalker::new(self)
   78,300 ( 0.00%)      }
        .           
        .               /// Iterator that walks the immediate children of `self`. Hence
        .               /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`
        .               /// (but not `i32`, like `walk`).
        .               ///
        .               /// Iterator only walks items once.
        .               /// It accepts visited set, updates it with all visited types
        .               /// and skips any types that are already there.
  227,820 ( 0.00%)      pub fn walk_shallow(
        .                   self,
        .                   visited: &mut SsoHashSet<GenericArg<'tcx>>,
        .               ) -> impl Iterator<Item = GenericArg<'tcx>> {
        .                   let mut stack = SmallVec::new();
   45,564 ( 0.00%)          push_inner(&mut stack, self);
   91,128 ( 0.00%)          stack.retain(|a| visited.insert(*a));
  501,204 ( 0.01%)          stack.into_iter()
  227,820 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> super::TyS<'tcx> {
        .               /// Iterator that walks `self` and any types reachable from
        .               /// `self`, in depth-first order. Note that just walks the types
        .               /// that appear in `self`, it does not descend into the fields of
        .               /// structs or variants. For example:
        .               ///
        .               /// ```text
        .               /// isize => { isize }
        .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
        .               /// [isize] => { [isize], isize }
        .               /// ```
  260,030 ( 0.00%)      pub fn walk(&'tcx self) -> TypeWalker<'tcx> {
  130,015 ( 0.00%)          TypeWalker::new(self.into())
  390,045 ( 0.00%)      }
        .           }
        .           
        .           /// We push `GenericArg`s on the stack in reverse order so as to
        .           /// maintain a pre-order traversal. As of the time of this
        .           /// writing, the fact that the traversal is pre-order is not
        .           /// known to be significant to any code, but it seems like the
        .           /// natural order one would expect (basically, the order of the
        .           /// types as they are written).
2,183,394 ( 0.02%)  fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {
        .               match parent.unpack() {
1,596,860 ( 0.02%)          GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {
        .                       ty::Bool
        .                       | ty::Char
        .                       | ty::Int(_)
        .                       | ty::Uint(_)
        .                       | ty::Float(_)
        .                       | ty::Str
        .                       | ty::Infer(_)
        .                       | ty::Param(_)
        .                       | ty::Never
        .                       | ty::Error(_)
        .                       | ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Foreign(..) => {}
        .           
   14,404 ( 0.00%)              ty::Array(ty, len) => {
   21,606 ( 0.00%)                  stack.push(len.into());
        .                           stack.push(ty.into());
        .                       }
        .                       ty::Slice(ty) => {
        .                           stack.push(ty.into());
        .                       }
        .                       ty::RawPtr(mt) => {
        .                           stack.push(mt.ty.into());
        .                       }
   67,862 ( 0.00%)              ty::Ref(lt, ty, _) => {
   67,862 ( 0.00%)                  stack.push(ty.into());
        .                           stack.push(lt.into());
        .                       }
    1,304 ( 0.00%)              ty::Projection(data) => {
        .                           stack.extend(data.substs.iter().rev());
        .                       }
    1,870 ( 0.00%)              ty::Dynamic(obj, lt) => {
    1,870 ( 0.00%)                  stack.push(lt.into());
    1,870 ( 0.00%)                  stack.extend(obj.iter().rev().flat_map(|predicate| {
        .                               let (substs, opt_ty) = match predicate.skip_binder() {
        .                                   ty::ExistentialPredicate::Trait(tr) => (tr.substs, None),
        .                                   ty::ExistentialPredicate::Projection(p) => (p.substs, Some(p.term)),
        .                                   ty::ExistentialPredicate::AutoTrait(_) =>
        .                                   // Empty iterator
        .                                   {
        .                                       (ty::InternalSubsts::empty(), None)
        .                                   }
-- line 165 ----------------------------------------
-- line 170 ----------------------------------------
        .                                   ty::Term::Const(ct) => ct.into(),
        .                               }))
        .                           }));
        .                       }
        .                       ty::Adt(_, substs)
        .                       | ty::Opaque(_, substs)
        .                       | ty::Closure(_, substs)
        .                       | ty::Generator(_, substs, _)
   43,653 ( 0.00%)              | ty::Tuple(substs)
        .                       | ty::FnDef(_, substs) => {
        .                           stack.extend(substs.iter().rev());
        .                       }
        .                       ty::GeneratorWitness(ts) => {
        .                           stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));
        .                       }
    7,114 ( 0.00%)              ty::FnPtr(sig) => {
   24,899 ( 0.00%)                  stack.push(sig.skip_binder().output().into());
   28,456 ( 0.00%)                  stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));
        .                       }
        .                   },
        .                   GenericArgKind::Lifetime(_) => {}
        .                   GenericArgKind::Const(parent_ct) => {
        .                       stack.push(parent_ct.ty.into());
   14,412 ( 0.00%)              match parent_ct.val {
        .                           ty::ConstKind::Infer(_)
        .                           | ty::ConstKind::Param(_)
        .                           | ty::ConstKind::Placeholder(_)
        .                           | ty::ConstKind::Bound(..)
        .                           | ty::ConstKind::Value(_)
        .                           | ty::ConstKind::Error(_) => {}
        .           
        4 ( 0.00%)                  ty::ConstKind::Unevaluated(ct) => {
        .                               stack.extend(ct.substs.iter().rev());
        .                           }
        .                       }
        .                   }
        .               }
  999,975 ( 0.01%)  }

1,846,058 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
1,584,949 ( 0.02%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
    5,346 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
    8,910 ( 0.00%)      }
    3,162 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
    3,162 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
       48 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
    3,978 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
      527 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
   49,767 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
      527 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
   14,800 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
   11,840 ( 0.00%)          let (trait_ref, assoc_substs) =
    2,960 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
   13,320 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      384 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       56 ( 0.00%)                  term.visit_with(self)?;
      412 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
   27,930 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
   31,920 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
3,630,783 ( 0.04%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  404,651 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
2,013,383 ( 0.02%)          match *ty.kind() {
  225,847 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
1,040,430 ( 0.01%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
  233,637 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
  347,212 ( 0.00%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   21,496 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
    5,722 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
    2,744 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
   13,678 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
      448 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
    3,584 ( 0.00%)                  for predicate in predicates {
    2,688 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
    2,688 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
        .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
        .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
      896 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
    5,376 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
      656 ( 0.00%)              ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
      656 ( 0.00%)                  if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
        .                               // visibilities of type aliases) and recurse into bounds instead to go
        .                               // through the trait list (default type visitor doesn't visit those traits).
        .                               // All traits in the list are considered the "primary" part of the type
        .                               // and are visited by shallow visitors.
       24 ( 0.00%)                      self.visit_predicates(ty::GenericPredicates {
        .                                   parent: None,
        .                                   predicates: tcx.explicit_item_bounds(def_id),
        .                               })?;
        .                           }
        .                       }
        .                       // These types don't have their own def-ids (but may have subcomponents
        .                       // with def-ids that should be visited recursively).
        .                       ty::Bool
-- line 254 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
1,177,994 ( 0.01%)              ty.super_visit_with(self)
        .                   }
3,585,236 ( 0.04%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   85,950 ( 0.00%)          self.visit_ty(c.ty)?;
   14,325 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  100,275 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    1,913 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    3,885 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
   13,331 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   17,731 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
   12,474 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
    5,940 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    1,782 ( 0.00%)          find.visit(tcx.type_of(def_id));
    5,346 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
      527 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
    1,456 ( 0.00%)          find.min
   14,256 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
   12,096 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    5,184 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   17,280 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
    6,708 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
    6,708 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    2,396 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
    5,138 ( 0.00%)              find.min,
        .                   )
    8,944 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
   27,432 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
   27,432 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
    6,008 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
   30,328 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
    1,055 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
    9,344 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        2 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
        6 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
       14 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
        .                       return;
        .                   }
        .           
        .                   let item_def_id = local_def_id.to_def_id();
        .                   let macro_module_def_id =
        .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
        .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
        .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    7,770 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   26,748 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    5,944 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
    7,128 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    1,188 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
    7,136 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
   15,361 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
       84 ( 0.00%)                  for variant in def.variants {
    1,248 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
    1,664 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
      832 ( 0.00%)                      for field in variant.data.fields() {
      620 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
    3,564 ( 0.00%)                  for impl_item_ref in impl_.items {
    7,286 ( 0.00%)                      if impl_.of_trait.is_some()
    1,484 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
    2,704 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
       24 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
      152 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
      504 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
      252 ( 0.00%)                  for field in def.fields() {
    1,168 ( 0.00%)                      if field.vis.node.is_pub() {
      512 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        4 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
        .                                   self.update(foreign_item.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
   14,860 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)
        .                           // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,
        .                           // mark this as unreachable.
        .                           // See https://github.com/rust-lang/rust/issues/75100
       32 ( 0.00%)                  if !self.tcx.sess.opts.actually_rustdoc {
        .                               // FIXME: This is some serious pessimization intended to workaround deficiencies
        .                               // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time
        .                               // reachable if they are returned via `impl Trait`, even from private functions.
        .                               let exist_level =
        .                                   cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));
       24 ( 0.00%)                      self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
    1,132 ( 0.00%)                  if item_level.is_some() {
       36 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        8 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        8 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
       76 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
      152 ( 0.00%)                          reach.generics().predicates();
        .           
       62 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
       16 ( 0.00%)                              && !trait_item_ref.defaultness.has_value()
        .                                   {
        .                                       // No type to visit.
        .                                   } else {
       60 ( 0.00%)                              reach.ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
    1,188 ( 0.00%)                  if item_level.is_some() {
   10,020 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
    1,002 ( 0.00%)                      for impl_item_ref in impl_.items {
    3,384 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
    5,484 ( 0.00%)                          if impl_item_level.is_some() {
   11,040 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
       84 ( 0.00%)                  if item_level.is_some() {
      480 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
       84 ( 0.00%)                  for variant in def.variants {
    3,744 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
      416 ( 0.00%)                      if variant_level.is_some() {
      668 ( 0.00%)                          for field in variant.data.fields() {
    1,260 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
      668 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      126 ( 0.00%)                  if item_level.is_some() {
      752 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
      188 ( 0.00%)                      for field in struct_def.fields() {
    1,582 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
      678 ( 0.00%)                          let field_level = self.get(def_id);
      226 ( 0.00%)                          if field_level.is_some() {
      640 ( 0.00%)                              self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    8,916 ( 0.00%)          intravisit::walk_item(self, item);
    2,972 ( 0.00%)          self.prev_level = orig_level;
   23,776 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
   16,296 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    9,312 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
      292 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
       18 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       18 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
   20,952 ( 0.00%)      }
        .           
   11,640 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
    6,984 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
   13,968 ( 0.00%)      }
        .           
   11,450 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    7,010 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
   13,740 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
    6,012 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   32,490 ( 0.00%)          self.ev.tcx
        .               }
   39,870 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   23,922 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
   25,035 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
    6,280 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
   55,818 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
   16,350 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
    3,270 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
    2,144 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
    7,504 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    1,072 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
   13,080 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,356 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    7,694 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    9,000 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
    1,181 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,486 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    4,429 ( 0.00%)          intravisit::walk_item(self, item);
    1,486 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
1,129,239 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  250,942 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    1,602 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
      801 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    2,403 ( 0.00%)              let variant = adt.variant_of_res(res);
    1,068 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
       24 ( 0.00%)                          self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        9 ( 0.00%)                          Some(field) => (field.ident.span, field.span),
        6 ( 0.00%)                          None => (base.span, base.span),
        .                               };
       60 ( 0.00%)                      self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
      552 ( 0.00%)                      let use_ctxt = field.ident.span;
    4,020 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
    6,072 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
1,254,710 ( 0.01%)          intravisit::walk_expr(self, expr);
        .               }
        .           
   67,576 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   17,653 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
    5,313 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
    3,036 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
    6,072 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
    1,077 ( 0.00%)                  let use_ctxt = field.ident.span;
    7,443 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   10,770 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
   76,023 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  950,369 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
  135,767 ( 0.00%)          self.span = span;
  135,767 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  543,068 ( 0.01%)              self.visit(typeck_results.node_type(id))?;
1,086,136 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
1,221,903 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
1,086,136 ( 0.01%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  141,506 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,356 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
   15,000 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    4,500 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    9,000 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
    1,500 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   12,000 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
    9,432 ( 0.00%)          match generic_arg {
    2,352 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
   63,693 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   18,198 ( 0.00%)          self.span = hir_ty.span;
   27,297 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
    4,758 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
   22,539 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   27,297 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   54,594 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
    4,776 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    1,791 ( 0.00%)          self.span = trait_ref.path.span;
      597 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
      597 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
      597 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
    1,791 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
    5,373 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    4,179 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
    3,666 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
       72 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
       48 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
    4,776 ( 0.00%)      }
        .           
        .               // Check types of expressions
1,129,239 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
1,129,239 ( 0.01%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  867,773 ( 0.01%)          match expr.kind {
    1,080 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
    6,776 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
    2,203 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
    4,406 ( 0.00%)                  self.span = segment.ident.span;
   13,218 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
    6,609 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
  376,413 ( 0.00%)          intravisit::walk_expr(self, expr);
1,003,768 ( 0.01%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  187,670 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   37,534 ( 0.00%)          let def = match qpath {
   50,346 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   45,696 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
    1,985 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
   17,523 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   19,114 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
    6,996 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
    3,646 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  206,437 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
   52,068 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
   27,723 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
    5,345 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    3,207 ( 0.00%)          if let Some(init) = local.init {
    6,167 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
    3,512 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,486 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    4,429 ( 0.00%)          intravisit::walk_item(self, item);
    1,486 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,652 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  792,798 ( 0.01%)          self.tcx
        .               }
1,061,295 ( 0.01%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  636,777 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    2,216 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    6,669 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    5,646 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
      941 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
    4,457 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    3,418 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
    4,432 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
       22 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
       11 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    1,435 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
      198 ( 0.00%)          match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    3,094 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    2,472 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
       50 ( 0.00%)              if self.at_outer_type {
      526 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
    1,079 ( 0.00%)          self.at_outer_type = false;
    1,104 ( 0.00%)          intravisit::walk_ty(self, ty)
    2,108 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,085 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   12,600 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    5,600 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
        8 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
       18 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
        .                               return;
        .                           }
        .           
        .                           for bound in bounds.iter() {
        .                               self.check_generic_bound(bound)
        .                           }
        .                       }
        .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
    2,376 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
      594 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
    1,581 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
       24 ( 0.00%)                              self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
       67 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
      920 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      795 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
    1,142 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
    1,040 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
       44 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
    1,122 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    1,155 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
      407 ( 0.00%)                                          if self
      187 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
    1,428 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
      476 ( 0.00%)                              for impl_item_ref in impl_.items {
    1,975 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    3,135 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
      222 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        3 ( 0.00%)                      for impl_item_ref in impl_.items {
       60 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
       30 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
       50 ( 0.00%)                              let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      129 ( 0.00%)                              match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           AssocItemKind::Fn { has_self: false } => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           _ => {}
        .                                       }
        .                                   }
        .                               }
        6 ( 0.00%)                      if found_pub_static {
        3 ( 0.00%)                          intravisit::walk_generics(self, &impl_.generics)
        .                               }
        .                           }
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
    4,569 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
    6,300 ( 0.00%)          intravisit::walk_item(self, item);
    6,160 ( 0.00%)      }
        .           
    2,208 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
       17 ( 0.00%)              for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
      276 ( 0.00%)          for predicate in generics.where_clause.predicates {
        6 ( 0.00%)              match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        2 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
    2,208 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    8,337 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    5,492 ( 0.00%)              if self.path_is_private_type(path) {
        6 ( 0.00%)                  self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
    9,421 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
    1,400 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
    1,742 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
      167 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
      167 ( 0.00%)              self.in_variant = false;
        .                   }
    1,225 ( 0.00%)      }
        .           
      945 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
    1,006 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
      220 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
   11,515 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    4,935 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      530 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
       46 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       46 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
   13,160 ( 0.00%)      }
        .           
    8,205 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    3,282 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
    9,846 ( 0.00%)      }
        .           
       45 ( 0.00%)      fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
       18 ( 0.00%)              predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
       45 ( 0.00%)      }
        .           
    8,630 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    3,452 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
    8,630 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
   20,376 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
   11,541 ( 0.00%)          let hir_id = match def_id.as_local() {
    3,570 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
    5,878 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
   13,203 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   10,023 ( 0.00%)          self.tcx
        .               }
   70,416 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
   39,609 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   15,548 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    1,170 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
    2,187 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
   11,687 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
    1,798 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
       44 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
    1,798 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    3,596 ( 0.00%)          check.generics().predicates();
       49 ( 0.00%)          if check_ty {
      894 ( 0.00%)              check.ty();
        .                   }
    7,192 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      915 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   13,374 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,486 ( 0.00%)          let tcx = self.tcx;
    1,486 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
    7,430 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
    3,396 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
       20 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
       16 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
       16 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
      228 ( 0.00%)                      self.check_assoc_item(
       38 ( 0.00%)                          trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
        .                                   trait_item_ref.defaultness,
        .                                   item_visibility,
        .                               );
        .           
       96 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
       30 ( 0.00%)                          self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
      168 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       42 ( 0.00%)                  for variant in def.variants {
      208 ( 0.00%)                      for field in variant.data.fields() {
    1,440 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      252 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
      189 ( 0.00%)                  for field in struct_def.fields() {
      876 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
      438 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
    2,376 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
    1,188 ( 0.00%)                  if impl_.of_trait.is_none() {
      335 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
      594 ( 0.00%)                  for impl_item_ref in impl_.items {
      823 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      371 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
    4,795 ( 0.00%)                      self.check_assoc_item(
      861 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
   11,888 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   28,053 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    3,117 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
    5,022 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
    6,471 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
      378 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
       53 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
      318 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
    6,370 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
      490 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
   24,936 ( 0.00%)  }
        .           
      232 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
      116 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
      261 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
      174 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
      232 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
       30 ( 0.00%)              if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
       65 ( 0.00%)              let parent = tcx.hir().get_parent_node(id);
       40 ( 0.00%)              if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

1,491,181 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,657,068 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      109 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,060 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        8 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,207 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       58 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      232 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,472 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       41 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       41 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    7,188 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,772 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        9 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      203 ( 0.00%)      fn from(p: PathBuf) -> Self {
       58 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      174 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      203 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
      164 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      246 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      246 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      205 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,110 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       29 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       58 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       45 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
       18 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       45 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       20 ( 0.00%)      pub lo: BytePos,
       20 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       27 ( 0.00%)      pub ctxt: SyntaxContext,
        9 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
1,589,013 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    6,321 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
  145,792 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  109,344 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  145,792 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
        .           ///
        .           /// Spans have two orthogonal attributes:
        .           ///
        .           /// - They can be *primary spans*. In this case they are the locus of
        .           ///   the error, and would be rendered with `^^^`.
        .           /// - They can have a *label*. In this case, the label is written next
        .           ///   to the mark in the snippet when we render.
       73 ( 0.00%)  #[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]
        .           pub struct MultiSpan {
        .               primary_spans: Vec<Span>,
       18 ( 0.00%)      span_labels: Vec<(Span, String)>,
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  554,094 ( 0.01%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  369,396 ( 0.00%)      }
        .               #[inline]
   10,300 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   10,300 ( 0.00%)      }
        .               #[inline]
   50,031 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   33,354 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   23,155 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   13,893 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
        6 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
        4 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      741 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      494 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
   18,963 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
   12,642 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
        .               /// Returns `true` if the spans are equal with regards to the source text.
        .               ///
        .               /// Use this instead of `==` when either span could be generated code,
        .               /// and you only care that they point to the same bytes of source text.
       54 ( 0.00%)      pub fn source_equal(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
       18 ( 0.00%)          span.lo == other.lo && span.hi == other.hi
       36 ( 0.00%)      }
        .           
        .               /// Returns `Some(span)`, where the start is trimmed by the end of `other`.
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    9,210 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    4,605 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
   10,131 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   54,243 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   36,162 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   10,595 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    7,378 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    8,742 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    6,180 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
    1,236 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    4,944 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   37,387 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   32,046 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   26,705 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      945 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    1,134 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      756 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
       12 ( 0.00%)      pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
       48 ( 0.00%)                  let expn_data = self.ctxt().outer_expn_data();
       20 ( 0.00%)                  if expn_data.is_root() {
        4 ( 0.00%)                      return None;
        .                           }
        .           
       24 ( 0.00%)                  let is_recursive = expn_data.call_site.source_equal(prev_span);
        .           
        2 ( 0.00%)                  prev_span = self;
        2 ( 0.00%)                  self = expn_data.call_site;
        .           
        .                           // Don't print recursive invocations.
       12 ( 0.00%)                  if !is_recursive {
       44 ( 0.00%)                      return Some(expn_data);
        .                           }
        .                       }
        .                   })
       24 ( 0.00%)      }
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
2,130,964 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  383,125 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    4,321 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    3,951 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
1,326,220 ( 0.02%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
1,743,516 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,485 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      945 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    1,080 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    6,072 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    1,104 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    3,864 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    4,968 ( 0.00%)      }
        .           
      803 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      511 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    7,466 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       56 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   45,132 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   26,327 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   34,479 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  164,403 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  109,602 ( 0.00%)          let mut span = self.data();
   90,355 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  164,403 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  181,690 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      904 ( 0.00%)          let mut span = self.data();
    1,808 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    3,616 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  164,568 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  143,997 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1044 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)
        .               }
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        2 ( 0.00%)          MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    9,050 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      455 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      961 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
       28 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
       48 ( 0.00%)      pub fn has_primary_spans(&self) -> bool {
       12 ( 0.00%)          self.primary_spans.iter().any(|sp| !sp.is_dummy())
       56 ( 0.00%)      }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
        .                   let mut is_dummy = true;
        .                   for span in &self.primary_spans {
        .                       if !span.is_dummy() {
        .                           is_dummy = false;
        .                       }
-- line 1089 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   replacements_occurred
        .               }
        .           
        .               /// Returns the strings to highlight. We always ensure that there
        .               /// is an entry for each of the primary spans -- for each primary
        .               /// span `P`, if there is at least one label with span `P`, we return
        .               /// those labels (marked as primary). But otherwise we return
        .               /// `SpanLabel` instances with empty labels.
      196 ( 0.00%)      pub fn span_labels(&self) -> Vec<SpanLabel> {
       28 ( 0.00%)          let is_primary = |span| self.primary_spans.contains(&span);
        .           
        .                   let mut span_labels = self
        .                       .span_labels
        .                       .iter()
        .                       .map(|&(span, ref label)| SpanLabel {
        .                           span,
        .                           is_primary: is_primary(span),
        .                           label: Some(label.clone()),
        .                       })
        .                       .collect::<Vec<_>>();
        .           
       16 ( 0.00%)          for &span in &self.primary_spans {
        .                       if !span_labels.iter().any(|sl| sl.span == span) {
        .                           span_labels.push(SpanLabel { span, is_primary: true, label: None });
        .                       }
        .                   }
        .           
        .                   span_labels
      196 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the span labels is displayable.
       24 ( 0.00%)      pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
       28 ( 0.00%)      }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    9,050 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    9,050 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      455 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      364 ( 0.00%)          MultiSpan::from_spans(spans)
      455 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
  504,240 ( 0.01%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
   49,826 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
        .           
        .           impl NonNarrowChar {
        .               fn new(pos: BytePos, width: usize) -> Self {
   17,986 ( 0.00%)          match width {
        .                       0 => NonNarrowChar::ZeroWidth(pos),
        .                       2 => NonNarrowChar::Wide(pos),
        .                       4 => NonNarrowChar::Tab(pos),
        .                       _ => panic!("width {} given for non-narrow character", width),
        .                   }
        .               }
        .           
        .               /// Returns the absolute offset of the character in the `SourceMap`.
-- line 1188 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      540 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      468 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       87 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    1,441 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,074 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      174 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,148 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
      120 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        2 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
      118 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    1,682 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       29 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       29 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       29 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      116 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       58 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       58 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       87 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      319 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,833 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      537 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  890,610 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,074 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,907 ( 0.00%)              SourceFile {
    4,296 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,148 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,148 ( 0.00%)                  lines,
    2,148 ( 0.00%)                  multibyte_chars,
    2,148 ( 0.00%)                  non_narrow_chars,
    2,148 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,833 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      418 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
      114 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       76 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       76 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
      114 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      456 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       76 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      646 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      418 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      152 ( 0.00%)              lines,
      152 ( 0.00%)              multibyte_chars,
      152 ( 0.00%)              non_narrow_chars,
      152 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      342 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
   11,753 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    1,687 ( 0.00%)          if matches!(
    3,358 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        2 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        6 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
       10 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        2 ( 0.00%)                      if self.src_hash.matches(&src) {
        6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
       16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    1,677 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   15,111 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
      196 ( 0.00%)      pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      182 ( 0.00%)          fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
        .                       let slice = &src[begin..];
        .                       match slice.find('\n') {
        .                           Some(e) => &slice[..e],
        .                           None => slice,
        .                       }
      208 ( 0.00%)          }
        .           
        .                   let begin = {
       28 ( 0.00%)              let line = self.lines.get(line_number)?;
       28 ( 0.00%)              let begin: BytePos = *line - self.start_pos;
        .                       begin.to_usize()
        .                   };
        .           
       84 ( 0.00%)          if let Some(ref src) = self.src {
       90 ( 0.00%)              Some(Cow::from(get_until_newline(src, begin)))
       10 ( 0.00%)          } else if let Some(src) = self.external_src.borrow().get_source() {
       24 ( 0.00%)              Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        4 ( 0.00%)              None
        .                   }
      224 ( 0.00%)      }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      555 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  245,747 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   70,618 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  157,672 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
  106,185 ( 0.00%)          assert!(line_index < self.lines.len());
  154,791 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      261 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
  103,000 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1678 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.start_pos == self.end_pos
        .               }
        .           
        .               /// Calculates the original byte position relative to the start of the file
        .               /// based on the given byte position.
       16 ( 0.00%)      pub fn original_relative_byte_pos(&self, pos: BytePos) -> BytePos {
        .                   // Diff before any records is 0. Otherwise use the previously recorded
        .                   // diff as that applies to the following characters until a new diff
        .                   // is recorded.
        .                   let diff = match self.normalized_pos.binary_search_by(|np| np.pos.cmp(&pos)) {
        .                       Ok(i) => self.normalized_pos[i].diff,
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
       64 ( 0.00%)          BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
       48 ( 0.00%)      }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      106 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      318 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      156 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
       96 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
       80 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      636 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      530 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      212 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      371 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      106 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       52 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       53 ( 0.00%)                  let linebpos = self.lines[a];
      106 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       53 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      424 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      424 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      159 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      106 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       53 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
       66 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      265 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      371 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      400 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      360 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       40 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       40 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  515,253 ( 0.01%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   23,971 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  955,058 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
3,329,172 ( 0.04%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
6,997,872 ( 0.08%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1939 ----------------------------------------
        .               /// Because of multibyte UTF-8 characters, a byte offset
        .               /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]
        .               /// values to `CharPos` values as necessary.
        .               #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
        .               pub struct CharPos(pub usize);
        .           }
        .           
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
   22,520 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
   27,024 ( 0.00%)      }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  221,926 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
       16 ( 0.00%)  #[derive(Debug, Clone)]
        .           pub struct Loc {
        .               /// Information about the original source.
        .               pub file: Lrc<SourceFile>,
        .               /// The (1-based) line number.
        4 ( 0.00%)      pub line: usize,
        .               /// The (0-based) column offset.
        .               pub col: CharPos,
        .               /// The (0-based) column offset when displayed.
        4 ( 0.00%)      pub col_display: usize,
        .           }
        .           
        .           // Used to be structural records.
        .           #[derive(Debug)]
        .           pub struct SourceFileAndLine {
        .               pub sf: Lrc<SourceFile>,
        .               /// Index of line, starting from 0.
        .               pub line: usize,
-- line 1980 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        6 ( 0.00%)      pub start: usize,
        4 ( 0.00%)      pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      516 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      258 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
2,344,916 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  373,466 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
1,971,450 ( 0.02%)          let span = self.data_untracked();
  889,586 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
1,004,964 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  673,548 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  662,832 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
1,325,664 ( 0.02%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  662,832 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  331,416 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  331,416 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
2,679,904 ( 0.03%)      }
        .           }

6,923,513 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
2,800,498 ( 0.03%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  981,460 ( 0.01%)      Token(Token),
        .               /// A delimited sequence of token trees.
  115,818 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
    1,406 ( 0.00%)          match self {
      801 ( 0.00%)              TokenTree::Token(token) => token.span,
      820 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
      499 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
    1,406 ( 0.00%)          match self {
      499 ( 0.00%)              TokenTree::Token(token) => token.span = span,
      408 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
      703 ( 0.00%)      }
        .           
      231 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  416,352 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
      231 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
   52,042 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  156,126 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   52,042 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   51,815 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  155,445 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   51,815 ( 0.00%)      }
        .           
    7,722 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    5,148 ( 0.00%)          match self {
   23,166 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
   10,296 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
    6,930 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   18,092 ( 0.00%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
    6,160 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
  103,332 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  103,332 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
        .               pub fn to_tokenstream(&self) -> TokenStream {
        .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  289,216 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
      420 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
  160,327 ( 0.00%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
        .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
   50,861 ( 0.00%)          self.0.is_empty()
   50,861 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  420,697 ( 0.00%)          self.0.len()
      210 ( 0.00%)      }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
    1,829 ( 0.00%)          self.clone().into_trees()
    3,658 ( 0.00%)      }
        .           
   59,803 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
  119,606 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
      210 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
    4,218 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
  118,752 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
  217,902 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
  158,336 ( 0.00%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
1,903,465 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
1,260,831 ( 0.01%)          if self.index < self.stream.len() {
  604,454 ( 0.01%)              self.index += 1;
1,898,722 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
  218,894 ( 0.00%)              None
        .                   }
2,284,158 ( 0.03%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
  265,582 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  531,164 ( 0.01%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  531,164 ( 0.01%)      }
        .           }
        .           
  154,427 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
       11 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
       22 ( 0.00%)      }
        .           
  101,722 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
   50,861 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
    3,753 ( 0.00%)      }
        .           
    8,128 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
    6,096 ( 0.00%)      }
        .           }

   16,799 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 767 ----------------------------------------
         .           /// `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_or_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(orps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_or_si128(a: __m128i, b: __m128i) -> __m128i {
         6 ( 0.00%)      simd_or(a, b)
         .           }
         .           
         .           /// Computes the bitwise XOR of 128 bits (representing integer data) in `a` and
         .           /// `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_xor_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
-- line 783 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
 1,372,171 ( 0.02%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 823 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for greater-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpgt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpgt_epi8(a: __m128i, b: __m128i) -> __m128i {
        12 ( 0.00%)      transmute::<i8x16, _>(simd_gt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for greater-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpgt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 839 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
   113,180 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   592,766 ( 0.01%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1224 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_store_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_store_si128(mem_addr: *mut __m128i, a: __m128i) {
         6 ( 0.00%)      *mem_addr = a;
         .           }
         .           
         .           /// Stores 128-bits of integer data from `a` into memory.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
87,316,870 ( 1.00%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 294 ----------------------------------------
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
         .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 1,133,728 ( 0.01%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
         .           }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   411,892 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    16,369 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 1,074,950 ( 0.01%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
    25,879 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
        12 ( 0.00%)          assert!(len <= A::size());
        36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
         6 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   318,588 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
       128 ( 0.00%)              A::size()
         .                   } else {
         .                       // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
         .                       // Therefore all items are at the same address,
         .                       // and any array size has capacity for infinitely many items.
         .                       // The capacity is limited by the bit width of the length field.
         .                       //
         .                       // `Vec` also does this:
         .                       // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
-- line 710 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   270,780 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
10,639,538 ( 0.12%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
16,503,778 ( 0.19%)              if self.spilled() {
   206,010 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
17,822,091 ( 0.20%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   478,835 ( 0.01%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 2,464,402 ( 0.03%)              if *len == cap {
       589 ( 0.00%)                  self.reserve(1);
    28,314 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    28,620 ( 0.00%)              ptr::write(ptr.add(*len), value);
 4,620,094 ( 0.05%)              *len += 1;
         .                   }
   383,068 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 1,166,924 ( 0.01%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
   363,904 ( 0.00%)              let last_index = *len_ptr - 1;
   364,565 ( 0.00%)              *len_ptr = last_index;
   359,210 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
        67 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
     8,256 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
       792 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
    45,726 ( 0.00%)              assert!(new_cap >= len);
    45,726 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
    45,726 ( 0.00%)              } else if new_cap != cap {
    44,080 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    22,863 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    18,079 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
    45,726 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    65,650 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
     9,048 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
   458,835 ( 0.01%)      pub fn reserve(&mut self, additional: usize) {
 1,288,619 ( 0.01%)          infallible(self.try_reserve(additional))
   522,560 ( 0.01%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
 4,724,206 ( 0.05%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
    18,765 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
 4,004,603 ( 0.05%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
     1,770 ( 0.00%)          self.try_grow(new_cap)
 5,097,536 ( 0.06%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
   186,389 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       265 ( 0.00%)          self.try_grow(new_cap)
       265 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   206,600 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
       512 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     8,897 ( 0.00%)              let len = *len_ptr;
    32,976 ( 0.00%)              assert!(index < len);
   209,211 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
    21,984 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
       640 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
   175,613 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    16,239 ( 0.00%)              let len = *len_ptr;
    32,204 ( 0.00%)              assert!(index <= len);
    64,408 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
    32,204 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
   111,756 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   410,076 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
   181,780 ( 0.00%)              if !f(&mut self[i]) {
     6,132 ( 0.00%)                  del += 1;
    50,500 ( 0.00%)              } else if del > 0 {
       138 ( 0.00%)                  self.swap(i - del, i);
         .                       }
         .                   }
    91,128 ( 0.00%)          self.truncate(len - del);
   364,512 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
         .               pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
         .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
     2,105 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
   716,875 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
   209,760 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   139,840 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
   559,360 ( 0.01%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
   178,057 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   104,827 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
 1,655,432 ( 0.02%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
 6,346,520 ( 0.07%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   764,966 ( 0.01%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
    80,187 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 2,985,751 ( 0.03%)              while len.get() < cap {
   604,373 ( 0.01%)                  if let Some(out) = iter.next() {
         .                               ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   297,560 ( 0.00%)          for elem in iter {
    54,240 ( 0.00%)              self.push(elem);
         .                   }
 5,532,403 ( 0.06%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 1,538,367 ( 0.02%)      fn drop(&mut self) {
         .                   unsafe {
 4,099,344 ( 0.05%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
 1,633,172 ( 0.02%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
     4,219 ( 0.00%)      fn drop(&mut self) {
   196,679 ( 0.00%)          for _ in self {}
     3,928 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
 1,505,981 ( 0.02%)          if self.current == self.end {
         .                       None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
   497,720 ( 0.01%)                  self.current += 1;
    26,778 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    27,690 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
   285,229 ( 0.00%)              IntoIter {
 1,015,359 ( 0.01%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
   709,117 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
   410,489 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
   928,023 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

11,522,223 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .               /// Minimum size of #[repr(C)] enums (default I32 bits)
        .               pub c_enum_min_size: Integer,
        .           }
        .           
        .           impl Default for TargetDataLayout {
        .               /// Creates an instance of `TargetDataLayout`.
        .               fn default() -> TargetDataLayout {
        .                   let align = |bits| Align::from_bits(bits).unwrap();
       24 ( 0.00%)          TargetDataLayout {
        .                       endian: Endian::Big,
        .                       i1_align: AbiAndPrefAlign::new(align(8)),
        .                       i8_align: AbiAndPrefAlign::new(align(8)),
        .                       i16_align: AbiAndPrefAlign::new(align(16)),
        .                       i32_align: AbiAndPrefAlign::new(align(32)),
        .                       i64_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },
        .                       i128_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },
        .                       f32_align: AbiAndPrefAlign::new(align(32)),
        .                       f64_align: AbiAndPrefAlign::new(align(64)),
        .                       pointer_size: Size::from_bits(64),
        .                       pointer_align: AbiAndPrefAlign::new(align(64)),
        .                       aggregate_align: AbiAndPrefAlign { abi: align(0), pref: align(64) },
        8 ( 0.00%)              vector_align: vec![
        .                           (Size::from_bits(64), AbiAndPrefAlign::new(align(64))),
        .                           (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),
        .                       ],
        .                       instruction_address_space: AddressSpace::DATA,
        .                       c_enum_min_size: Integer::I32,
        .                   }
        .               }
        .           }
        .           
        .           impl TargetDataLayout {
       18 ( 0.00%)      pub fn parse(target: &Target) -> Result<TargetDataLayout, String> {
        .                   // Parse an address space index from a string.
        .                   let parse_address_space = |s: &str, cause: &str| {
        .                       s.parse::<u32>().map(AddressSpace).map_err(|err| {
        .                           format!("invalid address space `{}` for `{}` in \"data-layout\": {}", s, cause, err)
        .                       })
        .                   };
        .           
        .                   // Parse a bit count from a string.
-- line 80 ----------------------------------------
-- line 83 ----------------------------------------
        .                           format!("invalid {} `{}` for `{}` in \"data-layout\": {}", kind, s, cause, err)
        .                       })
        .                   };
        .           
        .                   // Parse a size string.
        .                   let size = |s: &str, cause: &str| parse_bits(s, "size", cause).map(Size::from_bits);
        .           
        .                   // Parse an alignment string.
       20 ( 0.00%)          let align = |s: &[&str], cause: &str| {
        2 ( 0.00%)              if s.is_empty() {
        .                           return Err(format!("missing alignment for `{}` in \"data-layout\"", cause));
        .                       }
       12 ( 0.00%)              let align_from_bits = |bits| {
        .                           Align::from_bits(bits).map_err(|err| {
        .                               format!("invalid alignment for `{}` in \"data-layout\": {}", cause, err)
        .                           })
       16 ( 0.00%)              };
       18 ( 0.00%)              let abi = parse_bits(s[0], "alignment", cause)?;
        .                       let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, "alignment", cause))?;
       14 ( 0.00%)              Ok(AbiAndPrefAlign { abi: align_from_bits(abi)?, pref: align_from_bits(pref)? })
       16 ( 0.00%)          };
        .           
        .                   let mut dl = TargetDataLayout::default();
        .                   let mut i128_align_src = 64;
       32 ( 0.00%)          for spec in target.data_layout.split('-') {
        .                       let spec_parts = spec.split(':').collect::<Vec<_>>();
        .           
        .                       match &*spec_parts {
       78 ( 0.00%)                  ["e"] => dl.endian = Endian::Little,
        .                           ["E"] => dl.endian = Endian::Big,
        2 ( 0.00%)                  [p] if p.starts_with('P') => {
        .                               dl.instruction_address_space = parse_address_space(&p[1..], "P")?
        .                           }
       44 ( 0.00%)                  ["a", ref a @ ..] => dl.aggregate_align = align(a, "a")?,
        4 ( 0.00%)                  ["f32", ref a @ ..] => dl.f32_align = align(a, "f32")?,
        4 ( 0.00%)                  ["f64", ref a @ ..] => dl.f64_align = align(a, "f64")?,
       44 ( 0.00%)                  [p @ "p", s, ref a @ ..] | [p @ "p0", s, ref a @ ..] => {
        .                               dl.pointer_size = size(s, p)?;
        .                               dl.pointer_align = align(a, p)?;
        .                           }
       64 ( 0.00%)                  [s, ref a @ ..] if s.starts_with('i') => {
        4 ( 0.00%)                      let bits = match s[1..].parse::<u64>() {
        .                                   Ok(bits) => bits,
        .                                   Err(_) => {
        .                                       size(&s[1..], "i")?; // For the user error.
        .                                       continue;
        .                                   }
        .                               };
       14 ( 0.00%)                      let a = align(a, s)?;
       10 ( 0.00%)                      match bits {
        .                                   1 => dl.i1_align = a,
        .                                   8 => dl.i8_align = a,
        .                                   16 => dl.i16_align = a,
        .                                   32 => dl.i32_align = a,
        6 ( 0.00%)                          64 => dl.i64_align = a,
        .                                   _ => {}
        .                               }
        8 ( 0.00%)                      if bits >= i128_align_src && bits <= 128 {
        .                                   // Default alignment for i128 is decided by taking the alignment of
        .                                   // largest-sized i{64..=128}.
        .                                   i128_align_src = bits;
        8 ( 0.00%)                          dl.i128_align = a;
        .                               }
        .                           }
       14 ( 0.00%)                  [s, ref a @ ..] if s.starts_with('v') => {
        .                               let v_size = size(&s[1..], "v")?;
        .                               let a = align(a, s)?;
        .                               if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {
        .                                   v.1 = a;
        .                                   continue;
        .                               }
        .                               // No existing entry, add a new one.
        .                               dl.vector_align.push((v_size, a));
        .                           }
        .                           _ => {} // Ignore everything else.
        .                       }
        .                   }
        .           
        .                   // Perform consistency checks against the Target information.
        8 ( 0.00%)          if dl.endian != target.endian {
        .                       return Err(format!(
        .                           "inconsistent target specification: \"data-layout\" claims \
        .                            architecture is {}-endian, while \"target-endian\" is `{}`",
        .                           dl.endian.as_str(),
        .                           target.endian.as_str(),
        .                       ));
        .                   }
        .           
       10 ( 0.00%)          if dl.pointer_size.bits() != target.pointer_width.into() {
        .                       return Err(format!(
        .                           "inconsistent target specification: \"data-layout\" claims \
        .                            pointers are {}-bit, while \"target-pointer-width\" is `{}`",
        .                           dl.pointer_size.bits(),
        .                           target.pointer_width
        .                       ));
        .                   }
        .           
        4 ( 0.00%)          dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;
        .           
       34 ( 0.00%)          Ok(dl)
       18 ( 0.00%)      }
        .           
        .               /// Returns exclusive upper bound on object size.
        .               ///
        .               /// The theoretical maximum object size is defined as the maximum positive `isize` value.
        .               /// This ensures that the `offset` semantics remain well-defined by allowing it to correctly
        .               /// index every address within an object along with one byte past the end, along with allowing
        .               /// `isize` to store the difference between any two pointers into an object.
        .               ///
        .               /// The upper bound on 64-bit currently needs to be lower because LLVM uses a 64-bit integer
        .               /// to represent object size in bits. It would need to be 1 << 61 to account for this, but is
        .               /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable
        .               /// address space on 64-bit ARMv8 and x86_64.
        .               #[inline]
        .               pub fn obj_size_bound(&self) -> u64 {
2,444,088 ( 0.03%)          match self.pointer_size.bits() {
        .                       16 => 1 << 15,
        .                       32 => 1 << 31,
        .                       64 => 1 << 47,
        .                       bits => panic!("obj_size_bound: unknown pointer bit size {}", bits),
        .                   }
       68 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn ptr_sized_integer(&self) -> Integer {
   16,758 ( 0.00%)          match self.pointer_size.bits() {
        .                       16 => I16,
        .                       32 => I32,
        .                       64 => I64,
        .                       bits => panic!("ptr_sized_integer: unknown pointer bit size {}", bits),
        .                   }
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn vector_align(&self, vec_size: Size) -> AbiAndPrefAlign {
        .                   for &(size, align) in &self.vector_align {
        .                       if size == vec_size {
        .                           return align;
        .                       }
        .                   }
-- line 222 ----------------------------------------
-- line 233 ----------------------------------------
        .           impl HasDataLayout for TargetDataLayout {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
        .                   self
        .               }
        .           }
        .           
        .           /// Endianness of the target, which must match cfg(target-endian).
        2 ( 0.00%)  #[derive(Copy, Clone, PartialEq)]
        .           pub enum Endian {
        .               Little,
        .               Big,
        .           }
        .           
        .           impl Endian {
        .               pub fn as_str(&self) -> &'static str {
        3 ( 0.00%)          match self {
        .                       Self::Little => "little",
        .                       Self::Big => "big",
        .                   }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Endian {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.write_str(self.as_str())
        .               }
        .           }
        .           
-- line 261 ----------------------------------------
-- line 277 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Size of a type in bytes.
        .           #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Size {
        .               // The top 3 bits are ALWAYS zero.
  631,184 ( 0.01%)      raw: u64,
        .           }
        .           
        .           impl Size {
        .               pub const ZERO: Size = Size { raw: 0 };
        .           
        .               /// Rounds `bits` up to the next-higher byte boundary, if `bits` is
        .               /// is not aligned.
        .               pub fn from_bits(bits: impl TryInto<u64>) -> Size {
-- line 293 ----------------------------------------
-- line 296 ----------------------------------------
        .                   #[cold]
        .                   fn overflow(bits: u64) -> ! {
        .                       panic!("Size::from_bits({}) has overflowed", bits);
        .                   }
        .           
        .                   // This is the largest value of `bits` that does not cause overflow
        .                   // during rounding, and guarantees that the resulting number of bytes
        .                   // cannot cause overflow when multiplied by 8.
       12 ( 0.00%)          if bits > 0xffff_ffff_ffff_fff8 {
        .                       overflow(bits);
        .                   }
        .           
        .                   // Avoid potential overflow from `bits + 7`.
       26 ( 0.00%)          Size { raw: bits / 8 + ((bits % 8) + 7) / 8 }
        .               }
        .           
        .               #[inline]
        .               pub fn from_bytes(bytes: impl TryInto<u64>) -> Size {
        .                   let bytes: u64 = bytes.try_into().ok().unwrap();
        .                   Size { raw: bytes }
        .               }
        .           
-- line 317 ----------------------------------------
-- line 322 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn bytes_usize(self) -> usize {
        .                   self.bytes().try_into().unwrap()
        .               }
        .           
        .               #[inline]
        .               pub fn bits(self) -> u64 {
1,795,339 ( 0.02%)          self.raw << 3
        .               }
        .           
        .               #[inline]
        .               pub fn bits_usize(self) -> usize {
        .                   self.bits().try_into().unwrap()
        .               }
        .           
        .               #[inline]
       68 ( 0.00%)      pub fn align_to(self, align: Align) -> Size {
  237,586 ( 0.00%)          let mask = align.bytes() - 1;
  192,118 ( 0.00%)          Size::from_bytes((self.bytes() + mask) & !mask)
      204 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_aligned(self, align: Align) -> bool {
        .                   let mask = align.bytes() - 1;
        .                   self.bytes() & mask == 0
        .               }
        .           
        .               #[inline]
        .               pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: &C) -> Option<Size> {
        .                   let dl = cx.data_layout();
        .           
  394,632 ( 0.00%)          let bytes = self.bytes().checked_add(offset.bytes())?;
        .           
1,972,152 ( 0.02%)          if bytes < dl.obj_size_bound() { Some(Size::from_bytes(bytes)) } else { None }
        .               }
        .           
        .               #[inline]
      252 ( 0.00%)      pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: &C) -> Option<Size> {
        .                   let dl = cx.data_layout();
        .           
   12,648 ( 0.00%)          let bytes = self.bytes().checked_mul(count)?;
   37,944 ( 0.00%)          if bytes < dl.obj_size_bound() { Some(Size::from_bytes(bytes)) } else { None }
      126 ( 0.00%)      }
        .           
        .               /// Truncates `value` to `self` bits and then sign-extends it to 128 bits
        .               /// (i.e., if it is negative, fill with 1's on the left).
        .               #[inline]
        .               pub fn sign_extend(self, value: u128) -> u128 {
        .                   let size = self.bits();
        .                   if size == 0 {
        .                       // Truncated until nothing is left.
        .                       return 0;
        .                   }
        .                   // Sign-extend it.
    5,314 ( 0.00%)          let shift = 128 - size;
        .                   // Shift the unsigned value to the left, then shift back to the right as signed
        .                   // (essentially fills with sign bit on the left).
  180,676 ( 0.00%)          (((value << shift) as i128) >> shift) as u128
        .               }
        .           
        .               /// Truncates `value` to `self` bits.
        .               #[inline]
        .               pub fn truncate(self, value: u128) -> u128 {
        .                   let size = self.bits();
  622,647 ( 0.01%)          if size == 0 {
        .                       // Truncated until nothing is left.
        .                       return 0;
        .                   }
  622,647 ( 0.01%)          let shift = 128 - size;
        .                   // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).
7,794,572 ( 0.09%)          (value << shift) >> shift
        .               }
        .           
        .               #[inline]
        .               pub fn signed_int_min(&self) -> i128 {
   47,826 ( 0.00%)          self.sign_extend(1_u128 << (self.bits() - 1)) as i128
        .               }
        .           
        .               #[inline]
        .               pub fn signed_int_max(&self) -> i128 {
   47,826 ( 0.00%)          i128::MAX >> (128 - self.bits())
        .               }
        .           
        .               #[inline]
       68 ( 0.00%)      pub fn unsigned_int_max(&self) -> u128 {
    5,751 ( 0.00%)          u128::MAX >> (128 - self.bits())
      136 ( 0.00%)      }
        .           }
        .           
        .           // Panicking addition, subtraction and multiplication for convenience.
        .           // Avoid during layout computation, return `LayoutError` instead.
        .           
        .           impl Add for Size {
        .               type Output = Size;
        .               #[inline]
        .               fn add(self, other: Size) -> Size {
        .                   Size::from_bytes(self.bytes().checked_add(other.bytes()).unwrap_or_else(|| {
        .                       panic!("Size::add: {} + {} doesn't fit in u64", self.bytes(), other.bytes())
        .                   }))
        6 ( 0.00%)      }
        .           }
        .           
        .           impl Sub for Size {
        .               type Output = Size;
        .               #[inline]
        .               fn sub(self, other: Size) -> Size {
        .                   Size::from_bytes(self.bytes().checked_sub(other.bytes()).unwrap_or_else(|| {
        .                       panic!("Size::sub: {} - {} would result in negative size", self.bytes(), other.bytes())
-- line 430 ----------------------------------------
-- line 438 ----------------------------------------
        .               fn mul(self, size: Size) -> Size {
        .                   size * self
        .               }
        .           }
        .           
        .           impl Mul<u64> for Size {
        .               type Output = Size;
        .               #[inline]
   17,628 ( 0.00%)      fn mul(self, count: u64) -> Size {
  206,934 ( 0.00%)          match self.bytes().checked_mul(count) {
        .                       Some(bytes) => Size::from_bytes(bytes),
        .                       None => panic!("Size::mul: {} * {} doesn't fit in u64", self.bytes(), count),
        .                   }
   17,628 ( 0.00%)      }
        .           }
        .           
        .           impl AddAssign for Size {
        .               #[inline]
        .               fn add_assign(&mut self, other: Size) {
   36,140 ( 0.00%)          *self = *self + other;
        .               }
        .           }
        .           
        .           impl Step for Size {
        .               #[inline]
        .               fn steps_between(start: &Self, end: &Self) -> Option<usize> {
        .                   u64::steps_between(&start.bytes(), &end.bytes())
        .               }
-- line 465 ----------------------------------------
-- line 494 ----------------------------------------
        .                   Self::from_bytes(u64::backward_unchecked(start.bytes(), count))
        .               }
        .           }
        .           
        .           /// Alignment of a type in bytes (always a power of two).
        .           #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Align {
   62,496 ( 0.00%)      pow2: u8,
        .           }
        .           
        .           impl Align {
        .               pub const ONE: Align = Align { pow2: 0 };
        .           
        .               #[inline]
        .               pub fn from_bits(bits: u64) -> Result<Align, String> {
        .                   Align::from_bytes(Size::from_bits(bits).bytes())
        .               }
        .           
        .               #[inline]
        .               pub fn from_bytes(align: u64) -> Result<Align, String> {
        .                   // Treat an alignment of 0 bytes like 1-byte alignment.
        8 ( 0.00%)          if align == 0 {
        .                       return Ok(Align::ONE);
        .                   }
        .           
        .                   #[cold]
        .                   fn not_power_of_2(align: u64) -> String {
        .                       format!("`{}` is not a power of 2", align)
        .                   }
        .           
        .                   #[cold]
        .                   fn too_large(align: u64) -> String {
        .                       format!("`{}` is too large", align)
        .                   }
        .           
        .                   let mut bytes = align;
        .                   let mut pow2: u8 = 0;
       56 ( 0.00%)          while (bytes & 1) == 0 {
       36 ( 0.00%)              pow2 += 1;
       24 ( 0.00%)              bytes >>= 1;
        .                   }
        8 ( 0.00%)          if bytes != 1 {
        .                       return Err(not_power_of_2(align));
        .                   }
        8 ( 0.00%)          if pow2 > 29 {
        .                       return Err(too_large(align));
        .                   }
        .           
      136 ( 0.00%)          Ok(Align { pow2 })
        .               }
        .           
        .               #[inline]
        .               pub fn bytes(self) -> u64 {
  248,465 ( 0.00%)          1 << self.pow2
        .               }
        .           
        .               #[inline]
        .               pub fn bits(self) -> u64 {
       10 ( 0.00%)          self.bytes() * 8
        .               }
        .           
        .               /// Computes the best alignment possible for the given offset
        .               /// (the largest power of two that the offset is a multiple of).
        .               ///
        .               /// N.B., for an offset of `0`, this happens to return `2^64`.
        .               #[inline]
        .               pub fn max_for_offset(offset: Size) -> Align {
-- line 561 ----------------------------------------
-- line 591 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn max(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {
        .                   AbiAndPrefAlign { abi: self.abi.max(other.abi), pref: self.pref.max(other.pref) }
        .               }
        .           }
        .           
        .           /// Integers, also used for enum discriminants.
      223 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, HashStable_Generic)]
        .           pub enum Integer {
        .               I8,
        .               I16,
        .               I32,
        .               I64,
        .               I128,
        .           }
        .           
        .           impl Integer {
        .               #[inline]
        .               pub fn size(self) -> Size {
  521,362 ( 0.01%)          match self {
        .                       I8 => Size::from_bytes(1),
        .                       I16 => Size::from_bytes(2),
        .                       I32 => Size::from_bytes(4),
        .                       I64 => Size::from_bytes(8),
        .                       I128 => Size::from_bytes(16),
        .                   }
        .               }
        .           
        .               pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {
        .                   let dl = cx.data_layout();
        .           
      220 ( 0.00%)          match self {
      170 ( 0.00%)              I8 => dl.i8_align,
        4 ( 0.00%)              I16 => dl.i16_align,
   77,623 ( 0.00%)              I32 => dl.i32_align,
   19,568 ( 0.00%)              I64 => dl.i64_align,
        .                       I128 => dl.i128_align,
        .                   }
        .               }
        .           
        .               /// Finds the smallest Integer type which can represent the signed value.
        .               #[inline]
        .               pub fn fit_signed(x: i128) -> Integer {
        .                   match x {
      952 ( 0.00%)              -0x0000_0000_0000_0080..=0x0000_0000_0000_007f => I8,
        .                       -0x0000_0000_0000_8000..=0x0000_0000_0000_7fff => I16,
        .                       -0x0000_0000_8000_0000..=0x0000_0000_7fff_ffff => I32,
        .                       -0x8000_0000_0000_0000..=0x7fff_ffff_ffff_ffff => I64,
        .                       _ => I128,
        .                   }
        .               }
        .           
        .               /// Finds the smallest Integer type which can represent the unsigned value.
        .               #[inline]
        .               pub fn fit_unsigned(x: u128) -> Integer {
        .                   match x {
      272 ( 0.00%)              0..=0x0000_0000_0000_00ff => I8,
        .                       0..=0x0000_0000_0000_ffff => I16,
        .                       0..=0x0000_0000_ffff_ffff => I32,
        .                       0..=0xffff_ffff_ffff_ffff => I64,
        .                       _ => I128,
        .                   }
        .               }
        .           
        .               /// Finds the smallest integer with the given alignment.
      816 ( 0.00%)      pub fn for_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Option<Integer> {
        .                   let dl = cx.data_layout();
        .           
    5,145 ( 0.00%)          for candidate in [I8, I16, I32, I64, I128] {
    1,003 ( 0.00%)              if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {
        .                           return Some(candidate);
        .                       }
        .                   }
        .                   None
      816 ( 0.00%)      }
        .           
        .               /// Find the largest integer with the given alignment or less.
        .               pub fn approximate_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Integer {
        .                   let dl = cx.data_layout();
        .           
        .                   // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.
        .                   for candidate in [I64, I32, I16] {
        .                       if wanted >= candidate.align(dl).abi && wanted.bytes() >= candidate.size().bytes() {
-- line 674 ----------------------------------------
-- line 677 ----------------------------------------
        .                   }
        .                   I8
        .               }
        .           
        .               // FIXME(eddyb) consolidate this and other methods that find the appropriate
        .               // `Integer` given some requirements.
        .               #[inline]
        .               fn from_size(size: Size) -> Result<Self, String> {
        8 ( 0.00%)          match size.bits() {
        .                       8 => Ok(Integer::I8),
        .                       16 => Ok(Integer::I16),
        .                       32 => Ok(Integer::I32),
        .                       64 => Ok(Integer::I64),
        .                       128 => Ok(Integer::I128),
        .                       _ => Err(format!("rust does not support integers with {} bits", size.bits())),
        .                   }
        .               }
        .           }
        .           
        .           /// Fundamental unit of memory access and layout.
   39,618 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Primitive {
        .               /// The `bool` is the signedness of the `Integer` type.
        .               ///
        .               /// One would think we would not care about such details this low down,
        .               /// but some ABIs are described in terms of C types and ISAs where the
        .               /// integer arithmetic is done on {sign,zero}-extended registers, e.g.
        .               /// a negative integer passed by zero-extension will appear positive in
        .               /// the callee, and most operations on it will produce the wrong values.
      920 ( 0.00%)      Int(Integer, bool),
        .               F32,
        .               F64,
        .               Pointer,
        .           }
        .           
        .           impl Primitive {
        .               pub fn size<C: HasDataLayout>(self, cx: &C) -> Size {
        .                   let dl = cx.data_layout();
        .           
1,691,351 ( 0.02%)          match self {
        .                       Int(i, _) => i.size(),
        .                       F32 => Size::from_bits(32),
        .                       F64 => Size::from_bits(64),
   26,709 ( 0.00%)              Pointer => dl.pointer_size,
        .                   }
       68 ( 0.00%)      }
        .           
        .               pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {
        .                   let dl = cx.data_layout();
        .           
      420 ( 0.00%)          match self {
        .                       Int(i, _) => i.align(dl),
        .                       F32 => dl.f32_align,
        .                       F64 => dl.f64_align,
      290 ( 0.00%)              Pointer => dl.pointer_align,
        .                   }
        .               }
        .           
        .               // FIXME(eddyb) remove, it's trivial thanks to `matches!`.
        .               #[inline]
        .               pub fn is_float(self) -> bool {
        .                   matches!(self, F32 | F64)
        .               }
-- line 739 ----------------------------------------
-- line 753 ----------------------------------------
        .           /// sequence:
        .           ///
        .           ///    254 (-2), 255 (-1), 0, 1, 2
        .           ///
        .           /// This is intended specifically to mirror LLVM’s `!range` metadata semantics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
        .           #[derive(HashStable_Generic)]
        .           pub struct WrappingRange {
    1,572 ( 0.00%)      pub start: u128,
        .               pub end: u128,
        .           }
        .           
        .           impl WrappingRange {
        .               /// Returns `true` if `v` is contained in the range.
        .               #[inline(always)]
        .               pub fn contains(&self, v: u128) -> bool {
        .                   if self.start <= self.end {
-- line 769 ----------------------------------------
-- line 806 ----------------------------------------
        .                   Ok(())
        .               }
        .           }
        .           
        .           /// Information about one scalar component of a Rust type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Scalar {
    6,874 ( 0.00%)      pub value: Primitive,
        .           
        .               // FIXME(eddyb) always use the shortest range, e.g., by finding
        .               // the largest space between two consecutive valid values and
        .               // taking everything else as the (shortest) valid range.
    1,678 ( 0.00%)      pub valid_range: WrappingRange,
        .           }
        .           
        .           impl Scalar {
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
        .                   matches!(
        .                       self,
        .                       Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } }
-- line 827 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// Returns `true` if all possible numbers are valid, i.e `valid_range` covers the whole layout
        .               #[inline]
        .               pub fn is_always_valid<C: HasDataLayout>(&self, cx: &C) -> bool {
        .                   self.valid_range.is_full_for(self.value.size(cx))
        .               }
        .           }
        .           
        .           /// Describes how the fields of a type are located in memory.
  200,641 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum FieldsShape {
        .               /// Scalar primitives and `!`, which never have fields.
        .               Primitive,
        .           
        .               /// All fields start at no offset. The `usize` is the field count.
        .               Union(NonZeroUsize),
        .           
        .               /// Array/vector-like placement, with all fields of identical types.
       42 ( 0.00%)      Array { stride: Size, count: u64 },
        .           
        .               /// Struct-like placement, with precomputed offsets.
        .               ///
        .               /// Fields are guaranteed to not overlap, but note that gaps
        .               /// before, between and after all the fields are NOT always
        .               /// padding, and as such their contents may not be discarded.
        .               /// For example, enum variants leave a gap at the start,
        .               /// where the discriminant field in the enum layout goes.
-- line 856 ----------------------------------------
-- line 875 ----------------------------------------
        .                   // FIXME(camlorn) also consider small vector  optimization here.
        .                   memory_index: Vec<u32>,
        .               },
        .           }
        .           
        .           impl FieldsShape {
        .               #[inline]
        .               pub fn count(&self) -> usize {
    1,780 ( 0.00%)          match *self {
        .                       FieldsShape::Primitive => 0,
        .                       FieldsShape::Union(count) => count.get(),
        .                       FieldsShape::Array { count, .. } => count.try_into().unwrap(),
    1,068 ( 0.00%)              FieldsShape::Arbitrary { ref offsets, .. } => offsets.len(),
        .                   }
        .               }
        .           
        .               #[inline]
  643,304 ( 0.01%)      pub fn offset(&self, i: usize) -> Size {
1,910,980 ( 0.02%)          match *self {
        .                       FieldsShape::Primitive => {
        .                           unreachable!("FieldsShape::offset: `Primitive`s have no fields")
        .                       }
        .                       FieldsShape::Union(count) => {
        .                           assert!(
        .                               i < count.get(),
        .                               "tried to access field {} of union with {} fields",
        .                               i,
        .                               count
        .                           );
        .                           Size::ZERO
        .                       }
        .                       FieldsShape::Array { stride, count } => {
        .                           let i = u64::try_from(i).unwrap();
   66,332 ( 0.00%)                  assert!(i < count);
        .                           stride * i
        .                       }
  349,030 ( 0.00%)              FieldsShape::Arbitrary { ref offsets, .. } => offsets[i],
        .                   }
  643,304 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn memory_index(&self, i: usize) -> usize {
        .                   match *self {
        .                       FieldsShape::Primitive => {
        .                           unreachable!("FieldsShape::memory_index: `Primitive`s have no fields")
        .                       }
        .                       FieldsShape::Union(_) | FieldsShape::Array { .. } => i,
        .                       FieldsShape::Arbitrary { ref memory_index, .. } => memory_index[i].try_into().unwrap(),
        .                   }
        .               }
        .           
        .               /// Gets source indices of the fields by increasing offsets.
        .               #[inline]
        .               pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item = usize> + 'a {
    1,424 ( 0.00%)          let mut inverse_small = [0u8; 64];
        .                   let mut inverse_big = vec![];
      356 ( 0.00%)          let use_small = self.count() <= inverse_small.len();
        .           
        .                   // We have to write this logic twice in order to keep the array small.
        .                   if let FieldsShape::Arbitrary { ref memory_index, .. } = *self {
      356 ( 0.00%)              if use_small {
        .                           for i in 0..self.count() {
    1,032 ( 0.00%)                      inverse_small[memory_index[i] as usize] = i as u8;
        .                           }
        .                       } else {
        .                           inverse_big = vec![0; self.count()];
        .                           for i in 0..self.count() {
        .                               inverse_big[memory_index[i] as usize] = i as u32;
        .                           }
        .                       }
        .                   }
        .           
    3,144 ( 0.00%)          (0..self.count()).map(move |i| match *self {
        .                       FieldsShape::Primitive | FieldsShape::Union(_) | FieldsShape::Array { .. } => i,
        .                       FieldsShape::Arbitrary { .. } => {
      148 ( 0.00%)                  if use_small {
      444 ( 0.00%)                      inverse_small[i] as usize
        .                           } else {
        .                               inverse_big[i] as usize
        .                           }
        .                       }
        .                   })
        .               }
        .           }
        .           
-- line 959 ----------------------------------------
-- line 965 ----------------------------------------
        .           
        .           impl AddressSpace {
        .               /// The default address space, corresponding to data space.
        .               pub const DATA: Self = AddressSpace(0);
        .           }
        .           
        .           /// Describes how values of the type are passed by target ABIs,
        .           /// in terms of categories of C types there are ABI rules for.
  155,788 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Abi {
        .               Uninhabited,
        .               Scalar(Scalar),
      105 ( 0.00%)      ScalarPair(Scalar, Scalar),
        .               Vector {
        .                   element: Scalar,
        .                   count: u64,
        .               },
        .               Aggregate {
        .                   /// If true, the size is exact, otherwise it's only a lower bound.
   37,048 ( 0.00%)          sized: bool,
        .               },
        .           }
        .           
        .           impl Abi {
        .               /// Returns `true` if the layout corresponds to an unsized type.
        .               #[inline]
        .               pub fn is_unsized(&self) -> bool {
1,249,054 ( 0.01%)          match *self {
        .                       Abi::Uninhabited | Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } => false,
        .                       Abi::Aggregate { sized } => !sized,
        .                   }
        .               }
        .           
        .               /// Returns `true` if this is a single signed integer scalar
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
-- line 1000 ----------------------------------------
-- line 1005 ----------------------------------------
        .                       },
        .                       _ => panic!("`is_signed` on non-scalar ABI {:?}", self),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this is an uninhabited type
        .               #[inline]
        .               pub fn is_uninhabited(&self) -> bool {
      888 ( 0.00%)          matches!(*self, Abi::Uninhabited)
        .               }
        .           
        .               /// Returns `true` is this is a scalar type
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
        .                   matches!(*self, Abi::Scalar(_))
        .               }
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               pub struct VariantIdx {
        .                   derive [HashStable_Generic]
        .               }
        .           }
        .           
   78,742 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Variants {
        .               /// Single enum variants, structs/tuples, unions, and all non-ADTs.
      389 ( 0.00%)      Single { index: VariantIdx },
        .           
        .               /// Enum-likes with more than one inhabited variant: each variant comes with
        .               /// a *discriminant* (usually the same as the variant index but the user can
        .               /// assign explicit discriminant values).  That discriminant is encoded
        .               /// as a *tag* on the machine.  The layout of each variant is
        .               /// a struct, and they all have space reserved for the tag.
        .               /// For enums, the tag is the sole field of the layout.
        .               Multiple {
        .                   tag: Scalar,
      175 ( 0.00%)          tag_encoding: TagEncoding,
      140 ( 0.00%)          tag_field: usize,
       35 ( 0.00%)          variants: IndexVec<VariantIdx, Layout>,
        .               },
        .           }
        .           
      622 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum TagEncoding {
        .               /// The tag directly stores the discriminant, but possibly with a smaller layout
        .               /// (so converting the tag to the discriminant can require sign extension).
        .               Direct,
        .           
        .               /// Niche (values invalid for a type) encoding the discriminant:
        .               /// Discriminant and variant index coincide.
        .               /// The variant `dataful_variant` contains a niche at an arbitrary
-- line 1056 ----------------------------------------
-- line 1057 ----------------------------------------
        .               /// offset (field `tag_field` of the enum), which for a variant with
        .               /// discriminant `d` is set to
        .               /// `(d - niche_variants.start).wrapping_add(niche_start)`.
        .               ///
        .               /// For example, `Option<(usize, &T)>`  is represented such that
        .               /// `None` has a null pointer for the second tuple field, and
        .               /// `Some` is the identity function (with a non-null reference).
        .               Niche {
        3 ( 0.00%)          dataful_variant: VariantIdx,
        3 ( 0.00%)          niche_variants: RangeInclusive<VariantIdx>,
       18 ( 0.00%)          niche_start: u128,
        .               },
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub struct Niche {
      260 ( 0.00%)      pub offset: Size,
      260 ( 0.00%)      pub scalar: Scalar,
        .           }
        .           
        .           impl Niche {
      576 ( 0.00%)      pub fn from_scalar<C: HasDataLayout>(cx: &C, offset: Size, scalar: Scalar) -> Option<Self> {
      576 ( 0.00%)          let niche = Niche { offset, scalar };
    4,819 ( 0.00%)          if niche.available(cx) > 0 { Some(niche) } else { None }
      672 ( 0.00%)      }
        .           
       22 ( 0.00%)      pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {
      110 ( 0.00%)          let Scalar { value, valid_range: v } = self.scalar;
        .                   let size = value.size(cx);
    1,236 ( 0.00%)          assert!(size.bits() <= 128);
        .                   let max_value = size.unsigned_int_max();
        .           
        .                   // Find out how many values are outside the valid range.
        .                   let niche = v.end.wrapping_add(1)..v.start;
    4,059 ( 0.00%)          niche.end.wrapping_sub(niche.start) & max_value
       44 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {
       18 ( 0.00%)          assert!(count > 0);
        .           
       36 ( 0.00%)          let Scalar { value, valid_range: v } = self.scalar;
        .                   let size = value.size(cx);
       12 ( 0.00%)          assert!(size.bits() <= 128);
        .                   let max_value = size.unsigned_int_max();
        .           
        .                   let niche = v.end.wrapping_add(1)..v.start;
       18 ( 0.00%)          let available = niche.end.wrapping_sub(niche.start) & max_value;
       18 ( 0.00%)          if count > available {
        .                       return None;
        .                   }
        .           
        .                   // Extend the range of valid values being reserved by moving either `v.start` or `v.end` bound.
        .                   // Given an eventual `Option<T>`, we try to maximize the chance for `None` to occupy the niche of zero.
        .                   // This is accomplished by prefering enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.
        .                   // Having `None` in niche zero can enable some special optimizations.
        .                   //
-- line 1112 ----------------------------------------
-- line 1120 ----------------------------------------
        .                       let start = v.start.wrapping_sub(count) & max_value;
        .                       Some((start, Scalar { value, valid_range: v.with_start(start) }))
        .                   };
        .                   let move_end = |v: WrappingRange| {
        .                       let start = v.end.wrapping_add(1) & max_value;
        .                       let end = v.end.wrapping_add(count) & max_value;
        .                       Some((start, Scalar { value, valid_range: v.with_end(end) }))
        .                   };
       30 ( 0.00%)          let distance_end_zero = max_value - v.end;
       24 ( 0.00%)          if v.start > v.end {
        .                       // zero is unavailable because wrapping occurs
        .                       move_end(v)
       18 ( 0.00%)          } else if v.start <= distance_end_zero {
       24 ( 0.00%)              if count <= v.start {
        .                           move_start(v)
        .                       } else {
        .                           // moved past zero, use other bound
        .                           move_end(v)
        .                       }
        .                   } else {
        .                       let end = v.end.wrapping_add(count) & max_value;
        .                       let overshot_zero = (1..=v.end).contains(&end);
        .                       if overshot_zero {
        .                           // moved past zero, use other bound
        .                           move_start(v)
        .                       } else {
        .                           move_end(v)
        .                       }
        .                   }
       54 ( 0.00%)      }
        .           }
        .           
  536,354 ( 0.01%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub struct Layout {
        .               /// Says where the fields are located within the layout.
        .               pub fields: FieldsShape,
        .           
        .               /// Encodes information about multi-variant layouts.
        .               /// Even with `Multiple` variants, a layout still has its own fields! Those are then
        .               /// shared between all variants. One of them will be the discriminant,
        .               /// but e.g. generators can have more.
        .               ///
        .               /// To access all fields of this layout, both `fields` and the fields of the active variant
        .               /// must be taken into account.
      204 ( 0.00%)      pub variants: Variants,
        .           
        .               /// The `abi` defines how this data is passed between functions, and it defines
        .               /// value restrictions via `valid_range`.
        .               ///
        .               /// Note that this is entirely orthogonal to the recursive structure defined by
        .               /// `variants` and `fields`; for example, `ManuallyDrop<Result<isize, isize>>` has
        .               /// `Abi::ScalarPair`! So, even with non-`Aggregate` `abi`, `fields` and `variants`
        .               /// have to be taken into account to find all fields of this layout.
      389 ( 0.00%)      pub abi: Abi,
        .           
        .               /// The leaf scalar with the largest number of invalid values
        .               /// (i.e. outside of its `valid_range`), if it exists.
    1,433 ( 0.00%)      pub largest_niche: Option<Niche>,
        .           
   78,855 ( 0.00%)      pub align: AbiAndPrefAlign,
    1,696 ( 0.00%)      pub size: Size,
        .           }
        .           
        .           impl Layout {
      930 ( 0.00%)      pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {
      930 ( 0.00%)          let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar);
        .                   let size = scalar.value.size(cx);
        .                   let align = scalar.value.align(cx);
    3,255 ( 0.00%)          Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
        .                       fields: FieldsShape::Primitive,
      930 ( 0.00%)              abi: Abi::Scalar(scalar),
      620 ( 0.00%)              largest_niche,
        .                       size,
        .                       align,
        .                   }
    1,240 ( 0.00%)      }
        .           }
        .           
        .           /// The layout of a type, alongside the type itself.
        .           /// Provides various type traversal APIs (e.g., recursing into fields).
        .           ///
        .           /// Note that the layout is NOT guaranteed to always be identical
        .           /// to that obtained from `layout_of(ty)`, as we need to produce
        .           /// layouts for which Rust types do not exist, such as enum variants
        .           /// or synthetic fields of enums (i.e., discriminants) and fat pointers.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable_Generic)]
        .           pub struct TyAndLayout<'a, Ty> {
  507,401 ( 0.01%)      pub ty: Ty,
1,052,919 ( 0.01%)      pub layout: &'a Layout,
        .           }
        .           
        .           impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {
        .               type Target = &'a Layout;
        .               fn deref(&self) -> &&'a Layout {
      276 ( 0.00%)          &self.layout
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub enum PointerKind {
        .               /// Most general case, we know no restrictions to tell LLVM.
        .               Shared,
        .           
-- line 1223 ----------------------------------------
-- line 1262 ----------------------------------------
        .               {
        .                   Ty::ty_and_layout_for_variant(self, cx, variant_index)
        .               }
        .           
        .               pub fn field<C>(self, cx: &C, i: usize) -> Self
        .               where
        .                   Ty: TyAbiInterface<'a, C>,
        .               {
1,775,968 ( 0.02%)          Ty::ty_and_layout_field(self, cx, i)
        .               }
        .           
        .               pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>
        .               where
        .                   Ty: TyAbiInterface<'a, C>,
        .               {
        .                   Ty::ty_and_layout_pointee_info_at(self, cx, offset)
        .               }
        .           }
        .           
        .           impl<'a, Ty> TyAndLayout<'a, Ty> {
        .               /// Returns `true` if the layout corresponds to an unsized type.
        .               pub fn is_unsized(&self) -> bool {
  174,379 ( 0.00%)          self.abi.is_unsized()
        .               }
        .           
        .               /// Returns `true` if the type is a ZST and not unsized.
        .               pub fn is_zst(&self) -> bool {
  759,380 ( 0.01%)          match self.abi {
        .                       Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } => false,
        .                       Abi::Uninhabited => self.size.bytes() == 0,
   25,304 ( 0.00%)              Abi::Aggregate { sized } => sized && self.size.bytes() == 0,
        .                   }
    7,590 ( 0.00%)      }
        .           
        .               /// Determines if this type permits "raw" initialization by just transmuting some
        .               /// memory into an instance of `T`.
        .               /// `zero` indicates if the memory is zero-initialized, or alternatively
        .               /// left entirely uninitialized.
        .               /// This is conservative: in doubt, it will answer `true`.
        .               ///
        .               /// FIXME: Once we removed all the conservatism, we could alternatively
-- line 1302 ----------------------------------------

3,211,929 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
2,776,358 ( 0.03%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  435,555 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   27,164 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
4,148,024 ( 0.05%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
1,037,006 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
4,148,024 ( 0.05%)      }
        .           
4,839,554 ( 0.06%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  238,059 ( 0.00%)          each_child(move_path_index);
        .           
3,629,521 ( 0.04%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  347,802 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  730,239 ( 0.01%)          while let Some(child_index) = next_child_index {
   50,796 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    8,466 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
3,984,428 ( 0.05%)      }
3,031,475 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
        .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
        .                       each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   77,730 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    6,976 ( 0.00%)      for arg in body.args_iter() {
    6,092 ( 0.00%)          let place = mir::Place::from(arg);
    9,138 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    3,110 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   55,808 ( 0.00%)  }
        .           
4,514,196 ( 0.05%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  233,983 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  996,312 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  264,745 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  238,088 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
3,388,664 ( 0.04%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  233,983 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
1,007,856 ( 0.01%)          let init = move_data.inits[*ii];
  533,446 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   26,784 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
   11,160 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    4,318 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      538 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    2,152 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    1,614 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      538 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      538 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   17,856 ( 0.00%)  }

3,069,319 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  7,352,838 ( 0.08%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    292,424 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
157,302,299 ( 1.80%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,940,026 ( 0.02%)          self.stride += Group::WIDTH;
  1,940,026 ( 0.02%)          self.pos += self.stride;
  1,759,825 ( 0.02%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    366,492 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
    749,585 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    199,974 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    990,511 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    283,492 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
    736,097 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    989,583 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      5,244 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
      1,560 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        535 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     25,343 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     65,509 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     65,509 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    131,018 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     27,570 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    103,448 ( 0.00%)          self.erase_no_drop(&item);
        467 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,756,240 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      2,436 ( 0.00%)          match self.find(hash, eq) {
     29,229 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  1,064,949 ( 0.01%)              None => None,
          .                   }
  4,062,863 ( 0.05%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     36,062 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    861,891 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    621,891 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  1,460,241 ( 0.02%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
    963,392 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  8,490,026 ( 0.10%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     19,953 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  7,129,939 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  6,287,792 ( 0.07%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,191,016 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        451 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,393,262 ( 0.03%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      5,974 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    794,184 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     33,316 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  1,702,692 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  1,336,018 ( 0.02%)          self.table.items += 1;
          .                   bucket
     11,931 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
     12,536 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    295,194 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    200,032 ( 0.00%)              eq(self.bucket(index).as_ref())
    208,523 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
     51,548 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
     12,688 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    135,660 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
          .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     10,789 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  6,182,787 ( 0.07%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
         32 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    928,665 ( 0.01%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     27,400 ( 0.00%)          let allocation = self.into_allocation();
     20,550 ( 0.00%)          RawIntoIter {
     34,250 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     11,430 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      1,755 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  3,681,508 ( 0.04%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,326,643 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    311,504 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    727,698 ( 0.01%)          Ok(Self {
          .                       ctrl,
    304,636 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    965,284 ( 0.01%)      }
          .           
          .               #[inline]
     59,361 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     15,918 ( 0.00%)          if capacity == 0 {
     12,658 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
    601,714 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     30,844 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     59,361 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    286,464 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    286,464 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    572,928 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  4,713,105 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 13,627,949 ( 0.16%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  6,323,056 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    190,304 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 18,285,682 ( 0.21%)              for bit in group.match_byte(h2_hash) {
 34,260,351 ( 0.39%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 20,195,202 ( 0.23%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  5,872,310 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          9 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          9 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 18,729,456 ( 0.21%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 91,561,558 ( 1.05%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  8,909,290 ( 0.10%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  7,127,432 ( 0.08%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         66 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 13,246,392 ( 0.15%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  4,415,464 ( 0.05%)          *self.ctrl(index) = ctrl;
  4,416,292 ( 0.05%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,843,379 ( 0.02%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
    821,576 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  6,061,178 ( 0.07%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      3,792 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    390,070 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    179,366 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    358,739 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    358,738 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    750,893 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          6 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    179,366 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
      8,956 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  2,811,640 ( 0.03%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    179,366 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        192 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          9 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    113,223 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     52,408 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     72,593 ( 0.00%)          self.items = 0;
     52,408 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    266,326 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,065,304 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  1,312,645 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,065,304 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      4,176 ( 0.00%)      fn clone(&self) -> Self {
        660 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
      4,698 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        214 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,500,196 ( 0.03%)      fn drop(&mut self) {
  2,560,437 ( 0.03%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  2,851,228 ( 0.03%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     27,400 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     34,250 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,163,839 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    206,807 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    357,685 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,256,625 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     23,566 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     37,038 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     30,719 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      4,499 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    228,664 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    464,520 ( 0.01%)          if let Some(b) = self.iter.next() {
  1,372,909 ( 0.02%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    457,328 ( 0.01%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     10,126 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     52,162 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      4,286 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      2,263 ( 0.00%)      fn next(&mut self) -> Option<T> {
      1,041 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      4,526 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          3 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,688 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        211 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      1,688 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 48,810,773 ( 0.56%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                 

-- line 56 ----------------------------------------
        .           #[derive(Copy, Clone, Debug)]
        .           pub enum RelationDir {
        .               SubtypeOf,
        .               SupertypeOf,
        .               EqTo,
        .           }
        .           
        .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
  617,769 ( 0.01%)      pub fn super_combine_tys<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>>
        .               where
        .                   R: TypeRelation<'tcx>,
        .               {
        .                   let a_is_expected = relation.a_is_expected();
        .           
  751,918 ( 0.01%)          match (a.kind(), b.kind()) {
        .                       // Relate integral variables to other types
       16 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
       88 ( 0.00%)                  self.inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .unify_var_var(a_id, b_id)
        .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
        .                           Ok(a)
        .                       }
      855 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
    1,710 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
        .                       }
        .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
        .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
        .                       }
    1,026 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
    2,052 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
        .                       }
       32 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
       64 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
        .                       }
        .           
        .                       // Relate floating-point variables to other types
        .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .float_unification_table()
        .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
        .                           self.unify_float_variable(a_is_expected, v_id, v)
        .                       }
        .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
        .                           self.unify_float_variable(!a_is_expected, v_id, v)
        .                       }
        .           
        .                       // All other cases of inference are errors
        .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
   15,710 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
        .                       }
        .           
  771,462 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
        .                   }
  617,769 ( 0.01%)      }
        .           
    2,016 ( 0.00%)      pub fn super_combine_consts<R>(
        .                   &self,
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
        .               where
        .                   R: ConstEquateRelation<'tcx>,
        .               {
        .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
    5,925 ( 0.00%)          if a == b {
        .                       return Ok(a);
        .                   }
        .           
      486 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
      486 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
        .           
        .                   let a_is_expected = relation.a_is_expected();
        .           
    1,724 ( 0.00%)          match (a.val, b.val) {
        .                       (
        .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
        .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
        .                       ) => {
        .                           self.inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 158 ----------------------------------------
        .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
        .                       }
        .           
        .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
        .                           return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
        .                       }
        .           
        .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
      680 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
        .                       }
        4 ( 0.00%)              (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
        .                           // FIXME(#59490): Need to remove the leak check to accommodate
        .                           // escaping bound variables here.
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(b);
        .                       }
        .                       (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {
-- line 176 ----------------------------------------
-- line 179 ----------------------------------------
        .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
        .                               relation.const_equate_obligation(a, b);
        .                           }
        .                           return Ok(a);
        .                       }
        .                       _ => {}
        .                   }
        .           
      130 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
    1,512 ( 0.00%)      }
        .           
        .               /// Unifies the const variable `target_vid` with the given constant.
        .               ///
        .               /// This also tests if the given const `ct` contains an inference variable which was previously
        .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
        .               /// would result in an infinite type as we continuously replace an inference variable
        .               /// in `ct` with `ct` itself.
        .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// of `fn bind` (meaning that its substs contain `N`).
        .               ///
        .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
        .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
        .               ///
        .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
        .               ///
        .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
    2,584 ( 0.00%)      #[instrument(level = "debug", skip(self))]
        .               fn unify_const_variable(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   target_vid: ty::ConstVid<'tcx>,
        .                   ct: &'tcx ty::Const<'tcx>,
        .                   vid_is_expected: bool,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   let (for_universe, span) = {
        .                       let mut inner = self.inner.borrow_mut();
      544 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
      272 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
      272 ( 0.00%)              match var_value.val {
        .                           ConstVariableValue::Known { value } => {
        .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
        .                           }
        .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
        .                       }
        .                   };
    1,088 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
        .                       .relate(ct, ct)?;
        .           
      544 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .const_unification_table()
        .                       .unify_var_value(
        .                           target_vid,
      816 ( 0.00%)                  ConstVarValue {
        .                               origin: ConstVariableOrigin {
        .                                   kind: ConstVariableOriginKind::ConstInference,
        .                                   span: DUMMY_SP,
        .                               },
        .                               val: ConstVariableValue::Known { value },
        .                           },
        .                       )
        .                       .map(|()| value)
        .                       .map_err(|e| const_unification_error(vid_is_expected, e))
        .               }
        .           
   11,478 ( 0.00%)      fn unify_integral_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::IntVid,
        .                   val: ty::IntVarValue,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
   15,304 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .int_unification_table()
        .                       .unify_var_value(vid, Some(val))
        .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
    3,826 ( 0.00%)          match val {
      855 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
    4,029 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
        .                   }
   15,304 ( 0.00%)      }
        .           
        .               fn unify_float_variable(
        .                   &self,
        .                   vid_is_expected: bool,
        .                   vid: ty::FloatVid,
        .                   val: ty::FloatTy,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
        .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
        .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
        .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
        .                   Ok(self.tcx.mk_mach_float(val))
        .               }
        .           }
        .           
        .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
        .               pub fn tcx(&self) -> TyCtxt<'tcx> {
   62,882 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
        .                   Equate::new(self, a_is_expected)
        .               }
        .           
  350,274 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
        .                   Sub::new(self, a_is_expected)
  175,137 ( 0.00%)      }
        .           
        .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
        .                   Lub::new(self, a_is_expected)
        .               }
        .           
  114,552 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
        .                   Glb::new(self, a_is_expected)
   57,276 ( 0.00%)      }
        .           
        .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
        .               /// The idea is that we should ensure that the type `a_ty` is equal
        .               /// to, a subtype of, or a supertype of (respectively) the type
        .               /// to which `b_vid` is bound.
        .               ///
        .               /// Since `b_vid` has not yet been instantiated with a type, we
        .               /// will first instantiate `b_vid` with a *generalized* version
        .               /// of `a_ty`. Generalization introduces other inference
        .               /// variables wherever subtyping could occur.
1,328,217 ( 0.02%)      pub fn instantiate(
        .                   &mut self,
        .                   a_ty: Ty<'tcx>,
        .                   dir: RelationDir,
        .                   b_vid: ty::TyVid,
        .                   a_is_expected: bool,
        .               ) -> RelateResult<'tcx, ()> {
        .                   use self::RelationDir::*;
        .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
        .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
        .                   //   inference variable,
        .                   // - and `dir` == `SubtypeOf`.
        .                   //
        .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
        .                   // `'?2` and `?3` are fresh region/type inference
        .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
        .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
  120,747 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
        .                   debug!(
        .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
        .                       a_ty, dir, b_vid, b_ty
        .                   );
  845,229 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
        .           
  120,747 ( 0.00%)          if needs_wf {
        .                       self.obligations.push(Obligation::new(
        .                           self.trace.cause.clone(),
        .                           self.param_env,
        .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
        .                               .to_predicate(self.infcx.tcx),
        .                       ));
        .                   }
        .           
        .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
        .                   //
        .                   // FIXME(#16847): This code is non-ideal because all these subtype
        .                   // relations wind up attributed to the same spans. We need
        .                   // to associate causes/spans with each of the relations in
        .                   // the stack to get this right.
  467,196 ( 0.01%)          match dir {
  184,930 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
   39,480 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
  151,730 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_ty,
        .                           b_ty,
        .                       ),
        .                   }?;
        .           
  120,747 ( 0.00%)          Ok(())
  965,976 ( 0.01%)      }
        .           
        .               /// Attempts to generalize `ty` for the type variable `for_vid`.
        .               /// This checks for cycle -- that is, whether the type `ty`
        .               /// references `for_vid`. The `dir` is the "direction" for which we
        .               /// a performing the generalization (i.e., are we producing a type
        .               /// that can be used as a supertype etc).
        .               ///
        .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
        .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
        .                   // Determine the ambient variance within which `ty` appears.
        .                   // The surrounding equation is:
        .                   //
        .                   //     ty [op] ty2
        .                   //
        .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
        .                   // naturally.
  482,988 ( 0.01%)          let ambient_variance = match dir {
        .                       RelationDir::EqTo => ty::Invariant,
        .                       RelationDir::SubtypeOf => ty::Covariant,
        .                       RelationDir::SupertypeOf => ty::Contravariant,
        .                   };
        .           
        .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
        .           
1,207,470 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
        .                       v @ TypeVariableValue::Known { .. } => {
        .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
        .                       }
        .                       TypeVariableValue::Unknown { universe } => universe,
        .                   };
        .           
        .                   debug!("generalize: for_universe = {:?}", for_universe);
        .                   debug!("generalize: trace = {:?}", self.trace);
        .           
1,207,470 ( 0.01%)          let mut generalize = Generalizer {
        .                       infcx: self.infcx,
        .                       cause: &self.trace.cause,
        .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
        .                       for_universe,
        .                       ambient_variance,
        .                       needs_wf: false,
        .                       root_ty: ty,
  120,747 ( 0.00%)              param_env: self.param_env,
        .                       cache: SsoHashMap::new(),
        .                   };
        .           
  241,494 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
  120,747 ( 0.00%)              Ok(ty) => ty,
        .                       Err(e) => {
        .                           debug!("generalize: failure {:?}", e);
        .                           return Err(e);
        .                       }
        .                   };
  120,747 ( 0.00%)          let needs_wf = generalize.needs_wf;
        .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
        .                   Ok(Generalization { ty, needs_wf })
        .               }
        .           
        .               pub fn add_const_equate_obligation(
        .                   &mut self,
        .                   a_is_expected: bool,
        .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
        .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
        .               /// holds, which in turn implies that `?C::Item == ?D`. So once
        .               /// `?C` is constrained, that should suffice to restrict `?D`.
        .               needs_wf: bool,
        .           }
        .           
        .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  119,122 ( 0.00%)          self.infcx.tcx
        .               }
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    3,966 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "Generalizer"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
        .               }
        .           
    6,912 ( 0.00%)      fn binders<T>(
        .                   &mut self,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
        .               where
        .                   T: Relate<'tcx>,
        .               {
   10,150 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
    6,912 ( 0.00%)      }
        .           
  380,237 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   34,567 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
        .                       // Avoid fetching the variance if we are in an invariant
        .                       // context; no need, and it can induce dependency cycles
        .                       // (e.g., #41849).
   20,568 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
        .                   } else {
        .                       let tcx = self.tcx();
        .                       let opt_variances = tcx.variances_of(item_def_id);
   69,995 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
        .                   }
  311,103 ( 0.00%)      }
        .           
  154,521 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   _info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
        .               ) -> RelateResult<'tcx, T> {
        .                   let old_ambient_variance = self.ambient_variance;
  297,548 ( 0.00%)          self.ambient_variance = self.ambient_variance.xform(variance);
        .           
        .                   let result = self.relate(a, b);
   55,821 ( 0.00%)          self.ambient_variance = old_ambient_variance;
        .                   result
  120,183 ( 0.00%)      }
        .           
1,591,101 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
  176,789 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
1,060,734 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
   19,336 ( 0.00%)              return result.clone();
        .                   }
        .                   debug!("generalize: t={:?}", t);
        .           
        .                   // Check to see whether the type we are generalizing references
        .                   // any other type variable related to `vid` via
        .                   // subtyping. This is basically our "occurs check", preventing
        .                   // us from creating infinitely sized types.
  527,485 ( 0.01%)          let result = match *t.kind() {
    1,686 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,686 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
    1,686 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
    1,686 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
        .                               // If sub-roots are equal, then `for_vid` and
        .                               // `vid` are related via subtyping.
        .                               Err(TypeError::CyclicTy(self.root_ty))
        .                           } else {
   10,116 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
    3,372 ( 0.00%)                      match probe {
        .                                   TypeVariableValue::Known { value: u } => {
        .                                       debug!("generalize: known value {:?}", u);
        .                                       self.relate(u, u)
        .                                   }
        .                                   TypeVariableValue::Unknown { universe } => {
    6,015 ( 0.00%)                              match self.ambient_variance {
        .                                           // Invariant: no need to make a fresh type variable.
        .                                           ty::Invariant => {
    2,345 ( 0.00%)                                      if self.for_universe.can_name(universe) {
    1,844 ( 0.00%)                                          return Ok(t);
        .                                               }
        .                                           }
        .           
        .                                           // Bivariant: make a fresh var, but we
        .                                           // may need a WF predicate. See
        .                                           // comment on `needs_wf` field for
        .                                           // more info.
        .                                           ty::Bivariant => self.needs_wf = true,
        .           
        .                                           // Co/contravariant: this will be
        .                                           // sufficiently constrained later on.
        .                                           ty::Covariant | ty::Contravariant => (),
        .                                       }
        .           
        .                                       let origin =
    6,678 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    5,194 ( 0.00%)                              let new_var_id = self
        .                                           .infcx
        .                                           .inner
        .                                           .borrow_mut()
        .                                           .type_variables()
    5,194 ( 0.00%)                                  .new_var(self.for_universe, origin);
        .                                       let u = self.tcx().mk_ty_var(new_var_id);
        .           
        .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
        .                                       // operation. This is needed to detect cyclic types. To see why, see the
        .                                       // docs in the `type_variables` module.
    3,710 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
        .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    1,484 ( 0.00%)                              Ok(u)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
        .                           // No matter what mode we are in,
        .                           // integer/floating-point types must be equal to be
        .                           // relatable.
      376 ( 0.00%)                  Ok(t)
        .                       }
  509,679 ( 0.01%)              _ => relate::super_relate_tys(self, t, t),
        .                   };
        .           
1,714,940 ( 0.02%)          self.cache.insert(t, result.clone());
1,028,964 ( 0.01%)          return result;
1,591,101 ( 0.02%)      }
        .           
  197,064 ( 0.00%)      fn regions(
        .                   &mut self,
        .                   r: ty::Region<'tcx>,
        .                   r2: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   17,093 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   debug!("generalize: regions r={:?}", r);
        .           
   34,186 ( 0.00%)          match *r {
        .                       // Never make variables for regions bound within the type itself,
        .                       // nor for erased regions.
        .                       ty::ReLateBound(..) | ty::ReErased => {
        .                           return Ok(r);
        .                       }
        .           
        .                       ty::RePlaceholder(..)
        .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   // If we are in an invariant context, we can re-use the region
        .                   // as is, unless it happens to be in some universe that we
        .                   // can't name. (In the case of a region *variable*, we could
        .                   // use it if we promoted it into our universe, but we don't
        .                   // bother.)
   48,332 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
   36,555 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
   85,289 ( 0.00%)              if self.for_universe.can_name(r_universe) {
        .                           return Ok(r);
        .                       }
        .                   }
        .           
        .                   // FIXME: This is non-ideal because we don't give a
        .                   // very descriptive origin for this region variable.
  119,864 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  197,064 ( 0.00%)      }
        .           
   36,126 ( 0.00%)      fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   c2: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
   11,896 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
        .           
        .                   match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
       48 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
      192 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
       48 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
       96 ( 0.00%)                  match var_value.val {
        .                               ConstVariableValue::Known { value: u } => {
        .                                   drop(inner);
        .                                   self.relate(u, u)
        .                               }
       36 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
      180 ( 0.00%)                          if self.for_universe.can_name(universe) {
        .                                       Ok(c)
        .                                   } else {
        .                                       let new_var_id = variable_table.new_key(ConstVarValue {
        .                                           origin: var_value.origin,
        .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
        .                                       });
        .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })
        2 ( 0.00%)                  if self.tcx().lazy_normalization() =>
        .                       {
        .                           assert_eq!(promoted, None);
        .                           let substs = self.relate_with_variance(
        .                               ty::Variance::Invariant,
        .                               ty::VarianceDiagInfo::default(),
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
   19,830 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
   36,126 ( 0.00%)      }
        .           }
        .           
        .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
        .               /// Register an obligation that both constants must be equal to each other.
        .               ///
        .               /// If they aren't equal then the relation doesn't hold.
        .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
        .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
        .               target_vid: ty::ConstVid<'tcx>,
        .           }
        .           
        .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
        .           //
        .           // Both inputs are expected to be the same.
        .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      544 ( 0.00%)          self.infcx.tcx
        .               }
        .           
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      136 ( 0.00%)          self.param_env
        .               }
        .           
        .               fn tag(&self) -> &'static str {
        .                   "ConstInferUnifier"
        .               }
        .           
        .               fn a_is_expected(&self) -> bool {
        .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
        .                       return Ok(r);
        .                   } else {
        .                       // FIXME: This is non-ideal because we don't give a
        .                       // very descriptive origin for this region variable.
        .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
        .                   }
        .               }
        .           
    2,584 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
        .               fn consts(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .                   _c: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .                   debug_assert_eq!(c, _c);
        .                   debug!("ConstInferUnifier: c={:?}", c);
        .           
      680 ( 0.00%)          match c.val {
        .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
        .                           // Check if the current unification would end up
        .                           // unifying `target_vid` with a const which contains
        .                           // an inference variable which is unioned with `target_vid`.
        .                           //
        .                           // Not doing so can easily result in stack overflows.
        .                           if self
        .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
        .                               substs,
        .                               substs,
        .                           )?;
        .                           Ok(self.tcx().mk_const(ty::Const {
        .                               ty: c.ty,
        .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
        .                           }))
        .                       }
      680 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
        .                   }
        .               }
        .           }

1,300,612 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
    98,957 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   109,508 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   239,739 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    26,669 ( 0.00%)          i += 2
         .               }
         .           
   109,508 ( 0.00%)      if i < count {
    73,330 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 2,362,749 ( 0.03%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
15,736,017 ( 0.18%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 5,068,033 ( 0.06%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   720,571 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   230,350 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   230,350 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 2,303,500 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 1,842,800 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 2,073,150 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 1,073,110 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   921,400 ( 0.01%)          self.processed += BUFFER_SIZE;
   460,700 ( 0.01%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    15,285 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   341,767 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   123,922 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
    62,521 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    46,998 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    28,025 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     5,605 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    16,815 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     5,605 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    11,210 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    43,304 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    48,909 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    86,608 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    11,210 ( 0.00%)          let input_left = length - processed;
     6,672 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
     2,987 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     2,987 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
     2,987 ( 0.00%)              self.state.v0 ^= elem;
     5,974 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     5,605 ( 0.00%)          self.nbuf = extra_bytes_left;
    28,025 ( 0.00%)          self.processed += nbuf + processed;
    33,630 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
    58,977 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
    78,636 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
    52,832 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    52,832 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
    52,832 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    39,318 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    17,336 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
    56,654 ( 0.00%)          let length = self.processed + self.nbuf;
    39,316 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    19,658 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    19,658 ( 0.00%)          state.v0 ^= b;
         .           
    19,658 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
    67,076 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    27,758 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    27,758 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 8,093,489 ( 0.09%)          compress!(state);
 8,667,286 ( 0.10%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   134,148 ( 0.00%)          compress!(state);
   134,148 ( 0.00%)          compress!(state);
   134,148 ( 0.00%)          compress!(state);
   114,491 ( 0.00%)          compress!(state);
         .               }
         .           }

 1,504,635 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 83 ----------------------------------------
        .                   if $self.is_proc_macro {
        .                       return Lazy::empty();
        .                   }
        .               };
        .           }
        .           
        .           macro_rules! encoder_methods {
        .               ($($name:ident($ty:ty);)*) => {
   63,843 ( 0.00%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
        .                       self.opaque.$name(value)
   77,696 ( 0.00%)          })*
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
        .               type Error = <opaque::Encoder as Encoder>::Error;
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
        .                   emit_raw_bytes(&[u8]);
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
   17,349 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
      145 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
    2,022 ( 0.00%)          if self.meta == 0 {
        .                       return Ok(());
        .                   }
    4,305 ( 0.00%)          e.emit_lazy_distance(*self)
       84 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      144 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
   31,612 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
   43,506 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
        .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
        .                   }
        .                   s.emit_u32(self.as_u32())
   27,096 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
   19,610 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
   23,532 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
1,234,085 ( 0.01%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  740,451 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
1,480,902 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    3,616 ( 0.00%)          if self.krate == LOCAL_CRATE {
        .                       // We will only write details for local expansions.  Non-local expansions will fetch
        .                       // data from the corresponding crate's metadata.
        .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
        .                       // metadata from proc-macro crates.
   12,968 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
        .                   }
    8,909 ( 0.00%)          self.krate.encode(s)?;
        .                   self.local_id.encode(s)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
1,966,208 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
1,474,656 ( 0.02%)          let span = self.data();
        .           
        .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
        .                   // since we don't load proc-macro dependencies during serialization.
        .                   // This means that any hygiene information from macros used *within*
        .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
        .                   // definition) will be lost.
        .                   //
        .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .                   // None of these user-visible effects should result in any
        .                   // cross-crate inconsistencies (getting one behavior in the same
        .                   // crate, and a different behavior in another crate) due to the
        .                   // limited surface that proc-macros can expose.
        .                   //
        .                   // IMPORTANT: If this is ever changed, be sure to update
        .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
        .                   // encoding `ExpnData` for proc-macro crates.
  491,552 ( 0.01%)          if s.is_proc_macro {
        .                       SyntaxContext::root().encode(s)?;
        .                   } else {
  245,776 ( 0.00%)              span.ctxt.encode(s)?;
        .                   }
        .           
  245,776 ( 0.00%)          if self.is_dummy() {
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   // The Span infrastructure should make sure that this invariant holds:
        .                   debug_assert!(span.lo <= span.hi);
        .           
1,224,802 ( 0.01%)          if !s.source_file_cache.0.contains(span.lo) {
    2,060 ( 0.00%)              let source_map = s.tcx.sess.source_map();
    4,120 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
    2,060 ( 0.00%)              s.source_file_cache =
    4,120 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
        .                   }
        .           
  739,606 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
        .                       // Unfortunately, macro expansion still sometimes generates Spans
        .                       // that malformed in this way.
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
        .                   // Record the fact that we need to encode the data for this `SourceFile`
  245,162 ( 0.00%)          source_files.insert(s.source_file_cache.1);
        .           
        .                   // There are two possible cases here:
        .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
        .                   // crate we are writing metadata for. When the metadata for *this* crate gets
        .                   // deserialized, the deserializer will need to know which crate it originally came
        .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
        .                   // be deserialized after the rest of the span data, which tells the deserializer
        .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
        .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
        .                   // our own source map information.
        .                   //
        .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
        .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
        .                   // if we're a proc-macro crate.
        .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
        .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
1,470,972 ( 0.02%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
        .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
        .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
        .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
        .                       // we write into the metadata. This allows `imported_source_files` to binary
        .                       // search through the 'foreign' crate's source map information, using the
        .                       // deserialized 'lo' and 'hi' values directly.
        .                       //
        .                       // All of this logic ensures that the final result of deserialization is a 'normal'
        .                       // Span that can be used without any additional trouble.
        .                       let external_start_pos = {
        .                           // Introduce a new scope so that we drop the 'lock()' temporary
    1,284 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
      428 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
        .                               src => panic!("Unexpected external source {:?}", src),
        .                           }
        .                       };
    1,284 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
      428 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
        .           
        .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
        .                   } else {
  734,202 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
        .                   };
        .           
        .                   tag.encode(s)?;
        .                   lo.encode(s)?;
        .           
        .                   // Encode length which is usually less than span.hi and profits more
        .                   // from the variable-length integer encoding that we use.
        .                   let len = hi - lo;
        .                   len.encode(s)?;
        .           
  490,324 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
        .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
        .                       // while calling `cnum.encode(s)`
    1,712 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
    1,284 ( 0.00%)              cnum.encode(s)?;
        .                   }
        .           
        .                   Ok(())
1,966,208 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
        .               const CLEAR_CROSS_CRATE: bool = true;
        .           
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
        .           }
        .           
        .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
        .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
        .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
   30,620 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
   12,378 ( 0.00%)          self.encode(ecx).unwrap()
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
   63,767 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
   36,580 ( 0.00%)          self.encode(ecx).unwrap()
   37,617 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
        .           where
        .               I: IntoIterator,
        .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
        .           {
    5,390 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
   17,761 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
    6,930 ( 0.00%)      }
        .           }
        .           
        .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
        .           // normally need extra variables to avoid errors about multiple mutable borrows.
        .           macro_rules! record {
        .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
        .                   {
        .                       let value = $value;
        .                       let lazy = $self.lazy(value);
        .                       $self.$tables.$table.set($def_id.index, lazy);
        .                   }
        .               }};
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
   17,490 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   lazy: Lazy<T>,
        .               ) -> Result<(), <Self as Encoder>::Error> {
        .                   let pos = lazy.position.get();
   10,616 ( 0.00%)          let distance = match self.lazy_state {
        .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
    3,437 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
    6,874 ( 0.00%)                  assert!(pos <= start);
        .                           start - pos
        .                       }
       61 ( 0.00%)              LazyState::Previous(last_pos) => {
       61 ( 0.00%)                  assert!(
        .                               last_pos <= lazy.position,
        .                               "make sure that the calls to `lazy*` \
        .                                are in the same order as the metadata fields",
        .                           );
      183 ( 0.00%)                  lazy.position.get() - last_pos.get()
        .                       }
        .                   };
    6,996 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
        .                   self.emit_usize(distance)
   17,490 ( 0.00%)      }
        .           
   34,761 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
        .               ) -> Lazy<T> {
        .                   let pos = NonZeroUsize::new(self.position()).unwrap();
        .           
   43,984 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
  129,043 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
   96,957 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
   52,478 ( 0.00%)          self.lazy_state = LazyState::NoNode;
        .           
   94,048 ( 0.00%)          assert!(pos.get() <= self.position());
        .           
        .                   Lazy::from_position_and_meta(pos, meta)
   50,635 ( 0.00%)      }
        .           
        .               fn encode_info_for_items(&mut self) {
        9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
        .           
        .                   // Proc-macro crates only export proc-macro items, which are looked
        .                   // up using `proc_macro_data`
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
        .               }
        .           
        .               fn encode_def_path_table(&mut self) {
        4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
        2 ( 0.00%)          if self.is_proc_macro {
        .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
        .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
        .                       {
        .                           let def_key = self.lazy(table.def_key(def_index));
        .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
        .                           self.tables.def_keys.set(def_index, def_key);
        .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   } else {
        5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
        .                           let def_key = self.lazy(def_key);
        .                           let def_path_hash = self.lazy(def_path_hash);
   14,140 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
   14,140 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
        .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
        2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
        .                   ))
        .               }
        .           
        .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
        2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
        3 ( 0.00%)          let all_source_files = source_map.files();
        .           
        .                   // By replacing the `Option` with `None`, we ensure that we can't
        .                   // accidentally serialize any more `Span`s after the source map encoding
        .                   // is done.
        .                   let required_source_files = self.required_source_files.take().unwrap();
        .           
        .                   let adapted = all_source_files
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(idx, source_file)| {
        .                           // Only serialize `SourceFile`s that were used
        .                           // during the encoding of a `Span`
    1,131 ( 0.00%)                  required_source_files.contains(*idx) &&
        .                           // Don't serialize imported `SourceFile`s, unless
        .                           // we're in a proc-macro crate.
      166 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
        .                       })
        .                       .map(|(_, source_file)| {
       87 ( 0.00%)                  let mut adapted = match source_file.name {
        .                               FileName::Real(ref realname) => {
       58 ( 0.00%)                          let mut adapted = (**source_file).clone();
      464 ( 0.00%)                          adapted.name = FileName::Real(match realname {
        .                                       RealFileName::LocalPath(path_to_file) => {
        .                                           // Prepend path of working directory onto potentially
        .                                           // relative paths, because they could become relative
        .                                           // to a wrong directory.
        .                                           // We include `working_dir` as part of the crate hash,
        .                                           // so it's okay for us to use it as part of the encoded
        .                                           // metadata.
       58 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
       58 ( 0.00%)                                  match working_dir {
        .                                               RealFileName::LocalPath(absolute) => {
        .                                                   // Although neither working_dir or the file name were subject
        .                                                   // to path remapping, the concatenation between the two may
        .                                                   // be. Hence we need to do a remapping here.
        .                                                   let joined = Path::new(absolute).join(path_to_file);
      203 ( 0.00%)                                          let (joined, remapped) =
      319 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
       58 ( 0.00%)                                          if remapped {
        .                                                       RealFileName::Remapped {
        .                                                           local_path: None,
        .                                                           virtual_name: joined,
        .                                                       }
        .                                                   } else {
        .                                                       RealFileName::LocalPath(joined)
        .                                                   }
        .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
        .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
        .                                           RealFileName::Remapped {
        .                                               // We do not want any local path to be exported into metadata
        .                                               local_path: None,
        .                                               virtual_name: virtual_name.clone(),
        .                                           }
        .                                       }
        .                                   });
       58 ( 0.00%)                          adapted.name_hash = {
        .                                       let mut hasher: StableHasher = StableHasher::new();
       29 ( 0.00%)                              adapted.name.hash(&mut hasher);
        .                                       hasher.finish::<u128>()
        .                                   };
       29 ( 0.00%)                          Lrc::new(adapted)
        .                               }
        .           
        .                               // expanded code, not from a file
        .                               _ => source_file.clone(),
        .                           };
        .           
        .                           // We're serializing this `SourceFile` into our crate metadata,
        .                           // so mark it as coming from this crate.
        .                           // This also ensures that we don't try to deserialize the
        .                           // `CrateNum` for a proc-macro dependency - since proc macro
        .                           // dependencies aren't loaded when we deserialize a proc-macro,
        .                           // trying to remap the `CrateNum` would fail.
       58 ( 0.00%)                  if self.is_proc_macro {
        .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
        .                           }
        .                           adapted
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   self.lazy(adapted.iter().map(|rc| &**rc))
        .               }
        .           
        8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
        .                   let mut i = self.position();
        .           
        .                   // Encode the crate deps
        .                   let crate_deps = self.encode_crate_deps();
        .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
        5 ( 0.00%)          let dep_bytes = self.position() - i;
        .           
        .                   // Encode the lib features.
        .                   i = self.position();
        .                   let lib_features = self.encode_lib_features();
        7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
        .           
        .                   // Encode the language items.
        .                   i = self.position();
        .                   let lang_items = self.encode_lang_items();
        .                   let lang_items_missing = self.encode_lang_items_missing();
        5 ( 0.00%)          let lang_item_bytes = self.position() - i;
        .           
        .                   // Encode the diagnostic items.
        .                   i = self.position();
        .                   let diagnostic_items = self.encode_diagnostic_items();
        5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
        .           
        .                   // Encode the native libraries used
        .                   i = self.position();
        .                   let native_libraries = self.encode_native_libraries();
        4 ( 0.00%)          let native_lib_bytes = self.position() - i;
        .           
        .                   let foreign_modules = self.encode_foreign_modules();
        .           
        .                   // Encode DefPathTable
        .                   i = self.position();
        .                   self.encode_def_path_table();
        5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
        .                   i = self.position();
        .                   let traits = self.encode_traits();
        5 ( 0.00%)          let traits_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of impls, for coherence checking.
        .                   i = self.position();
        .                   let impls = self.encode_impls();
        5 ( 0.00%)          let impls_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let tcx = self.tcx;
        .           
        .                   // Encode MIR.
        .                   i = self.position();
        .                   self.encode_mir();
        5 ( 0.00%)          let mir_bytes = self.position() - i;
        .           
        .                   // Encode the items.
        .                   i = self.position();
        .                   self.encode_def_ids();
        .                   self.encode_info_for_items();
        4 ( 0.00%)          let item_bytes = self.position() - i;
        .           
        .                   // Encode the allocation index
        .                   let interpret_alloc_index = {
        .                       let mut interpret_alloc_index = Vec::new();
        .                       let mut n = 0;
        .                       trace!("beginning to encode alloc ids");
        .                       loop {
        .                           let new_n = self.interpret_allocs.len();
        .                           // if we have found new ids, serialize those, too
        2 ( 0.00%)                  if n == new_n {
        .                               // otherwise, abort
        .                               break;
        .                           }
        .                           trace!("encoding {} further alloc ids", new_n - n);
        .                           for idx in n..new_n {
        .                               let id = self.interpret_allocs[idx];
        .                               let pos = self.position() as u32;
        .                               interpret_alloc_index.push(pos);
        .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
        .                           }
        .                           n = new_n;
        .                       }
        6 ( 0.00%)              self.lazy(interpret_alloc_index)
        .                   };
        .           
        .                   // Encode the proc macro data. This affects 'tables',
        .                   // so we need to do this before we encode the tables
        .                   i = self.position();
        .                   let proc_macro_data = self.encode_proc_macros();
        4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
        .           
        .                   i = self.position();
        4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
        4 ( 0.00%)          let tables_bytes = self.position() - i;
        .           
        .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
        .                   // this as late as possible to give the prefetching as much time as possible to complete.
        .                   i = self.position();
        .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
        .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
        4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
        .           
        .                   // Encode the hygiene data,
        .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
        .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
        .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
        .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
        .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
        .                   // any `SyntaxContext`s that might be used.
        .                   i = self.position();
        .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
        5 ( 0.00%)          let hygiene_bytes = self.position() - i;
        .           
        .                   i = self.position();
        .                   let def_path_hash_map = self.encode_def_path_hash_map();
        1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
        .           
        .                   // Encode source_map. This needs to be done last,
        .                   // since encoding `Span`s tells us which `SourceFiles` we actually
        .                   // need to encode.
        .                   i = self.position();
        .                   let source_map = self.encode_source_map();
        4 ( 0.00%)          let source_map_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
        7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
        .           
      118 ( 0.00%)          let root = self.lazy(CrateRoot {
        .                       name: tcx.crate_name(LOCAL_CRATE),
        3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
        1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
        .                       hash: tcx.crate_hash(LOCAL_CRATE),
        .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
        3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
        3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
        2 ( 0.00%)              edition: tcx.sess.edition(),
        .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
        .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
        .                       has_default_lib_allocator,
        .                       proc_macro_data,
        6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
        6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
        6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
        6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
        5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
        5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
        2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
        .           
        .                       crate_deps,
        .                       dylib_dependency_formats,
        .                       lib_features,
        .                       lang_items,
        .                       diagnostic_items,
        .                       lang_items_missing,
        .                       native_libraries,
        .                       foreign_modules,
        .                       source_map,
        .                       traits,
        .                       impls,
        .                       exported_symbols,
        .                       interpret_alloc_index,
        2 ( 0.00%)              tables,
        .                       syntax_contexts,
        .                       expn_data,
        .                       expn_hashes,
        .                       def_path_hash_map,
        .                   });
        .           
        1 ( 0.00%)          let total_bytes = self.position();
        .           
        4 ( 0.00%)          if tcx.sess.meta_stats() {
        .                       let mut zero_bytes = 0;
        .                       for e in self.opaque.data.iter() {
        .                           if *e == 0 {
        .                               zero_bytes += 1;
        .                           }
        .                       }
        .           
        .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
        .                       eprintln!("            item bytes: {}", item_bytes);
        .                       eprintln!("           table bytes: {}", tables_bytes);
        .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
        .                       eprintln!("            zero bytes: {}", zero_bytes);
        .                       eprintln!("           total bytes: {}", total_bytes);
        .                   }
        .           
        .                   root
        9 ( 0.00%)      }
        .           }
        .           
        .           fn should_encode_visibility(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Mod
        .                   | DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
        .           /// Whether we should encode MIR.
        .           ///
        .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
        .           /// We want to avoid this work when not required. Therefore:
        .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
        .           /// - we skip `optimized_mir` for check runs.
        .           ///
        .           /// Return a pair, resp. for CTFE and for LLVM.
   14,283 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
    7,935 ( 0.00%)      match tcx.def_kind(def_id) {
        .                   // Constructors
        .                   DefKind::Ctor(_, _) => {
      522 ( 0.00%)              let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
        .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
        .                       (true, mir_opt_base)
        .                   }
        .                   // Constants
        .                   DefKind::AnonConst
        .                   | DefKind::InlineConst
        .                   | DefKind::AssocConst
        .                   | DefKind::Static
        .                   | DefKind::Const => (true, false),
        .                   // Full-fledged functions
        .                   DefKind::AssocFn | DefKind::Fn => {
        .                       let generics = tcx.generics_of(def_id);
    5,264 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
    1,532 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
    1,365 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
      933 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
    4,665 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
    1,866 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
        .                   }
        .                   // Closures can't be const fn.
        .                   DefKind::Closure => {
        .                       let generics = tcx.generics_of(def_id);
      252 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
        .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
      126 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
      126 ( 0.00%)              let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      126 ( 0.00%)              (false, needs_inline || always_encode_mir)
        .                   }
        .                   // Generators require optimized MIR to compute layout.
        .                   DefKind::Generator => (false, true),
        .                   // The others don't have MIR.
        .                   _ => (false, false),
        .               }
   14,283 ( 0.00%)  }
        .           
        .           fn should_encode_variances(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
        .                   | DefKind::Variant
        .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
        .                   | DefKind::LifetimeParam
        .                   | DefKind::GlobalAsm
        .                   | DefKind::ExternCrate => false,
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
        .               fn encode_def_ids(&mut self) {
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        1 ( 0.00%)          let tcx = self.tcx;
        3 ( 0.00%)          let hir = tcx.hir();
       45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
        .                       let def_id = local_id.to_def_id();
        .                       let def_kind = tcx.opt_def_kind(local_id);
   21,210 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
   52,288 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
        .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
        .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
        .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
        .                           def_kind => def_kind,
        .                       });
    9,804 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
   39,216 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
   26,144 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
        .                       if should_encode_visibility(def_kind) {
   18,318 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
        .                       }
        .                       if should_encode_stability(def_kind) {
        .                           self.encode_stability(def_id);
        .                           self.encode_const_stability(def_id);
   17,652 ( 0.00%)                  self.encode_deprecation(def_id);
        .                       }
        .                       if should_encode_variances(def_kind) {
    2,904 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
   10,164 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
        .                       }
        .                       if should_encode_generics(def_kind) {
        .                           let g = tcx.generics_of(def_id);
   11,952 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
   35,856 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
    2,988 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
    3,268 ( 0.00%)                  if !inferred_outlives.is_empty() {
       27 ( 0.00%)                      record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
        .                           }
        .                       }
   22,876 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
       56 ( 0.00%)                  record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
        .                       }
        .                   }
        .                   let inherent_impls = tcx.crate_inherent_impls(());
        .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
       66 ( 0.00%)              if implementations.is_empty() {
        .                           continue;
        .                       }
      594 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
       67 ( 0.00%)                  assert!(def_id.is_local());
        .                           def_id.index
        .                       }));
        .                   }
        .               }
        .           
   20,349 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
   17,442 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
   23,256 ( 0.00%)      }
        .           
        .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      832 ( 0.00%)          let def_id = variant.def_id;
        .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
        .           
    1,248 ( 0.00%)          let data = VariantData {
      208 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
      208 ( 0.00%)              ctor: variant.ctor_def_id.map(|did| did.index),
      208 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
        .                   record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {
      120 ( 0.00%)              assert!(f.did.is_local());
        .                       f.did.index
        .                   }));
      208 ( 0.00%)          self.encode_ident_span(def_id, variant.ident(tcx));
      208 ( 0.00%)          self.encode_item_type(def_id);
      208 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.
      328 ( 0.00%)              if let Some(ctor_def_id) = variant.ctor_def_id {
        .                           record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      945 ( 0.00%)          let def_id = variant.ctor_def_id.unwrap();
        .                   debug!("EncodeContext::encode_enum_variant_ctor({:?})", def_id);
        .           
        .                   // FIXME(eddyb) encode only the `CtorKind` for constructors.
        .                   let data = VariantData {
      189 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
      189 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
      756 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
      567 ( 0.00%)          self.encode_item_type(def_id);
      189 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      290 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
       58 ( 0.00%)          let tcx = self.tcx;
        .                   let def_id = local_def_id.to_def_id();
        .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
        .           
        .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
        .                   // only ever get called for the crate root. We still want to encode
        .                   // the crate root for consistency with other crates (some of the resolver
        .                   // code uses it). However, we skip encoding anything relating to child
        .                   // items - we encode information about proc-macros later on.
       87 ( 0.00%)          let reexports = if !self.is_proc_macro {
       58 ( 0.00%)              match tcx.module_reexports(local_def_id) {
        .                           Some(exports) => self.lazy(exports),
        .                           _ => Lazy::empty(),
        .                       }
        .                   } else {
        .                       Lazy::empty()
        .                   };
        .           
      116 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
       58 ( 0.00%)          if self.is_proc_macro {
        .                       // Encode this here because we don't do it in encode_def_ids.
        .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
        .                   } else {
        .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
        .                       // Foreign items are planted into their parent modules from name resolution point of view.
       58 ( 0.00%)              let tcx = self.tcx;
        .                       let foreign_item_children = md
        .                           .item_ids
        .                           .iter()
    6,995 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
        .                               hir::ItemKind::ForeignMod { items, .. } => {
        .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
        .                               }
        .                               _ => None,
        .                           })
        .                           .flatten();
        .           
      203 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
        .                   }
      232 ( 0.00%)      }
        .           
        .               fn encode_field(
        .                   &mut self,
        .                   adt_def: &ty::AdtDef,
        .                   variant_index: VariantIdx,
        .                   field_index: usize,
        .               ) {
        .                   let variant = &adt_def.variants[variant_index];
        .                   let field = &variant.fields[field_index];
        .           
        .                   let def_id = field.did;
        .                   debug!("EncodeContext::encode_field({:?})", def_id);
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
      532 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
      798 ( 0.00%)          self.encode_item_type(def_id);
        .               }
        .           
        .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
        .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
        5 ( 0.00%)          let tcx = self.tcx;
       15 ( 0.00%)          let variant = adt_def.non_enum_variant();
        .           
        .                   let data = VariantData {
        5 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
        5 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       35 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));
       25 ( 0.00%)          self.encode_item_type(def_id);
        5 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        5 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
       24 ( 0.00%)      fn encode_explicit_item_bounds(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_explicit_item_bounds({:?})", def_id);
        9 ( 0.00%)          let bounds = self.tcx.explicit_item_bounds(def_id);
        9 ( 0.00%)          if !bounds.is_empty() {
       48 ( 0.00%)              record!(self.tables.explicit_item_bounds[def_id] <- bounds);
        .                   }
        .               }
        .           
        .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
       38 ( 0.00%)          let tcx = self.tcx;
        .           
      266 ( 0.00%)          let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
        .                   let trait_item = tcx.associated_item(def_id);
        .           
      190 ( 0.00%)          let container = match trait_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,
        .                       hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,
        .                       hir::Defaultness::Final => span_bug!(ast_item.span, "traits cannot have final items"),
        .                   };
        .           
      228 ( 0.00%)          match trait_item.kind {
        .                       ty::AssocKind::Const => {
        .                           let rendered = rustc_hir_pretty::to_string(
        .                               &(&self.tcx.hir() as &dyn intravisit::Map<'_>),
        .                               |s| s.print_trait_item(ast_item),
        .                           );
        .                           let rendered_const = self.lazy(RenderedConst(rendered));
        .           
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                               container,
        .                               Default::default(),
        .                               rendered_const,
        .                           ));
        .                       }
        .                       ty::AssocKind::Fn => {
       66 ( 0.00%)                  let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {
       66 ( 0.00%)                      let param_names = match *m {
        .                                   hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),
       42 ( 0.00%)                          hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),
        .                               };
        .                               FnData {
        .                                   asyncness: m_sig.header.asyncness,
        .                                   constness: hir::Constness::NotConst,
        .                                   param_names,
        .                               }
        .                           } else {
        .                               bug!()
-- line 1211 ----------------------------------------
-- line 1217 ----------------------------------------
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           self.encode_explicit_item_bounds(def_id);
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
        .                   self.encode_ident_span(def_id, ast_item.ident);
      114 ( 0.00%)          match trait_item.kind {
        .                       ty::AssocKind::Const | ty::AssocKind::Fn => {
        .                           self.encode_item_type(def_id);
        .                       }
        .                       ty::AssocKind::Type => {
       20 ( 0.00%)                  if trait_item.defaultness.has_value() {
        .                               self.encode_item_type(def_id);
        .                           }
        .                       }
        .                   }
       38 ( 0.00%)          if trait_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
        .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
    1,722 ( 0.00%)          let tcx = self.tcx;
        .           
    5,166 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
      861 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
        .           
    3,444 ( 0.00%)          let container = match impl_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
        .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
        .                       hir::Defaultness::Default { has_value: false } => {
        .                           span_bug!(ast_item.span, "impl items always have values (currently)")
        .                       }
        .                   };
        .           
    5,166 ( 0.00%)          match impl_item.kind {
        .                       ty::AssocKind::Const => {
        .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
        .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
        .           
        .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                                   container,
        .                                   qualifs,
        .                                   self.encode_rendered_const_for_body(body_id))
        .                               );
        .                           } else {
        .                               bug!()
        .                           }
        .                       }
        .                       ty::AssocKind::Fn => {
    1,688 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
        .                               FnData {
        .                                   asyncness: sig.header.asyncness,
        .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
      844 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
        .                                       hir::Constness::Const
        .                                   } else {
        .                                       hir::Constness::NotConst
        .                                   },
        .                                   param_names: self.encode_fn_param_names_for_body(body),
        .                               }
        .                           } else {
        .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
        .                               container,
        .                               has_self: impl_item.fn_has_self_parameter,
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
    2,583 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
    4,305 ( 0.00%)          self.encode_item_type(def_id);
    3,444 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
        .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
        .                   }
      861 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      544 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
    6,353 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
      544 ( 0.00%)      }
        .           
        .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
        .                   self.lazy(param_names.iter())
        .               }
        .           
        .               fn encode_mir(&mut self) {
        3 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        .                   let keys_and_jobs = self
        .                       .tcx
        .                       .mir_keys(())
        .                       .iter()
        .                       .filter_map(|&def_id| {
    7,935 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
    6,534 ( 0.00%)                  if encode_const || encode_opt {
    1,182 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
        .                           } else {
        .                               None
        .                           }
    3,174 ( 0.00%)              })
        .                       .collect::<Vec<_>>();
    2,960 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
        .                       debug_assert!(encode_const || encode_opt);
        .           
        .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
      591 ( 0.00%)              if encode_opt {
        .                           record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
        .                       }
      591 ( 0.00%)              if encode_const {
    2,364 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
        .           
        .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
      591 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
    2,364 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
        .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
        .                           }
        .                       }
    2,364 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
        .           
        .                       let instance =
        .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
      591 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
      591 ( 0.00%)              if !unused.is_empty() {
        .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
   23,536 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
        .                           record!(self.tables.stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_const_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
   20,594 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
        .                           record!(self.tables.const_stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
   17,652 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
   14,710 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
        .                       record!(self.tables.deprecation[def_id] <- depr);
        .                   }
   14,710 ( 0.00%)      }
        .           
    3,024 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
    1,512 ( 0.00%)          let hir = self.tcx.hir();
    1,008 ( 0.00%)          let body = hir.body(body_id);
    4,032 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
    1,512 ( 0.00%)              s.print_expr(&body.value)
        .                   });
    1,008 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
        .                   self.lazy(rendered_const)
    3,528 ( 0.00%)      }
        .           
   11,718 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
        .                   let tcx = self.tcx;
        .           
        .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
        .           
        .                   self.encode_ident_span(def_id, item.ident);
        .           
    7,812 ( 0.00%)          let entry_kind = match item.kind {
        .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
        .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
    1,473 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
    1,473 ( 0.00%)                  let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
    3,437 ( 0.00%)                  EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
        .                       }
      136 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
        .                           let data = FnData {
       68 ( 0.00%)                      asyncness: sig.header.asyncness,
       68 ( 0.00%)                      constness: sig.header.constness,
      136 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
        .                           };
        .           
        .                           EntryKind::Fn(self.lazy(data))
        .                       }
        1 ( 0.00%)              hir::ItemKind::Macro(ref macro_def) => {
        .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
        .                       }
        .                       hir::ItemKind::Mod(ref m) => {
      336 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
        .                       }
        .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
        .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
        .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
        .                       hir::ItemKind::OpaqueTy(..) => {
       20 ( 0.00%)                  self.encode_explicit_item_bounds(def_id);
        .                           EntryKind::OpaqueTy
        .                       }
      252 ( 0.00%)              hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
      126 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
      189 ( 0.00%)                  let variant = adt_def.non_enum_variant();
        .           
        .                           // Encode def_ids for each field and method
        .                           // for methods, write all the stuff get_trait_method
        .                           // needs to know
      252 ( 0.00%)                  let ctor = struct_def
        .                               .ctor_hir_id()
       20 ( 0.00%)                      .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
        .           
        .                           EntryKind::Struct(
        .                               self.lazy(VariantData {
       63 ( 0.00%)                          ctor_kind: variant.ctor_kind,
      252 ( 0.00%)                          discr: variant.discr,
        .                                   ctor,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
      189 ( 0.00%)                      adt_def.repr,
        .                           )
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let adt_def = self.tcx.adt_def(def_id);
        .                           let variant = adt_def.non_enum_variant();
        .           
        .                           EntryKind::Union(
        .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
        .                                   ctor_kind: variant.ctor_kind,
        .                                   discr: variant.discr,
        .                                   ctor: None,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
        .                               adt_def.repr,
        .                           )
        .                       }
    2,376 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
    2,242 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
    1,188 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
    1,188 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
      527 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
    3,162 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
    3,162 ( 0.00%)                          an.nth(1).and_then(|node| match node {
        .                                       specialization_graph::Node::Impl(parent) => Some(parent),
        .                                       _ => None,
        .                                   })
        .                               })
        .                           } else {
        .                               None
        .                           };
        .           
        .                           // if this is an impl of `CoerceUnsized`, create its
        .                           // "unsized info", else just store None
        .                           let coerce_unsized_info = trait_ref.and_then(|t| {
    3,162 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
        .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
        .                               } else {
        .                                   None
        .                               }
        .                           });
        .           
        .                           let data = ImplData {
        .                               polarity,
-- line 1496 ----------------------------------------
-- line 1498 ----------------------------------------
        .                               constness,
        .                               parent_impl: parent,
        .                               coerce_unsized_info,
        .                           };
        .           
        .                           EntryKind::Impl(self.lazy(data))
        .                       }
        .                       hir::ItemKind::Trait(..) => {
        8 ( 0.00%)                  let trait_def = self.tcx.trait_def(def_id);
        .                           let data = TraitData {
        4 ( 0.00%)                      unsafety: trait_def.unsafety,
        8 ( 0.00%)                      paren_sugar: trait_def.paren_sugar,
       20 ( 0.00%)                      has_auto_impl: self.tcx.trait_is_auto(def_id),
        4 ( 0.00%)                      is_marker: trait_def.is_marker,
        4 ( 0.00%)                      skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,
        4 ( 0.00%)                      specialization_kind: trait_def.specialization_kind,
        .                               must_implement_one_of: trait_def.must_implement_one_of.clone(),
        .                           };
        .           
        .                           EntryKind::Trait(self.lazy(data))
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
        .                           bug!("cannot encode info for item {:?}", item)
        .                       }
        .                   };
        .                   record!(self.tables.kind[def_id] <- entry_kind);
        .                   // FIXME(eddyb) there should be a nicer way to do this.
    6,370 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
       84 ( 0.00%)                  self.tcx.adt_def(def_id).variants.iter().map(|v| {
      208 ( 0.00%)                      assert!(v.def_id.is_local());
        .                               v.def_id.index
        .                           })
        .                       ),
        .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
        .                           record!(self.tables.children[def_id] <-
      189 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
      146 ( 0.00%)                          assert!(f.did.is_local());
        .                                   f.did.index
        .                               })
        .                           )
        .                       }
        .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
    1,196 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
        .                           record!(self.tables.children[def_id] <-
        .                               associated_item_def_ids.iter().map(|&def_id| {
      899 ( 0.00%)                          assert!(def_id.is_local());
        .                                   def_id.index
        .                               })
        .                           );
        .                       }
        .                       _ => {}
        .                   }
    3,251 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::Enum(..)
        .                       | hir::ItemKind::Struct(..)
        .                       | hir::ItemKind::Union(..)
    5,076 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
        .                       _ => {}
        .                   }
    3,817 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
      272 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
    2,616 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
    2,970 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
    2,635 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
        .                       }
        .                   }
   10,192 ( 0.00%)      }
        .           
        .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
      216 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
       72 ( 0.00%)          if encode_type {
        .                       self.encode_item_type(def_id);
        .                   }
        .               }
        .           
        .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
      378 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
        .           
        .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
        .                   // including on the signature, which is inferred in `typeck.
      189 ( 0.00%)          let ty = self.tcx.typeck(def_id).node_type(hir_id);
        .           
      189 ( 0.00%)          match ty.kind() {
        .                       ty::Generator(..) => {
        .                           let data = self.tcx.generator_kind(def_id).unwrap();
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));
        .                       }
        .           
        .                       ty::Closure(..) => {
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);
        .                       }
        .           
        .                       _ => bug!("closure that is neither generator nor closure"),
        .                   }
      252 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
      252 ( 0.00%)          if let ty::Closure(def_id, substs) = *ty.kind() {
      567 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
        .                   }
        .               }
        .           
        .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
       91 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(id);
        .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
       65 ( 0.00%)          let body_id = self.tcx.hir().body_owned_by(id);
       52 ( 0.00%)          let const_data = self.encode_rendered_const_for_body(body_id);
       13 ( 0.00%)          let qualifs = self.tcx.mir_const_qualif(def_id);
        .           
       52 ( 0.00%)          record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
       52 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
        .               }
        .           
        .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
        .                   self.lazy(used_libraries.iter())
        .               }
        .           
        .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
        5 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
        .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
        .               }
        .           
        .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
        .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
        .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
        .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
        .           
        2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
        8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
        .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
        .                           syntax_contexts.set(index, this.lazy(ctxt_data));
        .                           Ok(())
        .                       },
        .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
        .                           if let Some(index) = index.as_local() {
      888 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
      888 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
        .                           }
        .                           Ok(())
        .                       },
        .                   );
        .           
        .                   (
        .                       syntax_contexts.encode(&mut self.opaque),
        .                       expn_data_table.encode(&mut self.opaque),
        .                       expn_hash_table.encode(&mut self.opaque),
        .                   )
        .               }
        .           
        .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
        6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
        .                   if is_proc_macro {
        .                       let tcx = self.tcx;
        .                       let hir = tcx.hir();
        .           
        .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
        .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
        .                       let macros =
        .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
        .           
        .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
        7 ( 0.00%)          empty_proc_macro!(self);
        .           
        1 ( 0.00%)          let deps = self
        .                       .tcx
        .                       .crates(())
        .                       .iter()
        .                       .map(|&cnum| {
        .                           let dep = CrateDep {
       19 ( 0.00%)                      name: self.tcx.crate_name(cnum),
       19 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
       19 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
       19 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
       19 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
        .                           };
       95 ( 0.00%)                  (cnum, dep)
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   {
        .                       // Sanity-check the crate numbers
        .                       let mut expected_cnum = 1;
       38 ( 0.00%)              for &(n, _) in &deps {
       48 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
        .                           expected_cnum += 1;
        .                       }
        .                   }
        .           
        .                   // We're just going to write a list of crate 'name-hash-version's, with
        .                   // the assumption that they are numbered 1 to n.
        .                   // FIXME (#2166): This is not nearly enough to support correct versioning
        .                   // but is enough to get transitive crate dependencies working.
        .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
        .               }
        .           
        .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let lib_features = tcx.lib_features(());
        2 ( 0.00%)          self.lazy(lib_features.to_vec())
        .               }
        .           
        .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
        .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
        .               }
        .           
        .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
        4 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          let lang_items = tcx.lang_items();
        2 ( 0.00%)          let lang_items = lang_items.items().iter();
        .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
      568 ( 0.00%)              if let Some(def_id) = opt_def_id {
        .                           if def_id.is_local() {
        .                               return Some((def_id.index, i));
        .                           }
        .                       }
        .                       None
        .                   }))
        .               }
        .           
        .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
        .               }
        .           
        .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
        .               }
        .           
        .               /// Encodes an index, mapping each trait to its (local) implementations.
        .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
        .                   debug!("EncodeContext::encode_traits_and_impls()");
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let tcx = self.tcx;
        5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
        4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
        .           
        .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
        .           
        .                   // Bring everything into deterministic order for hashing
       24 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
        .           
        .                   let all_impls: Vec<_> = all_impls
        .                       .into_iter()
      360 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
        .                           // Bring everything into deterministic order for hashing
       18 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
      521 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
        .                           });
        .           
       96 ( 0.00%)                  TraitImpls {
        .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
       72 ( 0.00%)                      impls: self.lazy(&impls),
        .                           }
      192 ( 0.00%)              })
        .                       .collect();
        .           
        .                   self.lazy(&all_impls)
        .               }
        .           
        .               // Encodes all symbols exported from this crate into the metadata.
        .               //
        .               // This pass is seeded off the reachability list calculated in the
        .               // middle::reachable module but filters out items that either don't have a
        .               // symbol associated with them (they weren't translated) or if they're an FFI
        .               // definition (as that's not defined in this crate).
        .               fn encode_exported_symbols(
        .                   &mut self,
        .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
        .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        .                   // The metadata symbol name is special. It should not show up in
        .                   // downstream crates.
        9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
        .           
        .                   self.lazy(
        .                       exported_symbols
        .                           .iter()
        .                           .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
        .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
        .                               _ => true,
        .                           })
        .                           .cloned(),
        .                   )
        .               }
        .           
        .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
        4 ( 0.00%)          for (ty, arr) in formats.iter() {
        2 ( 0.00%)              if *ty != CrateType::Dylib {
        .                           continue;
        .                       }
        .                       return self.lazy(arr.iter().map(|slot| match *slot {
        .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
        .           
        .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
        .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
        .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
        .               }
        .           }
        .           
        .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
        .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    1,500 ( 0.00%)          self.tcx.hir()
        .               }
1,129,239 ( 0.01%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
  125,471 ( 0.00%)          intravisit::walk_expr(self, ex);
        .                   self.encode_info_for_expr(ex);
1,003,768 ( 0.01%)      }
      117 ( 0.00%)      fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
        .                   intravisit::walk_anon_const(self, c);
       26 ( 0.00%)          self.encode_info_for_anon_const(c.hir_id);
      104 ( 0.00%)      }
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    4,458 ( 0.00%)          intravisit::walk_item(self, item);
    2,972 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
    5,208 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
        .                   }
    5,944 ( 0.00%)          self.encode_addl_info_for_item(item);
        .               }
        .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
        .                   intravisit::walk_foreign_item(self, ni);
        .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
        .               }
   15,093 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   intravisit::walk_generics(self, generics);
        .                   self.encode_info_for_generics(generics);
   13,416 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      735 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
        .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
        .                       for (field_index, _field) in variant.fields.iter().enumerate() {
        .                           self.encode_field(adt_def, variant_index, field_index);
        .                       }
        .                   }
      840 ( 0.00%)      }
        .           
        .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
        .                   for param in generics.params {
      828 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
      950 ( 0.00%)              match param.kind {
        .                           GenericParamKind::Lifetime { .. } => continue,
        .                           GenericParamKind::Type { default, .. } => {
        .                               self.encode_info_for_generic_param(
        .                                   def_id.to_def_id(),
        .                                   EntryKind::TypeParam,
        .                                   default.is_some(),
        .                               );
        .                           }
-- line 1970 ----------------------------------------
-- line 1975 ----------------------------------------
        .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  250,942 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
        .                       self.encode_info_for_closure(expr.hir_id);
        .                   }
        .               }
        .           
        .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
        .                   record!(self.tables.ident_span[def_id] <- ident.span);
        .               }
        .           
        .               /// In some cases, along with the item itself, we also
        .               /// encode some sub-items. Usually we want some info from the item
        .               /// so it's easier to do that here then to wait until we would encounter
        .               /// normally in the visitor walk.
   13,374 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
    7,430 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::Macro(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::ForeignMod { .. }
        .                       | hir::ItemKind::GlobalAsm(..)
        .                       | hir::ItemKind::ExternCrate(..)
        .                       | hir::ItemKind::Use(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::TraitAlias(..) => {
        .                           // no sub-item recording needed in these cases
        .                       }
        .                       hir::ItemKind::Enum(..) => {
       42 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
       84 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           for (i, variant) in def.variants.iter_enumerated() {
        .                               self.encode_enum_variant_info(def, i);
        .           
      624 ( 0.00%)                      if let Some(_ctor_def_id) = variant.ctor_def_id {
        .                                   self.encode_enum_variant_ctor(def, i);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
       63 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
      126 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           // If the struct has a constructor, encode it.
      252 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
       30 ( 0.00%)                      let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
        .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
        .                           }
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
        .                           self.encode_fields(def);
        .                       }
        .                       hir::ItemKind::Impl { .. } => {
    3,444 ( 0.00%)                  for &trait_item_def_id in
      594 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_impl_item(trait_item_def_id);
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(..) => {
      118 ( 0.00%)                  for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_trait_item(item_def_id);
        .                           }
        .                       }
        .                   }
   11,888 ( 0.00%)      }
        .           }
        .           
        .           struct ImplsVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
        .           }
        .           
        .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
   10,402 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
    2,972 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Impl(..) => {
    2,242 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
    3,162 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
        .                                   self.tcx,
        .                                   trait_ref.self_ty(),
        .                                   SimplifyParams::No,
        .                                   StripReferences::No,
        .                               );
        .           
        .                               self.impls
        .                                   .entry(trait_ref.def_id)
        .                                   .or_default()
        .                                   .push((item.def_id.local_def_index, simplified_self_ty));
        .                           }
        .                       }
        .                       _ => {}
        .                   }
   11,888 ( 0.00%)      }
        .           
        .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
        .           
        .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
        .                   // handled in `visit_item` above
        .               }
        .           
        .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn raw_data(&self) -> &[u8] {
        .                   &self.raw_data
        .               }
        .           }
        .           
       10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
        5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
        .           
        .               // Since encoding metadata is not in a query, and nothing is cached,
        .               // there's no need to do dep-graph tracking for any of it.
        .               tcx.dep_graph.assert_ignored();
        .           
        7 ( 0.00%)      join(
        3 ( 0.00%)          || encode_metadata_impl(tcx),
        .                   || {
        5 ( 0.00%)              if tcx.sess.threads() == 1 {
        .                           return;
        .                       }
        .                       // Prefetch some queries used by metadata encoding.
        .                       // This is not necessary for correctness, but is only done for performance reasons.
        .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
        .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
        .                   },
        .               )
        .               .0
        9 ( 0.00%)  }
        .           
        9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
        1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
        .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
        .           
        .               // Will be filled with the root position after encoding everything.
        .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
        .           
        2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
        3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
        2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
        .               drop(source_map_files);
        .           
        .               let hygiene_ctxt = HygieneEncodeContext::default();
        .           
       35 ( 0.00%)      let mut ecx = EncodeContext {
        4 ( 0.00%)          opaque: encoder,
        .                   tcx,
        2 ( 0.00%)          feat: tcx.features(),
        .                   tables: Default::default(),
        .                   lazy_state: LazyState::NoNode,
        .                   type_shorthands: Default::default(),
        .                   predicate_shorthands: Default::default(),
        4 ( 0.00%)          source_file_cache,
        .                   interpret_allocs: Default::default(),
        4 ( 0.00%)          required_source_files,
        2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
        .                   hygiene_ctxt: &hygiene_ctxt,
        .               };
        .           
        .               // Encode the rustc version string in a predictable location.
        .               rustc_version().encode(&mut ecx).unwrap();
        .           
        .               // Encode all the entries and extra information in the crate,
        .               // culminating in the `CrateRoot` which points to all of it.
        1 ( 0.00%)      let root = ecx.encode_crate_root();
        .           
        7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
        .           
        .               // Encode the root position.
        .               let header = METADATA_HEADER.len();
        .               let pos = root.position.get();
        3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
        3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
        1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
        5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
        .           
        .               // Record metadata size for self-profiling
        .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
        .           
        5 ( 0.00%)      EncodedMetadata { raw_data: result }
       12 ( 0.00%)  }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      *providers = Providers {
        .                   traits_in_crate: |tcx, cnum| {
        1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
        .           
        1 ( 0.00%)              #[derive(Default)]
        .                       struct TraitsVisitor {
        .                           traits: Vec<DefId>,
        .                       }
        .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
        .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
    5,944 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
        4 ( 0.00%)                          self.traits.push(item.def_id.to_def_id());
        .                               }
        .                           }
        .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
        .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
        .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
        .                       }
        .           
        .                       let mut visitor = TraitsVisitor::default();
        4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
        .                       // Bring everything into deterministic order.
        4 ( 0.00%)              visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
        .                       tcx.arena.alloc_slice(&visitor.traits)
        .                   },
        .           
        .                   ..*providers
        .               };
        .           }

  674,972 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 3,392,760 ( 0.04%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    11,305 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     8,500 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
         6 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    62,504 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 2,883,570 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 2,115,464 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 2,734,084 ( 0.03%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        31 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
         1 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   100,892 ( 0.00%)          let _ = &self[a];
   132,210 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
         2 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     2,137 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       126 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   195,724 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    11,882 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    15,014 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     4,509 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
     2,264 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
16,813,718 ( 0.19%)          while left < right {
18,490,566 ( 0.21%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 2,666,707 ( 0.03%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 6,398,079 ( 0.07%)              if cmp == Less {
 6,876,445 ( 0.08%)                  left = mid + 1;
 2,720,445 ( 0.03%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
16,067,279 ( 0.18%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   252,836 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    32,920 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    32,920 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    32,920 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
        29 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        58 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

12,624,756 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir                 

        .           #![allow(clippy::many_single_char_names)]
        .           use crate::consts::RC;
        .           use core::convert::TryInto;
        .           
        .           #[inline(always)]
        .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
2,537,719 ( 0.03%)      ((x & y) | (!x & z))
        .                   .wrapping_add(w)
        .                   .wrapping_add(m)
        .                   .wrapping_add(c)
        .                   .rotate_left(s)
        .                   .wrapping_add(x)
        .           }
        .           #[inline(always)]
        .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
2,419,134 ( 0.03%)      ((x & z) | (y & !z))
        .                   .wrapping_add(w)
        .                   .wrapping_add(m)
        .                   .wrapping_add(c)
        .                   .rotate_left(s)
        .                   .wrapping_add(x)
        .           }
        .           
        .           #[inline(always)]
        .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
1,185,850 ( 0.01%)      (x ^ y ^ z)
        .                   .wrapping_add(w)
        .                   .wrapping_add(m)
        .                   .wrapping_add(c)
        .                   .rotate_left(s)
        .                   .wrapping_add(x)
        .           }
        .           
        .           #[inline(always)]
        .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
1,517,888 ( 0.02%)      (y ^ (x | !z))
        .                   .wrapping_add(w)
        .                   .wrapping_add(m)
        .                   .wrapping_add(c)
        .                   .rotate_left(s)
        .                   .wrapping_add(x)
        .           }
        .           
        .           #[inline]
  213,453 ( 0.00%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
   47,434 ( 0.00%)      let mut a = state[0];
   23,717 ( 0.00%)      let mut b = state[1];
   23,717 ( 0.00%)      let mut c = state[2];
   23,717 ( 0.00%)      let mut d = state[3];
        .           
        .               let mut data = [0u32; 16];
        .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
  592,925 ( 0.01%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
        .               }
        .           
        .               // round 1
        .               a = op_f(a, b, c, d, data[0], RC[0], 7);
        .               d = op_f(d, a, b, c, data[1], RC[1], 12);
        .               c = op_f(c, d, a, b, data[2], RC[2], 17);
        .               b = op_f(b, c, d, a, data[3], RC[3], 22);
        .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
        .               c = op_i(c, d, a, b, data[6], RC[58], 15);
        .               b = op_i(b, c, d, a, data[13], RC[59], 21);
        .           
        .               a = op_i(a, b, c, d, data[4], RC[60], 6);
        .               d = op_i(d, a, b, c, data[11], RC[61], 10);
        .               c = op_i(c, d, a, b, data[2], RC[62], 15);
        .               b = op_i(b, c, d, a, data[9], RC[63], 21);
        .           
   47,434 ( 0.00%)      state[0] = state[0].wrapping_add(a);
   23,717 ( 0.00%)      state[1] = state[1].wrapping_add(b);
   23,717 ( 0.00%)      state[2] = state[2].wrapping_add(c);
   23,717 ( 0.00%)      state[3] = state[3].wrapping_add(d);
  189,736 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    730,080 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  2,689,685 ( 0.03%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
         19 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    403,600 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  1,242,779 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    480,153 ( 0.01%)                          assume(!self.end.is_null());
          .                               }
134,497,712 ( 1.54%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          1 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  4,511,637 ( 0.05%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     43,598 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     28,378 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      7,652 ( 0.00%)                  while let Some(x) = self.next() {
     21,385 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  3,246,731 ( 0.04%)                  while let Some(x) = self.next() {
  4,254,389 ( 0.05%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
          8 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     65,963 ( 0.00%)                  while let Some(x) = self.next() {
    172,691 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
        518 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
     46,187 ( 0.00%)                  while let Some(x) = self.next() {
    591,205 ( 0.01%)                      if let Some(y) = f(x) {
     56,116 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     13,242 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
    856,099 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
     50,563 ( 0.00%)                  while let Some(x) = self.next_back() {
    631,774 ( 0.01%)                      i -= 1;
    493,714 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    155,651 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
          .                               assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
         20 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  4,609,035 ( 0.05%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 28,172,347 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
 5,568,405 ( 0.06%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    11,944 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               pub const fn is_some(&self) -> bool {
 8,729,375 ( 0.10%)          matches!(*self, Some(_))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Option<&T> {
10,543,736 ( 0.12%)          match *self {
         .                       Some(ref x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn as_mut(&mut self) -> Option<&mut T> {
 4,141,906 ( 0.05%)          match *self {
         .                       Some(ref mut x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
 3,820,714 ( 0.04%)          match self {
   909,502 ( 0.01%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn unwrap(self) -> T {
 9,992,253 ( 0.11%)          match self {
 9,099,637 ( 0.10%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 5,794,873 ( 0.07%)          match self {
         .                       Some(x) => x,
     9,084 ( 0.00%)              None => default,
         .                   }
     5,065 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       281 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 7,098,436 ( 0.08%)          match self {
   152,177 ( 0.00%)              Some(x) => x,
   139,108 ( 0.00%)              None => f(),
         .                   }
       541 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
    11,127 ( 0.00%)          match self {
     5,512 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     5,474 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
 8,824,811 ( 0.10%)          match self {
 9,157,652 ( 0.10%)              Some(x) => Some(f(x)),
   441,052 ( 0.01%)              None => None,
         .                   }
   164,504 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
 2,236,683 ( 0.03%)          match self {
    71,872 ( 0.00%)              Some(t) => f(t),
    26,243 ( 0.00%)              None => default,
         .                   }
         .               }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
    42,055 ( 0.00%)          match self {
     6,744 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
 1,230,040 ( 0.01%)          match self {
     6,582 ( 0.00%)              Some(v) => Ok(v),
     3,288 ( 0.00%)              None => Err(err),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   285,390 ( 0.00%)          match self {
   357,673 ( 0.00%)              Some(v) => Ok(v),
   120,140 ( 0.00%)              None => Err(err()),
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
    52,603 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     2,522 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   596,057 ( 0.01%)          match self {
    36,792 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
    87,519 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
    10,343 ( 0.00%)          if let Some(x) = self {
    12,346 ( 0.00%)              if predicate(&x) {
         .                           return Some(x);
         .                       }
         .                   }
         .                   None
        66 ( 0.00%)      }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
         .               ///
         .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
    22,328 ( 0.00%)          match self {
     2,751 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
   774,312 ( 0.01%)          match self {
    50,933 ( 0.00%)              Some(x) => Some(x),
         .                       None => f(),
         .                   }
         .               }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
   292,413 ( 0.00%)          if let None = *self {
   682,063 ( 0.01%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 1,174,198 ( 0.01%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
         .                       mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
-- line 1515 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
     5,840 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
    94,846 ( 0.00%)          match self {
 1,930,029 ( 0.02%)              Some(&v) => Some(v),
    10,154 ( 0.00%)              None => None,
         .                   }
        35 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    67,879 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   649,088 ( 0.01%)          match self {
 3,278,297 ( 0.04%)              Some(t) => Some(t.clone()),
    31,373 ( 0.00%)              None => None,
         .                   }
   153,497 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
         .               fn clone(&self) -> Self {
 6,923,343 ( 0.08%)          match self {
   112,440 ( 0.00%)              Some(x) => Some(x.clone()),
     8,091 ( 0.00%)              None => None,
         .                   }
 1,672,255 ( 0.02%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   536,219 ( 0.01%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
         .                       None => (0, Some(0)),
         .                   }
         .               }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.inner.next()
         .               }
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        63 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
     7,300 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 3,408,150 ( 0.04%)          match self {
   471,627 ( 0.01%)              Some(v) => ControlFlow::Continue(v),
         .                       None => ControlFlow::Break(None),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
         .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   339,685 ( 0.00%)              None => None,
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
-- line 2274 ----------------------------------------

17,185,795 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .               Level, Lint, LintId,
        .           };
        .           use rustc_session::parse::feature_err;
        .           use rustc_session::Session;
        .           use rustc_span::symbol::{sym, Symbol};
        .           use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};
        .           use tracing::debug;
        .           
        9 ( 0.00%)  fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {
        .               let store = unerased_lint_store(tcx);
        .               let levels =
        6 ( 0.00%)          LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);
       13 ( 0.00%)      let mut builder = LintLevelMapBuilder { levels, tcx };
        3 ( 0.00%)      let krate = tcx.hir().krate();
        .           
        2 ( 0.00%)      builder.levels.id_to_set.reserve(krate.owners.len() + 1);
        .           
        8 ( 0.00%)      let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);
        .               builder.levels.register_id(hir::CRATE_HIR_ID);
        .               tcx.hir().walk_toplevel_module(&mut builder);
        .               builder.levels.pop(push);
        .           
       16 ( 0.00%)      builder.levels.build_map()
        9 ( 0.00%)  }
        .           
        .           pub struct LintLevelsBuilder<'s> {
        .               sess: &'s Session,
        .               sets: LintLevelSets,
        .               id_to_set: FxHashMap<HirId, LintStackIndex>,
        .               cur: LintStackIndex,
        .               warn_about_weird_lints: bool,
        .               store: &'s LintStore,
-- line 51 ----------------------------------------
-- line 53 ----------------------------------------
        .           }
        .           
        .           pub struct BuilderPush {
        .               prev: LintStackIndex,
        .               pub changed: bool,
        .           }
        .           
        .           impl<'s> LintLevelsBuilder<'s> {
      403 ( 0.00%)      pub fn new(
        .                   sess: &'s Session,
        .                   warn_about_weird_lints: bool,
        .                   store: &'s LintStore,
        .                   registered_tools: &'s RegisteredTools,
        .               ) -> Self {
      341 ( 0.00%)          let mut builder = LintLevelsBuilder {
        .                       sess,
       31 ( 0.00%)              sets: LintLevelSets::new(),
        .                       cur: COMMAND_LINE,
        .                       id_to_set: Default::default(),
        .                       warn_about_weird_lints,
        .                       store,
        .                       registered_tools,
        .                   };
        .                   builder.process_command_line(sess, store);
       93 ( 0.00%)          assert_eq!(builder.sets.list.len(), 1);
        .                   builder
      279 ( 0.00%)      }
        .           
        .               pub(crate) fn sess(&self) -> &Session {
   34,965 ( 0.00%)          self.sess
        .               }
        .           
        .               pub(crate) fn lint_store(&self) -> &LintStore {
        .                   self.store
        .               }
        .           
        .               fn process_command_line(&mut self, sess: &Session, store: &LintStore) {
        .                   let mut specs = FxHashMap::default();
       62 ( 0.00%)          self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);
        .           
       62 ( 0.00%)          for &(ref lint_name, level) in &sess.opts.lint_opts {
      310 ( 0.00%)              store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);
        .                       let orig_level = level;
      124 ( 0.00%)              let lint_flag_val = Symbol::intern(lint_name);
        .           
      310 ( 0.00%)              let ids = match store.find_lints(&lint_name) {
      248 ( 0.00%)                  Ok(ids) => ids,
        .                           Err(_) => continue, // errors handled in check_lint_name_cmdline above
        .                       };
      186 ( 0.00%)              for id in ids {
        .                           // ForceWarn and Forbid cannot be overriden
        .                           if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {
        .                               continue;
        .                           }
        .           
      248 ( 0.00%)                  self.check_gated_lint(id, DUMMY_SP);
        .                           let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);
      124 ( 0.00%)                  specs.insert(id, (level, src));
        .                       }
        .                   }
        .           
      248 ( 0.00%)          self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });
        .               }
        .           
        .               /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful
        .               /// (e.g. if a forbid was already inserted on the same scope), then emits a
        .               /// diagnostic with no change to `specs`.
   11,055 ( 0.00%)      fn insert_spec(
        .                   &mut self,
        .                   specs: &mut FxHashMap<LintId, LevelAndSource>,
        .                   id: LintId,
    6,030 ( 0.00%)          (level, src): LevelAndSource,
        .               ) {
    5,025 ( 0.00%)          let (old_level, old_src) =
    7,035 ( 0.00%)              self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);
        .                   // Setting to a non-forbid level is an error if the lint previously had
        .                   // a forbid level. Note that this is not necessarily true even with a
        .                   // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.
        .                   //
        .                   // This means that this only errors if we're truly lowering the lint
        .                   // level from forbid.
    1,005 ( 0.00%)          if level != Level::Forbid {
    4,008 ( 0.00%)              if let Level::Forbid = old_level {
        .                           // Backwards compatibility check:
        .                           //
        .                           // We used to not consider `forbid(lint_group)`
        .                           // as preventing `allow(lint)` for some lint `lint` in
        .                           // `lint_group`. For now, issue a future-compatibility
        .                           // warning for this case.
        .                           let id_name = id.lint.name_lower();
        .                           let fcw_warning = match old_src {
-- line 143 ----------------------------------------
-- line 199 ----------------------------------------
        .                           // Retain the forbid lint level, unless we are
        .                           // issuing a FCW. In the FCW case, we want to
        .                           // respect the new setting.
        .                           if !fcw_warning {
        .                               return;
        .                           }
        .                       }
        .                   }
        6 ( 0.00%)          if let Level::ForceWarn = old_level {
        .                       specs.insert(id, (old_level, old_src));
        .                   } else {
    4,020 ( 0.00%)              specs.insert(id, (level, src));
        .                   }
    8,040 ( 0.00%)      }
        .           
        .               /// Pushes a list of AST lint attributes onto this context.
        .               ///
        .               /// This function will return a `BuilderPush` object which should be passed
        .               /// to `pop` when this scope for the attributes provided is exited.
        .               ///
        .               /// This function will perform a number of tasks:
        .               ///
        .               /// * It'll validate all lint-related attributes in `attrs`
        .               /// * It'll mark all lint-related attributes as used
        .               /// * Lint levels will be updated based on the attributes provided
        .               /// * Lint attributes are validated, e.g., a `#[forbid]` can't be switched to
        .               ///   `#[allow]`
        .               ///
        .               /// Don't forget to call `pop`!
3,134,128 ( 0.04%)      pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {
        .                   let mut specs = FxHashMap::default();
  783,532 ( 0.01%)          let sess = self.sess;
  391,766 ( 0.00%)          let bad_attr = |span| struct_span_err!(sess, span, E0452, "malformed lint attribute input");
        .                   for attr in attrs {
   74,865 ( 0.00%)              let Some(level) = Level::from_symbol(attr.name_or_empty()) else {
        .                           continue
        .                       };
        .           
    9,045 ( 0.00%)              let Some(mut metas) = attr.meta_item_list() else {
        .                           continue
        .                       };
        .           
    1,005 ( 0.00%)              if metas.is_empty() {
        .                           // FIXME (#55112): issue unused-attributes lint for `#[level()]`
        .                           continue;
        .                       }
        .           
        .                       // Before processing the lint names, look for a reason (RFC 2383)
        .                       // at the end.
        .                       let mut reason = None;
    1,005 ( 0.00%)              let tail_li = &metas[metas.len() - 1];
    3,015 ( 0.00%)              if let Some(item) = tail_li.meta_item() {
    5,025 ( 0.00%)                  match item.kind {
        .                               ast::MetaItemKind::Word => {} // actual lint names handled later
        .                               ast::MetaItemKind::NameValue(ref name_value) => {
        .                                   if item.path == sym::reason {
        .                                       // FIXME (#55112): issue unused-attributes lint if we thereby
        .                                       // don't have any lint names (`#[level(reason = "foo")]`)
        .                                       if let ast::LitKind::Str(rationale, _) = name_value.kind {
        .                                           if !self.sess.features_untracked().lint_reasons {
        .                                               feature_err(
-- line 259 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   }
        .                               }
        .                               ast::MetaItemKind::List(_) => {
        .                                   bad_attr(item.span).span_label(item.span, "bad attribute argument").emit();
        .                               }
        .                           }
        .                       }
        .           
   22,110 ( 0.00%)              for li in metas {
    4,020 ( 0.00%)                  let sp = li.span();
    2,010 ( 0.00%)                  let mut meta_item = match li {
   18,090 ( 0.00%)                      ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,
        .                               _ => {
        .                                   let mut err = bad_attr(sp);
        .                                   let mut add_label = true;
        .                                   if let Some(item) = li.meta_item() {
        .                                       if let ast::MetaItemKind::NameValue(_) = item.kind {
        .                                           if item.path == sym::reason {
        .                                               err.span_label(sp, "reason in lint attribute must come last");
        .                                               add_label = false;
-- line 298 ----------------------------------------
-- line 301 ----------------------------------------
        .                                   }
        .                                   if add_label {
        .                                       err.span_label(sp, "bad attribute argument");
        .                                   }
        .                                   err.emit();
        .                                   continue;
        .                               }
        .                           };
    3,015 ( 0.00%)                  let tool_ident = if meta_item.path.segments.len() > 1 {
        .                               Some(meta_item.path.segments.remove(0).ident)
        .                           } else {
    1,005 ( 0.00%)                      None
        .                           };
    1,005 ( 0.00%)                  let tool_name = tool_ident.map(|ident| ident.name);
    3,015 ( 0.00%)                  let name = pprust::path_to_string(&meta_item.path);
        .                           let lint_result =
    5,025 ( 0.00%)                      self.store.check_lint_name(&name, tool_name, self.registered_tools);
    3,015 ( 0.00%)                  match &lint_result {
        .                               CheckLintNameResult::Ok(ids) => {
        .                                   let src = LintLevelSource::Node(
        .                                       meta_item.path.segments.last().expect("empty lint name").ident.name,
        .                                       sp,
        .                                       reason,
        .                                   );
    3,015 ( 0.00%)                          for &id in *ids {
    5,025 ( 0.00%)                              self.check_gated_lint(id, attr.span);
   12,060 ( 0.00%)                              self.insert_spec(&mut specs, id, (level, src));
        .                                   }
        .                               }
        .           
        .                               CheckLintNameResult::Tool(result) => {
        .                                   match *result {
        .                                       Ok(ids) => {
        .                                           let complete_name =
        .                                               &format!("{}::{}", tool_ident.unwrap().name, name);
-- line 335 ----------------------------------------
-- line 454 ----------------------------------------
        .                                       }
        .                                       db.emit();
        .                                   });
        .                               }
        .                           }
        .                           // If this lint was renamed, apply the new lint instead of ignoring the attribute.
        .                           // This happens outside of the match because the new lint should be applied even if
        .                           // we don't warn about the name change.
    5,025 ( 0.00%)                  if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {
        .                               // Ignore any errors or warnings that happen because the new name is inaccurate
        .                               // NOTE: `new_name` already includes the tool name, so we don't have to add it again.
        .                               if let CheckLintNameResult::Ok(ids) =
        .                                   self.store.check_lint_name(&new_name, None, self.registered_tools)
        .                               {
        .                                   let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);
        .                                   for &id in ids {
        .                                       self.check_gated_lint(id, attr.span);
        .                                       self.insert_spec(&mut specs, id, (level, src));
        .                                   }
        .                               } else {
        .                                   panic!("renamed lint does not exist: {}", new_name);
        .                               }
        .                           }
    4,020 ( 0.00%)              }
        .                   }
        .           
  783,532 ( 0.01%)          if !is_crate_node {
    1,990 ( 0.00%)              for (id, &(level, ref src)) in specs.iter() {
    2,985 ( 0.00%)                  if !id.lint.crate_level_only {
        .                               continue;
        .                           }
        .           
        .                           let LintLevelSource::Node(lint_attr_name, lint_attr_span, _) = *src else {
        .                               continue
        .                           };
        .           
        .                           let lint = builtin::UNUSED_ATTRIBUTES;
-- line 490 ----------------------------------------
-- line 505 ----------------------------------------
        .                                   db.emit();
        .                               },
        .                           );
        .                           // don't set a separate error for every lint in the group
        .                           break;
        .                       }
        .                   }
        .           
  391,766 ( 0.00%)          let prev = self.cur;
  391,766 ( 0.00%)          if !specs.is_empty() {
    5,994 ( 0.00%)              self.cur = self.sets.list.push(LintSet { specs, parent: prev });
        .                   }
        .           
        .                   BuilderPush { prev, changed: prev != self.cur }
3,525,894 ( 0.04%)      }
        .           
        .               /// Checks if the lint is gated on a feature that is not enabled.
    7,469 ( 0.00%)      fn check_gated_lint(&self, lint_id: LintId, span: Span) {
    3,201 ( 0.00%)          if let Some(feature) = lint_id.lint.feature_gate {
        .                       if !self.sess.features_untracked().enabled(feature) {
        .                           feature_err(
        .                               &self.sess.parse_sess,
        .                               feature,
        .                               span,
        .                               &format!("the `{}` lint is unstable", lint_id.lint.name_lower()),
        .                           )
        .                           .emit();
        .                       }
        .                   }
    8,536 ( 0.00%)      }
        .           
        .               /// Called after `push` when the scope of a set of attributes are exited.
        .               pub fn pop(&mut self, push: BuilderPush) {
  483,804 ( 0.01%)          self.cur = push.prev;
  258,773 ( 0.00%)      }
        .           
        .               /// Find the lint level for a lint.
        6 ( 0.00%)      pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {
       50 ( 0.00%)          self.sets.get_lint_level(lint, self.cur, None, self.sess)
        9 ( 0.00%)      }
        .           
        .               /// Used to emit a lint-related diagnostic based on the current state of
        .               /// this lint context.
       33 ( 0.00%)      pub fn struct_lint(
        .                   &self,
        .                   lint: &'static Lint,
        .                   span: Option<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
       24 ( 0.00%)          let (level, src) = self.lint_level(lint);
        3 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, span, decorate)
       21 ( 0.00%)      }
        .           
        .               /// Registers the ID provided with the current set of lints stored in
        .               /// this context.
        .               pub fn register_id(&mut self, id: HirId) {
      974 ( 0.00%)          self.id_to_set.insert(id, self.cur);
        .               }
        .           
        .               pub fn build_map(self) -> LintLevelMap {
        8 ( 0.00%)          LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }
        .               }
        .           }
        .           
        .           struct LintLevelMapBuilder<'tcx> {
        .               levels: LintLevelsBuilder<'tcx>,
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl LintLevelMapBuilder<'_> {
        .               fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)
        .               where
        .                   F: FnOnce(&mut Self),
        .               {
        .                   let is_crate_hir = id == hir::CRATE_HIR_ID;
  734,349 ( 0.01%)          let attrs = self.tcx.hir().attrs(id);
  736,734 ( 0.01%)          let push = self.levels.push(attrs, is_crate_hir);
  122,876 ( 0.00%)          if push.changed {
        .                       self.levels.register_id(id);
        .                   }
        .                   f(self);
        .                   self.levels.pop(push);
        .               }
        .           }
        .           
        .           impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    3,876 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
    2,920 ( 0.00%)          self.with_lint_attrs(param.hir_id, |builder| {
        .                       intravisit::walk_param(builder, param);
        .                   });
        .               }
        .           
        .               fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {
    1,486 ( 0.00%)          self.with_lint_attrs(it.hir_id(), |builder| {
    4,458 ( 0.00%)              intravisit::walk_item(builder, it);
        .                   });
        .               }
        .           
        .               fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {
        .                   self.with_lint_attrs(it.hir_id(), |builder| {
        .                       intravisit::walk_foreign_item(builder, it);
        .                   })
        .               }
        .           
        .               fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {
        .                   // We will call `with_lint_attrs` when we walk
        .                   // the `StmtKind`. The outer statement itself doesn't
        .                   // define the lint levels.
    7,320 ( 0.00%)          intravisit::walk_stmt(self, e);
        .               }
        .           
    4,221 ( 0.00%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
  230,594 ( 0.00%)          self.with_lint_attrs(e.hir_id, |builder| {
  448,259 ( 0.01%)              intravisit::walk_expr(builder, e);
        .                   })
    3,752 ( 0.00%)      }
        .           
        .               fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
      798 ( 0.00%)          self.with_lint_attrs(s.hir_id, |builder| {
        .                       intravisit::walk_field_def(builder, s);
        .                   })
        .               }
        .           
        .               fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
      416 ( 0.00%)          self.with_lint_attrs(v.id, |builder| {
        .                       intravisit::walk_variant(builder, v, g, item_id);
        .                   })
        .               }
        .           
        .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
    2,138 ( 0.00%)          self.with_lint_attrs(l.hir_id, |builder| {
    4,276 ( 0.00%)              intravisit::walk_local(builder, l);
        .                   })
        .               }
        .           
        .               fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {
    4,266 ( 0.00%)          self.with_lint_attrs(a.hir_id, |builder| {
    8,532 ( 0.00%)              intravisit::walk_arm(builder, a);
        .                   })
        .               }
        .           
        .               fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {
       38 ( 0.00%)          self.with_lint_attrs(trait_item.hir_id(), |builder| {
      114 ( 0.00%)              intravisit::walk_trait_item(builder, trait_item);
        .                   });
        .               }
        .           
        .               fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
      861 ( 0.00%)          self.with_lint_attrs(impl_item.hir_id(), |builder| {
    2,583 ( 0.00%)              intravisit::walk_impl_item(builder, impl_item);
        .                   });
        .               }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      providers.lint_levels = lint_levels;
        .           }

  407,566 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs
--------------------------------------------------------------------------------
Ir                 

-- line 82 ----------------------------------------
        .           /// promotion of temporaries must not change program behavior; if the promoted could be
        .           /// written to, that would be a problem.
        .           pub struct HasMutInterior;
        .           
        .           impl Qualif for HasMutInterior {
        .               const ANALYSIS_NAME: &'static str = "flow_has_mut_interior";
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
    1,517 ( 0.00%)          qualifs.has_mut_interior
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
1,305,786 ( 0.01%)          !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.
        .                   // It arises structurally for all other types.
      595 ( 0.00%)          Some(adt.did) == cx.tcx.lang_items().unsafe_cell_type()
        .               }
        .           }
        .           
        .           /// Constant containing an ADT that implements `Drop`.
        .           /// This must be ruled out because implicit promotion would remove side-effects
        .           /// that occur as part of dropping that value. N.B., the implicit promotion has
        .           /// to reject const Drop implementations because even if side-effects are ruled
        .           /// out through other means, the execution of the drop could diverge.
        .           pub struct NeedsDrop;
        .           
        .           impl Qualif for NeedsDrop {
        .               const ANALYSIS_NAME: &'static str = "flow_needs_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
      501 ( 0.00%)          qualifs.needs_drop
        .               }
        .           
  523,896 ( 0.01%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
  130,974 ( 0.00%)          ty.needs_drop(cx.tcx, cx.param_env)
  589,383 ( 0.01%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
      129 ( 0.00%)          adt.has_dtor(cx.tcx)
        .               }
        .           }
        .           
        .           /// Constant containing an ADT that implements non-const `Drop`.
        .           /// This must be ruled out because we cannot run `Drop` during compile-time.
        .           pub struct NeedsNonConstDrop;
        .           
        .           impl Qualif for NeedsNonConstDrop {
-- line 140 ----------------------------------------
-- line 141 ----------------------------------------
        .               const ANALYSIS_NAME: &'static str = "flow_needs_nonconst_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .               const ALLOW_PROMOTED: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.needs_non_const_drop
        .               }
        .           
    4,536 ( 0.00%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // Avoid selecting for simple cases, such as builtin types.
    2,016 ( 0.00%)          if ty::util::is_trivially_const_drop(ty) {
        .                       return false;
        .                   }
        .           
        .                   let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {
        .                       // there is no way to define a type that needs non-const drop
        .                       // without having the lang item present.
        .                       return false;
        .                   };
-- line 159 ----------------------------------------
-- line 196 ----------------------------------------
        .                       let mut fcx = FulfillmentContext::new();
        .                       for nested in impl_src.nested_obligations() {
        .                           fcx.register_predicate_obligation(&infcx, nested);
        .                       }
        .           
        .                       // If we had any errors, then it's bad
        .                       !fcx.select_all_or_error(&infcx).is_empty()
        .                   })
    4,536 ( 0.00%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   adt.has_non_const_dtor(cx.tcx)
        .               }
-- line 212 ----------------------------------------
-- line 223 ----------------------------------------
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // If *any* component of a composite data type does not implement `Structural{Partial,}Eq`,
        .                   // we know that at least some values of that type are not structural-match. I say "some"
        .                   // because that component may be part of an enum variant (e.g.,
        .                   // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be
        .                   // structural-match (`Option::None`).
    1,512 ( 0.00%)          traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));
        .                   !ty.is_structural_eq_shallow(cx.tcx)
        .               }
        .           }
        .           
        .           // FIXME: Use `mir::visit::Visitor` for the `in_*` functions if/when it supports early return.
        .           
        .           /// Returns `true` if this `Rvalue` contains qualif `Q`.
2,077,430 ( 0.02%)  pub fn in_rvalue<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               rvalue: &Rvalue<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
1,038,715 ( 0.01%)      match rvalue {
        .                   Rvalue::ThreadLocalRef(_) | Rvalue::NullaryOp(..) => {
        .                       Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx))
        .                   }
        .           
        .                   Rvalue::Discriminant(place) | Rvalue::Len(place) => {
        .                       in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
        .                   Rvalue::Use(operand)
        .                   | Rvalue::Repeat(operand, _)
        .                   | Rvalue::UnaryOp(_, operand)
        .                   | Rvalue::Cast(_, operand, _)
   45,095 ( 0.00%)          | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),
        .           
        .                   Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {
        .                       in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)
        .                   }
        .           
   63,004 ( 0.00%)          Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {
        .                       // Special-case reborrows to be more like a copy of the reference.
   22,440 ( 0.00%)              if let Some((place_base, ProjectionElem::Deref)) = place.as_ref().last_projection() {
   11,220 ( 0.00%)                  let base_ty = place_base.ty(cx.body, cx.tcx).ty;
   22,440 ( 0.00%)                  if let ty::Ref(..) = base_ty.kind() {
   64,515 ( 0.00%)                      return in_place::<Q, _>(cx, in_local, place_base);
        .                           }
        .                       }
        .           
  113,277 ( 0.00%)              in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
        .                   Rvalue::Aggregate(kind, operands) => {
        .                       // Return early if we know that the struct or enum being constructed is always
        .                       // qualified.
  493,518 ( 0.01%)              if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {
      162 ( 0.00%)                  let def = cx.tcx.adt_def(adt_did);
      205 ( 0.00%)                  if Q::in_adt_inherently(cx, def, substs) {
        .                               return true;
        .                           }
      162 ( 0.00%)                  if def.is_union() && Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)) {
        .                               return true;
        .                           }
        .                       }
        .           
        .                       // Otherwise, proceed structurally...
1,898,972 ( 0.02%)              operands.iter().any(|o| in_operand::<Q, _>(cx, in_local, o))
        .                   }
        .               }
1,559,769 ( 0.02%)  }
        .           
        .           /// Returns `true` if this `Place` contains qualif `Q`.
2,305,417 ( 0.03%)  pub fn in_place<'tcx, Q, F>(cx: &ConstCx<'_, 'tcx>, in_local: &mut F, place: PlaceRef<'tcx>) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
   29,655 ( 0.00%)      let mut place = place;
        .               while let Some((place_base, elem)) = place.last_projection() {
        .                   match elem {
        .                       ProjectionElem::Index(index) if in_local(index) => return true,
        .           
        .                       ProjectionElem::Deref
        .                       | ProjectionElem::Field(_, _)
        .                       | ProjectionElem::ConstantIndex { .. }
        .                       | ProjectionElem::Subslice { .. }
-- line 320 ----------------------------------------
-- line 327 ----------------------------------------
        .                   if !Q::in_any_value_of_ty(cx, proj_ty) {
        .                       return false;
        .                   }
        .           
        .                   place = place_base;
        .               }
        .           
        .               assert!(place.projection.is_empty());
   16,475 ( 0.00%)      in_local(place.local)
        .           }
        .           
        .           /// Returns `true` if this `Operand` contains qualif `Q`.
3,780,506 ( 0.04%)  pub fn in_operand<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               operand: &Operand<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
  862,842 ( 0.01%)      let constant = match operand {
        .                   Operand::Copy(place) | Operand::Move(place) => {
1,127,714 ( 0.01%)              return in_place::<Q, _>(cx, in_local, place.as_ref());
        .                   }
        .           
        .                   Operand::Constant(c) => c,
        .               };
        .           
        .               // Check the qualifs of the value of `const` items.
1,404,165 ( 0.02%)      if let Some(ct) = constant.literal.const_for_ty() {
  561,666 ( 0.01%)          if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {
        .                       // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible
        .                       // only for `NeedsNonConstDrop` with precise drop checking. This is the only const
        .                       // check performed after the promotion. Verify that with an assertion.
    2,018 ( 0.00%)              assert!(promoted.is_none() || Q::ALLOW_PROMOTED);
        .                       // Don't peek inside trait associated constants.
    2,519 ( 0.00%)              if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {
   19,679 ( 0.00%)                  let qualifs = if let Some((did, param_did)) = def.as_const_arg() {
        .                               cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))
        .                           } else {
        .                               cx.tcx.at(constant.span).mir_const_qualif(def.did)
        .                           };
        .           
    2,018 ( 0.00%)                  if !Q::in_qualifs(&qualifs) {
        .                               return false;
        .                           }
        .           
        .                           // Just in case the type is more specific than
        .                           // the definition, e.g., impl associated const
        .                           // with type parameters, take it into account.
        .                       }
        .                   }
        .               }
        .               // Otherwise use the qualifs of the type.
  752,579 ( 0.01%)      Q::in_any_value_of_ty(cx, constant.literal.ty())
3,043,187 ( 0.03%)  }

  376,079 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs
--------------------------------------------------------------------------------
Ir                 

-- line 125 ----------------------------------------
        .               /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }
        .               /// ```
        .               ///
        .               /// we can assume in the caller's body that `'b: 'a` and that `T:
        .               /// 'b` (and hence, transitively, that `T: 'a`). This method would
        .               /// add those assumptions into the outlives-environment.
        .               ///
        .               /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`
   54,960 ( 0.00%)      fn add_implied_bounds<'a>(
        .                   &mut self,
        .                   infcx: &InferCtxt<'a, 'tcx>,
        .                   fn_sig_tys: FxHashSet<Ty<'tcx>>,
        .                   body_id: hir::HirId,
        .                   span: Span,
        .               ) {
        .                   debug!("add_implied_bounds()");
        .           
   96,880 ( 0.00%)          for ty in fn_sig_tys {
        .                       let ty = infcx.resolve_vars_if_possible(ty);
        .                       debug!("add_implied_bounds: ty = {}", ty);
   85,590 ( 0.00%)              let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);
        .                       self.add_outlives_bounds(Some(infcx), implied_bounds)
        .                   }
   36,640 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // PUBLIC ENTRY POINTS
        .           
        .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    4,536 ( 0.00%)      pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {
    3,528 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
    1,008 ( 0.00%)          let id = body.value.hir_id;
    3,528 ( 0.00%)          let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);
        .           
        .                   // There are no add'l implied bounds when checking a
        .                   // standalone expr (e.g., the `E` in a type like `[u32; E]`).
    2,520 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(id);
        .           
      504 ( 0.00%)          if !self.errors_reported_since_creation() {
        .                       // regionck assumes typeck succeeded
        .                       rcx.visit_body(body);
        .                       rcx.visit_region_obligations(id);
        .                   }
    1,008 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    4,536 ( 0.00%)      }
        .           
        .               /// Region checking during the WF phase for items. `wf_tys` are the
        .               /// types from which we should derive implied bounds, if any.
   31,812 ( 0.00%)      pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {
        .                   debug!("regionck_item(item.id={:?}, wf_tys={:?})", item_id, wf_tys);
   10,604 ( 0.00%)          let subject = self.tcx.hir().local_def_id(item_id);
   18,557 ( 0.00%)          let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);
   29,161 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);
   10,604 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(item_id);
        .                   rcx.visit_region_obligations(item_id);
        .                   rcx.resolve_regions_and_report_errors(RegionckMode::default());
   23,859 ( 0.00%)      }
        .           
        .               /// Region check a function body. Not invoked on closures, but
        .               /// only on the "root" fn item (in which closures may be
        .               /// embedded). Walks the function body and adds various add'l
        .               /// constraints that are needed for region inference. This is
        .               /// separated both to isolate "pure" region constraints from the
        .               /// rest of type check and because sometimes we need type
        .               /// inference to have completed before we can determine which
        .               /// constraints to add.
   12,129 ( 0.00%)      pub(crate) fn regionck_fn(
        .                   &self,
        .                   fn_id: hir::HirId,
        .                   body: &'tcx hir::Body<'tcx>,
        .                   span: Span,
        .                   wf_tys: FxHashSet<Ty<'tcx>>,
        .               ) {
        .                   debug!("regionck_fn(id={})", fn_id);
    5,598 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
    1,866 ( 0.00%)          let hir_id = body.value.hir_id;
    4,665 ( 0.00%)          let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);
        .                   // We need to add the implied bounds from the function signature
   11,196 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);
    3,732 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(fn_id);
        .           
      933 ( 0.00%)          if !self.errors_reported_since_creation() {
        .                       // regionck assumes typeck succeeded
   10,263 ( 0.00%)              rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));
        .                   }
        .           
    1,866 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    8,397 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // INTERNALS
        .           
        .           pub struct RegionCtxt<'a, 'tcx> {
        .               pub fcx: &'a FnCtxt<'a, 'tcx>,
        .           
-- line 221 ----------------------------------------
-- line 229 ----------------------------------------
        .           
        .               // id of AST node being analyzed (the subject of the analysis).
        .               subject_def_id: LocalDefId,
        .           }
        .           
        .           impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {
        .               type Target = FnCtxt<'a, 'tcx>;
        .               fn deref(&self) -> &Self::Target {
  468,104 ( 0.01%)          self.fcx
        .               }
        .           }
        .           
        .           pub struct Subject(LocalDefId);
        .           
        .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
   44,968 ( 0.00%)      pub fn new(
        .                   fcx: &'a FnCtxt<'a, 'tcx>,
        .                   initial_body_id: hir::HirId,
        .                   Subject(subject): Subject,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> RegionCtxt<'a, 'tcx> {
    4,088 ( 0.00%)          let region_scope_tree = fcx.tcx.region_scope_tree(subject);
    8,176 ( 0.00%)          let outlives_environment = OutlivesEnvironment::new(param_env);
   28,616 ( 0.00%)          RegionCtxt {
        .                       fcx,
        .                       region_scope_tree,
        .                       body_id: initial_body_id,
        .                       body_owner: subject,
        .                       subject_def_id: subject,
   16,352 ( 0.00%)              outlives_environment,
        .                   }
   36,792 ( 0.00%)      }
        .           
        .               /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that
        .               /// we never care about the details of the error, the same error will be detected and reported
        .               /// in the writeback phase.
        .               ///
        .               /// Note one important point: we do not attempt to resolve *region variables* here. This is
        .               /// because regionck is essentially adding constraints to those region variables and so may yet
        .               /// influence how they are resolved.
-- line 268 ----------------------------------------
-- line 283 ----------------------------------------
        .               /// of b will be `&<R0>.i32` and then `*b` will require that `<R0>` be bigger than the let and
        .               /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.
        .               pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.resolve_vars_if_possible(unresolved_ty)
        .               }
        .           
        .               /// Try to resolve the type for the given node.
        .               fn resolve_node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   11,546 ( 0.00%)          let t = self.node_ty(id);
    8,972 ( 0.00%)          self.resolve_type(t)
        .               }
        .           
        .               /// This is the "main" function when region-checking a function item or a
        .               /// closure within a function item. It begins by updating various fields
        .               /// (e.g., `outlives_environment`) to be appropriate to the function and
        .               /// then adds constraints derived from the function body.
        .               ///
        .               /// Note that it does **not** restore the state of the fields that
        .               /// it updates! This is intentional, since -- for the main
        .               /// function -- we wish to be able to read the final
        .               /// `outlives_environment` and other fields from the caller. For
        .               /// closures, however, we save and restore any "scoped state"
        .               /// before we invoke this function. (See `visit_fn` in the
        .               /// `intravisit::Visitor` impl below.)
   13,944 ( 0.00%)      fn visit_fn_body(
        .                   &mut self,
        .                   id: hir::HirId, // the id of the fn itself
        .                   body: &'tcx hir::Body<'tcx>,
        .                   span: Span,
        .               ) {
        .                   // When we enter a function, we can derive
        .                   debug!("visit_fn_body(id={:?})", id);
        .           
    3,984 ( 0.00%)          let body_id = body.id();
    1,992 ( 0.00%)          self.body_id = body_id.hir_id;
    6,972 ( 0.00%)          self.body_owner = self.tcx.hir().body_owner_def_id(body_id);
        .           
        .                   let fn_sig = {
    9,960 ( 0.00%)              match self.typeck_results.borrow().liberated_fn_sigs().get(id) {
    1,992 ( 0.00%)                  Some(f) => *f,
        .                           None => {
        .                               bug!("No fn-sig entry for id={:?}", id);
        .                           }
        .                       }
        .                   };
        .           
        .                   // Collect the types from which we create inferred bounds.
        .                   // For the return type, if diverging, substitute `bool` just
        .                   // because it will have no effect.
        .                   //
        .                   // FIXME(#27579) return types should not be implied bounds
        .                   let fn_sig_tys: FxHashSet<_> =
    4,980 ( 0.00%)              fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();
        .           
   12,948 ( 0.00%)          self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);
    4,980 ( 0.00%)          self.outlives_environment.save_implied_bounds(body_id.hir_id);
    1,992 ( 0.00%)          self.link_fn_params(body.params);
        .                   self.visit_body(body);
        .                   self.visit_region_obligations(body_id.hir_id);
    7,968 ( 0.00%)      }
        .           
        .               fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {
        .                   debug!("visit_inline_const(id={:?})", id);
        .           
        .                   // Save state of current function. We will restore afterwards.
        .                   let old_body_id = self.body_id;
        .                   let old_body_owner = self.body_owner;
        .                   let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
-- line 350 ----------------------------------------
-- line 365 ----------------------------------------
        .               }
        .           
        .               fn visit_region_obligations(&mut self, hir_id: hir::HirId) {
        .                   debug!("visit_region_obligations: hir_id={:?}", hir_id);
        .           
        .                   // region checking can introduce new pending obligations
        .                   // which, when processed, might generate new region
        .                   // obligations. So make sure we process those.
    4,151 ( 0.00%)          self.select_all_obligations_or_error();
        .               }
        .           
        .               fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {
   12,264 ( 0.00%)          self.infcx.process_registered_region_obligations(
    8,176 ( 0.00%)              self.outlives_environment.region_bound_pairs_map(),
    8,176 ( 0.00%)              Some(self.tcx.lifetimes.re_root_empty),
    4,088 ( 0.00%)              self.param_env,
        .                   );
        .           
   20,440 ( 0.00%)          self.fcx.resolve_regions_and_report_errors(
    4,088 ( 0.00%)              self.subject_def_id.to_def_id(),
        .                       &self.outlives_environment,
        .                       mode,
        .                   );
        .               }
        .           
        .               fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {
        .                   debug!("regionck::visit_pat(pat={:?})", pat);
        .                   pat.each_binding(|_, hir_id, span, _| {
    2,611 ( 0.00%)              let typ = self.resolve_node_type(hir_id);
    5,222 ( 0.00%)              let body_id = self.body_id;
   10,444 ( 0.00%)              dropck::check_drop_obligations(self, typ, span, body_id);
        .                   })
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {
        .               // (..) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,
        .               // However, right now we run into an issue whereby some free
        .               // regions are not properly related if they appear within the
-- line 403 ----------------------------------------
-- line 416 ----------------------------------------
        .               ) {
        .                   assert!(
        .                       matches!(fk, intravisit::FnKind::Closure),
        .                       "visit_fn invoked for something other than a closure"
        .                   );
        .           
        .                   // Save state of current function before invoking
        .                   // `visit_fn_body`.  We will restore afterwards.
      126 ( 0.00%)          let old_body_id = self.body_id;
      126 ( 0.00%)          let old_body_owner = self.body_owner;
      252 ( 0.00%)          let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
        .           
      378 ( 0.00%)          let body = self.tcx.hir().body(body_id);
      378 ( 0.00%)          self.visit_fn_body(hir_id, body, span);
        .           
        .                   // Restore state from previous function.
      252 ( 0.00%)          self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);
      126 ( 0.00%)          self.body_id = old_body_id;
      126 ( 0.00%)          self.body_owner = old_body_owner;
        .               }
        .           
        .               //visit_pat: visit_pat, // (..) see above
        .           
        .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
        .                   // see above
   14,931 ( 0.00%)          self.constrain_bindings_in_pat(arm.pat);
        .                   intravisit::walk_arm(self, arm);
        .               }
        .           
    8,552 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
        .                   // see above
    7,483 ( 0.00%)          self.constrain_bindings_in_pat(l.pat);
        .                   self.link_local(l);
        .                   intravisit::walk_local(self, l);
    7,483 ( 0.00%)      }
        .           
1,003,768 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
        .                   // Check any autoderefs or autorefs that appear.
        .                   let cmt_result = self.constrain_adjustments(expr);
        .           
        .                   // If necessary, constrain destructors in this expression. This will be
        .                   // the adjusted form if there is an adjustment.
  261,639 ( 0.00%)          match cmt_result {
1,129,239 ( 0.01%)              Ok(head_cmt) => {
        .                           self.check_safety_of_rvalue_destructor_if_necessary(&head_cmt, expr.span);
        .                       }
        .                       Err(..) => {
        .                           self.tcx.sess.delay_span_bug(expr.span, "cat_expr Errd");
        .                       }
        .                   }
        .           
  886,733 ( 0.01%)          match expr.kind {
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref base) => {
        .                           self.link_addr_of(expr, m, base);
        .           
        .                           intravisit::walk_expr(self, expr);
        .                       }
        .           
        .                       hir::ExprKind::Match(ref discr, arms, _) => {
        .                           self.link_match(discr, arms);
-- line 475 ----------------------------------------
-- line 479 ----------------------------------------
        .           
        .                       hir::ExprKind::ConstBlock(anon_const) => {
        .                           let body = self.tcx.hir().body(anon_const.body);
        .                           self.visit_inline_const(anon_const.hir_id, body);
        .                       }
        .           
        .                       _ => intravisit::walk_expr(self, expr),
        .                   }
1,003,768 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
        .               /// Creates a temporary `MemCategorizationContext` and pass it to the closure.
        .               fn with_mc<F, R>(&self, f: F) -> R
        .               where
        .                   F: for<'b> FnOnce(mc::MemCategorizationContext<'b, 'tcx>) -> R,
        .               {
1,772,343 ( 0.02%)          f(mc::MemCategorizationContext::new(
        .                       &self.infcx,
        .                       self.outlives_environment.param_env,
        .                       self.body_owner,
  159,937 ( 0.00%)              &self.typeck_results.borrow(),
        .                   ))
        .               }
        .           
        .               /// Invoked on any adjustments that occur. Checks that if this is a region pointer being
        .               /// dereferenced, the lifetime of the pointer includes the deref expr.
        .               fn constrain_adjustments(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .               ) -> mc::McResult<PlaceWithHirId<'tcx>> {
        .                   debug!("constrain_adjustments(expr={:?})", expr);
        .           
  250,942 ( 0.00%)          let mut place = self.with_mc(|mc| mc.cat_expr_unadjusted(expr))?;
        .           
  125,471 ( 0.00%)          let typeck_results = self.typeck_results.borrow();
  125,471 ( 0.00%)          let adjustments = typeck_results.expr_adjustments(expr);
  125,471 ( 0.00%)          if adjustments.is_empty() {
1,032,966 ( 0.01%)              return Ok(place);
        .                   }
        .           
        .                   debug!("constrain_adjustments: adjustments={:?}", adjustments);
        .           
        .                   // If necessary, constrain destructors in the unadjusted form of this
        .                   // expression.
        .                   self.check_safety_of_rvalue_destructor_if_necessary(&place, expr.span);
        .           
        .                   for adjustment in adjustments {
        .                       debug!("constrain_adjustments: adjustment={:?}, place={:?}", adjustment, place);
        .           
   89,711 ( 0.00%)              if let adjustment::Adjust::Deref(Some(deref)) = adjustment.kind {
      710 ( 0.00%)                  self.link_region(
      142 ( 0.00%)                      expr.span,
        .                               deref.region,
      568 ( 0.00%)                      ty::BorrowKind::from_mutbl(deref.mutbl),
        .                               &place,
        .                           );
        .                       }
        .           
   27,692 ( 0.00%)              if let adjustment::Adjust::Borrow(ref autoref) = adjustment.kind {
        .                           self.link_autoref(expr, &place, autoref);
        .                       }
        .           
  325,815 ( 0.00%)              place = self.with_mc(|mc| mc.cat_expr_adjusted(expr, place, adjustment))?;
        .                   }
        .           
  106,970 ( 0.00%)          Ok(place)
        .               }
        .           
        .               fn check_safety_of_rvalue_destructor_if_necessary(
        .                   &mut self,
        .                   place_with_id: &PlaceWithHirId<'tcx>,
        .                   span: Span,
        .               ) {
  272,336 ( 0.00%)          if let PlaceBase::Rvalue = place_with_id.place.base {
  126,009 ( 0.00%)              if place_with_id.place.projections.is_empty() {
  142,290 ( 0.00%)                  let typ = self.resolve_type(place_with_id.place.ty());
  251,446 ( 0.00%)                  let body_id = self.body_id;
  502,892 ( 0.01%)                  dropck::check_drop_obligations(self, typ, span, body_id);
        .                       }
        .                   }
        .               }
        .               /// Adds constraints to inference such that `T: 'a` holds (or
        .               /// reports an error if it cannot).
        .               ///
        .               /// # Parameters
        .               ///
-- line 565 ----------------------------------------
-- line 567 ----------------------------------------
        .               /// - `ty`, the type `T`
        .               /// - `region`, the region `'a`
        .               pub fn type_must_outlive(
        .                   &self,
        .                   origin: infer::SubregionOrigin<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .               ) {
   47,358 ( 0.00%)          self.infcx.register_region_obligation(
   47,358 ( 0.00%)              self.body_id,
  126,288 ( 0.00%)              RegionObligation { sub_region: region, sup_type: ty, origin },
        .                   );
        .               }
        .           
        .               /// Computes the guarantor for an expression `&base` and then ensures that the lifetime of the
        .               /// resulting pointer is linked to the lifetime of its guarantor (if any).
        .               fn link_addr_of(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   mutability: hir::Mutability,
        .                   base: &hir::Expr<'_>,
        .               ) {
        .                   debug!("link_addr_of(expr={:?}, base={:?})", expr, base);
        .           
   55,814 ( 0.00%)          let cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(base)));
        .           
        .                   debug!("link_addr_of: cmt={:?}", cmt);
        .           
   15,222 ( 0.00%)          self.link_region_from_node_type(expr.span, expr.hir_id, mutability, &cmt);
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a `let` and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of the initialization expression.
        .               fn link_local(&self, local: &hir::Local<'_>) {
        .                   debug!("regionck::for_local()");
    3,207 ( 0.00%)          let init_expr = match local.init {
        .                       None => {
        .                           return;
        .                       }
        .                       Some(expr) => &*expr,
        .                   };
    8,810 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(init_expr)));
    7,048 ( 0.00%)          self.link_pattern(discr_cmt, local.pat);
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a match and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of its guarantor (if any).
        .               fn link_match(&self, discr: &hir::Expr<'_>, arms: &[hir::Arm<'_>]) {
        .                   debug!("regionck::for_match()");
    8,560 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(discr)));
        .                   debug!("discr_cmt={:?}", discr_cmt);
        .                   for arm in arms {
    8,532 ( 0.00%)              self.link_pattern(discr_cmt.clone(), arm.pat);
        .                   }
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a match and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of its guarantor (if any).
        .               fn link_fn_params(&self, params: &[hir::Param<'_>]) {
        .                   for param in params {
    5,840 ( 0.00%)              let param_ty = self.node_ty(param.hir_id);
        .                       let param_cmt =
    2,920 ( 0.00%)                  self.with_mc(|mc| mc.cat_rvalue(param.hir_id, param.pat.span, param_ty));
        .                       debug!("param_ty={:?} param_cmt={:?} param={:?}", param_ty, param_cmt, param);
   17,520 ( 0.00%)              self.link_pattern(param_cmt, param.pat);
        .                   }
        .               }
        .           
        .               /// Link lifetimes of any ref bindings in `root_pat` to the pointers found
        .               /// in the discriminant, if needed.
   26,844 ( 0.00%)      fn link_pattern(&self, discr_cmt: PlaceWithHirId<'tcx>, root_pat: &hir::Pat<'_>) {
        .                   debug!("link_pattern(discr_cmt={:?}, root_pat={:?})", discr_cmt, root_pat);
        .                   ignore_err!(self.with_mc(|mc| {
   13,422 ( 0.00%)              mc.cat_pattern(discr_cmt, root_pat, |sub_cmt, hir::Pat { kind, span, hir_id, .. }| {
        .                           // `ref x` pattern
   16,332 ( 0.00%)                  if let PatKind::Binding(..) = kind {
   17,567 ( 0.00%)                      if let Some(ty::BindByReference(mutbl)) =
   56,980 ( 0.00%)                          mc.typeck_results.extract_binding_mode(self.tcx.sess, *hir_id, *span)
        .                               {
        .                                   self.link_region_from_node_type(*span, *hir_id, mutbl, sub_cmt);
        .                               }
        .                           }
        .                       })
        .                   }));
   26,844 ( 0.00%)      }
        .           
        .               /// Link lifetime of borrowed pointer resulting from autoref to lifetimes in the value being
        .               /// autoref'd.
        .               fn link_autoref(
        .                   &self,
        .                   expr: &hir::Expr<'_>,
        .                   expr_cmt: &PlaceWithHirId<'tcx>,
        .                   autoref: &adjustment::AutoBorrow<'tcx>,
        .               ) {
        .                   debug!("link_autoref(autoref={:?}, expr_cmt={:?})", autoref, expr_cmt);
        .           
   18,566 ( 0.00%)          match *autoref {
   18,566 ( 0.00%)              adjustment::AutoBorrow::Ref(r, m) => {
   92,830 ( 0.00%)                  self.link_region(expr.span, r, ty::BorrowKind::from_mutbl(m.into()), expr_cmt);
        .                       }
        .           
        .                       adjustment::AutoBorrow::RawPtr(_) => {}
        .                   }
        .               }
        .           
        .               /// Like `link_region()`, except that the region is extracted from the type of `id`,
        .               /// which must be some reference (`&T`, `&str`, etc).
-- line 676 ----------------------------------------
-- line 682 ----------------------------------------
        .                   cmt_borrowed: &PlaceWithHirId<'tcx>,
        .               ) {
        .                   debug!(
        .                       "link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={:?})",
        .                       id, mutbl, cmt_borrowed
        .                   );
        .           
        .                   let rptr_ty = self.resolve_node_type(id);
   12,722 ( 0.00%)          if let ty::Ref(r, _, _) = rptr_ty.kind() {
        .                       debug!("rptr_ty={}", rptr_ty);
   47,101 ( 0.00%)              self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);
        .                   }
        .               }
        .           
        .               /// Informs the inference engine that `borrow_cmt` is being borrowed with
        .               /// kind `borrow_kind` and lifetime `borrow_region`.
        .               /// In order to ensure borrowck is satisfied, this may create constraints
        .               /// between regions, as explained in `link_reborrowed_region()`.
  173,646 ( 0.00%)      fn link_region(
        .                   &self,
        .                   span: Span,
        .                   borrow_region: ty::Region<'tcx>,
        .                   borrow_kind: ty::BorrowKind,
        .                   borrow_place: &PlaceWithHirId<'tcx>,
        .               ) {
   47,358 ( 0.00%)          let origin = infer::DataBorrowed(borrow_place.place.ty(), span);
   94,716 ( 0.00%)          self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);
        .           
   89,642 ( 0.00%)          for pointer_ty in borrow_place.place.deref_tys() {
        .                       debug!(
        .                           "link_region(borrow_region={:?}, borrow_kind={:?}, pointer_ty={:?})",
        .                           borrow_region, borrow_kind, borrow_place
        .                       );
   32,252 ( 0.00%)              match *pointer_ty.kind() {
        .                           ty::RawPtr(_) => return,
   95,886 ( 0.00%)                  ty::Ref(ref_region, _, ref_mutability) => {
   10,654 ( 0.00%)                      if self.link_reborrowed_region(span, borrow_region, ref_region, ref_mutability)
        .                               {
        .                                   return;
        .                               }
        .                           }
       58 ( 0.00%)                  _ => assert!(pointer_ty.is_box(), "unexpected built-in deref type {}", pointer_ty),
        .                       }
        .                   }
   13,305 ( 0.00%)          if let PlaceBase::Upvar(upvar_id) = borrow_place.place.base {
        .                       self.link_upvar_region(span, borrow_region, upvar_id);
        .                   }
  126,288 ( 0.00%)      }
        .           
        .               /// This is the most complicated case: the path being borrowed is
        .               /// itself the referent of a borrowed pointer. Let me give an
        .               /// example fragment of code to make clear(er) the situation:
        .               ///
        .               /// ```ignore (incomplete Rust code)
        .               /// let r: &'a mut T = ...;  // the original reference "r" has lifetime 'a
        .               /// ...
-- line 737 ----------------------------------------
-- line 764 ----------------------------------------
        .               fn link_reborrowed_region(
        .                   &self,
        .                   span: Span,
        .                   borrow_region: ty::Region<'tcx>,
        .                   ref_region: ty::Region<'tcx>,
        .                   ref_mutability: hir::Mutability,
        .               ) -> bool {
        .                   debug!("link_reborrowed_region: {:?} <= {:?}", borrow_region, ref_region);
   53,270 ( 0.00%)          self.sub_regions(infer::Reborrow(span), borrow_region, ref_region);
        .           
        .                   // Decide whether we need to recurse and link any regions within
        .                   // the `ref_cmt`. This is concerned for the case where the value
        .                   // being reborrowed is in fact a borrowed pointer found within
        .                   // another borrowed pointer. For example:
        .                   //
        .                   //    let p: &'b &'a mut T = ...;
        .                   //    ...
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
        .                   borrow_region: ty::Region<'tcx>,
        .                   upvar_id: ty::UpvarId,
        .               ) {
        .                   debug!("link_upvar_region(borrorw_region={:?}, upvar_id={:?}", borrow_region, upvar_id);
        .                   // A by-reference upvar can't be borrowed for longer than the
        .                   // upvar is borrowed from the environment.
        .                   let closure_local_def_id = upvar_id.closure_expr_id;
        .                   let mut all_captures_are_imm_borrow = true;
       17 ( 0.00%)          for captured_place in self
        .                       .typeck_results
        .                       .borrow()
        .                       .closure_min_captures
        .                       .get(&closure_local_def_id.to_def_id())
        .                       .and_then(|root_var_min_cap| root_var_min_cap.get(&upvar_id.var_path.hir_id))
        .                       .into_iter()
        .                       .flatten()
        .                   {
       85 ( 0.00%)              match captured_place.info.capture_kind {
        .                           ty::UpvarCapture::ByRef(upvar_borrow) => {
       17 ( 0.00%)                      self.sub_regions(
      119 ( 0.00%)                          infer::ReborrowUpvar(span, upvar_id),
        .                                   borrow_region,
       17 ( 0.00%)                          captured_place.region.unwrap(),
        .                               );
      102 ( 0.00%)                      if let ty::ImmBorrow = upvar_borrow {
        .                                   debug!("link_upvar_region: capture by shared ref");
        .                               } else {
        .                                   all_captures_are_imm_borrow = false;
        .                               }
        .                           }
        .                           ty::UpvarCapture::ByValue => {
        .                               all_captures_are_imm_borrow = false;
        .                           }
        .                       }
        .                   }
       34 ( 0.00%)          if all_captures_are_imm_borrow {
        .                       return;
        .                   }
        .                   let fn_hir_id = self.tcx.hir().local_def_id_to_hir_id(closure_local_def_id);
        .                   let ty = self.resolve_node_type(fn_hir_id);
        .                   debug!("link_upvar_region: ty={:?}", ty);
        .           
        .                   // A closure capture can't be borrowed for longer than the
        .                   // reference to the closure.
-- line 877 ----------------------------------------

1,202,794 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .               /// See #47489 and #48598
        .               /// See docs on the "AllowTwoPhase" type for a more detailed discussion
        .               allow_two_phase: AllowTwoPhase,
        .           }
        .           
        .           impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {
        .               type Target = FnCtxt<'a, 'tcx>;
        .               fn deref(&self) -> &Self::Target {
  863,802 ( 0.01%)          &self.fcx
        .               }
        .           }
        .           
        .           type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;
        .           
        .           /// Coercing a mutable reference to an immutable works, while
        .           /// coercing `&T` to `&mut T` should be forbidden.
        .           fn coerce_mutbls<'tcx>(
        .               from_mutbl: hir::Mutability,
        .               to_mutbl: hir::Mutability,
        .           ) -> RelateResult<'tcx, ()> {
   44,619 ( 0.00%)      match (from_mutbl, to_mutbl) {
        .                   (hir::Mutability::Mut, hir::Mutability::Mut | hir::Mutability::Not)
        .                   | (hir::Mutability::Not, hir::Mutability::Not) => Ok(()),
        .                   (hir::Mutability::Not, hir::Mutability::Mut) => Err(TypeError::Mutability),
        .               }
        .           }
        .           
        .           /// Do not require any adjustments, i.e. coerce `x -> x`.
        .           fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {
        .               vec![]
        .           }
        .           
        .           fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {
    1,671 ( 0.00%)      move |target| vec![Adjustment { kind, target }]
        .           }
        .           
        .           /// This always returns `Ok(...)`.
        .           fn success<'tcx>(
        .               adj: Vec<Adjustment<'tcx>>,
        .               target: Ty<'tcx>,
        .               obligations: traits::PredicateObligations<'tcx>,
        .           ) -> CoerceResult<'tcx> {
  226,368 ( 0.00%)      Ok(InferOk { value: (adj, target), obligations })
        .           }
        .           
        .           impl<'f, 'tcx> Coerce<'f, 'tcx> {
        .               fn new(
        .                   fcx: &'f FnCtxt<'f, 'tcx>,
        .                   cause: ObligationCause<'tcx>,
        .                   allow_two_phase: AllowTwoPhase,
        .               ) -> Self {
  619,829 ( 0.01%)          Coerce { fcx, cause, allow_two_phase, use_lub: false }
        .               }
        .           
1,622,258 ( 0.02%)      fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {
        .                   debug!("unify(a: {:?}, b: {:?}, use_lub: {})", a, b, self.use_lub);
        .                   self.commit_if_ok(|_| {
  294,956 ( 0.00%)              if self.use_lub {
    1,636 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env).lub(b, a)
        .                       } else {
  293,320 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env)
        .                               .sup(b, a)
        .                               .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })
        .                       }
        .                   })
1,179,824 ( 0.01%)      }
        .           
        .               /// Unify two types (using sub or lub) and produce a specific coercion.
  270,160 ( 0.00%)      fn unify_and<F>(&self, a: Ty<'tcx>, b: Ty<'tcx>, f: F) -> CoerceResult<'tcx>
        .               where
        .                   F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
        .               {
  364,479 ( 0.00%)          self.unify(&a, &b)
  296,318 ( 0.00%)              .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))
  202,620 ( 0.00%)      }
        .           
1,631,973 ( 0.02%)      #[instrument(skip(self))]
        .               fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {
        .                   // First, remove any resolved type variables (at the top level, at least):
   77,713 ( 0.00%)          let a = self.shallow_resolve(a);
   77,713 ( 0.00%)          let b = self.shallow_resolve(b);
        .                   debug!("Coerce.tys({:?} => {:?})", a, b);
        .           
        .                   // Just ignore error types.
  155,426 ( 0.00%)          if a.references_error() || b.references_error() {
        .                       return success(vec![], self.fcx.tcx.ty_error(), vec![]);
        .                   }
        .           
        .                   // Coercing from `!` to any type is allowed:
   77,713 ( 0.00%)          if a.is_never() {
        .                       return success(simple(Adjust::NeverToAny)(b), b, vec![]);
        .                   }
        .           
        .                   // Coercing *from* an unresolved inference variable means that
        .                   // we have no information about the source type. This will always
        .                   // ultimately fall back to some form of subtyping.
   78,114 ( 0.00%)          if a.is_ty_var() {
        .                       return self.coerce_from_inference_variable(a, b, identity);
        .                   }
        .           
        .                   // Consider coercing the subtype to a DST
        .                   //
        .                   // NOTE: this is wrapped in a `commit_if_ok` because it creates
        .                   // a "spurious" type variable, and we don't want to have that
        .                   // type variable in memory if the coercion fails.
        .                   let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));
  300,564 ( 0.00%)          match unsize {
        .                       Ok(_) => {
        .                           debug!("coerce: unsize successful");
   56,130 ( 0.00%)                  return unsize;
        .                       }
        .                       Err(TypeError::ObjectUnsafeCoercion(did)) => {
        .                           debug!("coerce: unsize not object safe");
        .                           return Err(TypeError::ObjectUnsafeCoercion(did));
        .                       }
        .                       Err(error) => {
        .                           debug!(?error, "coerce: unsize failed");
        .                       }
        .                   }
        .           
        .                   // Examine the supertype and consider auto-borrowing.
  355,210 ( 0.00%)          match *b.kind() {
        .                       ty::RawPtr(mt_b) => {
        .                           return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);
        .                       }
   11,140 ( 0.00%)              ty::Ref(r_b, _, mutbl_b) => {
   33,420 ( 0.00%)                  return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);
        .                       }
        .                       _ => {}
        .                   }
        .           
  473,512 ( 0.01%)          match *a.kind() {
        .                       ty::FnDef(..) => {
        .                           // Function items are coercible to any closure
        .                           // type; function pointers are not (that would
        .                           // require double indirection).
        .                           // Additionally, we permit coercion of function
        .                           // items to drop the unsafe qualifier.
      582 ( 0.00%)                  self.coerce_from_fn_item(a, b)
        .                       }
        .                       ty::FnPtr(a_f) => {
        .                           // We permit coercion of fn pointers to drop the
        .                           // unsafe qualifier.
        .                           self.coerce_from_fn_pointer(a, a_f, b)
        .                       }
      189 ( 0.00%)              ty::Closure(closure_def_id_a, substs_a) => {
        .                           // Non-capturing closures are coercible to
        .                           // function pointers or unsafe function pointers.
        .                           // It cannot convert closures that require unsafe.
      504 ( 0.00%)                  self.coerce_closure_to_fn(a, closure_def_id_a, substs_a, b)
        .                       }
        .                       _ => {
        .                           // Otherwise, just use unification rules.
  337,700 ( 0.00%)                  self.unify_and(a, b, identity)
        .                       }
        .                   }
  155,426 ( 0.00%)      }
        .           
        .               /// Coercing *from* an inference variable. In this case, we have no information
        .               /// about the source type, so we can't really do a true coercion and we always
        .               /// fall back to subtyping (`unify_and`).
        .               fn coerce_from_inference_variable(
        .                   &self,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .                   make_adjustments: impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
        .               ) -> CoerceResult<'tcx> {
        .                   debug!("coerce_from_inference_variable(a={:?}, b={:?})", a, b);
      194 ( 0.00%)          assert!(a.is_ty_var() && self.infcx.shallow_resolve(a) == a);
      194 ( 0.00%)          assert!(self.infcx.shallow_resolve(b) == b);
        .           
      230 ( 0.00%)          if b.is_ty_var() {
        .                       // Two unresolved type variables: create a `Coerce` predicate.
       54 ( 0.00%)              let target_ty = if self.use_lub {
        .                           self.infcx.next_ty_var(TypeVariableOrigin {
        .                               kind: TypeVariableOriginKind::LatticeVariable,
        .                               span: self.cause.span,
        .                           })
        .                       } else {
        .                           b
        .                       };
        .           
        .                       let mut obligations = Vec::with_capacity(2);
        .                       for &source_ty in &[a, b] {
       36 ( 0.00%)                  if source_ty != target_ty {
        .                               obligations.push(Obligation::new(
        .                                   self.cause.clone(),
       18 ( 0.00%)                          self.param_env,
       72 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {
        .                                       a: source_ty,
        .                                       b: target_ty,
        .                                   }))
        .                                   .to_predicate(self.tcx()),
        .                               ));
        .                           }
        .                       }
        .           
        .                       debug!(
        .                           "coerce_from_inference_variable: two inference variables, target_ty={:?}, obligations={:?}",
        .                           target_ty, obligations
        .                       );
        .                       let adjustments = make_adjustments(target_ty);
      108 ( 0.00%)              InferResult::Ok(InferOk { value: (adjustments, target_ty), obligations })
        .                   } else {
        .                       // One unresolved type variable: just apply subtyping, we may be able
        .                       // to do something useful.
        .                       self.unify_and(a, b, make_adjustments)
        .                   }
        .               }
        .           
        .               /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.
        .               /// To match `A` with `B`, autoderef will be performed,
        .               /// calling `deref`/`deref_mut` where necessary.
   55,700 ( 0.00%)      fn coerce_borrowed_pointer(
        .                   &self,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .                   r_b: ty::Region<'tcx>,
        .                   mutbl_b: hir::Mutability,
        .               ) -> CoerceResult<'tcx> {
        .                   debug!("coerce_borrowed_pointer(a={:?}, b={:?})", a, b);
        .           
        .                   // If we have a parameter of type `&M T_a` and the value
        .                   // provided is `expr`, we will be adding an implicit borrow,
        .                   // meaning that we convert `f(expr)` to `f(&M *expr)`.  Therefore,
        .                   // to type check, we will construct the type that `&M*expr` would
        .                   // yield.
        .           
   11,140 ( 0.00%)          let (r_a, mt_a) = match *a.kind() {
   16,710 ( 0.00%)              ty::Ref(r_a, ty, mutbl) => {
        .                           let mt_a = ty::TypeAndMut { ty, mutbl };
        .                           coerce_mutbls(mt_a.mutbl, mutbl_b)?;
        .                           (r_a, mt_a)
        .                       }
        .                       _ => return self.unify_and(a, b, identity),
        .                   };
        .           
   11,140 ( 0.00%)          let span = self.cause.span;
        .           
        .                   let mut first_error = None;
        .                   let mut r_borrow_var = None;
        .                   let mut autoderef = self.autoderef(span, a);
        .                   let mut found = None;
        .           
   22,410 ( 0.00%)          for (referent_ty, autoderefs) in autoderef.by_ref() {
   22,410 ( 0.00%)              if autoderefs == 0 {
        .                           // Don't let this pass, otherwise it would cause
        .                           // &T to autoref to &&T.
        .                           continue;
        .                       }
        .           
        .                       // At this point, we have deref'd `a` to `referent_ty`.  So
        .                       // imagine we are coercing from `&'a mut Vec<T>` to `&'b mut [T]`.
        .                       // In the autoderef loop for `&'a mut Vec<T>`, we would get
-- line 326 ----------------------------------------
-- line 386 ----------------------------------------
        .                       //     this extra edge causes the region `'a` to be inferred to something
        .                       //     too big, which then results in borrowck errors.)
        .                       //   - We could track the innermost shared reference, but there is already
        .                       //     code in regionck that has the job of creating links between
        .                       //     the region of a borrow and the regions in the thing being
        .                       //     borrowed (here, `'a` and `'x`), and it knows how to handle
        .                       //     all the various cases. So instead we just make a region variable
        .                       //     and let regionck figure it out.
   11,270 ( 0.00%)              let r = if !self.use_lub {
        .                           r_b // [2] above
      174 ( 0.00%)              } else if autoderefs == 1 {
        .                           r_a // [3] above
        .                       } else {
        2 ( 0.00%)                  if r_borrow_var.is_none() {
        .                               // create var lazily, at most once
        .                               let coercion = Coercion(span);
       10 ( 0.00%)                      let r = self.next_region_var(coercion);
        .                               r_borrow_var = Some(r); // [4] above
        .                           }
        .                           r_borrow_var.unwrap()
        .                       };
    5,635 ( 0.00%)              let derefd_ty_a = self.tcx.mk_ref(
        .                           r,
        .                           TypeAndMut {
        .                               ty: referent_ty,
        .                               mutbl: mutbl_b, // [1] above
        .                           },
        .                       );
   39,445 ( 0.00%)              match self.unify(derefd_ty_a, b) {
        .                           Ok(ok) => {
   22,280 ( 0.00%)                      found = Some(ok);
        .                               break;
        .                           }
      177 ( 0.00%)                  Err(err) => {
       65 ( 0.00%)                      if first_error.is_none() {
      295 ( 0.00%)                          first_error = Some(err);
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   // Extract type or return an error. We return the first error
        .                   // we got, which should be from relating the "base" type
        .                   // (e.g., in example above, the failure from relating `Vec<T>`
        .                   // to the target type), since that should be the least
        .                   // confusing.
   44,560 ( 0.00%)          let InferOk { value: ty, mut obligations } = match found {
        .                       Some(d) => d,
        .                       None => {
        .                           let err = first_error.expect("coerce_borrowed_pointer had no error");
        .                           debug!("coerce_borrowed_pointer: failed with err = {:?}", err);
        .                           return Err(err);
        .                       }
        .                   };
        .           
   22,589 ( 0.00%)          if ty == a && mt_a.mutbl == hir::Mutability::Not && autoderef.step_count() == 1 {
        .                       // As a special case, if we would produce `&'a *x`, that's
        .                       // a total no-op. We end up with the type `&'a T` just as
        .                       // we started with.  In that case, just skip it
        .                       // altogether. This is just an optimization.
        .                       //
        .                       // Note that for `&mut`, we DO want to reborrow --
        .                       // otherwise, this would be a move, which might be an
        .                       // error. For example `foo(self.x)` where `self` and
        .                       // `self.x` both have `&mut `type would be a move of
        .                       // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,
        .                       // which is a borrow.
    6,774 ( 0.00%)              assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U
   13,548 ( 0.00%)              return success(vec![], ty, obligations);
        .                   }
        .           
   15,281 ( 0.00%)          let InferOk { value: mut adjustments, obligations: o } =
    2,183 ( 0.00%)              self.adjust_steps_as_infer_ok(&autoderef);
        .                   obligations.extend(o);
   41,477 ( 0.00%)          obligations.extend(autoderef.into_obligations());
        .           
        .                   // Now apply the autoref. We have to extract the region out of
        .                   // the final ref type we got.
    4,366 ( 0.00%)          let r_borrow = match ty.kind() {
        .                       ty::Ref(r_borrow, _, _) => r_borrow,
        .                       _ => span_bug!(span, "expected a ref type, got {:?}", ty),
        .                   };
    8,732 ( 0.00%)          let mutbl = match mutbl_b {
        .                       hir::Mutability::Not => AutoBorrowMutability::Not,
        .                       hir::Mutability::Mut => {
        .                           AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }
        .                       }
        .                   };
        .                   adjustments.push(Adjustment {
    2,183 ( 0.00%)              kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
        .                       target: ty,
        .                   });
        .           
        .                   debug!("coerce_borrowed_pointer: succeeded ty={:?} adjustments={:?}", ty, adjustments);
        .           
   17,464 ( 0.00%)          success(adjustments, ty, obligations)
   44,560 ( 0.00%)      }
        .           
        .               // &[T; n] or &mut [T; n] -> &[T]
        .               // or &mut [T; n] -> &mut [T]
        .               // or &Concrete -> &Trait, etc.
        .               #[instrument(skip(self), level = "debug")]
        .               fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {
        .                   source = self.shallow_resolve(source);
        .                   target = self.shallow_resolve(target);
-- line 490 ----------------------------------------
-- line 506 ----------------------------------------
        .                   // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)
        .                   // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for
        .                   // SomeType`).
        .                   //
        .                   // However, these are exactly the kinds of impls which are forbidden by
        .                   // the compiler! Therefore, we can be sure that coercion will always fail
        .                   // when either the source or target type is a type variable. This allows us
        .                   // to skip performing any trait selection, and immediately bail out.
   77,532 ( 0.00%)          if source.is_ty_var() {
        .                       debug!("coerce_unsized: source is a TyVar, bailing out");
        .                       return Err(TypeError::Mismatch);
        .                   }
   83,148 ( 0.00%)          if target.is_ty_var() {
        .                       debug!("coerce_unsized: target is a TyVar, bailing out");
        .                       return Err(TypeError::Mismatch);
        .                   }
        .           
        .                   let traits =
  887,604 ( 0.01%)              (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());
  295,868 ( 0.00%)          let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {
        .                       debug!("missing Unsize or CoerceUnsized traits");
        .                       return Err(TypeError::Mismatch);
        .                   };
        .           
        .                   // Note, we want to avoid unnecessary unsizing. We don't want to coerce to
        .                   // a DST unless we have to. This currently comes out in the wash since
        .                   // we can't unify [T] with U. But to properly support DST, we need to allow
        .                   // that, at which point we will need extra checks on the target here.
        .           
        .                   // Handle reborrows before selecting `Source: CoerceUnsized<Target>`.
  175,843 ( 0.00%)          let reborrow = match (source.kind(), target.kind()) {
   27,909 ( 0.00%)              (&ty::Ref(_, ty_a, mutbl_a), &ty::Ref(_, _, mutbl_b)) => {
        .                           coerce_mutbls(mutbl_a, mutbl_b)?;
        .           
    9,303 ( 0.00%)                  let coercion = Coercion(self.cause.span);
   46,515 ( 0.00%)                  let r_borrow = self.next_region_var(coercion);
        .                           let mutbl = match mutbl_b {
        .                               hir::Mutability::Not => AutoBorrowMutability::Not,
        .                               hir::Mutability::Mut => AutoBorrowMutability::Mut {
        .                                   // We don't allow two-phase borrows here, at least for initial
        .                                   // implementation. If it happens that this coercion is a function argument,
        .                                   // the reborrow in coerce_borrowed_ptr will pick it up.
        .                                   allow_two_phase_borrow: AllowTwoPhase::No,
        .                               },
        .                           };
        .                           Some((
        .                               Adjustment { kind: Adjust::Deref(None), target: ty_a },
        .                               Adjustment {
        .                                   kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
    9,303 ( 0.00%)                          target: self
        .                                       .tcx
        .                                       .mk_ref(r_borrow, ty::TypeAndMut { mutbl: mutbl_b, ty: ty_a }),
        .                               },
        .                           ))
        .                       }
        .                       (&ty::Ref(_, ty_a, mt_a), &ty::RawPtr(ty::TypeAndMut { mutbl: mt_b, .. })) => {
        .                           coerce_mutbls(mt_a, mt_b)?;
        .           
-- line 563 ----------------------------------------
-- line 574 ----------------------------------------
        .                   let coerce_source = reborrow.as_ref().map_or(source, |&(_, ref r)| r.target);
        .           
        .                   // Setup either a subtyping or a LUB relationship between
        .                   // the `CoerceUnsized` target type and the expected type.
        .                   // We only have the latter, so we use an inference variable
        .                   // for the former and let type inference do the rest.
        .                   let origin = TypeVariableOrigin {
        .                       kind: TypeVariableOriginKind::MiscVariable,
   73,967 ( 0.00%)              span: self.cause.span,
        .                   };
  369,835 ( 0.00%)          let coerce_target = self.next_ty_var(origin);
  295,868 ( 0.00%)          let mut coercion = self.unify_and(coerce_target, target, |target| {
        .                       let unsize = Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target };
  147,934 ( 0.00%)              match reborrow {
  323,320 ( 0.00%)                  None => vec![unsize],
  130,242 ( 0.00%)                  Some((ref deref, ref autoref)) => vec![deref.clone(), autoref.clone(), unsize],
        .                       }
        .                   })?;
        .           
   73,967 ( 0.00%)          let mut selcx = traits::SelectionContext::new(self);
        .           
        .                   // Create an obligation for `Source: CoerceUnsized<Target>`.
        .                   let cause = ObligationCause::new(
  147,934 ( 0.00%)              self.cause.span,
  147,934 ( 0.00%)              self.body_id,
        .                       ObligationCauseCode::Coercion { source, target },
        .                   );
        .           
        .                   // Use a FIFO queue for this custom fulfillment procedure.
        .                   //
        .                   // A Vec (or SmallVec) is not a natural choice for a queue. However,
        .                   // this code path is hot, and this queue usually has a max length of 1
        .                   // and almost never more than 3. By using a SmallVec we avoid an
        .                   // allocation, at the (very small) cost of (occasionally) having to
        .                   // shift subsequent elements down when removing the front element.
1,035,538 ( 0.01%)          let mut queue: SmallVec<[_; 4]> = smallvec![traits::predicate_for_trait_def(
  147,934 ( 0.00%)              self.tcx,
   73,967 ( 0.00%)              self.fcx.param_env,
  369,835 ( 0.00%)              cause,
        .                       coerce_unsized_did,
        .                       0,
        .                       coerce_source,
  369,835 ( 0.00%)              &[coerce_target.into()]
        .                   )];
        .           
        .                   let mut has_unsized_tuple_coercion = false;
        .                   let mut has_trait_upcasting_coercion = false;
        .           
        .                   // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid
        .                   // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where
        .                   // inference might unify those two inner type variables later.
        .                   let traits = [coerce_unsized_did, unsize_did];
  192,744 ( 0.00%)          while !queue.is_empty() {
        .                       let obligation = queue.remove(0);
        .                       debug!("coerce_unsized resolve step: {:?}", obligation);
   92,630 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
  463,150 ( 0.01%)              let trait_pred = match bound_predicate.skip_binder() {
  503,160 ( 0.01%)                  ty::PredicateKind::Trait(trait_pred) if traits.contains(&trait_pred.def_id()) => {
  750,366 ( 0.01%)                      if unsize_did == trait_pred.def_id() {
   56,322 ( 0.00%)                          let self_ty = trait_pred.self_ty();
   37,548 ( 0.00%)                          let unsize_ty = trait_pred.trait_ref.substs[1].expect_ty();
   46,935 ( 0.00%)                          if let (ty::Dynamic(ref data_a, ..), ty::Dynamic(ref data_b, ..)) =
        .                                       (self_ty.kind(), unsize_ty.kind())
        .                                   {
        .                                       if data_a.principal_def_id() != data_b.principal_def_id() {
        .                                           debug!("coerce_unsized: found trait upcasting coercion");
        .                                           has_trait_upcasting_coercion = true;
        .                                       }
        .                                   }
   56,322 ( 0.00%)                          if let ty::Tuple(..) = unsize_ty.kind() {
        .                                       debug!("coerce_unsized: found unsized tuple coercion");
        .                                       has_unsized_tuple_coercion = true;
        .                                   }
        .                               }
  166,748 ( 0.00%)                      bound_predicate.rebind(trait_pred)
        .                           }
        .                           _ => {
   55,536 ( 0.00%)                      coercion.obligations.push(obligation);
        .                               continue;
        .                           }
        .                       };
  917,114 ( 0.01%)              match selcx.select(&obligation.with(trait_pred)) {
        .                           // Uncertain or unimplemented.
        .                           Ok(None) => {
    4,199 ( 0.00%)                      if trait_pred.def_id() == unsize_did {
    1,938 ( 0.00%)                          let trait_pred = self.resolve_vars_if_possible(trait_pred);
      646 ( 0.00%)                          let self_ty = trait_pred.skip_binder().self_ty();
    1,938 ( 0.00%)                          let unsize_ty = trait_pred.skip_binder().trait_ref.substs[1].expect_ty();
        .                                   debug!("coerce_unsized: ambiguous unsize case for {:?}", trait_pred);
      646 ( 0.00%)                          match (&self_ty.kind(), &unsize_ty.kind()) {
        .                                       (ty::Infer(ty::TyVar(v)), ty::Dynamic(..))
        .                                           if self.type_var_is_sized(*v) =>
        .                                       {
        .                                           debug!("coerce_unsized: have sized infer {:?}", v);
        .                                           coercion.obligations.push(obligation);
        .                                           // `$0: Unsize<dyn Trait>` where we know that `$0: Sized`, try going
        .                                           // for unsizing.
        .                                       }
-- line 671 ----------------------------------------
-- line 679 ----------------------------------------
        .                                   }
        .                               } else {
        .                                   debug!("coerce_unsized: early return - ambiguous");
        .                                   return Err(TypeError::Mismatch);
        .                               }
        .                           }
        .                           Err(traits::Unimplemented) => {
        .                               debug!("coerce_unsized: early return - can't prove obligation");
  419,412 ( 0.00%)                      return Err(TypeError::Mismatch);
        .                           }
        .           
        .                           // Object safety violations or miscellaneous.
        .                           Err(err) => {
        .                               self.report_selection_error(obligation.clone(), &obligation, &err, false);
        .                               // Treat this like an obligation and follow through
        .                               // with the unsizing - the lack of a coercion should
        .                               // be silent, as it causes a type mismatch later.
        .                           }
        .           
  249,831 ( 0.00%)                  Ok(Some(impl_source)) => queue.extend(impl_source.nested_obligations()),
        .                       }
  140,450 ( 0.00%)          }
        .           
    7,484 ( 0.00%)          if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {
        .                       feature_err(
        .                           &self.tcx.sess.parse_sess,
        .                           sym::unsized_tuple_coercion,
        .                           self.cause.span,
        .                           "unsized tuple coercion is not stable enough for use and is subject to change",
        .                       )
        .                       .emit();
        .                   }
        .           
    7,484 ( 0.00%)          if has_trait_upcasting_coercion && !self.tcx().features().trait_upcasting {
        .                       feature_err(
        .                           &self.tcx.sess.parse_sess,
        .                           sym::trait_upcasting,
        .                           self.cause.span,
        .                           "trait upcasting coercion is experimental",
        .                       )
        .                       .emit();
        .                   }
        .           
   41,162 ( 0.00%)          Ok(coercion)
        .               }
        .           
        .               fn coerce_from_safe_fn<F, G>(
        .                   &self,
        .                   a: Ty<'tcx>,
        .                   fn_ty_a: ty::PolyFnSig<'tcx>,
        .                   b: Ty<'tcx>,
        .                   to_unsafe: F,
        .                   normal: G,
        .               ) -> CoerceResult<'tcx>
        .               where
        .                   F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
        .                   G: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
        .               {
      150 ( 0.00%)          if let ty::FnPtr(fn_ty_b) = b.kind() {
      300 ( 0.00%)              if let (hir::Unsafety::Normal, hir::Unsafety::Unsafe) =
      150 ( 0.00%)                  (fn_ty_a.unsafety(), fn_ty_b.unsafety())
        .                       {
        .                           let unsafe_a = self.tcx.safe_to_unsafe_fn_ty(fn_ty_a);
        .                           return self.unify_and(unsafe_a, b, to_unsafe);
        .                       }
        .                   }
        .                   self.unify_and(a, b, normal)
        .               }
        .           
-- line 747 ----------------------------------------
-- line 762 ----------------------------------------
        .                       a,
        .                       fn_ty_a,
        .                       b,
        .                       simple(Adjust::Pointer(PointerCast::UnsafeFnPointer)),
        .                       identity,
        .                   )
        .               }
        .           
      970 ( 0.00%)      fn coerce_from_fn_item(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {
        .                   //! Attempts to coerce from the type of a Rust function item
        .                   //! into a closure or a `proc`.
        .           
        .                   let b = self.shallow_resolve(b);
      485 ( 0.00%)          let InferOk { value: b, mut obligations } =
       97 ( 0.00%)              self.normalize_associated_types_in_as_infer_ok(self.cause.span, b);
        .                   debug!("coerce_from_fn_item(a={:?}, b={:?})", a, b);
        .           
      194 ( 0.00%)          match b.kind() {
        .                       ty::FnPtr(b_sig) => {
      300 ( 0.00%)                  let a_sig = a.fn_sig(self.tcx);
        .                           // Intrinsics are not coercible to function pointers
      150 ( 0.00%)                  if a_sig.abi() == Abi::RustIntrinsic || a_sig.abi() == Abi::PlatformIntrinsic {
        .                               return Err(TypeError::IntrinsicCast);
        .                           }
        .           
        .                           // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).
      450 ( 0.00%)                  if let ty::FnDef(def_id, _) = *a.kind() {
      300 ( 0.00%)                      if b_sig.unsafety() == hir::Unsafety::Normal
       75 ( 0.00%)                          && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()
        .                               {
        .                                   return Err(TypeError::TargetFeatureCast(def_id));
        .                               }
        .                           }
        .           
      525 ( 0.00%)                  let InferOk { value: a_sig, obligations: o1 } =
      300 ( 0.00%)                      self.normalize_associated_types_in_as_infer_ok(self.cause.span, a_sig);
        .                           obligations.extend(o1);
        .           
       75 ( 0.00%)                  let a_fn_pointer = self.tcx.mk_fn_ptr(a_sig);
      300 ( 0.00%)                  let InferOk { value, obligations: o2 } = self.coerce_from_safe_fn(
        .                               a_fn_pointer,
      375 ( 0.00%)                      a_sig,
        .                               b,
        .                               |unsafe_ty| {
        .                                   vec![
        .                                       Adjustment {
        .                                           kind: Adjust::Pointer(PointerCast::ReifyFnPointer),
        .                                           target: a_fn_pointer,
        .                                       },
        .                                       Adjustment {
-- line 811 ----------------------------------------
-- line 813 ----------------------------------------
        .                                           target: unsafe_ty,
        .                                       },
        .                                   ]
        .                               },
        .                               simple(Adjust::Pointer(PointerCast::ReifyFnPointer)),
        .                           )?;
        .           
        .                           obligations.extend(o2);
    1,125 ( 0.00%)                  Ok(InferOk { value, obligations })
        .                       }
        .                       _ => self.unify_and(a, b, identity),
        .                   }
      776 ( 0.00%)      }
        .           
      882 ( 0.00%)      fn coerce_closure_to_fn(
        .                   &self,
        .                   a: Ty<'tcx>,
        .                   closure_def_id_a: DefId,
        .                   substs_a: SubstsRef<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> CoerceResult<'tcx> {
        .                   //! Attempts to coerce from the type of a non-capturing closure
        .                   //! into a function pointer.
        .                   //!
        .           
        .                   let b = self.shallow_resolve(b);
        .           
      126 ( 0.00%)          match b.kind() {
        .                       // At this point we haven't done capture analysis, which means
        .                       // that the ClosureSubsts just contains an inference variable instead
        .                       // of tuple of captured types.
        .                       //
        .                       // All we care here is if any variable is being captured and not the exact paths,
        .                       // so we check `upvars_mentioned` for root variables being captured.
        .                       ty::FnPtr(fn_ty)
        .                           if self
-- line 848 ----------------------------------------
-- line 864 ----------------------------------------
        .                           self.unify_and(
        .                               pointer_ty,
        .                               b,
        .                               simple(Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))),
        .                           )
        .                       }
        .                       _ => self.unify_and(a, b, identity),
        .                   }
      504 ( 0.00%)      }
        .           
        .               fn coerce_unsafe_ptr(
        .                   &self,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .                   mutbl_b: hir::Mutability,
        .               ) -> CoerceResult<'tcx> {
        .                   debug!("coerce_unsafe_ptr(a={:?}, b={:?})", a, b);
-- line 880 ----------------------------------------
-- line 906 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
        .               /// Attempt to coerce an expression to a type, and return the
        .               /// adjusted type of the expression, if successful.
        .               /// Adjustments are only recorded if the coercion succeeded.
        .               /// The expressions *must not* have any pre-existing adjustments.
1,079,232 ( 0.01%)      pub fn try_coerce(
        .                   &self,
        .                   expr: &hir::Expr<'_>,
        .                   expr_ty: Ty<'tcx>,
        .                   target: Ty<'tcx>,
        .                   allow_two_phase: AllowTwoPhase,
        .                   cause: Option<ObligationCause<'tcx>>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  231,264 ( 0.00%)          let source = self.resolve_vars_with_obligations(expr_ty);
        .                   debug!("coercion::try({:?}: {:?} -> {:?})", expr, source, target);
        .           
        .                   let cause =
   77,088 ( 0.00%)              cause.unwrap_or_else(|| self.cause(expr.span, ObligationCauseCode::ExprAssignable));
        .                   let coerce = Coerce::new(self, cause, allow_two_phase);
  924,766 ( 0.01%)          let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;
        .           
  308,120 ( 0.00%)          let (adjustments, _) = self.register_infer_ok_obligations(ok);
  770,300 ( 0.01%)          self.apply_adjustments(expr, adjustments);
  231,090 ( 0.00%)          Ok(if expr_ty.references_error() { self.tcx.ty_error() } else { target })
  693,792 ( 0.01%)      }
        .           
        .               /// Same as `try_coerce()`, but without side-effects.
        .               ///
        .               /// Returns false if the coercion creates any obligations that result in
        .               /// errors.
        .               pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {
        .                   let source = self.resolve_vars_with_obligations(expr_ty);
        .                   debug!("coercion::can_with_predicates({:?} -> {:?})", source, target);
-- line 941 ----------------------------------------
-- line 967 ----------------------------------------
        .               }
        .           
        .               /// Given some expressions, their known unified type and another expression,
        .               /// tries to unify the types, potentially inserting coercions on any of the
        .               /// provided expressions and returns their LUB (aka "common supertype").
        .               ///
        .               /// This is really an internal helper. From outside the coercion
        .               /// module, you should instantiate a `CoerceMany` instance.
  412,191 ( 0.00%)      fn try_find_coercion_lub<E>(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   exprs: &[E],
        .                   prev_ty: Ty<'tcx>,
        .                   new: &hir::Expr<'_>,
        .                   new_ty: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>>
        .               where
        .                   E: AsCoercionSite,
        .               {
  190,242 ( 0.00%)          let prev_ty = self.resolve_vars_with_obligations(prev_ty);
   95,121 ( 0.00%)          let new_ty = self.resolve_vars_with_obligations(new_ty);
        .                   debug!(
        .                       "coercion::try_find_coercion_lub({:?}, {:?}, exprs={:?} exprs)",
        .                       prev_ty,
        .                       new_ty,
        .                       exprs.len()
        .                   );
        .           
        .                   // The following check fixes #88097, where the compiler erroneously
        .                   // attempted to coerce a closure type to itself via a function pointer.
   31,707 ( 0.00%)          if prev_ty == new_ty {
   30,819 ( 0.00%)              return Ok(prev_ty);
        .                   }
        .           
        .                   // Special-case that coercion alone cannot handle:
        .                   // Function items or non-capturing closures of differing IDs or InternalSubsts.
    5,000 ( 0.00%)          let (a_sig, b_sig) = {
    5,000 ( 0.00%)              let is_capturing_closure = |ty| {
    2,500 ( 0.00%)                  if let &ty::Closure(closure_def_id, _substs) = ty {
        .                               self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()
        .                           } else {
        .                               false
        .                           }
    5,000 ( 0.00%)              };
    7,462 ( 0.00%)              if is_capturing_closure(prev_ty.kind()) || is_capturing_closure(new_ty.kind()) {
        .                           (None, None)
        .                       } else {
    3,750 ( 0.00%)                  match (prev_ty.kind(), new_ty.kind()) {
        .                               (ty::FnDef(..), ty::FnDef(..)) => {
        .                                   // Don't reify if the function types have a LUB, i.e., they
        .                                   // are the same function and their parameters have a LUB.
        .                                   match self
        .                                       .commit_if_ok(|_| self.at(cause, self.param_env).lub(prev_ty, new_ty))
        .                                   {
        .                                       // We have a LUB of prev_ty and new_ty, just return it.
        .                                       Ok(ok) => return Ok(self.register_infer_ok_obligations(ok)),
-- line 1022 ----------------------------------------
-- line 1048 ----------------------------------------
        .                                       substs_b.as_closure().sig(),
        .                                       hir::Unsafety::Normal,
        .                                   )),
        .                               ),
        .                               _ => (None, None),
        .                           }
        .                       }
        .                   };
    2,500 ( 0.00%)          if let (Some(a_sig), Some(b_sig)) = (a_sig, b_sig) {
        .                       // Intrinsics are not coercible to function pointers.
        .                       if a_sig.abi() == Abi::RustIntrinsic
        .                           || a_sig.abi() == Abi::PlatformIntrinsic
        .                           || b_sig.abi() == Abi::RustIntrinsic
        .                           || b_sig.abi() == Abi::PlatformIntrinsic
        .                       {
        .                           return Err(TypeError::IntrinsicCast);
        .                       }
-- line 1064 ----------------------------------------
-- line 1094 ----------------------------------------
        .                   }
        .           
        .                   // Configure a Coerce instance to compute the LUB.
        .                   // We don't allow two-phase borrows on any autorefs this creates since we
        .                   // probably aren't processing function arguments here and even if we were,
        .                   // they're going to get autorefed again anyway and we can apply 2-phase borrows
        .                   // at that time.
        .                   let mut coerce = Coerce::new(self, cause.clone(), AllowTwoPhase::No);
      625 ( 0.00%)          coerce.use_lub = true;
        .           
        .                   // First try to coerce the new expression to the type of the previous ones,
        .                   // but only if the new expression has no coercion already applied to it.
        .                   let mut first_error = None;
    5,000 ( 0.00%)          if !self.typeck_results.borrow().adjustments().contains_key(new.hir_id) {
   82,713 ( 0.00%)              let result = self.commit_if_ok(|_| coerce.coerce(new_ty, prev_ty));
    1,250 ( 0.00%)              match result {
        .                           Ok(ok) => {
    5,000 ( 0.00%)                      let (adjustments, target) = self.register_infer_ok_obligations(ok);
    5,000 ( 0.00%)                      self.apply_adjustments(new, adjustments);
        .                               debug!(
        .                                   "coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}",
        .                                   prev_ty, new_ty,
        .                               );
    1,250 ( 0.00%)                      return Ok(target);
        .                           }
        .                           Err(e) => first_error = Some(e),
        .                       }
        .                   }
        .           
        .                   // Then try to coerce the previous expressions to the type of the new one.
        .                   // This requires ensuring there are no coercions applied to *any* of the
        .                   // previous expressions, other than noop reborrows (ignoring lifetimes).
-- line 1125 ----------------------------------------
-- line 1175 ----------------------------------------
        .                           let (adjustments, target) = self.register_infer_ok_obligations(ok);
        .                           for expr in exprs {
        .                               let expr = expr.as_coercion_site();
        .                               self.apply_adjustments(expr, adjustments.clone());
        .                           }
        .                           Ok(target)
        .                       }
        .                   }
  285,363 ( 0.00%)      }
        .           }
        .           
        .           /// CoerceMany encapsulates the pattern you should use when you have
        .           /// many expressions that are all getting coerced to a common
        .           /// type. This arises, for example, when you have a match (the result
        .           /// of each arm is coerced to a common type). It also arises in less
        .           /// obvious places, such as when you have many `break foo` expressions
        .           /// that target the same loop, or the various `return` expressions in
-- line 1191 ----------------------------------------
-- line 1253 ----------------------------------------
        .               /// expected to pass each element in the slice to `coerce(...)` in
        .               /// order. This is used with arrays in particular to avoid
        .               /// needlessly cloning the slice.
        .               pub fn with_coercion_sites(expected_ty: Ty<'tcx>, coercion_sites: &'exprs [E]) -> Self {
        .                   Self::make(expected_ty, Expressions::UpFront(coercion_sites))
        .               }
        .           
        .               fn make(expected_ty: Ty<'tcx>, expressions: Expressions<'tcx, 'exprs, E>) -> Self {
   29,902 ( 0.00%)          CoerceMany { expected_ty, final_ty: None, expressions, pushed: 0 }
        .               }
        .           
        .               /// Returns the "expected type" with which this coercion was
        .               /// constructed. This represents the "downward propagated" type
        .               /// that was given to us at the start of typing whatever construct
        .               /// we are typing (e.g., the match expression).
        .               ///
        .               /// Typically, this is used as the expected type when
        .               /// type-checking each of the alternative expressions whose types
        .               /// we are trying to merge.
        .               pub fn expected_ty(&self) -> Ty<'tcx> {
       14 ( 0.00%)          self.expected_ty
        .               }
        .           
        .               /// Returns the current "merged type", representing our best-guess
        .               /// at the LUB of the expressions we've seen so far (if any). This
        .               /// isn't *final* until you call `self.final()`, which will return
        .               /// the merged type.
        .               pub fn merged_ty(&self) -> Ty<'tcx> {
        .                   self.final_ty.unwrap_or(self.expected_ty)
        .               }
        .           
        .               /// Indicates that the value generated by `expression`, which is
        .               /// of type `expression_ty`, is one of the possibilities that we
        .               /// could coerce from. This will record `expression`, and later
        .               /// calls to `coerce` may come back and add adjustments and things
        .               /// if necessary.
  401,316 ( 0.00%)      pub fn coerce<'a>(
        .                   &mut self,
        .                   fcx: &FnCtxt<'a, 'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   expression: &'tcx hir::Expr<'tcx>,
        .                   expression_ty: Ty<'tcx>,
        .               ) {
   27,649 ( 0.00%)          self.coerce_inner(fcx, cause, Some(expression), expression_ty, None, false)
  267,544 ( 0.00%)      }
        .           
        .               /// Indicates that one of the inputs is a "forced unit". This
        .               /// occurs in a case like `if foo { ... };`, where the missing else
        .               /// generates a "forced unit". Another example is a `loop { break;
        .               /// }`, where the `break` has no argument expression. We treat
        .               /// these cases slightly differently for error-reporting
        .               /// purposes. Note that these tend to correspond to cases where
        .               /// the `()` expression is implicit in the source, and hence we do
-- line 1305 ----------------------------------------
-- line 1310 ----------------------------------------
        .               /// removing a `;`).
        .               pub fn coerce_forced_unit<'a>(
        .                   &mut self,
        .                   fcx: &FnCtxt<'a, 'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   augment_error: &mut dyn FnMut(&mut DiagnosticBuilder<'_>),
        .                   label_unit_as_expected: bool,
        .               ) {
    6,619 ( 0.00%)          self.coerce_inner(
        .                       fcx,
        .                       cause,
        .                       None,
      738 ( 0.00%)              fcx.tcx.mk_unit(),
        .                       Some(augment_error),
        .                       label_unit_as_expected,
        .                   )
        .               }
        .           
        .               /// The inner coercion "engine". If `expression` is `None`, this
        .               /// is a forced-unit case, and hence `expression_ty` must be
        .               /// `Nil`.
  137,613 ( 0.00%)      #[instrument(skip(self, fcx, augment_error, label_expression_as_expected), level = "debug")]
        .               crate fn coerce_inner<'a>(
        .                   &mut self,
        .                   fcx: &FnCtxt<'a, 'tcx>,
        .                   cause: &ObligationCause<'tcx>,
        .                   expression: Option<&'tcx hir::Expr<'tcx>>,
        .                   mut expression_ty: Ty<'tcx>,
        .                   augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder<'_>)>,
        .                   label_expression_as_expected: bool,
        .               ) {
        .                   // Incorporate whatever type inference information we have
        .                   // until now; in principle we might also want to process
        .                   // pending obligations, but doing so should only improve
        .                   // compatibility (hopefully that is true) by helping us
        .                   // uncover never types better.
   40,606 ( 0.00%)          if expression_ty.is_ty_var() {
        .                       expression_ty = fcx.infcx.shallow_resolve(expression_ty);
        .                   }
        .           
        .                   // If we see any error types, just propagate that error
        .                   // upwards.
  159,984 ( 0.00%)          if expression_ty.references_error() || self.merged_ty().references_error() {
        .                       self.final_ty = Some(fcx.tcx.ty_error());
        .                       return;
        .                   }
        .           
        .                   // Handle the actual type unification etc.
   19,659 ( 0.00%)          let result = if let Some(expression) = expression {
  117,774 ( 0.00%)              if self.pushed == 0 {
        .                           // Special-case the first expression we are coercing.
        .                           // To be honest, I'm not entirely sure why we do this.
        .                           // We don't allow two-phase borrows, see comment in try_find_coercion_lub for why
   67,959 ( 0.00%)                  fcx.try_coerce(
        .                               expression,
        .                               expression_ty,
        .                               self.expected_ty,
        .                               AllowTwoPhase::No,
   30,204 ( 0.00%)                      Some(cause.clone()),
        .                           )
        .                       } else {
   63,414 ( 0.00%)                  match self.expressions {
      932 ( 0.00%)                      Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(
        .                                   cause,
        .                                   exprs,
        .                                   self.merged_ty(),
        .                                   expression,
        .                                   expression_ty,
        .                               ),
  188,723 ( 0.00%)                      Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(
        .                                   cause,
   93,723 ( 0.00%)                          &coercion_sites[0..self.pushed],
        .                                   self.merged_ty(),
        .                                   expression,
        .                                   expression_ty,
        .                               ),
        .                           }
        .                       }
        .                   } else {
        .                       // this is a hack for cases where we default to `()` because
-- line 1389 ----------------------------------------
-- line 1394 ----------------------------------------
        .                       //
        .                       // we wind up with a second match arm that is like `_ =>
        .                       // ()`.  That is the case we are considering here. We take
        .                       // a different path to get the right "expected, found"
        .                       // message and so forth (and because we know that
        .                       // `expression_ty` will be unit).
        .                       //
        .                       // Another example is `break` with no argument expression.
      738 ( 0.00%)              assert!(expression_ty.is_unit(), "if let hack without unit type");
    1,476 ( 0.00%)              fcx.at(cause, fcx.param_env)
        .                           .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())
        .                           .map(|infer_ok| {
        .                               fcx.register_infer_ok_obligations(infer_ok);
        .                               expression_ty
        .                           })
        .                   };
        .           
   80,997 ( 0.00%)          match result {
   40,734 ( 0.00%)              Ok(v) => {
   39,258 ( 0.00%)                  self.final_ty = Some(v);
        .                           if let Some(e) = expression {
   78,516 ( 0.00%)                      match self.expressions {
        .                                   Expressions::Dynamic(ref mut buffer) => buffer.push(e),
   74,720 ( 0.00%)                          Expressions::UpFront(coercion_sites) => {
        .                                       // if the user gave us an array to validate, check that we got
        .                                       // the next expression in the list, as expected
  145,523 ( 0.00%)                              assert_eq!(
  112,080 ( 0.00%)                                  coercion_sites[self.pushed].as_coercion_site().hir_id,
        .                                           e.hir_id
        .                                       );
        .                                   }
        .                               }
  158,930 ( 0.00%)                      self.pushed += 1;
        .                           }
        .                       }
        .                       Err(coercion_error) => {
        .                           let (expected, found) = if label_expression_as_expected {
        .                               // In the case where this is a "forced unit", like
        .                               // `break`, we want to call the `()` "expected"
        .                               // since it is implied by the syntax.
        .                               // (Note: not all force-units work this way.)"
-- line 1434 ----------------------------------------
-- line 1707 ----------------------------------------
        .                           if let ty::Dynamic(..) = ty.kind() {
        .                               return true;
        .                           }
        .                       }
        .                   }
        .                   false
        .               }
        .           
   19,128 ( 0.00%)      pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {
   24,669 ( 0.00%)          if let Some(final_ty) = self.final_ty {
        .                       final_ty
        .                   } else {
        .                       // If we only had inputs that were of type `!` (or no
        .                       // inputs at all), then the final type is `!`.
      412 ( 0.00%)              assert_eq!(self.pushed, 0);
      206 ( 0.00%)              fcx.tcx.types.never
        .                   }
   23,910 ( 0.00%)      }
        .           }
        .           
        .           /// Something that can be converted into an expression to which we can
        .           /// apply a coercion.
        .           pub trait AsCoercionSite {
        .               fn as_coercion_site(&self) -> &hir::Expr<'_>;
        .           }
        .           
-- line 1732 ----------------------------------------
-- line 1736 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, T> AsCoercionSite for &'a T
        .           where
        .               T: AsCoercionSite,
        .           {
        .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
    1,784 ( 0.00%)          (**self).as_coercion_site()
        .               }
        .           }
        .           
        .           impl AsCoercionSite for ! {
        .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
        .                   unreachable!()
        .               }
        .           }
        .           
        .           impl AsCoercionSite for hir::Arm<'_> {
        .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
    4,266 ( 0.00%)          &self.body
        .               }
        .           }

3,055,239 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir                  

-- line 77 ----------------------------------------
         .           //
         .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
         .           // placate the same deriving in `ty::FreeRegion`, but we may want to
         .           // actually attach a more meaningful ordering to scopes than the one
         .           // generated via deriving here.
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct Scope {
   142,507 ( 0.00%)      pub id: hir::ItemLocalId,
 2,592,522 ( 0.03%)      pub data: ScopeData,
         .           }
         .           
         .           impl fmt::Debug for Scope {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.data {
         .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
         .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
         .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
         .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
         .                           self.id,
         .                           fsi.as_u32(),
         .                       ),
         .                   }
         .               }
         .           }
         .           
11,723,027 ( 0.13%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum ScopeData {
         .               Node,
         .           
         .               /// Scope of the call-site for a function or closure
         .               /// (outlives the arguments as well as the body).
         .               CallSite,
         .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
         .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
         .               pub fn item_local_id(&self) -> hir::ItemLocalId {
         .                   self.id
         .               }
         .           
         .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
    60,379 ( 0.00%)          scope_tree
         .                       .root_body
         .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
         .               }
         .           
         .               /// Returns the span of this `Scope`. Note that in general the
         .               /// returned span may not correspond to the span of any `NodeId` in
         .               /// the AST.
   422,653 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
   120,758 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
         .                       Some(hir_id) => hir_id,
         .                       None => return DUMMY_SP,
         .                   };
   241,516 ( 0.00%)          let span = tcx.hir().span(hir_id);
   241,516 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
    12,450 ( 0.00%)              if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
         .                           // Want span for scope starting after the
         .                           // indexed statement and ending at end of
         .                           // `blk`; reuse span of `blk` and shift `lo`
         .                           // forward to end of indexed statement.
         .                           //
         .                           // (This is the special case alluded to in the
         .                           // doc-comment for this method)
         .           
    16,600 ( 0.00%)                  let stmt_span = blk.stmts[first_statement_index.index()].span;
         .           
         .                           // To avoid issues with macro-generated spans, the span
         .                           // of the statement must be nested in that of the block.
     3,976 ( 0.00%)                  if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
     6,856 ( 0.00%)                      return span.with_lo(stmt_span.lo());
         .                           }
         .                       }
         .                   }
         .                   span
   543,411 ( 0.01%)      }
         .           }
         .           
         .           pub type ScopeDepth = u32;
         .           
         .           /// The region scope tree encodes information about region relationships.
         .           #[derive(Default, Debug)]
         .           pub struct ScopeTree {
         .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
         .               /// The `Span` of the yield.
         .               pub span: Span,
         .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
         .               pub expr_and_pat_count: usize,
         .               pub source: hir::YieldSource,
         .           }
         .           
         .           impl ScopeTree {
   918,540 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
         .                   debug!("{:?}.parent = {:?}", child, parent);
         .           
   306,180 ( 0.00%)          if let Some(p) = parent {
         .                       let prev = self.parent_map.insert(child, p);
   150,155 ( 0.00%)              assert!(prev.is_none());
         .                   }
         .           
         .                   // Record the destruction scopes for later so we can query them.
   306,180 ( 0.00%)          if let ScopeData::Destruction = child.data {
         .                       self.destruction_scopes.insert(child.item_local_id(), child);
         .                   }
   582,096 ( 0.01%)      }
         .           
   259,330 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
         .                   self.destruction_scopes.get(&n).cloned()
   259,330 ( 0.00%)      }
         .           
         .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
         .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
     4,110 ( 0.00%)          assert!(var != lifetime.item_local_id());
         .                   self.var_map.insert(var, lifetime);
         .               }
         .           
         .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
         .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
    13,804 ( 0.00%)          if let Some(lifetime) = lifetime {
         .                       assert!(var != lifetime.item_local_id());
         .                   }
         .                   self.rvalue_scopes.insert(var, lifetime);
         .               }
         .           
         .               /// Returns the narrowest scope that encloses `id`, if any.
         .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
         .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
         .               }
         .           
         .               /// Returns the lifetime of the local variable `var_id`
    10,688 ( 0.00%)      pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
         .                   self.var_map
         .                       .get(&var_id)
         .                       .cloned()
         .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
    10,688 ( 0.00%)      }
         .           
         .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
 1,769,005 ( 0.02%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
         .                   // Check for a designated rvalue scope.
    20,769 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
         .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
         .                       return s;
         .                   }
         .           
         .                   // Otherwise, locate the innermost terminating scope
         .                   // if there's one. Static items, for instance, won't
         .                   // have an enclosing scope, hence no scope will be
         .                   // returned.
   245,792 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
         .           
 6,120,533 ( 0.07%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
 2,054,046 ( 0.02%)              match p.data {
         .                           ScopeData::Destruction => {
         .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
         .                               return Some(id);
         .                           }
   663,683 ( 0.01%)                  _ => id = p,
         .                       }
         .                   }
         .           
         .                   debug!("temporary_scope({:?}) = None", expr_id);
         .                   None
 2,021,720 ( 0.02%)      }
         .           
         .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
         .               /// `false` otherwise.
         .               ///
         .               /// Used by clippy.
         .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
         .                   let mut s = subscope;
         .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

 4,507,206 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
   12,280 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    4,006 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  217,132 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   39,501 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
      909 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   18,767 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    2,886 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    8,739 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    6,029 ( 0.00%)              self.current_id = parent_id;
   23,385 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
   10,724 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   24,129 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  163,998 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   54,666 ( 0.00%)          if self.current_id.local_id.index() != 0 {
   10,055 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   40,220 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    8,167 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       12 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   16,322 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   16,322 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  145,776 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      217 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       31 ( 0.00%)          self.tcx.hir_crate(())
      248 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  260,544 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   69,192 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  195,408 ( 0.00%)      }
        .           
        .               #[inline]
  184,528 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   49,109 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   18,266 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  207,594 ( 0.00%)      }
        .           
        .               #[inline]
      249 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   12,812 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      498 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   24,745 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   45,955 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    5,944 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       76 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      861 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      970 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
    1,348 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      388 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      776 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
       86 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
      315 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      414 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   13,072 ( 0.00%)          Some(def_kind)
   35,350 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
5,506,584 ( 0.06%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  688,323 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
1,353,468 ( 0.02%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  676,734 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
2,030,202 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
5,506,584 ( 0.06%)      }
        .           
    7,933 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
3,916,987 ( 0.04%)          self.find_parent_node(hir_id).unwrap()
   15,866 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
1,638,808 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  204,851 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
  117,819 ( 0.00%)              Some(owner.node.into())
        .                   } else {
  173,490 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   86,745 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  260,235 ( 0.00%)              Some(node.node)
        .                   }
1,638,808 ( 0.02%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   29,141 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  112,023 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   60,435 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   74,682 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    3,754 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    1,877 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    3,754 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  285,810 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   81,660 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  326,640 ( 0.00%)      }
        .           
    6,916 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    1,976 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    7,904 ( 0.00%)      }
        .           
  171,913 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   49,118 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  196,472 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  340,438 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   97,268 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  389,072 ( 0.00%)      }
        .           
    7,368 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    7,368 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    4,912 ( 0.00%)      }
        .           
    1,512 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
    1,512 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,512 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  231,624 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  173,718 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  231,624 ( 0.00%)      }
        .           
   74,935 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  115,310 ( 0.00%)          self.local_def_id(self.body_owner(id))
   74,935 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
   10,377 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   34,144 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   31,131 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   27,117 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   21,091 ( 0.00%)      }
        .           
      933 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    8,403 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    2,802 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
    2,799 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   47,838 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  126,444 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   47,838 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   56,064 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   84,096 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    3,732 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    3,732 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    7,464 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   63,072 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
   10,605 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       75 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
   14,775 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   21,210 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
   13,500 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
      430 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      236 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
        .                   }
      301 ( 0.00%)      }
        .           
    1,360 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
      846 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
      108 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
      816 ( 0.00%)      }
        .           
      837 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       93 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      837 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      665 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      475 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      168 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      855 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   14,140 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
   21,530 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       21 ( 0.00%)          let krate = self.krate();
       71 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   85,896 ( 0.00%)              match owner.node() {
   69,842 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    2,583 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    1,486 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      861 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
       38 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    2,494 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      319 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      348 ( 0.00%)          for id in module.items.iter() {
   66,870 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.trait_items.iter() {
    1,520 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.impl_items.iter() {
   33,579 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    2,552 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      232 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       87 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      928 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    2,567 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
   10,384 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   53,130 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 752 ----------------------------------------
        .               /// ```
        .               /// fn foo(x: usize) -> bool {
        .               ///     loop {
        .               ///         true  // If `get_return_block` gets passed the `id` corresponding
        .               ///     }         // to this, it will return `None`.
        .               ///     false
        .               /// }
        .               /// ```
      243 ( 0.00%)      pub fn get_return_block(&self, id: HirId) -> Option<HirId> {
       27 ( 0.00%)          let mut iter = self.parent_iter(id).peekable();
        .                   let mut ignore_tail = false;
      108 ( 0.00%)          if let Some(node) = self.find(id) {
      108 ( 0.00%)              if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {
        .                           // When dealing with `return` statements, we don't care about climbing only tail
        .                           // expressions.
        .                           ignore_tail = true;
        .                       }
        .                   }
      352 ( 0.00%)          while let Some((hir_id, node)) = iter.next() {
    1,421 ( 0.00%)              if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {
        9 ( 0.00%)                  match next_node {
        .                               Node::Block(Block { expr: None, .. }) => return None,
        .                               // The current node is not the tail expression of its parent.
        9 ( 0.00%)                      Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,
        .                               _ => {}
        .                           }
        .                       }
    1,525 ( 0.00%)              match node {
        .                           Node::Item(_)
        .                           | Node::ForeignItem(_)
        .                           | Node::TraitItem(_)
        .                           | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })
        .                           | Node::ImplItem(_) => return Some(hir_id),
        .                           // Ignore `return`s on the first iteration
        .                           Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })
        .                           | Node::Local(_) => {
        .                               return None;
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
      270 ( 0.00%)      }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   16,165 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  145,735 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   32,330 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
   14,442 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    8,072 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 834 ----------------------------------------
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the nearest enclosing scope. A scope is roughly an item or block.
       16 ( 0.00%)      pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {
        6 ( 0.00%)          for (hir_id, node) in self.parent_iter(hir_id) {
       12 ( 0.00%)              if let Node::Item(Item {
        .                           kind:
        .                               ItemKind::Fn(..)
        .                               | ItemKind::Const(..)
        .                               | ItemKind::Static(..)
        .                               | ItemKind::Mod(..)
        .                               | ItemKind::Enum(..)
        .                               | ItemKind::Struct(..)
        .                               | ItemKind::Union(..)
-- line 852 ----------------------------------------
-- line 858 ----------------------------------------
        .                       | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(..), .. })
        .                       | Node::Block(_) = node
        .                       {
        .                           return Some(hir_id);
        .                       }
        .                   }
        .                   None
       20 ( 0.00%)      }
        .           
        .               /// Returns the defining scope for an opaque type definition.
        .               pub fn get_defining_scope(&self, id: HirId) -> HirId {
        .                   let mut scope = id;
        .                   loop {
        .                       scope = self.get_enclosing_scope(scope).unwrap_or(CRATE_HIR_ID);
        .                       if scope == CRATE_HIR_ID || !matches!(self.get(scope), Node::Block(_)) {
        .                           return scope;
-- line 874 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   64,239 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   27,531 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   73,416 ( 0.00%)      }
        .           
   12,054 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    5,166 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   13,776 ( 0.00%)      }
        .           
      532 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
      228 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      608 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    6,696 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    2,360 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    2,040 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      128 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    3,720 ( 0.00%)      }
        .           
    5,696 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    2,296 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    4,272 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
8,599,318 ( 0.10%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
1,228,474 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
9,827,792 ( 0.11%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   14,946 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  246,498 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   14,946 ( 0.00%)      }
        .           
  481,628 ( 0.01%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  481,628 ( 0.01%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    6,344 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    5,800 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      314 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      284 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
       30 ( 0.00%)                  _ => trait_item.span,
        .                       },
    6,786 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    6,752 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
       34 ( 0.00%)                  _ => impl_item.span,
        .                       },
      416 ( 0.00%)              Node::Variant(variant) => variant.span,
      532 ( 0.00%)              Node::Field(field) => field.span,
      483 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
    1,947 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  688,040 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    1,154 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    6,679 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    1,731 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   29,937 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   19,145 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      532 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   12,054 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       86 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      261 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      174 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
      145 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      464 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      319 ( 0.00%)      return ModuleItems {
      116 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      116 ( 0.00%)          items: items.into_boxed_slice(),
      116 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      116 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      116 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    3,856 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    7,430 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    4,458 ( 0.00%)              self.items.push(item.item_id());
    2,972 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       28 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    8,748 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
      112 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      114 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      114 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    2,583 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    2,583 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      232 ( 0.00%)  }

2,391,934 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  321,392 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
   30,775 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
    1,165 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
      870 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
      520 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
    1,305 ( 0.00%)      pub prev_token: Token,
      605 ( 0.00%)      pub capture_cfg: bool,
    1,295 ( 0.00%)      restrictions: Restrictions,
    1,040 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
    1,040 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
    1,040 ( 0.00%)      unmatched_angle_bracket_count: u32,
    1,560 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
      520 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
      520 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
    2,290 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
    2,080 ( 0.00%)      capturing: Capturing,
      520 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
    5,000 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  152,389 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   36,754 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   11,090 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
   69,424 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   24,008 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   48,016 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    4,935 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   54,016 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
3,855,504 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
1,970,300 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
   52,042 ( 0.00%)                  self.frame.open_delim = true;
  260,210 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
3,743,453 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  209,666 ( 0.00%)              } else if !self.frame.close_delim {
   51,815 ( 0.00%)                  self.frame.close_delim = true;
  259,075 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  103,630 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  673,595 ( 0.01%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   21,654 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  746,668 ( 0.01%)              match tree {
        .                           TokenTree::Token(token) => {
2,570,336 ( 0.03%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
2,570,336 ( 0.03%)      }
        .           
   27,570 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    8,271 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
   13,785 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
   24,813 ( 0.00%)      }
        .           }
        .           
   36,110 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   28,888 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      204 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,902 ( 0.00%)      Some(match token.kind {
    3,804 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    3,804 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    3,804 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    6,657 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,902 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    6,657 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    4,755 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   13,818 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
      987 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    1,974 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   30,597 ( 0.00%)          let mut parser = Parser {
        .                       sess,
      987 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
      987 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
    5,922 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    1,974 ( 0.00%)          parser.bump();
        .           
        .                   parser
    8,883 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
1,906,140 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
   11,028 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  944,799 ( 0.01%)                  self.token_cursor.next()
        .                       };
1,270,760 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  317,690 ( 0.00%)              self.token_cursor.break_last_token = false;
1,270,760 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    4,100 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
1,108,515 ( 0.01%)              if matches!(
  635,380 ( 0.01%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
1,270,760 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  955,836 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  106,204 ( 0.00%)          if self.expected_tokens.is_empty() {
    7,152 ( 0.00%)              if self.token == *t {
    5,960 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
1,260,144 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
1,593,060 ( 0.02%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
1,293,504 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
  215,584 ( 0.00%)          if edible.contains(&self.token.kind) {
  317,583 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
1,616,880 ( 0.02%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   90,228 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   69,243 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  158,830 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   22,690 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  136,140 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   90,760 ( 0.00%)          self.bump();
        .                   Ok(ident)
  226,900 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
6,204,198 ( 0.07%)      fn check(&mut self, tok: &TokenKind) -> bool {
2,672,484 ( 0.03%)          let is_present = self.token == *tok;
1,791,324 ( 0.02%)          if !is_present {
3,741,763 ( 0.04%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
6,204,198 ( 0.07%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      380 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
1,122,083 ( 0.01%)          let is_present = self.check(tok);
  742,704 ( 0.01%)          if is_present {
  124,746 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      475 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   64,110 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   19,415 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  482,119 ( 0.01%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  142,930 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  114,566 ( 0.00%)          if self.check_keyword(kw) {
   11,771 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  142,930 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   13,226 ( 0.00%)          if self.token.is_keyword(kw) {
    3,155 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      945 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      756 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  116,968 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   58,528 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  131,589 ( 0.00%)      }
        .           
  103,398 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   41,700 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   17,992 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  103,398 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   24,596 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   40,272 ( 0.00%)      fn check_path(&mut self) -> bool {
   92,970 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   50,340 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    3,472 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    3,424 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   28,044 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   15,580 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   28,044 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   10,676 ( 0.00%)          self.check_or_expected(
    5,338 ( 0.00%)              self.token.is_like_plus(),
    5,338 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  196,344 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  114,534 ( 0.00%)          if self.token.kind == expected {
   11,932 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   51,980 ( 0.00%)          match self.token.kind.break_two_token_op() {
      274 ( 0.00%)              Some((first, second)) if first == expected => {
      148 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      185 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      333 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       37 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      518 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   31,077 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  188,699 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      228 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   29,346 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      408 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    7,652 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   33,926 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   22,111 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    2,080 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    2,166 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    7,652 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    3,066 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    1,533 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    1,022 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  681,687 ( 0.01%)              TokenExpectType::Expect => self.check(k),
    1,068 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  527,937 ( 0.01%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
  336,103 ( 0.00%)              if let Some(ref t) = sep.sep {
  309,016 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
  467,215 ( 0.01%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
  197,052 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
  100,177 ( 0.00%)              let t = f(self)?;
    6,715 ( 0.00%)              v.push(t);
        .                   }
        .           
  151,368 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  120,564 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   40,060 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   79,674 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   71,422 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
  106,763 ( 0.00%)          Ok((val, trailing))
   32,048 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   15,625 ( 0.00%)          self.expect(bra)?;
   32,048 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    6,214 ( 0.00%)              &token::OpenDelim(delim),
    8,464 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
4,130,451 ( 0.05%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
1,906,362 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
1,270,908 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  317,727 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  317,727 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
2,541,520 ( 0.03%)      pub fn bump(&mut self) {
1,270,760 ( 0.01%)          let next_token = self.next_tok(self.token.span);
1,906,140 ( 0.02%)          self.bump_with(next_token);
2,541,520 ( 0.03%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      584 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    9,464 ( 0.00%)          if dist == 0 {
    3,844 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
  131,837 ( 0.00%)          let frame = &self.token_cursor.frame;
  135,256 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  398,338 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  469,215 ( 0.01%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  658,986 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  193,503 ( 0.00%)                      Some(tree) => match tree {
   93,676 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   26,015 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
  246,795 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    3,588 ( 0.00%)          let mut token = Token::dummy();
    1,940 ( 0.00%)          while i < dist {
   25,960 ( 0.00%)              token = cursor.next().0;
   11,435 ( 0.00%)              if matches!(
    7,204 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      925 ( 0.00%)              i += 1;
        .                   }
      225 ( 0.00%)          return looker(&token);
      657 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   40,023 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   10,562 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   40,023 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    1,978 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    7,912 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   22,776 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    6,669 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
    2,465 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   39,858 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
      664 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
   10,724 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      902 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    1,353 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    3,604 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    1,347 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   18,153 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   16,136 ( 0.00%)          Ok(
   10,779 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      606 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      435 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    7,524 ( 0.00%)                  match self.parse_token_tree() {
    9,405 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    3,762 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      272 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   14,119 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  326,971 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
  214,690 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   18,456 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    8,233 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  102,144 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
   77,606 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    3,958 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    3,958 ( 0.00%)                  let span = frame.span;
    1,979 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    3,958 ( 0.00%)                  self.bump();
    9,895 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
      656 ( 0.00%)                  self.bump();
    1,640 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   16,149 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  106,956 ( 0.00%)          let old = self.restrictions;
  110,116 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
  109,518 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   48,320 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   30,200 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   54,360 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   33,610 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    6,722 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    3,361 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   13,444 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    2,487 ( 0.00%)              return Ok(Visibility {
    7,461 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      874 ( 0.00%)          let lo = self.prev_token.span;
        .           
    4,370 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    2,622 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   30,249 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      809 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    2,130 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      213 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    2,130 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  137,992 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   68,996 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   45,795 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  130,950 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
   12,056 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    6,028 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    6,028 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
   12,056 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

1,996,815 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs
--------------------------------------------------------------------------------
Ir                 

-- line 132 ----------------------------------------
        .           /// State for tracking recursive validation of references
        .           pub struct RefTracking<T, PATH = ()> {
        .               pub seen: FxHashSet<T>,
        .               pub todo: Vec<(T, PATH)>,
        .           }
        .           
        .           impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH> {
        .               pub fn empty() -> Self {
    3,944 ( 0.00%)          RefTracking { seen: FxHashSet::default(), todo: vec![] }
        .               }
    4,930 ( 0.00%)      pub fn new(op: T) -> Self {
        .                   let mut ref_tracking_for_consts =
   15,776 ( 0.00%)              RefTracking { seen: FxHashSet::default(), todo: vec![(op, PATH::default())] };
        .                   ref_tracking_for_consts.seen.insert(op);
        .                   ref_tracking_for_consts
    4,930 ( 0.00%)      }
        .           
        .               pub fn track(&mut self, op: T, path: impl FnOnce() -> PATH) {
   34,586 ( 0.00%)          if self.seen.insert(op) {
        .                       trace!("Recursing below ptr {:#?}", op);
        .                       let path = path();
        .                       // Remember to come back to this later.
  143,132 ( 0.00%)              self.todo.push((op, path));
        .                   }
        .               }
        .           }
        .           
        .           /// Format a path
        .           fn write_path(out: &mut String, path: &[PathElem]) {
        .               use self::PathElem::*;
        .           
-- line 162 ----------------------------------------
-- line 208 ----------------------------------------
        .               path: Vec<PathElem>,
        .               ref_tracking: Option<&'rt mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
        .               /// `None` indicates this is not validating for CTFE (but for runtime).
        .               ctfe_mode: Option<CtfeValidationMode>,
        .               ecx: &'rt InterpCx<'mir, 'tcx, M>,
        .           }
        .           
        .           impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M> {
4,172,304 ( 0.05%)      fn aggregate_field_path_elem(&mut self, layout: TyAndLayout<'tcx>, field: usize) -> PathElem {
        .                   // First, check if we are projecting to a variant.
1,043,076 ( 0.01%)          match layout.variants {
        .                       Variants::Multiple { tag_field, .. } => {
        .                           if tag_field == field {
        .                               return match layout.ty.kind() {
        .                                   ty::Adt(def, ..) if def.is_enum() => PathElem::EnumTag,
        .                                   ty::Generator(..) => PathElem::GeneratorTag,
        .                                   _ => bug!("non-variant type {:?}", layout.ty),
        .                               };
        .                           }
        .                       }
        .                       Variants::Single { .. } => {}
        .                   }
        .           
        .                   // Now we know we are projecting to a field, so figure out which one.
1,390,768 ( 0.02%)          match layout.ty.kind() {
        .                       // generators and closures.
        .                       ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {
        .                           let mut name = None;
        .                           // FIXME this should be more descriptive i.e. CapturePlace instead of CapturedVar
        .                           // https://github.com/rust-lang/project-rfc-2229/issues/46
        .                           if let Some(local_def_id) = def_id.as_local() {
        .                               let tables = self.ecx.tcx.typeck(local_def_id);
        .                               if let Some(captured_place) =
-- line 240 ----------------------------------------
-- line 280 ----------------------------------------
        .                       ty::Array(..) | ty::Slice(..) => PathElem::ArrayElem(field),
        .           
        .                       // dyn traits
        .                       ty::Dynamic(..) => PathElem::DynDowncast,
        .           
        .                       // nothing else has an aggregate layout
        .                       _ => bug!("aggregate_field_path_elem: got non-aggregate type {:?}", layout.ty),
        .                   }
4,519,996 ( 0.05%)      }
        .           
        .               fn with_elem<R>(
        .                   &mut self,
        .                   elem: PathElem,
        .                   f: impl FnOnce(&mut Self) -> InterpResult<'tcx, R>,
        .               ) -> InterpResult<'tcx, R> {
        .                   // Remember the old state
  695,384 ( 0.01%)          let path_len = self.path.len();
        .                   // Record new element
        .                   self.path.push(elem);
        .                   // Perform operation
  695,384 ( 0.01%)          let r = f(self)?;
        .                   // Undo changes
        .                   self.path.truncate(path_len);
        .                   // Done
        .                   Ok(r)
        .               }
        .           
  112,698 ( 0.00%)      fn check_wide_ptr_meta(
        .                   &mut self,
        .                   meta: MemPlaceMeta<M::PointerTag>,
        .                   pointee: TyAndLayout<'tcx>,
        .               ) -> InterpResult<'tcx> {
   87,654 ( 0.00%)          let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(pointee.ty, self.ecx.param_env);
   50,088 ( 0.00%)          match tail.kind() {
        .                       ty::Dynamic(..) => {
        .                           let vtable = self.ecx.scalar_to_ptr(meta.unwrap_meta());
        .                           // Direct call to `check_ptr_access_align` checks alignment even on CTFE machines.
        .                           try_validation!(
        .                               self.ecx.memory.check_ptr_access_align(
        .                                   vtable,
        .                                   3 * self.ecx.tcx.data_layout.pointer_size, // drop, size, align
        .                                   self.ecx.tcx.data_layout.pointer_align.abi,
-- line 321 ----------------------------------------
-- line 347 ----------------------------------------
        .                               err_ub!(InvalidVtableAlignment(msg)) =>
        .                                   { "invalid vtable: alignment {}", msg },
        .                               err_unsup!(ReadPointerAsBytes) => { "invalid size or align in vtable" },
        .                           );
        .                           // FIXME: More checks for the vtable.
        .                       }
        .                       ty::Slice(..) | ty::Str => {
        .                           let _len = try_validation!(
   12,522 ( 0.00%)                      meta.unwrap_meta().to_machine_usize(self.ecx),
        .                               self.path,
        .                               err_unsup!(ReadPointerAsBytes) => { "non-integer slice length in wide pointer" },
        .                           );
        .                           // We do not check that `len * elem_size <= isize::MAX`:
        .                           // that is only required for references, and there it falls out of the
        .                           // "dereferenceable" check performed by Stacked Borrows.
        .                       }
        .                       ty::Foreign(..) => {
        .                           // Unsized, but not wide.
        .                       }
        .                       _ => bug!("Unexpected unsized type tail: {:?}", tail),
        .                   }
        .           
        .                   Ok(())
  112,698 ( 0.00%)      }
        .           
        .               /// Check a reference or `Box`.
  143,132 ( 0.00%)      fn check_safe_pointer(
        .                   &mut self,
        .                   value: &OpTy<'tcx, M::PointerTag>,
        .                   kind: &str,
        .               ) -> InterpResult<'tcx> {
   39,036 ( 0.00%)          let value = try_validation!(
   26,024 ( 0.00%)              self.ecx.read_immediate(value),
        .                       self.path,
        .                       err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
        .                   );
        .                   // Handle wide pointers.
        .                   // Check metadata early, for better diagnostics
  130,120 ( 0.00%)          let place = try_validation!(
   39,036 ( 0.00%)              self.ecx.ref_to_mplace(&value),
        .                       self.path,
        .                       err_ub!(InvalidUninitBytes(None)) => { "uninitialized {}", kind },
        .                   );
   39,036 ( 0.00%)          if place.layout.is_unsized() {
  137,742 ( 0.00%)              self.check_wide_ptr_meta(place.meta, place.layout)?;
        .                   }
        .                   // Make sure this is dereferenceable and all.
   26,024 ( 0.00%)          let size_and_align = try_validation!(
   13,012 ( 0.00%)              self.ecx.size_and_align_of_mplace(&place),
        .                       self.path,
        .                       err_ub!(InvalidMeta(msg)) => { "invalid {} metadata: {}", kind, msg },
        .                   );
        .                   let (size, align) = size_and_align
        .                       // for the purpose of validity, consider foreign types to have
        .                       // alignment and size determined by the layout (size will be 0,
        .                       // alignment should take attributes into account).
        .                       .unwrap_or_else(|| (place.layout.size, place.layout.align.abi));
        .                   // Direct call to `check_ptr_access_align` checks alignment even on CTFE machines.
        .                   try_validation!(
   26,024 ( 0.00%)              self.ecx.memory.check_ptr_access_align(
   39,036 ( 0.00%)                  place.ptr,
        .                           size,
        .                           align,
        .                           CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message
        .                       ),
        .                       self.path,
        .                       err_ub!(AlignmentCheckFailed { required, has }) =>
        .                           {
        .                               "an unaligned {} (required {} byte alignment but found {})",
-- line 415 ----------------------------------------
-- line 424 ----------------------------------------
        .                       err_ub!(PointerOutOfBounds { .. }) =>
        .                           { "a dangling {} (going beyond the bounds of its allocation)", kind },
        .                       // This cannot happen during const-eval (because interning already detects
        .                       // dangling pointers), but it can happen in Miri.
        .                       err_ub!(PointerUseAfterFree(..)) =>
        .                           { "a dangling {} (use-after-free)", kind },
        .                   );
        .                   // Recursive checking
   39,036 ( 0.00%)          if let Some(ref mut ref_tracking) = self.ref_tracking {
        .                       // Proceed recursively even for ZST, no reason to skip them!
        .                       // `!` is a ZST and we want to validate it.
        .                       // Skip validation entirely for some external statics
   26,024 ( 0.00%)              if let Ok((alloc_id, _offset, _ptr)) = self.ecx.memory.ptr_try_get_alloc(place.ptr) {
        .                           // not a ZST
   39,036 ( 0.00%)                  let alloc_kind = self.ecx.tcx.get_global_alloc(alloc_id);
   26,024 ( 0.00%)                  if let Some(GlobalAlloc::Static(did)) = alloc_kind {
        .                               assert!(!self.ecx.tcx.is_thread_local_static(did));
        .                               assert!(self.ecx.tcx.is_static(did));
        .                               if matches!(
        .                                   self.ctfe_mode,
        .                                   Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })
        .                               ) {
        .                                   // See const_eval::machine::MemoryExtra::can_access_statics for why
        .                                   // this check is so important.
-- line 447 ----------------------------------------
-- line 460 ----------------------------------------
        .                               // and that static refers back to us.
        .                               // We might miss const-invalid data,
        .                               // but things are still sound otherwise (in particular re: consts
        .                               // referring to statics).
        .                               return Ok(());
        .                           }
        .                       }
        .                       let path = &self.path;
  117,108 ( 0.00%)              ref_tracking.track(place, || {
        .                           // We need to clone the path anyway, make sure it gets created
        .                           // with enough space for the additional `Deref`.
   52,048 ( 0.00%)                  let mut new_path = Vec::with_capacity(path.len() + 1);
        .                           new_path.clone_from(path);
        .                           new_path.push(PathElem::Deref);
        .                           new_path
        .                       });
        .                   }
        .                   Ok(())
  117,108 ( 0.00%)      }
        .           
1,551,886 ( 0.02%)      fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
1,773,584 ( 0.02%)          Ok(try_validation!(
  665,094 ( 0.01%)              self.ecx.read_scalar(op),
        .                       self.path,
        .                       err_unsup!(ReadPointerAsBytes) => { "(potentially part of) a pointer" } expected { "plain (non-pointer) bytes" },
        .                   ))
1,330,188 ( 0.02%)      }
        .           
        .               /// Check if this is a value of primitive type, and if yes check the validity of the value
        .               /// at that type.  Return `true` if the type is indeed primitive.
3,255,210 ( 0.04%)      fn try_visit_primitive(
        .                   &mut self,
        .                   value: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, bool> {
        .                   // Go over all the primitive types
1,085,070 ( 0.01%)          let ty = value.layout.ty;
2,170,140 ( 0.02%)          match ty.kind() {
        .                       ty::Bool => {
        .                           let value = self.read_scalar(value)?;
        .                           try_validation!(
        .                               value.to_bool(),
        .                               self.path,
        .                               err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>
        .                                   { "{}", value } expected { "a boolean" },
        .                           );
        .                           Ok(true)
        .                       }
        .                       ty::Char => {
  886,768 ( 0.01%)                  let value = self.read_scalar(value)?;
  443,384 ( 0.01%)                  try_validation!(
        .                               value.to_char(),
        .                               self.path,
        .                               err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>
        .                                   { "{}", value } expected { "a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)" },
        .                           );
        .                           Ok(true)
        .                       }
        .                       ty::Float(_) | ty::Int(_) | ty::Uint(_) => {
       24 ( 0.00%)                  let value = self.read_scalar(value)?;
        .                           // NOTE: Keep this in sync with the array optimization for int/float
        .                           // types below!
        .                           if M::enforce_number_validity(self.ecx) {
        .                               // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous
        .                               let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());
        .                               if !is_bits {
        .                                   throw_validation_failure!(self.path,
        .                                       { "{}", value } expected { "initialized plain (non-pointer) bytes" }
-- line 529 ----------------------------------------
-- line 543 ----------------------------------------
        .                               err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
        .                           );
        .                           if place.layout.is_unsized() {
        .                               self.check_wide_ptr_meta(place.meta, place.layout)?;
        .                           }
        .                           Ok(true)
        .                       }
        .                       ty::Ref(_, ty, mutbl) => {
   39,036 ( 0.00%)                  if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. }))
        .                               && *mutbl == hir::Mutability::Mut
        .                           {
        .                               // A mutable reference inside a const? That does not seem right (except if it is
        .                               // a ZST).
        .                               let layout = self.ecx.layout_of(ty)?;
        .                               if !layout.is_zst() {
        .                                   throw_validation_failure!(self.path, { "mutable reference in a `const`" });
        .                               }
        .                           }
   39,036 ( 0.00%)                  self.check_safe_pointer(value, "reference")?;
        .                           Ok(true)
        .                       }
        .                       ty::Adt(def, ..) if def.is_box() => {
        .                           self.check_safe_pointer(value, "box")?;
        .                           Ok(true)
        .                       }
        .                       ty::FnPtr(_sig) => {
        .                           let value = try_validation!(
-- line 569 ----------------------------------------
-- line 606 ----------------------------------------
        .                       | ty::Infer(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Bound(..)
        .                       | ty::Param(..)
        .                       | ty::Opaque(..)
        .                       | ty::Projection(..)
        .                       | ty::GeneratorWitness(..) => bug!("Encountered invalid type {:?}", ty),
        .                   }
5,425,350 ( 0.06%)      }
        .           
        .               fn visit_scalar(
        .                   &mut self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   scalar_layout: ScalarAbi,
        .               ) -> InterpResult<'tcx> {
        .                   if scalar_layout.valid_range.is_full_for(op.layout.size) {
        .                       // Nothing to check
-- line 622 ----------------------------------------
-- line 709 ----------------------------------------
        .           
        .               #[inline]
        .               fn visit_field(
        .                   &mut self,
        .                   old_op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .                   new_op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
1,750,036 ( 0.02%)          let elem = self.aggregate_field_path_elem(old_op.layout, field);
1,043,076 ( 0.01%)          self.with_elem(elem, move |this| this.visit_value(new_op))
        .               }
        .           
        .               #[inline]
        .               fn visit_variant(
        .                   &mut self,
        .                   old_op: &OpTy<'tcx, M::PointerTag>,
        .                   variant_id: VariantIdx,
        .                   new_op: &OpTy<'tcx, M::PointerTag>,
-- line 726 ----------------------------------------
-- line 745 ----------------------------------------
        .                       if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {
        .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
        .                       }
        .                   }
        .                   Ok(())
        .               }
        .           
        .               #[inline]
3,129,228 ( 0.04%)      fn visit_value(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
        .                   trace!("visit_value: {:?}, {:?}", *op, op.layout);
        .           
        .                   // Check primitive types -- the leafs of our recursive descend.
1,432,762 ( 0.02%)          if self.try_visit_primitive(op)? {
        .                       return Ok(());
        .                   }
        .                   // Sanity check: `builtin_deref` does not know any pointers that are not primitive.
  507,920 ( 0.01%)          assert!(op.layout.ty.builtin_deref(true).is_none());
        .           
        .                   // Special check preventing `UnsafeCell` in the inner part of constants
  253,960 ( 0.00%)          if let Some(def) = op.layout.ty.ty_adt_def() {
        .                       if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))
        .                           && Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type()
        .                       {
        .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
        .                       }
        .                   }
        .           
        .                   // Recursively walk the value at its type.
  634,900 ( 0.01%)          self.walk_value(op)?;
        .           
        .                   // *After* all of this, check the ABI.  We need to check the ABI to handle
        .                   // types like `NonNull` where the `Scalar` info is more restrictive than what
        .                   // the fields say (`rustc_layout_scalar_valid_range_start`).
        .                   // But in most cases, this will just propagate what the fields say,
        .                   // and then we want the error to point at the field -- so, first recurse,
        .                   // then check ABI.
        .                   //
        .                   // FIXME: We could avoid some redundant checks here. For newtypes wrapping
        .                   // scalars, we do the same check on every "level" (e.g., first we check
        .                   // MyNewtype and then the scalar in there).
  634,900 ( 0.01%)          match op.layout.abi {
        .                       Abi::Uninhabited => {
        .                           throw_validation_failure!(self.path,
        .                               { "a value of uninhabited type {:?}", op.layout.ty }
        .                           );
        .                       }
        .                       Abi::Scalar(scalar_layout) => {
        .                           self.visit_scalar(op, scalar_layout)?;
        .                       }
-- line 793 ----------------------------------------
-- line 798 ----------------------------------------
        .                           // that would make skipping them here an issue.
        .                       }
        .                       Abi::Aggregate { .. } => {
        .                           // Nothing to do.
        .                       }
        .                   }
        .           
        .                   Ok(())
2,781,536 ( 0.03%)      }
        .           
        .               fn visit_aggregate(
        .                   &mut self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,
        .               ) -> InterpResult<'tcx> {
1,121,132 ( 0.01%)          match op.layout.ty.kind() {
        .                       ty::Str => {
        .                           let mplace = op.assert_mem_place(); // strings are never immediate
   10,844 ( 0.00%)                  let len = mplace.len(self.ecx)?;
   10,844 ( 0.00%)                  try_validation!(
   32,532 ( 0.00%)                      self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),
        .                               self.path,
        .                               err_ub!(InvalidUninitBytes(..)) => { "uninitialized data in `str`" },
        .                               err_unsup!(ReadPointerAsBytes) => { "a pointer in `str`" },
        .                           );
        .                       }
        .                       ty::Array(tys, ..) | ty::Slice(tys)
        .                           // This optimization applies for types that can hold arbitrary bytes (such as
        .                           // integer and floating point types) or for structs or tuples with no fields.
        .                           // FIXME(wesleywiser) This logic could be extended further to arbitrary structs
        .                           // or tuples made up of integer/floating point types or inhabited ZSTs with no
        .                           // padding.
   37,950 ( 0.00%)                  if matches!(tys.kind(), ty::Int(..) | ty::Uint(..) | ty::Float(..))
        .                           =>
        .                       {
        .                           // Optimized handling for arrays of integer/float type.
        .           
        .                           // Arrays cannot be immediate, slices are never immediate.
        .                           let mplace = op.assert_mem_place();
        .                           // This is the length of the array/slice.
        .                           let len = mplace.len(self.ecx)?;
-- line 838 ----------------------------------------
-- line 891 ----------------------------------------
        .                                       _ => return Err(err),
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element
        .                       // of an array and not all of them, because there's only a single value of a specific
        .                       // ZST type, so either validation fails for all elements or none.
   68,310 ( 0.00%)              ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {
        .                           // Validate just the first element (if any).
        .                           self.walk_aggregate(op, fields.take(1))?
        .                       }
        .                       _ => {
        .                           self.walk_aggregate(op, fields)? // default handler
        .                       }
        .                   }
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
   83,988 ( 0.00%)      fn validate_operand_internal(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   path: Vec<PathElem>,
        .                   ref_tracking: Option<&mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
        .                   ctfe_mode: Option<CtfeValidationMode>,
        .               ) -> InterpResult<'tcx> {
        .                   trace!("validate_operand_internal: {:?}, {:?}", *op, op.layout.ty);
        .           
        .                   // Construct a visitor
  125,982 ( 0.00%)          let mut visitor = ValidityVisitor { path, ref_tracking, ctfe_mode, ecx: self };
        .           
        .                   // Run it.
   41,994 ( 0.00%)          match visitor.visit_value(&op) {
        .                       Ok(()) => Ok(()),
        .                       // Pass through validation failures.
        .                       Err(err) if matches!(err.kind(), err_ub!(ValidationFailure { .. })) => Err(err),
        .                       // Also pass through InvalidProgram, those just indicate that we could not
        .                       // validate and each caller will know best what to do with them.
        .                       Err(err) if matches!(err.kind(), InterpError::InvalidProgram(_)) => Err(err),
        .                       // Avoid other errors as those do not show *where* in the value the issue lies.
        .                       Err(err) => {
        .                           err.print_backtrace();
        .                           bug!("Unexpected error during validation: {}", err);
        .                       }
        .                   }
   97,986 ( 0.00%)      }
        .           
        .               /// This function checks the data at `op` to be const-valid.
        .               /// `op` is assumed to cover valid memory if it is an indirect operand.
        .               /// It will error if the bits at the destination do not match the ones described by the layout.
        .               ///
        .               /// `ref_tracking` is used to record references that we encounter so that they
        .               /// can be checked recursively by an outside driving loop.
        .               ///
-- line 946 ----------------------------------------
-- line 950 ----------------------------------------
        .               #[inline(always)]
        .               pub fn const_validate_operand(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   path: Vec<PathElem>,
        .                   ref_tracking: &mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>,
        .                   ctfe_mode: CtfeValidationMode,
        .               ) -> InterpResult<'tcx> {
  139,980 ( 0.00%)          self.validate_operand_internal(op, path, Some(ref_tracking), Some(ctfe_mode))
        .               }
        .           
        .               /// This function checks the data at `op` to be runtime-valid.
        .               /// `op` is assumed to cover valid memory if it is an indirect operand.
        .               /// It will error if the bits at the destination do not match the ones described by the layout.
        .               #[inline(always)]
        .               pub fn validate_operand(&self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
        .                   self.validate_operand_internal(op, vec![], None, None)
-- line 966 ----------------------------------------

5,107,661 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       808 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       404 ( 0.00%)              from_str_radix(src, radix)
     1,212 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   394,095 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,185,154 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 2,893,153 ( 0.03%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
41,785,206 ( 0.48%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       124 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 3,715,521 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   189,607 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   923,241 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
 2,101,756 ( 0.02%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
24,120,830 ( 0.28%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
11,096,024 ( 0.13%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
29,895,726 ( 0.34%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
11,174,098 ( 0.13%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 1,410,258 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 5,839,718 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       168 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    45,248 ( 0.00%)              if self <= 1 { return 0; }
         .           
    68,349 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   204,875 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    68,377 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    91,378 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   321,490 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 166 ----------------------------------------
        .               String(Cow<'static, str>),
        .               Break(BreakToken),
        .               Begin(BeginToken),
        .               End,
        .           }
        .           
        .           impl Token {
        .               pub fn is_hardbreak_tok(&self) -> bool {
  120,286 ( 0.00%)          matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           enum PrintFrame {
        .               Fits,
        .               Broken { offset: isize, breaks: Breaks },
        .           }
-- line 182 ----------------------------------------
-- line 213 ----------------------------------------
        .           
        .           #[derive(Clone)]
        .           struct BufEntry {
        .               token: Token,
        .               size: isize,
        .           }
        .           
        .           impl Printer {
    2,016 ( 0.00%)      pub fn new() -> Self {
        .                   let linewidth = 78;
   35,154 ( 0.00%)          Printer {
        .                       out: String::new(),
        .                       margin: linewidth as isize,
        .                       space: linewidth as isize,
        .                       buf: RingBuffer::new(),
        .                       left_total: 0,
        .                       right_total: 0,
        .                       scan_stack: VecDeque::new(),
        .                       print_stack: Vec::new(),
        .                       pending_indentation: 0,
        .                       last_printed: None,
        .                   }
    2,520 ( 0.00%)      }
        .           
        .               pub fn last_token(&self) -> Option<&Token> {
        .                   self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())
        .               }
        .           
        .               pub fn last_token_still_buffered(&self) -> Option<&Token> {
        .                   self.buf.last().map(|last| &last.token)
        .               }
        .           
        .               /// Be very careful with this!
        .               pub fn replace_last_token_still_buffered(&mut self, token: Token) {
        .                   self.buf.last_mut().unwrap().token = token;
        .               }
        .           
        .               fn scan_eof(&mut self) {
    1,525 ( 0.00%)          if !self.scan_stack.is_empty() {
    1,040 ( 0.00%)              self.check_stack(0);
    1,040 ( 0.00%)              self.advance_left();
        .                   }
        .               }
        .           
        .               fn scan_begin(&mut self, token: BeginToken) {
  134,485 ( 0.00%)          if self.scan_stack.is_empty() {
    1,040 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   }
  537,940 ( 0.01%)          let right = self.buf.push(BufEntry { token: Token::Begin(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
        .               }
        .           
        .               fn scan_end(&mut self) {
  134,485 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_end();
        .                   } else {
        .                       let right = self.buf.push(BufEntry { token: Token::End, size: -1 });
        .                       self.scan_stack.push_back(right);
        .                   }
        .               }
        .           
        .               fn scan_break(&mut self, token: BreakToken) {
   60,183 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   } else {
  120,366 ( 0.00%)              self.check_stack(0);
        .                   }
  240,732 ( 0.00%)          let right = self.buf.push(BufEntry { token: Token::Break(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
  180,549 ( 0.00%)          self.right_total += token.blank_space;
        .               }
        .           
1,731,888 ( 0.02%)      fn scan_string(&mut self, string: Cow<'static, str>) {
  192,432 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_string(&string);
        .                   } else {
        .                       let len = string.len() as isize;
  191,427 ( 0.00%)              self.buf.push(BufEntry { token: Token::String(string), size: len });
  574,281 ( 0.01%)              self.right_total += len;
        .                       self.check_stream();
        .                   }
1,531,416 ( 0.02%)      }
        .           
        .               fn check_stream(&mut self) {
  904,013 ( 0.01%)          while self.right_total - self.left_total > self.space {
   82,983 ( 0.00%)              if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {
        .                           self.scan_stack.pop_front().unwrap();
   14,623 ( 0.00%)                  self.buf.first_mut().unwrap().size = SIZE_INFINITY;
        .                       }
   55,322 ( 0.00%)              self.advance_left();
   27,661 ( 0.00%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
        .               }
        .           
  999,657 ( 0.01%)      fn advance_left(&mut self) {
1,096,482 ( 0.01%)          while self.buf.first().unwrap().size >= 0 {
1,561,740 ( 0.02%)              let left = self.buf.pop_first().unwrap();
        .           
        .                       match &left.token {
        .                           Token::String(string) => {
  574,281 ( 0.01%)                      self.left_total += string.len() as isize;
        .                               self.print_string(string);
        .                           }
        .                           Token::Break(token) => {
  180,549 ( 0.00%)                      self.left_total += token.blank_space;
        .                               self.print_break(*token, left.size);
        .                           }
    3,798 ( 0.00%)                  Token::Begin(token) => self.print_begin(*token, left.size),
        .                           Token::End => self.print_end(),
        .                       }
        .           
4,164,640 ( 0.05%)              self.last_printed = Some(left.token);
        .           
  520,580 ( 0.01%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
  225,448 ( 0.00%)      }
        .           
  546,327 ( 0.01%)      fn check_stack(&mut self, mut depth: usize) {
  704,336 ( 0.01%)          while let Some(&index) = self.scan_stack.back() {
        .                       let mut entry = &mut self.buf[index];
1,398,588 ( 0.02%)              match entry.token {
        .                           Token::Begin(_) => {
  328,022 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                               self.scan_stack.pop_back().unwrap();
  399,657 ( 0.00%)                      entry.size += self.right_total;
  133,219 ( 0.00%)                      depth -= 1;
        .                           }
        .                           Token::End => {
        .                               // paper says + not =, but that makes no sense.
        .                               self.scan_stack.pop_back().unwrap();
  134,485 ( 0.00%)                      entry.size = 1;
  268,970 ( 0.00%)                      depth += 1;
        .                           }
        .                           _ => {
        .                               self.scan_stack.pop_back().unwrap();
  140,478 ( 0.00%)                      entry.size += self.right_total;
  109,871 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                           }
        .                       }
        .                   }
  485,624 ( 0.01%)      }
        .           
        .               fn get_top(&self) -> PrintFrame {
  180,549 ( 0.00%)          *self
        .                       .print_stack
        .                       .last()
        .                       .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })
        .               }
        .           
        .               fn print_begin(&mut self, token: BeginToken, size: isize) {
  403,455 ( 0.00%)          if size > self.space {
    6,330 ( 0.00%)              let col = self.margin - self.space + token.offset;
        .                       self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });
        .                   } else {
        .                       self.print_stack.push(PrintFrame::Fits);
        .                   }
        .               }
        .           
        .               fn print_end(&mut self) {
        .                   self.print_stack.pop().unwrap();
        .               }
        .           
        .               fn print_break(&mut self, token: BreakToken, size: isize) {
        .                   let break_offset =
  239,054 ( 0.00%)              match self.get_top() {
        .                           PrintFrame::Fits => None,
        .                           PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),
        .                           PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {
        .                               if size > self.space { Some(offset) } else { None }
        .                           }
        .                       };
        .                   if let Some(offset) = break_offset {
        .                       self.out.push('\n');
   40,071 ( 0.00%)              self.pending_indentation = offset + token.offset;
   53,428 ( 0.00%)              self.space = self.margin - (offset + token.offset);
        .                   } else {
  140,478 ( 0.00%)              self.pending_indentation += token.blank_space;
  187,304 ( 0.00%)              self.space -= token.blank_space;
        .                   }
        .               }
        .           
        .               fn print_string(&mut self, string: &str) {
        .                   // Write the pending indent. A more concise way of doing this would be:
        .                   //
        .                   //   write!(self.out, "{: >n$}", "", n = self.pending_indentation as usize)?;
        .                   //
        .                   // But that is significantly slower. This code is sufficiently hot, and indents can get
        .                   // sufficiently large, that the difference is significant on some workloads.
  192,432 ( 0.00%)          self.out.reserve(self.pending_indentation as usize);
       91 ( 0.00%)          self.out.extend(iter::repeat(' ').take(self.pending_indentation as usize));
  192,432 ( 0.00%)          self.pending_indentation = 0;
        .           
        .                   self.out.push_str(string);
  961,155 ( 0.01%)          self.space -= string.len() as isize;
        .               }
        .           
        .               // Convenience functions to talk to the printer.
        .           
        .               /// "raw box"
  268,704 ( 0.00%)      pub fn rbox(&mut self, indent: usize, breaks: Breaks) {
        .                   self.scan_begin(BeginToken { offset: indent as isize, breaks })
  201,528 ( 0.00%)      }
        .           
        .               /// Inconsistent breaking box
  605,382 ( 0.01%)      pub fn ibox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Inconsistent)
  504,485 ( 0.01%)      }
        .           
        .               /// Consistent breaking box
        .               pub fn cbox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Consistent)
        .               }
        .           
  481,464 ( 0.01%)      pub fn break_offset(&mut self, n: usize, off: isize) {
        .                   self.scan_break(BreakToken { offset: off, blank_space: n as isize })
  361,098 ( 0.00%)      }
        .           
  537,940 ( 0.01%)      pub fn end(&mut self) {
        .                   self.scan_end()
  537,940 ( 0.01%)      }
        .           
    7,625 ( 0.00%)      pub fn eof(mut self) -> String {
        .                   self.scan_eof();
    6,100 ( 0.00%)          self.out
    7,625 ( 0.00%)      }
        .           
        .               pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {
        .                   let string = wrd.into();
1,294,531 ( 0.01%)          self.scan_string(string)
        .               }
        .           
        .               fn spaces(&mut self, n: usize) {
  240,752 ( 0.00%)          self.break_offset(n, 0)
        .               }
        .           
        .               crate fn zerobreak(&mut self) {
        .                   self.spaces(0)
        .               }
        .           
        .               pub fn space(&mut self) {
        .                   self.spaces(1)
        .               }
        .           
        .               pub fn hardbreak(&mut self) {
        .                   self.spaces(SIZE_INFINITY as usize)
        .               }
        .           
        .               pub fn is_beginning_of_line(&self) -> bool {
  120,286 ( 0.00%)          match self.last_token() {
        .                       Some(last_token) => last_token.is_hardbreak_tok(),
        .                       None => true,
        .                   }
        .               }
        .           
        .               pub fn hardbreak_tok_offset(off: isize) -> Token {
        .                   Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })
        .               }
-- line 481 ----------------------------------------

3,314,292 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .           /// - `promoted` -- map of promoted constants within `body`
        .           /// - `universal_regions` -- the universal regions from `body`s function signature
        .           /// - `location_table` -- MIR location map of `body`
        .           /// - `borrow_set` -- information about borrows occurring in `body`
        .           /// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts
        .           /// - `flow_inits` -- results of a maybe-init dataflow analysis
        .           /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis
        .           /// - `elements` -- MIR region map
   18,000 ( 0.00%)  pub(crate) fn type_check<'mir, 'tcx>(
        .               infcx: &InferCtxt<'_, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               body: &Body<'tcx>,
        .               promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               universal_regions: &Rc<UniversalRegions<'tcx>>,
        .               location_table: &LocationTable,
        .               borrow_set: &BorrowSet<'tcx>,
        .               all_facts: &mut Option<AllFacts>,
        .               flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,
        .               move_data: &MoveData<'tcx>,
        .               elements: &Rc<RegionValueElements>,
        .               upvars: &[Upvar<'tcx>],
        .           ) -> MirTypeckResults<'tcx> {
   13,500 ( 0.00%)      let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));
        .               let mut universe_causes = FxHashMap::default();
        .               universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());
   33,000 ( 0.00%)      let mut constraints = MirTypeckRegionConstraints {
        .                   placeholder_indices: PlaceholderIndices::default(),
        .                   placeholder_index_to_region: IndexVec::default(),
    1,500 ( 0.00%)          liveness_constraints: LivenessValues::new(elements.clone()),
        .                   outlives_constraints: OutlivesConstraintSet::default(),
        .                   member_constraints: MemberConstraintSet::default(),
        .                   closure_bounds_mapping: Default::default(),
        .                   type_tests: Vec::default(),
    6,000 ( 0.00%)          universe_causes,
        .               };
        .           
        .               let CreateResult {
    3,000 ( 0.00%)          universal_region_relations,
    6,000 ( 0.00%)          region_bound_pairs,
    6,000 ( 0.00%)          normalized_inputs_and_output,
    7,500 ( 0.00%)      } = free_region_relations::create(
        .                   infcx,
        .                   param_env,
        .                   Some(implicit_region_bound),
        .                   universal_regions,
        .                   &mut constraints,
        .               );
        .           
    3,000 ( 0.00%)      for u in ty::UniverseIndex::ROOT..infcx.universe() {
        .                   let info = UniverseInfo::other();
        .                   constraints.universe_causes.insert(u, info);
        .               }
        .           
   13,500 ( 0.00%)      let mut borrowck_context = BorrowCheckContext {
    1,500 ( 0.00%)          universal_regions,
        .                   location_table,
        .                   borrow_set,
        .                   all_facts,
        .                   constraints: &mut constraints,
        .                   upvars,
        .               };
        .           
        .               let opaque_type_values = type_check_internal(
-- line 180 ----------------------------------------
-- line 190 ----------------------------------------
        .                       liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);
        .           
        .                       translate_outlives_facts(&mut cx);
        .                       let opaque_type_values = mem::take(&mut infcx.inner.borrow_mut().opaque_types);
        .           
        .                       opaque_type_values
        .                           .into_iter()
        .                           .filter_map(|(opaque_type_key, mut decl)| {
        4 ( 0.00%)                      decl.concrete_ty = infcx.resolve_vars_if_possible(decl.concrete_ty);
        .                               trace!(
        .                                   "finalized opaque type {:?} to {:#?}",
        .                                   opaque_type_key,
        .                                   decl.concrete_ty.kind()
        .                               );
        4 ( 0.00%)                      if decl.concrete_ty.has_infer_types_or_consts() {
        .                                   infcx.tcx.sess.delay_span_bug(
        .                                       body.span,
        .                                       &format!("could not resolve {:#?}", decl.concrete_ty.kind()),
        .                                   );
        .                                   decl.concrete_ty = infcx.tcx.ty_error();
        .                               }
       16 ( 0.00%)                      let concrete_is_opaque = if let ty::Opaque(def_id, _) = decl.concrete_ty.kind()
        .                               {
        .                                   *def_id == opaque_type_key.def_id
        .                               } else {
        .                                   false
        .                               };
        .           
        2 ( 0.00%)                      if concrete_is_opaque {
        .                                   // We're using an opaque `impl Trait` type without
        .                                   // 'revealing' it. For example, code like this:
        .                                   //
        .                                   // type Foo = impl Debug;
        .                                   // fn foo1() -> Foo { ... }
        .                                   // fn foo2() -> Foo { foo1() }
        .                                   //
        .                                   // In `foo2`, we're not revealing the type of `Foo` - we're
-- line 226 ----------------------------------------
-- line 243 ----------------------------------------
        .                               } else {
        .                                   Some((opaque_type_key, decl))
        .                               }
        .                           })
        .                           .collect()
        .                   },
        .               );
        .           
   18,000 ( 0.00%)      MirTypeckResults { constraints, universal_region_relations, opaque_type_values }
   12,000 ( 0.00%)  }
        .           
        .           #[instrument(
        .               skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),
        .               level = "debug"
        .           )]
        .           fn type_check_internal<'a, 'tcx, R>(
        .               infcx: &'a InferCtxt<'a, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .                   body,
        .                   param_env,
        .                   region_bound_pairs,
        .                   implicit_region_bound,
        .                   borrowck_context,
        .               );
        .               let errors_reported = {
        .                   let mut verifier = TypeVerifier::new(&mut checker, body, promoted);
    1,500 ( 0.00%)          verifier.visit_body(&body);
    1,500 ( 0.00%)          verifier.errors_reported
        .               };
        .           
    1,500 ( 0.00%)      if !errors_reported {
        .                   // if verifier failed, don't do further checks to avoid ICEs
    1,500 ( 0.00%)          checker.typeck_mir(body);
        .               }
        .           
   19,500 ( 0.00%)      extra(checker)
        .           }
        .           
        .           fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {
        .               let cx = &mut typeck.borrowck_context;
    6,000 ( 0.00%)      if let Some(facts) = cx.all_facts {
        .                   let _prof_timer = typeck.infcx.tcx.prof.generic_activity("polonius_fact_generation");
        .                   let location_table = cx.location_table;
        .                   facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(
        .                       |constraint: &OutlivesConstraint<'_>| {
        .                           if let Some(from_location) = constraint.locations.from_location() {
        .                               Either::Left(iter::once((
        .                                   constraint.sup,
        .                                   constraint.sub,
-- line 300 ----------------------------------------
-- line 334 ----------------------------------------
        .               body: &'b Body<'tcx>,
        .               promoted: &'b IndexVec<Promoted, Body<'tcx>>,
        .               last_span: Span,
        .               errors_reported: bool,
        .           }
        .           
        .           impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {
        .               fn visit_span(&mut self, span: &Span) {
1,245,112 ( 0.01%)          if !span.is_dummy() {
  310,776 ( 0.00%)              self.last_span = *span;
        .                   }
        .               }
        .           
1,573,297 ( 0.02%)      fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {
        .                   self.sanitize_place(place, location, context);
1,144,216 ( 0.01%)      }
        .           
  836,376 ( 0.01%)      fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {
        .                   self.super_constant(constant, location);
  557,584 ( 0.01%)          let ty = self.sanitize_type(constant, constant.literal.ty());
        .           
  627,282 ( 0.01%)          self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {
        .                       let live_region_vid =
        .                           self.cx.borrowck_context.universal_regions.to_region_vid(live_region);
   16,144 ( 0.00%)              self.cx
        .                           .borrowck_context
        .                           .constraints
        .                           .liveness_constraints
   16,144 ( 0.00%)                  .add_element(live_region_vid, location);
        .                   });
        .           
  278,792 ( 0.00%)          if let Some(annotation_index) = constant.user_ty {
    7,650 ( 0.00%)              if let Err(terr) = self.cx.relate_type_and_user_type(
    1,700 ( 0.00%)                  constant.literal.ty(),
        .                           ty::Variance::Invariant,
    1,700 ( 0.00%)                  &UserTypeProjection { base: annotation_index, projs: vec![] },
    1,700 ( 0.00%)                  location.to_locations(),
        .                           ConstraintCategory::Boring,
        .                       ) {
        .                           let annotation = &self.cx.user_type_annotations[annotation_index];
        .                           span_mirbug!(
        .                               self,
        .                               constant,
        .                               "bad constant user type {:?} vs {:?}: {:?}",
        .                               annotation,
        .                               constant.literal.ty(),
        .                               terr,
        .                           );
        .                       }
        .                   } else {
        .                       let tcx = self.tcx();
  206,544 ( 0.00%)              let maybe_uneval = match constant.literal {
  206,544 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
    1,733 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
        .                               _ => None,
        .                           },
        .                           _ => None,
        .                       };
    3,466 ( 0.00%)              if let Some(uv) = maybe_uneval {
    3,466 ( 0.00%)                  if let Some(promoted) = uv.promoted {
        .                               let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,
        .                                                promoted: &Body<'tcx>,
        .                                                ty,
        .                                                san_ty| {
    2,007 ( 0.00%)                          if let Err(terr) = verifier.cx.eq_types(
        .                                       ty,
        .                                       san_ty,
    1,338 ( 0.00%)                              location.to_locations(),
        .                                       ConstraintCategory::Boring,
        .                                   ) {
        .                                       span_mirbug!(
        .                                           verifier,
        .                                           promoted,
        .                                           "bad promoted type ({:?}: {:?}): {:?}",
        .                                           ty,
        .                                           san_ty,
        .                                           terr
        .                                       );
        .                                   };
        .                               };
        .           
    1,338 ( 0.00%)                      if !self.errors_reported {
      669 ( 0.00%)                          let promoted_body = &self.promoted[promoted];
    2,676 ( 0.00%)                          self.sanitize_promoted(promoted_body, location);
        .           
        .                                   let promoted_ty = promoted_body.return_ty();
        .                                   check_err(self, promoted_body, ty, promoted_ty);
        .                               }
        .                           } else {
    7,448 ( 0.00%)                      if let Err(terr) = self.cx.fully_perform_op(
    2,128 ( 0.00%)                          location.to_locations(),
        .                                   ConstraintCategory::Boring,
    7,448 ( 0.00%)                          self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
    2,128 ( 0.00%)                              constant.literal.ty(),
        .                                       uv.def.did,
    4,256 ( 0.00%)                              UserSubsts { substs: uv.substs, user_self_ty: None },
        .                                   )),
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       constant,
        .                                       "bad constant type {:?} ({:?})",
        .                                       constant,
        .                                       terr
        .                                   );
        .                               }
        .                           }
  268,460 ( 0.00%)              } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {
        .                           let unnormalized_ty = tcx.type_of(static_def_id);
        .                           let locations = location.to_locations();
        .                           let normalized_ty = self.cx.normalize(unnormalized_ty, locations);
        .                           let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;
        .           
        .                           if let Err(terr) = self.cx.eq_types(
        .                               literal_ty,
        .                               normalized_ty,
        .                               locations,
        .                               ConstraintCategory::Boring,
        .                           ) {
        .                               span_mirbug!(self, constant, "bad static type {:?} ({:?})", constant, terr);
        .                           }
        .                       }
        .           
  287,632 ( 0.00%)              if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {
    8,160 ( 0.00%)                  let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);
    8,160 ( 0.00%)                  self.cx.normalize_and_prove_instantiated_predicates(
        .                               def_id,
   24,480 ( 0.00%)                      instantiated_predicates,
    8,160 ( 0.00%)                      location.to_locations(),
        .                           );
        .                       }
        .                   }
  557,584 ( 0.01%)      }
        .           
  685,740 ( 0.01%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
        .                   self.super_rvalue(rvalue, location);
  187,020 ( 0.00%)          let rval_ty = rvalue.ty(self.body, self.tcx());
  748,080 ( 0.01%)          self.sanitize_type(rvalue, rval_ty);
        .               }
        .           
1,093,820 ( 0.01%)      fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {
        .                   self.super_local_decl(local, local_decl);
  546,910 ( 0.01%)          self.sanitize_type(local_decl, local_decl.ty);
        .           
  328,146 ( 0.00%)          if let Some(user_ty) = &local_decl.user_ty {
        4 ( 0.00%)              for (user_ty, span) in user_ty.projections_and_spans() {
       20 ( 0.00%)                  let ty = if !local_decl.is_nonref_binding() {
        .                               // If we have a binding of the form `let ref x: T = ..`
        .                               // then remove the outermost reference so we can check the
        .                               // type annotation for the remaining type.
        .                               if let ty::Ref(_, rty, _) = local_decl.ty.kind() {
        .                                   rty
        .                               } else {
        .                                   bug!("{:?} with ref binding has wrong type {}", local, local_decl.ty);
        .                               }
        .                           } else {
        .                               local_decl.ty
        .                           };
        .           
       32 ( 0.00%)                  if let Err(terr) = self.cx.relate_type_and_user_type(
        .                               ty,
        .                               ty::Variance::Invariant,
        .                               user_ty,
       12 ( 0.00%)                      Locations::All(*span),
        .                               ConstraintCategory::TypeAnnotation,
        .                           ) {
        .                               span_mirbug!(
        .                                   self,
        .                                   local,
        .                                   "bad user type on variable {:?}: {:?} != {:?} ({:?})",
        .                                   local,
        .                                   local_decl.ty,
        .                                   local_decl.user_ty,
        .                                   terr,
        .                               );
        .                           }
        .                       }
        .                   }
  875,056 ( 0.01%)      }
        .           
   15,183 ( 0.00%)      fn visit_body(&mut self, body: &Body<'tcx>) {
    6,507 ( 0.00%)          self.sanitize_type(&"return type", body.return_ty());
        .                   for local_decl in &body.local_decls {
  546,910 ( 0.01%)              self.sanitize_type(local_decl, local_decl.ty);
        .                   }
    4,338 ( 0.00%)          if self.errors_reported {
        .                       return;
        .                   }
        .                   self.super_body(body);
   17,352 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {
        .               fn new(
        .                   cx: &'a mut TypeChecker<'b, 'tcx>,
        .                   body: &'b Body<'tcx>,
        .                   promoted: &'b IndexVec<Promoted, Body<'tcx>>,
        .               ) -> Self {
   13,500 ( 0.00%)          TypeVerifier { body, promoted, cx, last_span: body.span, errors_reported: false }
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  486,513 ( 0.01%)          self.cx.infcx.tcx
        .               }
        .           
3,572,430 ( 0.04%)      fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {
  714,486 ( 0.01%)          if ty.has_escaping_bound_vars() || ty.references_error() {
        .                       span_mirbug_and_err!(self, parent, "bad type {:?}", ty)
        .                   } else {
        .                       ty
        .                   }
2,500,701 ( 0.03%)      }
        .           
        .               /// Checks that the types internal to the `place` match up with
        .               /// what would be expected.
        .               fn sanitize_place(
        .                   &mut self,
        .                   place: &Place<'tcx>,
        .                   location: Location,
        .                   context: PlaceContext,
        .               ) -> PlaceTy<'tcx> {
        .                   debug!("sanitize_place: {:?}", place);
        .           
  572,108 ( 0.01%)          let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);
        .           
  179,771 ( 0.00%)          for elem in place.projection.iter() {
   18,372 ( 0.00%)              if place_ty.variant_index.is_none() {
   17,013 ( 0.00%)                  if place_ty.ty.references_error() {
        .                               assert!(self.errors_reported);
        .                               return PlaceTy::from_ty(self.tcx().ty_error());
        .                           }
        .                       }
        .                       place_ty = self.sanitize_projection(place_ty, elem, place, location);
        .                   }
        .           
  421,598 ( 0.00%)          if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {
        .                       let tcx = self.tcx();
        .                       let trait_ref = ty::TraitRef {
   22,150 ( 0.00%)                  def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),
   11,075 ( 0.00%)                  substs: tcx.mk_substs_trait(place_ty.ty, &[]),
        .                       };
        .           
        .                       // To have a `Copy` operand, the type `T` of the
        .                       // value must be `Copy`. Note that we prove that `T: Copy`,
        .                       // rather than using the `is_copy_modulo_regions`
        .                       // test. This is important because
        .                       // `is_copy_modulo_regions` ignores the resulting region
        .                       // obligations and assumes they pass. This can result in
        .                       // bounds from `Copy` impls being unsoundly ignored (e.g.,
        .                       // #29149). Note that we decide to use `Copy` before knowing
        .                       // whether the bounds fully apply: in effect, the rule is
        .                       // that if a value of some type could implement `Copy`, then
        .                       // it must.
    6,645 ( 0.00%)              self.cx.prove_trait_ref(
        .                           trait_ref,
        .                           location.to_locations(),
        .                           ConstraintCategory::CopyBound,
        .                       );
        .                   }
        .           
        .                   place_ty
        .               }
-- line 595 ----------------------------------------
-- line 598 ----------------------------------------
        .                   // Determine the constraints from the promoted MIR by running the type
        .                   // checker on the promoted MIR, then transfer the constraints back to
        .                   // the main MIR, changing the locations to the provided location.
        .           
        .                   let parent_body = mem::replace(&mut self.body, promoted_body);
        .           
        .                   // Use new sets of constraints and closure bounds so that we can
        .                   // modify their locations.
      669 ( 0.00%)          let all_facts = &mut None;
        .                   let mut constraints = Default::default();
        .                   let mut closure_bounds = Default::default();
        .                   let mut liveness_constraints =
    1,338 ( 0.00%)              LivenessValues::new(Rc::new(RegionValueElements::new(&promoted_body)));
        .                   // Don't try to add borrow_region facts for the promoted MIR
        .           
        .                   let mut swap_constraints = |this: &mut Self| {
    2,676 ( 0.00%)              mem::swap(this.cx.borrowck_context.all_facts, all_facts);
        .                       mem::swap(
    2,676 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.outlives_constraints,
        .                           &mut constraints,
        .                       );
        .                       mem::swap(
    2,676 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.closure_bounds_mapping,
        .                           &mut closure_bounds,
        .                       );
        .                       mem::swap(
    2,676 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.liveness_constraints,
        .                           &mut liveness_constraints,
        .                       );
        .                   };
        .           
      669 ( 0.00%)          swap_constraints(self);
        .           
    2,007 ( 0.00%)          self.visit_body(&promoted_body);
        .           
    1,338 ( 0.00%)          if !self.errors_reported {
        .                       // if verifier failed, don't do further checks to avoid ICEs
    2,007 ( 0.00%)              self.cx.typeck_mir(promoted_body);
        .                   }
        .           
      669 ( 0.00%)          self.body = parent_body;
        .                   // Merge the outlives constraints back in, at the given location.
      669 ( 0.00%)          swap_constraints(self);
        .           
        .                   let locations = location.to_locations();
        .                   for constraint in constraints.outlives().iter() {
        .                       let mut constraint = constraint.clone();
        .                       constraint.locations = locations;
   59,584 ( 0.00%)              if let ConstraintCategory::Return(_)
        .                       | ConstraintCategory::UseAsConst
        .                       | ConstraintCategory::UseAsStatic = constraint.category
        .                       {
        .                           // "Returning" from a promoted is an assignment to a
        .                           // temporary from the user's point of view.
        .                           constraint.category = ConstraintCategory::Boring;
        .                       }
        .                       self.cx.borrowck_context.constraints.outlives_constraints.push(constraint)
        .                   }
        .                   for region in liveness_constraints.rows() {
        .                       // If the region is live at at least one location in the promoted MIR,
        .                       // then add a liveness constraint to the main MIR for this region
        .                       // at the location provided as an argument to this method
   36,255 ( 0.00%)              if liveness_constraints.get_elements(region).next().is_some() {
   10,062 ( 0.00%)                  self.cx
        .                               .borrowck_context
        .                               .constraints
        .                               .liveness_constraints
        .                               .add_element(region, location);
        .                       }
        .                   }
        .           
      669 ( 0.00%)          if !closure_bounds.is_empty() {
        .                       let combined_bounds_mapping =
        .                           closure_bounds.into_iter().flat_map(|(_, value)| value).collect();
        .                       let existing = self
        .                           .cx
        .                           .borrowck_context
        .                           .constraints
        .                           .closure_bounds_mapping
        .                           .insert(location, combined_bounds_mapping);
        .                       assert!(existing.is_none(), "Multiple promoteds/closures at the same location.");
        .                   }
    2,676 ( 0.00%)      }
        .           
        .               fn sanitize_projection(
        .                   &mut self,
        .                   base: PlaceTy<'tcx>,
        .                   pi: PlaceElem<'tcx>,
        .                   place: &Place<'tcx>,
        .                   location: Location,
        .               ) -> PlaceTy<'tcx> {
        .                   debug!("sanitize_projection: {:?} {:?} {:?}", base, pi, place);
        .                   let tcx = self.tcx();
   18,372 ( 0.00%)          let base_ty = base.ty;
   91,860 ( 0.00%)          match pi {
        .                       ProjectionElem::Deref => {
   38,073 ( 0.00%)                  let deref_ty = base_ty.builtin_deref(true);
        .                           PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {
        .                               span_mirbug_and_err!(self, place, "deref of non-pointer {:?}", base_ty)
        .                           }))
        .                       }
       50 ( 0.00%)              ProjectionElem::Index(i) => {
      200 ( 0.00%)                  let index_ty = Place::from(i).ty(self.body, tcx).ty;
       50 ( 0.00%)                  if index_ty != tcx.types.usize {
        .                               PlaceTy::from_ty(span_mirbug_and_err!(self, i, "index by non-usize {:?}", i))
        .                           } else {
       50 ( 0.00%)                      PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
        .                                   span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
        .                               }))
        .                           }
        .                       }
        .                       ProjectionElem::ConstantIndex { .. } => {
        .                           // consider verifying in-bounds
        .                           PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
        .                               span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
-- line 712 ----------------------------------------
-- line 720 ----------------------------------------
        .                               }
        .                               ty::Slice(..) => {
        .                                   assert!(from_end, "slice subslices should use from_end");
        .                                   base_ty
        .                               }
        .                               _ => span_mirbug_and_err!(self, place, "slice of non-array {:?}", base_ty),
        .                           })
        .                       }
    4,077 ( 0.00%)              ProjectionElem::Downcast(maybe_name, index) => match base_ty.kind() {
    4,077 ( 0.00%)                  ty::Adt(adt_def, _substs) if adt_def.is_enum() => {
    4,077 ( 0.00%)                      if index.as_usize() >= adt_def.variants.len() {
        .                                   PlaceTy::from_ty(span_mirbug_and_err!(
        .                                       self,
        .                                       place,
        .                                       "cast to variant #{:?} but enum only has {:?}",
        .                                       index,
        .                                       adt_def.variants.len()
        .                                   ))
        .                               } else {
-- line 738 ----------------------------------------
-- line 752 ----------------------------------------
        .                                   )
        .                               } else {
        .                                   span_mirbug_and_err!(self, place, "can't downcast {:?}", base_ty)
        .                               };
        .                               PlaceTy::from_ty(ty)
        .                           }
        .                       },
        .                       ProjectionElem::Field(field, fty) => {
   21,360 ( 0.00%)                  let fty = self.sanitize_type(place, fty);
   59,808 ( 0.00%)                  let fty = self.cx.normalize(fty, location);
        .                           match self.field_ty(place, base, field, location) {
        .                               Ok(ty) => {
   34,176 ( 0.00%)                          let ty = self.cx.normalize(ty, location);
    8,544 ( 0.00%)                          if let Err(terr) = self.cx.eq_types(
        .                                       ty,
        .                                       fty,
        .                                       location.to_locations(),
        .                                       ConstraintCategory::Boring,
        .                                   ) {
        .                                       span_mirbug!(
        .                                           self,
        .                                           place,
-- line 773 ----------------------------------------
-- line 800 ----------------------------------------
        .                   &mut self,
        .                   parent: &dyn fmt::Debug,
        .                   base_ty: PlaceTy<'tcx>,
        .                   field: Field,
        .                   location: Location,
        .               ) -> Result<Ty<'tcx>, FieldAccessError> {
        .                   let tcx = self.tcx();
        .           
    4,272 ( 0.00%)          let (variant, substs) = match base_ty {
    5,436 ( 0.00%)              PlaceTy { ty, variant_index: Some(variant_index) } => match *ty.kind() {
    2,718 ( 0.00%)                  ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),
        .                           ty::Generator(def_id, substs, _) => {
        .                               let mut variants = substs.as_generator().state_tys(def_id, tcx);
        .                               let mut variant = match variants.nth(variant_index.into()) {
        .                                   Some(v) => v,
        .                                   None => bug!(
        .                                       "variant_index of generator out of range: {:?}/{:?}",
        .                                       variant_index,
        .                                       substs.as_generator().state_tys(def_id, tcx).count()
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
        .                               };
        .                               return match variant.nth(field.index()) {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange { field_count: variant.count() }),
        .                               };
        .                           }
        .                           _ => bug!("can't have downcast of non-adt non-generator type"),
        .                       },
   11,652 ( 0.00%)              PlaceTy { ty, variant_index: None } => match *ty.kind() {
    6,844 ( 0.00%)                  ty::Adt(adt_def, substs) if !adt_def.is_enum() => {
        .                               (&adt_def.variants[VariantIdx::new(0)], substs)
        .                           }
       71 ( 0.00%)                  ty::Closure(_, substs) => {
      639 ( 0.00%)                      return match substs
        .                                   .as_closure()
        .                                   .tupled_upvars_ty()
        .                                   .tuple_element_ty(field.index())
        .                               {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange {
        .                                       field_count: substs.as_closure().upvar_tys().count(),
        .                                   }),
-- line 841 ----------------------------------------
-- line 846 ----------------------------------------
        .                               // accessible without a variant index.
        .                               return match substs.as_generator().prefix_tys().nth(field.index()) {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange {
        .                                       field_count: substs.as_generator().prefix_tys().count(),
        .                                   }),
        .                               };
        .                           }
    1,131 ( 0.00%)                  ty::Tuple(tys) => {
    1,131 ( 0.00%)                      return match tys.get(field.index()) {
    4,524 ( 0.00%)                          Some(&ty) => Ok(ty.expect_ty()),
        .                                   None => Err(FieldAccessError::OutOfRange { field_count: tys.len() }),
        .                               };
        .                           }
        .                           _ => {
        .                               return Ok(span_mirbug_and_err!(
        .                                   self,
        .                                   parent,
        .                                   "can't project out of {:?}",
        .                                   base_ty
        .                               ));
        .                           }
        .                       },
        .                   };
        .           
    3,070 ( 0.00%)          if let Some(field) = variant.fields.get(field.index()) {
   30,700 ( 0.00%)              Ok(self.cx.normalize(field.ty(tcx, substs), location))
        .                   } else {
        .                       Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
        .                   }
        .               }
        .           }
        .           
        .           /// The MIR type checker. Visits the MIR and enforces all the
        .           /// constraints needed for it to be valid and well-typed. Along the
-- line 880 ----------------------------------------
-- line 943 ----------------------------------------
        .                   FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,
        .           
        .               crate universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,
        .           
        .               crate type_tests: Vec<TypeTest<'tcx>>,
        .           }
        .           
        .           impl<'tcx> MirTypeckRegionConstraints<'tcx> {
    4,900 ( 0.00%)      fn placeholder_region(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   placeholder: ty::PlaceholderRegion,
        .               ) -> ty::Region<'tcx> {
        .                   let placeholder_index = self.placeholder_indices.insert(placeholder);
      980 ( 0.00%)          match self.placeholder_index_to_region.get(placeholder_index) {
      336 ( 0.00%)              Some(&v) => v,
        .                       None => {
    1,288 ( 0.00%)                  let origin = NllRegionVariableOrigin::Placeholder(placeholder);
    2,898 ( 0.00%)                  let region = infcx.next_nll_region_var_in_universe(origin, placeholder.universe);
        .                           self.placeholder_index_to_region.push(region);
        .                           region
        .                       }
        .                   }
    3,920 ( 0.00%)      }
        .           }
        .           
        .           /// The `Locations` type summarizes *where* region constraints are
        .           /// required to hold. Normally, this is at a particular point which
        .           /// created the obligation, but for constraints that the user gave, we
        .           /// want the constraint to hold at all points.
  188,103 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
        .           pub enum Locations {
        .               /// Indicates that a type constraint should always be true. This
        .               /// is particularly important in the new borrowck analysis for
        .               /// things like the type of the return slot. Consider this
        .               /// example:
        .               ///
        .               /// ```
        .               /// fn foo<'a>(x: &'a u32) -> &'a u32 {
-- line 981 ----------------------------------------
-- line 1020 ----------------------------------------
        .                   match self {
        .                       Locations::All(_) => None,
        .                       Locations::Single(from_location) => Some(*from_location),
        .                   }
        .               }
        .           
        .               /// Gets a span representing the location.
        .               pub fn span(&self, body: &Body<'_>) -> Span {
      110 ( 0.00%)          match self {
       22 ( 0.00%)              Locations::All(span) => *span,
      165 ( 0.00%)              Locations::Single(l) => body.source_info(*l).span,
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeChecker<'a, 'tcx> {
        .               fn new(
        .                   infcx: &'a InferCtxt<'a, 'tcx>,
        .                   body: &'a Body<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   region_bound_pairs: &'a RegionBoundPairs<'tcx>,
        .                   implicit_region_bound: ty::Region<'tcx>,
        .                   borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,
        .               ) -> Self {
   19,500 ( 0.00%)          let mut checker = Self {
        .                       infcx,
        .                       last_span: DUMMY_SP,
        .                       body,
    1,500 ( 0.00%)              user_type_annotations: &body.user_type_annotations,
        .                       param_env,
        .                       region_bound_pairs,
        .                       implicit_region_bound,
        .                       borrowck_context,
        .                       reported_errors: Default::default(),
        .                   };
        .                   checker.check_user_type_annotations();
        .                   checker
        .               }
        .           
        .               fn unsized_feature_enabled(&self) -> bool {
  172,780 ( 0.00%)          let features = self.tcx().features();
  345,560 ( 0.00%)          features.unsized_locals || features.unsized_fn_params
        .               }
        .           
        .               /// Equate the inferred type and the annotated type for user type annotations
        .               fn check_user_type_annotations(&mut self) {
        .                   debug!(
        .                       "check_user_type_annotations: user_type_annotations={:?}",
        .                       self.user_type_annotations
        .                   );
    1,232 ( 0.00%)          for user_annotation in self.user_type_annotations {
    2,464 ( 0.00%)              let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } = *user_annotation;
    7,392 ( 0.00%)              let inferred_ty = self.normalize(inferred_ty, Locations::All(span));
    2,464 ( 0.00%)              let annotation = self.instantiate_canonical_with_fresh_inference_vars(span, user_ty);
    2,464 ( 0.00%)              match annotation {
      764 ( 0.00%)                  UserType::Ty(mut ty) => {
    2,292 ( 0.00%)                      ty = self.normalize(ty, Locations::All(span));
        .           
      764 ( 0.00%)                      if let Err(terr) = self.eq_types(
        .                                   ty,
      382 ( 0.00%)                          inferred_ty,
        .                                   Locations::All(span),
        .                                   ConstraintCategory::BoringNoLocation,
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       user_annotation,
        .                                       "bad user type ({:?} = {:?}): {:?}",
        .                                       ty,
        .                                       inferred_ty,
        .                                       terr
        .                                   );
        .                               }
        .           
    2,674 ( 0.00%)                      self.prove_predicate(
    1,146 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))
        .                                       .to_predicate(self.tcx()),
      764 ( 0.00%)                          Locations::All(span),
        .                                   ConstraintCategory::TypeAnnotation,
        .                               );
        .                           }
    6,800 ( 0.00%)                  UserType::TypeOf(def_id, user_substs) => {
    7,650 ( 0.00%)                      if let Err(terr) = self.fully_perform_op(
    1,700 ( 0.00%)                          Locations::All(span),
        .                                   ConstraintCategory::BoringNoLocation,
    4,250 ( 0.00%)                          self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
      850 ( 0.00%)                              inferred_ty,
        .                                       def_id,
    1,700 ( 0.00%)                              user_substs,
        .                                   )),
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       user_annotation,
        .                                       "bad user type AscribeUserType({:?}, {:?} {:?}, type_of={:?}): {:?}",
        .                                       inferred_ty,
        .                                       def_id,
-- line 1116 ----------------------------------------
-- line 1128 ----------------------------------------
        .               fn push_region_constraints(
        .                   &mut self,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .                   data: &QueryRegionConstraints<'tcx>,
        .               ) {
        .                   debug!("constraints generated: {:#?}", data);
        .           
   12,131 ( 0.00%)          constraint_conversion::ConstraintConversion::new(
        9 ( 0.00%)              self.infcx,
   24,219 ( 0.00%)              self.borrowck_context.universal_regions,
   12,114 ( 0.00%)              self.region_bound_pairs,
        .                       Some(self.implicit_region_bound),
    1,837 ( 0.00%)              self.param_env,
        .                       locations,
        .                       category,
   12,114 ( 0.00%)              &mut self.borrowck_context.constraints,
        .                   )
        .                   .convert_all(data);
        .               }
        .           
        .               /// Try to relate `sub <: sup`
        .               fn sub_types(
        .                   &mut self,
        .                   sub: Ty<'tcx>,
        .                   sup: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
        .                   // Use this order of parameters because the sup type is usually the
        .                   // "expected" type in diagnostics.
1,318,962 ( 0.02%)          self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)
        .               }
        .           
        .               #[instrument(skip(self, category), level = "debug")]
        .               fn eq_types(
        .                   &mut self,
        .                   expected: Ty<'tcx>,
        .                   found: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
   94,250 ( 0.00%)          self.relate_types(expected, ty::Variance::Invariant, found, locations, category)
        .               }
        .           
   14,518 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn relate_type_and_user_type(
        .                   &mut self,
        .                   a: Ty<'tcx>,
        .                   v: ty::Variance,
        .                   user_ty: &UserTypeProjection,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
    3,432 ( 0.00%)          let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;
        .                   let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);
        .           
    2,574 ( 0.00%)          let tcx = self.infcx.tcx;
        .           
        .                   for proj in &user_ty.projs {
        .                       let projected_ty = curr_projected_ty.projection_ty_core(
        .                           tcx,
        .                           self.param_env,
        .                           proj,
        .                           |this, field, &()| {
        .                               let ty = this.field_ty(tcx, field);
-- line 1193 ----------------------------------------
-- line 1197 ----------------------------------------
        .                       curr_projected_ty = projected_ty;
        .                   }
        .                   debug!(
        .                       "user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}",
        .                       user_ty.base, annotated_type, user_ty.projs, curr_projected_ty
        .                   );
        .           
        .                   let ty = curr_projected_ty.ty;
   13,740 ( 0.00%)          self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Equates a type `anon_ty` that may contain opaque types whose
        .               /// values are to be inferred by the MIR.
        .               ///
        .               /// The type `revealed_ty` contains the same type as `anon_ty`, but with the
-- line 1213 ----------------------------------------
-- line 1231 ----------------------------------------
        .               ///
        .               /// In terms of our function parameters:
        .               ///
        .               /// * `anon_ty` would be `Box<Foo<T>>` where `Foo<T>` is an opaque type
        .               ///   scoped to this function (note that it is parameterized by the
        .               ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,
        .               ///   but the entire return type (which may contain opaque types within it).
        .               /// * `revealed_ty` would be `Box<(T, u32)>`
   29,697 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn eq_opaque_type_and_type(
        .                   &mut self,
        .                   revealed_ty: Ty<'tcx>,
        .                   anon_ty: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
        .                   // Fast path for the common case.
    1,563 ( 0.00%)          if !anon_ty.has_opaque_types() {
    3,118 ( 0.00%)              if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {
        .                           span_mirbug!(
        .                               self,
        .                               locations,
        .                               "eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`",
        .                               revealed_ty,
        .                               anon_ty,
        .                               terr
        .                           );
        .                       }
        .                       return Ok(());
        .                   }
        .           
        8 ( 0.00%)          let param_env = self.param_env;
        4 ( 0.00%)          let body = self.body;
        .                   let mir_def_id = body.source.def_id().expect_local();
        .           
        .                   debug!(?mir_def_id);
        .                   self.fully_perform_op(
       20 ( 0.00%)              locations,
        .                       category,
        .                       CustomTypeOp::new(
        .                           |infcx| {
        .                               let mut obligations = ObligationAccumulator::default();
        .           
        .                               let dummy_body_id = hir::CRATE_HIR_ID;
        .           
        .                               // Replace the opaque types defined by this function with
        .                               // inference variables, creating a map. In our example above,
        .                               // this would transform the type `Box<Foo<T>>` (where `Foo` is an opaque type)
        .                               // to `Box<?T>`, returning an `opaque_type_map` mapping `{Foo<T> -> ?T}`.
        .                               // (Note that the key of the map is both the def-id of `Foo` along with
        .                               // any generic parameters.)
        .                               let output_ty = obligations.add(infcx.instantiate_opaque_types(
        .                                   dummy_body_id,
        4 ( 0.00%)                          param_env,
        4 ( 0.00%)                          anon_ty,
        .                                   locations.span(body),
        .                               ));
        .                               debug!(?output_ty, ?revealed_ty);
        .           
        .                               // Make sure that the inferred types are well-formed. I'm
        .                               // not entirely sure this is needed (the HIR type check
        .                               // didn't do this) but it seems sensible to prevent opaque
        .                               // types hiding ill-formed types.
        .                               obligations.obligations.push(traits::Obligation::new(
        .                                   ObligationCause::dummy(),
        4 ( 0.00%)                          param_env,
       16 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(revealed_ty.into()))
        4 ( 0.00%)                              .to_predicate(infcx.tcx),
        .                               ));
        .                               obligations.add(
        .                                   infcx
        4 ( 0.00%)                              .at(&ObligationCause::dummy(), param_env)
        4 ( 0.00%)                              .eq(output_ty, revealed_ty)?,
        .                               );
        .           
        .                               debug!("equated");
        .           
       16 ( 0.00%)                      Ok(InferOk { value: (), obligations: obligations.into_vec() })
        4 ( 0.00%)                  },
        .                           || "input_output".to_string(),
        .                       ),
        .                   )?;
        .           
        .                   // Finally, if we instantiated the anon types successfully, we
        .                   // have to solve any bounds (e.g., `-> impl Iterator` needs to
        .                   // prove that `T: Iterator` where `T` is the type we
        .                   // instantiated it with).
        4 ( 0.00%)          let opaque_type_map = self.infcx.inner.borrow().opaque_types.clone();
       52 ( 0.00%)          for (opaque_type_key, opaque_decl) in opaque_type_map {
        .                       self.fully_perform_op(
       16 ( 0.00%)                  locations,
        .                           ConstraintCategory::OpaqueType,
        .                           CustomTypeOp::new(
        .                               |infcx| {
       12 ( 0.00%)                          infcx.constrain_opaque_type(opaque_type_key, &opaque_decl);
        4 ( 0.00%)                          Ok(InferOk { value: (), obligations: vec![] })
        .                               },
        .                               || "opaque_type_map".to_string(),
        .                           ),
        .                       )?;
        .                   }
        .                   Ok(())
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
1,127,279 ( 0.01%)          self.infcx.tcx
        .               }
        .           
        .               #[instrument(skip(self, body, location), level = "debug")]
        .               fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {
        .                   let tcx = self.tcx();
  412,796 ( 0.00%)          match stmt.kind {
   62,340 ( 0.00%)              StatementKind::Assign(box (ref place, ref rv)) => {
        .                           // Assignments to temporaries are not "interesting";
        .                           // they are not caused by the user, but rather artifacts
        .                           // of lowering. Assignments to other sorts of places *are* interesting
        .                           // though.
  249,172 ( 0.00%)                  let category = match place.as_local() {
        .                               Some(RETURN_PLACE) => {
    5,116 ( 0.00%)                          let defining_ty = &self.borrowck_context.universal_regions.defining_ty;
    2,558 ( 0.00%)                          if defining_ty.is_const() {
    3,976 ( 0.00%)                              if tcx.is_static(defining_ty.def_id()) {
        .                                           ConstraintCategory::UseAsStatic
        .                                       } else {
        .                                           ConstraintCategory::UseAsConst
        .                                       }
        .                                   } else {
        .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
        .                                   }
        .                               }
        .                               Some(l)
   71,880 ( 0.00%)                          if matches!(
  122,424 ( 0.00%)                              body.local_decls[l].local_info,
        .                                       Some(box LocalInfo::AggregateTemp)
        .                                   ) =>
        .                               {
        .                                   ConstraintCategory::Usage
        .                               }
        .                               Some(l) if !body.local_decls[l].is_user_variable() => {
        .                                   ConstraintCategory::Boring
        .                               }
-- line 1371 ----------------------------------------
-- line 1373 ----------------------------------------
        .                           };
        .                           debug!(
        .                               "assignment category: {:?} {:?}",
        .                               category,
        .                               place.as_local().map(|l| &body.local_decls[l])
        .                           );
        .           
        .                           let place_ty = place.ty(body, tcx).ty;
  748,080 ( 0.01%)                  let place_ty = self.normalize(place_ty, location);
   62,340 ( 0.00%)                  let rv_ty = rv.ty(body, tcx);
  374,040 ( 0.00%)                  let rv_ty = self.normalize(rv_ty, location);
  124,680 ( 0.00%)                  if let Err(terr) =
        .                               self.sub_types(rv_ty, place_ty, location.to_locations(), category)
        .                           {
        .                               span_mirbug!(
        .                                   self,
        .                                   stmt,
        .                                   "bad assignment ({:?} = {:?}): {:?}",
        .                                   place_ty,
        .                                   rv_ty,
        .                                   terr
        .                               );
        .                           }
        .           
    1,221 ( 0.00%)                  if let Some(annotation_index) = self.rvalue_user_ty(rv) {
        .                               if let Err(terr) = self.relate_type_and_user_type(
        .                                   rv_ty,
        .                                   ty::Variance::Invariant,
        .                                   &UserTypeProjection { base: annotation_index, projs: vec![] },
        .                                   location.to_locations(),
        .                                   ConstraintCategory::Boring,
        .                               ) {
        .                                   let annotation = &self.user_type_annotations[annotation_index];
-- line 1405 ----------------------------------------
-- line 1409 ----------------------------------------
        .                                       "bad user type on rvalue ({:?} = {:?}): {:?}",
        .                                       annotation,
        .                                       rv_ty,
        .                                       terr
        .                                   );
        .                               }
        .                           }
        .           
  436,380 ( 0.00%)                  self.check_rvalue(body, rv, location);
   62,340 ( 0.00%)                  if !self.unsized_feature_enabled() {
        .                               let trait_ref = ty::TraitRef {
  685,740 ( 0.01%)                          def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
  311,700 ( 0.00%)                          substs: tcx.mk_substs_trait(place_ty, &[]),
        .                               };
  187,020 ( 0.00%)                      self.prove_trait_ref(
        .                                   trait_ref,
        .                                   location.to_locations(),
        .                                   ConstraintCategory::SizedBound,
        .                               );
        .                           }
        .                       }
        .                       StatementKind::SetDiscriminant { ref place, variant_index } => {
        .                           let place_type = place.ty(body, tcx).ty;
-- line 1431 ----------------------------------------
-- line 1444 ----------------------------------------
        .                               span_bug!(
        .                                   stmt.source_info.span,
        .                                   "bad set discriminant ({:?} = {:?}): value of of range",
        .                                   place,
        .                                   variant_index
        .                               );
        .                           };
        .                       }
        4 ( 0.00%)              StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {
        4 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
        .                           if let Err(terr) = self.relate_type_and_user_type(
        .                               place_ty,
        .                               variance,
        .                               projection,
       16 ( 0.00%)                      Locations::All(stmt.source_info.span),
        .                               ConstraintCategory::TypeAnnotation,
        .                           ) {
        .                               let annotation = &self.user_type_annotations[projection.base];
        .                               span_mirbug!(
        .                                   self,
        .                                   stmt,
        .                                   "bad type assert ({:?} <: {:?} with projections {:?}): {:?}",
        .                                   place_ty,
-- line 1466 ----------------------------------------
-- line 1488 ----------------------------------------
        .               #[instrument(skip(self, body, term_location), level = "debug")]
        .               fn check_terminator(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   term_location: Location,
        .               ) {
        .                   let tcx = self.tcx();
   83,055 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::Drop { .. }
        .                       | TerminatorKind::FalseEdge { .. }
        .                       | TerminatorKind::FalseUnwind { .. }
        .                       | TerminatorKind::InlineAsm { .. } => {
        .                           // no checks needed for these
        .                       }
        .           
        .                       TerminatorKind::DropAndReplace { ref place, ref value, target: _, unwind: _ } => {
       18 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
       18 ( 0.00%)                  let rv_ty = value.ty(body, tcx);
        .           
        .                           let locations = term_location.to_locations();
       36 ( 0.00%)                  if let Err(terr) =
        .                               self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)
        .                           {
        .                               span_mirbug!(
        .                                   self,
        .                                   term,
        .                                   "bad DropAndReplace ({:?} = {:?}): {:?}",
        .                                   place_ty,
        .                                   rv_ty,
        .                                   terr
        .                               );
        .                           }
        .                       }
    6,136 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {
    4,602 ( 0.00%)                  self.check_operand(discr, term_location);
        .           
    1,534 ( 0.00%)                  let discr_ty = discr.ty(body, tcx);
    3,068 ( 0.00%)                  if let Err(terr) = self.sub_types(
        .                               discr_ty,
        .                               switch_ty,
        .                               term_location.to_locations(),
        .                               ConstraintCategory::Assignment,
        .                           ) {
        .                               span_mirbug!(
        .                                   self,
        .                                   term,
        .                                   "bad SwitchInt ({:?} on {:?}): {:?}",
        .                                   switch_ty,
        .                                   discr_ty,
        .                                   terr
        .                               );
        .                           }
    1,550 ( 0.00%)                  if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {
        .                               span_mirbug!(self, term, "bad SwitchInt discr ty {:?}", switch_ty);
        .                           }
        .                           // FIXME: check the values
        .                       }
   28,998 ( 0.00%)              TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {
   24,165 ( 0.00%)                  self.check_operand(func, term_location);
        .                           for arg in args {
   36,245 ( 0.00%)                      self.check_operand(arg, term_location);
        .                           }
        .           
    4,833 ( 0.00%)                  let func_ty = func.ty(body, tcx);
        .                           debug!("check_terminator: call, func_ty={:?}", func_ty);
   19,332 ( 0.00%)                  let sig = match func_ty.kind() {
   19,332 ( 0.00%)                      ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),
        .                               _ => {
        .                                   span_mirbug!(self, term, "call to non-function {:?}", func_ty);
        .                                   return;
        .                               }
        .                           };
   48,330 ( 0.00%)                  let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(
   14,499 ( 0.00%)                      term.source_info.span,
        .                               LateBoundRegionConversionTime::FnCall,
        .                               sig,
        .                           );
    9,666 ( 0.00%)                  let sig = self.normalize(sig, term_location);
   19,332 ( 0.00%)                  self.check_call_dest(body, term, &sig, destination, term_location);
        .           
        .                           self.prove_predicates(
    4,833 ( 0.00%)                      sig.inputs_and_output
        .                                   .iter()
   24,164 ( 0.00%)                          .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),
        .                               term_location.to_locations(),
        .                               ConstraintCategory::Boring,
        .                           );
        .           
        .                           // The ordinary liveness rules will ensure that all
        .                           // regions in the type of the callee are live here. We
        .                           // then further constrain the late-bound regions that
        .                           // were instantiated at the call site to be live as
        .                           // well. The resulting is that all the input (and
        .                           // output) types in the signature must be live, since
        .                           // all the inputs that fed into it were live.
   39,186 ( 0.00%)                  for &late_bound_region in map.values() {
        .                               let region_vid =
   10,188 ( 0.00%)                          self.borrowck_context.universal_regions.to_region_vid(late_bound_region);
   10,188 ( 0.00%)                      self.borrowck_context
        .                                   .constraints
        .                                   .liveness_constraints
        .                                   .add_element(region_vid, term_location);
        .                           }
        .           
    9,666 ( 0.00%)                  self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);
        .                       }
      300 ( 0.00%)              TerminatorKind::Assert { ref cond, ref msg, .. } => {
      450 ( 0.00%)                  self.check_operand(cond, term_location);
        .           
      300 ( 0.00%)                  let cond_ty = cond.ty(body, tcx);
      150 ( 0.00%)                  if cond_ty != tcx.types.bool {
        .                               span_mirbug!(self, term, "bad Assert ({:?}, not bool", cond_ty);
        .                           }
        .           
      500 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
       50 ( 0.00%)                      if len.ty(body, tcx) != tcx.types.usize {
        .                                   span_mirbug!(self, len, "bounds-check length non-usize {:?}", len)
        .                               }
       50 ( 0.00%)                      if index.ty(body, tcx) != tcx.types.usize {
        .                                   span_mirbug!(self, index, "bounds-check index non-usize {:?}", index)
        .                               }
        .                           }
        .                       }
        .                       TerminatorKind::Yield { ref value, .. } => {
        .                           self.check_operand(value, term_location);
        .           
        .                           let value_ty = value.ty(body, tcx);
-- line 1621 ----------------------------------------
-- line 1647 ----------------------------------------
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   sig: &ty::FnSig<'tcx>,
        .                   destination: &Option<(Place<'tcx>, BasicBlock)>,
        .                   term_location: Location,
        .               ) {
        .                   let tcx = self.tcx();
   19,332 ( 0.00%)          match *destination {
        .                       Some((ref dest, _target_block)) => {
        .                           let dest_ty = dest.ty(body, tcx).ty;
   28,500 ( 0.00%)                  let dest_ty = self.normalize(dest_ty, term_location);
   23,750 ( 0.00%)                  let category = match dest.as_local() {
        .                               Some(RETURN_PLACE) => {
    6,188 ( 0.00%)                          if let BorrowCheckContext {
        .                                       universal_regions:
        .                                           UniversalRegions {
        .                                               defining_ty:
        .                                                   DefiningTy::Const(def_id, _)
        .                                                   | DefiningTy::InlineConst(def_id, _),
        .                                               ..
        .                                           },
        .                                       ..
-- line 1669 ----------------------------------------
-- line 1673 ----------------------------------------
        .                                           ConstraintCategory::UseAsStatic
        .                                       } else {
        .                                           ConstraintCategory::UseAsConst
        .                                       }
        .                                   } else {
        .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
        .                                   }
        .                               }
    2,331 ( 0.00%)                      Some(l) if !body.local_decls[l].is_user_variable() => {
        .                                   ConstraintCategory::Boring
        .                               }
        .                               _ => ConstraintCategory::Assignment,
        .                           };
        .           
        .                           let locations = term_location.to_locations();
        .           
   33,250 ( 0.00%)                  if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {
        .                               span_mirbug!(
        .                                   self,
        .                                   term,
        .                                   "call dest mismatch ({:?} <- {:?}): {:?}",
        .                                   dest_ty,
        .                                   sig.output(),
        .                                   terr
        .                               );
        .                           }
        .           
        .                           // When `unsized_fn_params` and `unsized_locals` are both not enabled,
        .                           // this check is done at `check_local`.
    4,750 ( 0.00%)                  if self.unsized_feature_enabled() {
        .                               let span = term.source_info.span;
        .                               self.ensure_place_sized(dest_ty, span);
        .                           }
        .                       }
        .                       None => {
       83 ( 0.00%)                  if !self
        .                               .tcx()
      249 ( 0.00%)                      .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))
        .                           {
        .                               span_mirbug!(self, term, "call to converging function {:?} w/o dest", sig);
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn check_call_inputs(
-- line 1718 ----------------------------------------
-- line 1720 ----------------------------------------
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   sig: &ty::FnSig<'tcx>,
        .                   args: &[Operand<'tcx>],
        .                   term_location: Location,
        .                   from_hir_call: bool,
        .               ) {
        .                   debug!("check_call_inputs({:?}, {:?})", sig, args);
   33,831 ( 0.00%)          if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {
        .                       span_mirbug!(self, term, "call to {:?} with wrong # of args", sig);
        .                   }
   24,164 ( 0.00%)          for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {
        .                       let op_arg_ty = op_arg.ty(body, self.tcx());
   28,996 ( 0.00%)              let op_arg_ty = self.normalize(op_arg_ty, term_location);
        .                       let category = if from_hir_call {
        .                           ConstraintCategory::CallArgument
        .                       } else {
        .                           ConstraintCategory::Boring
        .                       };
   14,498 ( 0.00%)              if let Err(terr) =
   14,498 ( 0.00%)                  self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)
        .                       {
        .                           span_mirbug!(
        .                               self,
        .                               term,
        .                               "bad arg #{:?} ({:?} <- {:?}): {:?}",
        .                               n,
        .                               fn_arg,
        .                               op_arg_ty,
        .                               terr
        .                           );
        .                       }
        .                   }
        .               }
        .           
        .               fn check_iscleanup(&mut self, body: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {
    9,160 ( 0.00%)          let is_cleanup = block_data.is_cleanup;
   49,833 ( 0.00%)          self.last_span = block_data.terminator().source_info.span;
   99,666 ( 0.00%)          match block_data.terminator().kind {
    3,013 ( 0.00%)              TerminatorKind::Goto { target } => {
   12,052 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup)
        .                       }
    1,534 ( 0.00%)              TerminatorKind::SwitchInt { ref targets, .. } => {
    1,534 ( 0.00%)                  for target in targets.all_targets() {
   25,626 ( 0.00%)                      self.assert_iscleanup(body, block_data, *target, is_cleanup);
        .                           }
        .                       }
        .                       TerminatorKind::Resume => {
      782 ( 0.00%)                  if !is_cleanup {
        .                               span_mirbug!(self, block_data, "resume on non-cleanup block!")
        .                           }
        .                       }
        .                       TerminatorKind::Abort => {
        .                           if !is_cleanup {
        .                               span_mirbug!(self, block_data, "abort on non-cleanup block!")
        .                           }
        .                       }
        .                       TerminatorKind::Return => {
    2,168 ( 0.00%)                  if is_cleanup {
        .                               span_mirbug!(self, block_data, "return on cleanup block")
        .                           }
        .                       }
        .                       TerminatorKind::GeneratorDrop { .. } => {
        .                           if is_cleanup {
        .                               span_mirbug!(self, block_data, "generator_drop in cleanup block")
        .                           }
        .                       }
-- line 1786 ----------------------------------------
-- line 1792 ----------------------------------------
        .                           if let Some(drop) = drop {
        .                               self.assert_iscleanup(body, block_data, drop, is_cleanup);
        .                           }
        .                       }
        .                       TerminatorKind::Unreachable => {}
        .                       TerminatorKind::Drop { target, unwind, .. }
        .                       | TerminatorKind::DropAndReplace { target, unwind, .. }
        .                       | TerminatorKind::Assert { target, cleanup: unwind, .. } => {
   11,720 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup);
    4,688 ( 0.00%)                  if let Some(unwind) = unwind {
    1,286 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "unwind on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, unwind, true);
        .                           }
        .                       }
    4,833 ( 0.00%)              TerminatorKind::Call { ref destination, cleanup, .. } => {
   23,916 ( 0.00%)                  if let &Some((_, target)) = destination {
    9,500 ( 0.00%)                      self.assert_iscleanup(body, block_data, target, is_cleanup);
        .                           }
   14,499 ( 0.00%)                  if let Some(cleanup) = cleanup {
    4,833 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, cleanup, true);
        .                           }
        .                       }
    2,908 ( 0.00%)              TerminatorKind::FalseEdge { real_target, imaginary_target } => {
    8,724 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
    7,270 ( 0.00%)                  self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);
        .                       }
      182 ( 0.00%)              TerminatorKind::FalseUnwind { real_target, unwind } => {
      455 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
      182 ( 0.00%)                  if let Some(unwind) = unwind {
       91 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "cleanup in cleanup block via false unwind");
        .                               }
        .                               self.assert_iscleanup(body, block_data, unwind, true);
        .                           }
        .                       }
        .                       TerminatorKind::InlineAsm { destination, cleanup, .. } => {
        .                           if let Some(target) = destination {
        .                               self.assert_iscleanup(body, block_data, target, is_cleanup);
-- line 1834 ----------------------------------------
-- line 1838 ----------------------------------------
        .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, cleanup, true);
        .                           }
        .                       }
        .                   }
        .               }
        .           
  212,283 ( 0.00%)      fn assert_iscleanup(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   ctxt: &dyn fmt::Debug,
        .                   bb: BasicBlock,
        .                   iscleanuppad: bool,
        .               ) {
  141,522 ( 0.00%)          if body[bb].is_cleanup != iscleanuppad {
        .                       span_mirbug!(self, ctxt, "cleanuppad mismatch: {:?} should be {:?}", bb, iscleanuppad);
        .                   }
  117,935 ( 0.00%)      }
        .           
        .               fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {
        .                   match body.local_kind(local) {
        .                       LocalKind::ReturnPointer | LocalKind::Arg => {
        .                           // return values of normal functions are required to be
        .                           // sized by typeck, but return values of ADT constructors are
        .                           // not because we don't include a `Self: Sized` bounds on them.
        .                           //
-- line 1864 ----------------------------------------
-- line 1866 ----------------------------------------
        .                           // - maybe we should make that a warning.
        .                           return;
        .                       }
        .                       LocalKind::Var | LocalKind::Temp => {}
        .                   }
        .           
        .                   // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls
        .                   // and nullary ops are checked in `check_call_dest`.
  105,690 ( 0.00%)          if !self.unsized_feature_enabled() {
  211,380 ( 0.00%)              let span = local_decl.source_info.span;
  105,690 ( 0.00%)              let ty = local_decl.ty;
  211,380 ( 0.00%)              self.ensure_place_sized(ty, span);
        .                   }
        .               }
        .           
  951,210 ( 0.01%)      fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {
        .                   let tcx = self.tcx();
        .           
        .                   // Erase the regions from `ty` to get a global type.  The
        .                   // `Sized` bound in no way depends on precise regions, so this
        .                   // shouldn't affect `is_sized`.
        .                   let erased_ty = tcx.erase_regions(ty);
  634,140 ( 0.01%)          if !erased_ty.is_sized(tcx.at(span), self.param_env) {
        .                       // in current MIR construction, all non-control-flow rvalue
        .                       // expressions evaluate through `as_temp` or `into` a return
        .                       // slot or local, so to find all unsized rvalues it is enough
        .                       // to check all temps, return slots and locals.
        .                       if self.reported_errors.replace((ty, span)).is_none() {
        .                           let mut diag = struct_span_err!(
        .                               self.tcx().sess,
        .                               span,
-- line 1896 ----------------------------------------
-- line 1901 ----------------------------------------
        .                           );
        .           
        .                           // While this is located in `nll::typeck` this error is not
        .                           // an NLL error, it's a required check to prevent creation
        .                           // of unsized rvalues in a call expression.
        .                           diag.emit();
        .                       }
        .                   }
  634,140 ( 0.01%)      }
        .           
        .               fn aggregate_field_ty(
        .                   &mut self,
        .                   ak: &AggregateKind<'tcx>,
        .                   field_index: usize,
        .                   location: Location,
        .               ) -> Result<Ty<'tcx>, FieldAccessError> {
        .                   let tcx = self.tcx();
        .           
  172,965 ( 0.00%)          match *ak {
   10,062 ( 0.00%)              AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {
        .                           let def = tcx.adt_def(adt_did);
        .                           let variant = &def.variants[variant_index];
        .                           let adj_field_index = active_field_index.unwrap_or(field_index);
    1,118 ( 0.00%)                  if let Some(field) = variant.fields.get(adj_field_index) {
   10,062 ( 0.00%)                      Ok(self.normalize(field.ty(tcx, substs), location))
        .                           } else {
        .                               Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
        .                           }
        .                       }
       32 ( 0.00%)              AggregateKind::Closure(_, substs) => {
      384 ( 0.00%)                  match substs.as_closure().upvar_tys().nth(field_index) {
        .                               Some(ty) => Ok(ty),
        .                               None => Err(FieldAccessError::OutOfRange {
        .                                   field_count: substs.as_closure().upvar_tys().count(),
        .                               }),
        .                           }
        .                       }
        .                       AggregateKind::Generator(_, substs, _) => {
        .                           // It doesn't make sense to look at a field beyond the prefix;
-- line 1939 ----------------------------------------
-- line 1941 ----------------------------------------
        .                           // aggregate rvalues.
        .                           match substs.as_generator().prefix_tys().nth(field_index) {
        .                               Some(ty) => Ok(ty),
        .                               None => Err(FieldAccessError::OutOfRange {
        .                                   field_count: substs.as_generator().prefix_tys().count(),
        .                               }),
        .                           }
        .                       }
   33,443 ( 0.00%)              AggregateKind::Array(ty) => Ok(ty),
        .                       AggregateKind::Tuple => {
        .                           unreachable!("This should have been covered in check_rvalues");
        .                       }
        .                   }
        .               }
        .           
  840,469 ( 0.01%)      fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {
  240,134 ( 0.00%)          if let Operand::Constant(constant) = op {
  207,171 ( 0.00%)              let maybe_uneval = match constant.literal {
  207,171 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
    1,201 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
        .                               _ => None,
        .                           },
        .                           _ => None,
        .                       };
    2,402 ( 0.00%)              if let Some(uv) = maybe_uneval {
    1,201 ( 0.00%)                  if uv.promoted.is_none() {
        .                               let tcx = self.tcx();
    3,724 ( 0.00%)                      let def_id = uv.def.def_id_for_type_of();
    2,128 ( 0.00%)                      if tcx.def_kind(def_id) == DefKind::InlineConst {
        .                                   let predicates = self.prove_closure_bounds(
        .                                       tcx,
        .                                       def_id.expect_local(),
        .                                       uv.substs,
        .                                       location,
        .                                   );
        .                                   self.normalize_and_prove_instantiated_predicates(
        .                                       def_id,
        .                                       predicates,
        .                                       location.to_locations(),
        .                                   );
        .                               }
        .                           }
        .                       }
        .                   }
  960,536 ( 0.01%)      }
        .           
  810,420 ( 0.01%)      fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {
        .                   let tcx = self.tcx();
        .           
  313,372 ( 0.00%)          match rvalue {
        .                       Rvalue::Aggregate(ak, ops) => {
        .                           for op in ops {
  477,780 ( 0.01%)                      self.check_operand(op, location);
        .                           }
   70,766 ( 0.00%)                  self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)
        .                       }
        .           
       12 ( 0.00%)              Rvalue::Repeat(operand, len) => {
       16 ( 0.00%)                  self.check_operand(operand, location);
        .           
        .                           // If the length cannot be evaluated we must assume that the length can be larger
        .                           // than 1.
        .                           // If the length is larger than 1, the repeat expression will need to copy the
        .                           // element, so we require the `Copy` trait.
       20 ( 0.00%)                  if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {
        8 ( 0.00%)                      match operand {
        .                                   Operand::Copy(..) | Operand::Constant(..) => {
        .                                       // These are always okay: direct use of a const, or a value that can evidently be copied.
        .                                   }
        .                                   Operand::Move(place) => {
        .                                       // Make sure that repeated elements implement `Copy`.
        .                                       let span = body.source_info(location).span;
        .                                       let ty = operand.ty(body, tcx);
        .                                       if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {
-- line 2014 ----------------------------------------
-- line 2045 ----------------------------------------
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       Rvalue::NullaryOp(_, ty) => {
        .                           let trait_ref = ty::TraitRef {
      180 ( 0.00%)                      def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
       36 ( 0.00%)                      substs: tcx.mk_substs_trait(ty, &[]),
        .                           };
        .           
        .                           self.prove_trait_ref(
        .                               trait_ref,
        .                               location.to_locations(),
        .                               ConstraintCategory::SizedBound,
        .                           );
        .                       }
        .           
       18 ( 0.00%)              Rvalue::ShallowInitBox(operand, ty) => {
       36 ( 0.00%)                  self.check_operand(operand, location);
        .           
        .                           let trait_ref = ty::TraitRef {
       90 ( 0.00%)                      def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
        9 ( 0.00%)                      substs: tcx.mk_substs_trait(ty, &[]),
        .                           };
        .           
        .                           self.prove_trait_ref(
        .                               trait_ref,
        .                               location.to_locations(),
        .                               ConstraintCategory::SizedBound,
        .                           );
        .                       }
        .           
   15,512 ( 0.00%)              Rvalue::Cast(cast_kind, op, ty) => {
   15,512 ( 0.00%)                  self.check_operand(op, location);
        .           
   49,834 ( 0.00%)                  match cast_kind {
        .                               CastKind::Pointer(PointerCast::ReifyFnPointer) => {
      600 ( 0.00%)                          let fn_sig = op.ty(body, tcx).fn_sig(tcx);
        .           
        .                                   // The type that we see in the fcx is like
        .                                   // `foo::<'a, 'b>`, where `foo` is the path to a
        .                                   // function definition. When we extract the
        .                                   // signature, it comes from the `fn_sig` query,
        .                                   // and hence may contain unnormalized results.
      825 ( 0.00%)                          let fn_sig = self.normalize(fn_sig, location);
        .           
       75 ( 0.00%)                          let ty_fn_ptr_from = tcx.mk_fn_ptr(fn_sig);
        .           
      150 ( 0.00%)                          if let Err(terr) = self.eq_types(
       75 ( 0.00%)                              ty,
        .                                       ty_fn_ptr_from,
        .                                       location.to_locations(),
        .                                       ConstraintCategory::Cast,
        .                                   ) {
        .                                       span_mirbug!(
        .                                           self,
        .                                           rvalue,
        .                                           "equating {:?} with {:?} yields {:?}",
-- line 2104 ----------------------------------------
-- line 2158 ----------------------------------------
        .                                           ty_fn_ptr_from,
        .                                           ty,
        .                                           terr
        .                                       );
        .                                   }
        .                               }
        .           
        .                               CastKind::Pointer(PointerCast::Unsize) => {
   11,235 ( 0.00%)                          let &ty = ty;
        .                                   let trait_ref = ty::TraitRef {
   41,195 ( 0.00%)                              def_id: tcx
    3,745 ( 0.00%)                                  .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),
   44,940 ( 0.00%)                              substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),
        .                                   };
        .           
   33,705 ( 0.00%)                          self.prove_trait_ref(
        .                                       trait_ref,
        .                                       location.to_locations(),
        .                                       ConstraintCategory::Cast,
        .                                   );
        .                               }
        .           
        .                               CastKind::Pointer(PointerCast::MutToConstPointer) => {
        .                                   let ty_from = match op.ty(body, tcx).kind() {
-- line 2181 ----------------------------------------
-- line 2290 ----------------------------------------
        .                                           ty_elem,
        .                                           ty_to,
        .                                           terr
        .                                       )
        .                                   }
        .                               }
        .           
        .                               CastKind::Misc => {
       58 ( 0.00%)                          let ty_from = op.ty(body, tcx);
      232 ( 0.00%)                          let cast_ty_from = CastTy::from_ty(ty_from);
      174 ( 0.00%)                          let cast_ty_to = CastTy::from_ty(ty);
      754 ( 0.00%)                          match (cast_ty_from, cast_ty_to) {
        .                                       (None, _)
        .                                       | (_, None | Some(CastTy::FnPtr))
        .                                       | (Some(CastTy::Float), Some(CastTy::Ptr(_)))
        .                                       | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {
        .                                           span_mirbug!(self, rvalue, "Invalid cast {:?} -> {:?}", ty_from, ty,)
        .                                       }
        .                                       (
        .                                           Some(CastTy::Int(_)),
-- line 2309 ----------------------------------------
-- line 2312 ----------------------------------------
        .                                       | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))
        .                                       | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))
        .                                       | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
   15,908 ( 0.00%)              Rvalue::Ref(region, _borrow_kind, borrowed_place) => {
   95,448 ( 0.00%)                  self.add_reborrow_constraint(&body, location, region, borrowed_place);
        .                       }
        .           
        .                       Rvalue::BinaryOp(
        .                           BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,
    1,122 ( 0.00%)                  box (left, right),
        .                       ) => {
    1,870 ( 0.00%)                  self.check_operand(left, location);
    1,870 ( 0.00%)                  self.check_operand(right, location);
        .           
      374 ( 0.00%)                  let ty_left = left.ty(body, tcx);
    1,122 ( 0.00%)                  match ty_left.kind() {
        .                               // Types with regions are comparable if they have a common super-type.
        .                               ty::RawPtr(_) | ty::FnPtr(_) => {
        .                                   let ty_right = right.ty(body, tcx);
        .                                   let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {
        .                                       kind: TypeVariableOriginKind::MiscVariable,
        .                                       span: body.source_info(location).span,
        .                                   });
        .                                   self.sub_types(
-- line 2340 ----------------------------------------
-- line 2360 ----------------------------------------
        .                                           ty_right,
        .                                           terr
        .                                       )
        .                                   }
        .                               }
        .                               // For types with no regions we can just check that the
        .                               // both operands have the same type.
        .                               ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)
    1,870 ( 0.00%)                          if ty_left == right.ty(body, tcx) => {}
        .                               // Other types are compared by trait methods, not by
        .                               // `Rvalue::BinaryOp`.
        .                               _ => span_mirbug!(
        .                                   self,
        .                                   rvalue,
        .                                   "unexpected comparison types {:?} and {:?}",
        .                                   ty_left,
        .                                   right.ty(body, tcx)
        .                               ),
        .                           }
        .                       }
        .           
        .                       Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {
   11,648 ( 0.00%)                  self.check_operand(operand, location);
        .                       }
        .           
        .                       Rvalue::BinaryOp(_, box (left, right))
        .                       | Rvalue::CheckedBinaryOp(_, box (left, right)) => {
      564 ( 0.00%)                  self.check_operand(left, location);
      282 ( 0.00%)                  self.check_operand(right, location);
        .                       }
        .           
        .                       Rvalue::AddressOf(..)
        .                       | Rvalue::ThreadLocalRef(..)
        .                       | Rvalue::Len(..)
        .                       | Rvalue::Discriminant(..) => {}
        .                   }
  451,000 ( 0.01%)      }
        .           
        .               /// If this rvalue supports a user-given type annotation, then
        .               /// extract and return it. This represents the final type of the
        .               /// rvalue and will be unified with the inferred type.
        .               fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {
  249,360 ( 0.00%)          match rvalue {
        .                       Rvalue::Use(_)
        .                       | Rvalue::ThreadLocalRef(_)
        .                       | Rvalue::Repeat(..)
        .                       | Rvalue::Ref(..)
        .                       | Rvalue::AddressOf(..)
        .                       | Rvalue::Len(..)
        .                       | Rvalue::Cast(..)
        .                       | Rvalue::ShallowInitBox(..)
        .                       | Rvalue::BinaryOp(..)
        .                       | Rvalue::CheckedBinaryOp(..)
        .                       | Rvalue::NullaryOp(..)
        .                       | Rvalue::UnaryOp(..)
        .                       | Rvalue::Discriminant(..) => None,
        .           
  106,149 ( 0.00%)              Rvalue::Aggregate(aggregate, _) => match **aggregate {
    3,663 ( 0.00%)                  AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,
        .                           AggregateKind::Array(_) => None,
        .                           AggregateKind::Tuple => None,
        .                           AggregateKind::Closure(_, _) => None,
        .                           AggregateKind::Generator(_, _, _) => None,
        .                       },
        .                   }
        .               }
        .           
-- line 2426 ----------------------------------------
-- line 2431 ----------------------------------------
        .                   aggregate_kind: &AggregateKind<'tcx>,
        .                   operands: &[Operand<'tcx>],
        .                   location: Location,
        .               ) {
        .                   let tcx = self.tcx();
        .           
        .                   self.prove_aggregate_predicates(aggregate_kind, location);
        .           
   35,383 ( 0.00%)          if *aggregate_kind == AggregateKind::Tuple {
        .                       // tuple rvalue field type is always the type of the op. Nothing to check here.
        .                       return;
        .                   }
        .           
   34,593 ( 0.00%)          for (i, operand) in operands.iter().enumerate() {
       96 ( 0.00%)              let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {
   69,186 ( 0.00%)                  Ok(field_ty) => field_ty,
        .                           Err(FieldAccessError::OutOfRange { field_count }) => {
        .                               span_mirbug!(
        .                                   self,
        .                                   rvalue,
        .                                   "accessed field #{} but variant only has {}",
        .                                   i,
        .                                   field_count
        .                               );
        .                               continue;
        .                           }
        .                       };
        .                       let operand_ty = operand.ty(body, tcx);
  207,558 ( 0.00%)              let operand_ty = self.normalize(operand_ty, location);
        .           
   69,186 ( 0.00%)              if let Err(terr) = self.sub_types(
        .                           operand_ty,
   34,593 ( 0.00%)                  field_ty,
        .                           location.to_locations(),
        .                           ConstraintCategory::Boring,
        .                       ) {
        .                           span_mirbug!(
        .                               self,
        .                               rvalue,
        .                               "{:?} is not a subtype of {:?}: {:?}",
        .                               operand_ty,
-- line 2471 ----------------------------------------
-- line 2486 ----------------------------------------
        .               fn add_reborrow_constraint(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   location: Location,
        .                   borrow_region: ty::Region<'tcx>,
        .                   borrowed_place: &Place<'tcx>,
        .               ) {
        .                   // These constraints are only meaningful during borrowck:
   15,908 ( 0.00%)          let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =
        .                       self.borrowck_context;
        .           
        .                   // In Polonius mode, we also push a `loan_issued_at` fact
        .                   // linking the loan to the region (in some cases, though,
        .                   // there is no loan associated with this borrow expression --
        .                   // that occurs when we are borrowing an unsafe place, for
        .                   // example).
   95,448 ( 0.00%)          if let Some(all_facts) = all_facts {
        .                       let _prof_timer = self.infcx.tcx.prof.generic_activity("polonius_fact_generation");
        .                       if let Some(borrow_index) = borrow_set.get_index_of(&location) {
        .                           let region_vid = borrow_region.to_region_vid();
        .                           all_facts.loan_issued_at.push((
        .                               region_vid,
        .                               borrow_index,
        .                               location_table.mid_index(location),
        .                           ));
-- line 2510 ----------------------------------------
-- line 2516 ----------------------------------------
        .                   // *p`, where the `p` has type `&'b mut Foo`, for example, we
        .                   // need to ensure that `'b: 'a`.
        .           
        .                   debug!(
        .                       "add_reborrow_constraint({:?}, {:?}, {:?})",
        .                       location, borrow_region, borrowed_place
        .                   );
        .           
   15,908 ( 0.00%)          let mut cursor = borrowed_place.projection.as_ref();
   15,908 ( 0.00%)          let tcx = self.infcx.tcx;
   31,816 ( 0.00%)          let field = path_utils::is_upvar_field_projection(
        .                       tcx,
   31,816 ( 0.00%)              &self.borrowck_context.upvars,
        .                       borrowed_place.as_ref(),
        .                       body,
        .                   );
   31,816 ( 0.00%)          let category = if let Some(field) = field {
       36 ( 0.00%)              let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();
        .                       // FIXME(project-rfc-2229#8): Use Place for better diagnostics
        .                       ConstraintCategory::ClosureUpvar(var_hir_id)
        .                   } else {
        .                       ConstraintCategory::Boring
        .                   };
        .           
   88,144 ( 0.00%)          while let [proj_base @ .., elem] = cursor {
        .                       cursor = proj_base;
        .           
        .                       debug!("add_reborrow_constraint - iteration {:?}", elem);
        .           
   83,615 ( 0.00%)              match elem {
        .                           ProjectionElem::Deref => {
   22,334 ( 0.00%)                      let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;
        .           
        .                               debug!("add_reborrow_constraint - base_ty = {:?}", base_ty);
   55,719 ( 0.00%)                      match base_ty.kind() {
        .                                   ty::Ref(ref_region, _, mutbl) => {
   11,109 ( 0.00%)                              constraints.outlives_constraints.push(OutlivesConstraint {
   22,218 ( 0.00%)                                  sup: ref_region.to_region_vid(),
        .                                           sub: borrow_region.to_region_vid(),
        .                                           locations: location.to_locations(),
        .                                           category,
        .                                           variance_info: ty::VarianceDiagInfo::default(),
        .                                       });
        .           
   31,878 ( 0.00%)                              match mutbl {
        .                                           hir::Mutability::Not => {
        .                                               // Immutable reference. We don't need the base
        .                                               // to be valid for the entire lifetime of
        .                                               // the borrow.
        .                                               break;
        .                                           }
        .                                           hir::Mutability::Mut => {
        .                                               // Mutable reference. We *do* need the base
-- line 2568 ----------------------------------------
-- line 2588 ----------------------------------------
        .                                               // ```
        .                                           }
        .                                       }
        .                                   }
        .                                   ty::RawPtr(..) => {
        .                                       // deref of raw pointer, guaranteed to be valid
        .                                       break;
        .                                   }
      116 ( 0.00%)                          ty::Adt(def, _) if def.is_box() => {
        .                                       // deref of `Box`, need the base to be valid - propagate
        .                                   }
        .                                   _ => bug!("unexpected deref ty {:?} in {:?}", base_ty, borrowed_place),
        .                               }
        .                           }
        .                           ProjectionElem::Field(..)
        .                           | ProjectionElem::Downcast(..)
        .                           | ProjectionElem::Index(..)
-- line 2604 ----------------------------------------
-- line 2617 ----------------------------------------
        .               ) {
        .                   let tcx = self.tcx();
        .           
        .                   debug!(
        .                       "prove_aggregate_predicates(aggregate_kind={:?}, location={:?})",
        .                       aggregate_kind, location
        .                   );
        .           
  393,065 ( 0.00%)          let (def_id, instantiated_predicates) = match aggregate_kind {
        .                       AggregateKind::Adt(adt_did, _, substs, _, _) => {
    9,768 ( 0.00%)                  (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))
        .                       }
        .           
        .                       // For closures, we have some **extra requirements** we
        .                       //
        .                       // have to check. In particular, in their upvars and
        .                       // signatures, closures often reference various regions
        .                       // from the surrounding function -- we call those the
        .                       // closure's free regions. When we borrow-check (and hence
-- line 2635 ----------------------------------------
-- line 2644 ----------------------------------------
        .                       //
        .                       // Despite the opacity of the previous parapgrah, this is
        .                       // actually relatively easy to understand in terms of the
        .                       // desugaring. A closure gets desugared to a struct, and
        .                       // these extra requirements are basically like where
        .                       // clauses on the struct.
        .                       AggregateKind::Closure(def_id, substs)
        .                       | AggregateKind::Generator(def_id, substs, _) => {
      756 ( 0.00%)                  (*def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))
        .                       }
        .           
        .                       AggregateKind::Array(_) | AggregateKind::Tuple => {
   68,198 ( 0.00%)                  (CRATE_DEF_ID.to_def_id(), ty::InstantiatedPredicates::empty())
        .                       }
        .                   };
        .           
   35,383 ( 0.00%)          self.normalize_and_prove_instantiated_predicates(
        .                       def_id,
  106,149 ( 0.00%)              instantiated_predicates,
        .                       location.to_locations(),
        .                   );
        .               }
        .           
      567 ( 0.00%)      fn prove_closure_bounds(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   def_id: LocalDefId,
        .                   substs: SubstsRef<'tcx>,
        .                   location: Location,
        .               ) -> ty::InstantiatedPredicates<'tcx> {
      194 ( 0.00%)          if let Some(ref closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements
        .                   {
        9 ( 0.00%)              let closure_constraints = QueryRegionConstraints {
       54 ( 0.00%)                  outlives: closure_region_requirements.apply_requirements(
        .                               tcx,
        .                               def_id.to_def_id(),
        .                               substs,
        .                           ),
        .           
        .                           // Presently, closures never propagate member
        .                           // constraints to their parents -- they are enforced
        .                           // locally.  This is largely a non-issue as member
-- line 2685 ----------------------------------------
-- line 2688 ----------------------------------------
        .                           // closures.
        .                           member_constraints: vec![],
        .                       };
        .           
        .                       let bounds_mapping = closure_constraints
        .                           .outlives
        .                           .iter()
        .                           .enumerate()
       27 ( 0.00%)                  .filter_map(|(idx, constraint)| {
        .                               let ty::OutlivesPredicate(k1, r2) =
       18 ( 0.00%)                          constraint.no_bound_vars().unwrap_or_else(|| {
        .                                       bug!("query_constraint {:?} contained bound vars", constraint,);
        .                                   });
        .           
        .                               match k1.unpack() {
        .                                   GenericArgKind::Lifetime(r1) => {
        .                                       // constraint is r1: r2
        .                                       let r1_vid = self.borrowck_context.universal_regions.to_region_vid(r1);
        .                                       let r2_vid = self.borrowck_context.universal_regions.to_region_vid(r2);
        .                                       let outlives_requirements =
        .                                           &closure_region_requirements.outlives_requirements[idx];
        .                                       Some((
        .                                           (r1_vid, r2_vid),
        9 ( 0.00%)                                  (outlives_requirements.category, outlives_requirements.blame_span),
        .                                       ))
        .                                   }
        .                                   GenericArgKind::Type(_) | GenericArgKind::Const(_) => None,
        .                               }
        .                           })
        .                           .collect();
        .           
        .                       let existing = self
        .                           .borrowck_context
        .                           .constraints
        .                           .closure_bounds_mapping
        .                           .insert(location, bounds_mapping);
        9 ( 0.00%)              assert!(existing.is_none(), "Multiple closures at the same location.");
        .           
        .                       self.push_region_constraints(
        .                           location.to_locations(),
        .                           ConstraintCategory::ClosureBounds,
        .                           &closure_constraints,
        .                       );
        .                   }
        .           
      189 ( 0.00%)          tcx.predicates_of(def_id).instantiate(tcx, substs)
      504 ( 0.00%)      }
        .           
   32,535 ( 0.00%)      #[instrument(skip(self, body), level = "debug")]
        .               fn typeck_mir(&mut self, body: &Body<'tcx>) {
    8,676 ( 0.00%)          self.last_span = body.span;
        .                   debug!(?body.span);
        .           
        .                   for (local, local_decl) in body.local_decls.iter_enumerated() {
        .                       self.check_local(&body, local, local_decl);
        .                   }
        .           
        .                   for (block, block_data) in body.basic_blocks().iter_enumerated() {
        .                       let mut location = Location { block, statement_index: 0 };
        .                       for stmt in &block_data.statements {
  412,796 ( 0.00%)                  if !stmt.source_info.span.is_dummy() {
  412,100 ( 0.00%)                      self.last_span = stmt.source_info.span;
        .                           }
        .                           self.check_stmt(body, stmt, location);
   24,914 ( 0.00%)                  location.statement_index += 1;
        .                       }
        .           
        .                       self.check_terminator(&body, block_data.terminator(), location);
        .                       self.check_iscleanup(&body, block_data);
        .                   }
        .               }
        .           }
        .           
-- line 2760 ----------------------------------------
-- line 2765 ----------------------------------------
        .           impl NormalizeLocation for Locations {
        .               fn to_locations(self) -> Locations {
        .                   self
        .               }
        .           }
        .           
        .           impl NormalizeLocation for Location {
        .               fn to_locations(self) -> Locations {
  803,387 ( 0.01%)          Locations::Single(self)
        .               }
        .           }
        .           
        .           #[derive(Debug, Default)]
        .           struct ObligationAccumulator<'tcx> {
        .               obligations: PredicateObligations<'tcx>,
        .           }
        .           
-- line 2781 ----------------------------------------

1,645,717 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
       742 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
   369,691 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    16,464 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   178,520 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
   428,816 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    67,412 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   101,118 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
   154,167 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    33,706 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
       196 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       142 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
    43,456 ( 0.00%)          while descendant != ancestor {
    47,182 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
       224 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    39,388 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    59,082 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
       106 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
       318 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
       180 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
       106 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
   155,196 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
   629,841 ( 0.01%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
    15,299 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
        56 ( 0.00%)          tree.is_descendant_of(module, restriction)
   155,196 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
     7,011 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    43,042 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
     7,011 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
     8,802 ( 0.00%)          matches!(self, Visibility::Public)
     4,401 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 434 ----------------------------------------
         .           }
         .           
         .           // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(TyS<'_>, 40);
         .           
         .           impl<'tcx> Ord for TyS<'tcx> {
         .               fn cmp(&self, other: &TyS<'tcx>) -> Ordering {
         2 ( 0.00%)          self.kind().cmp(other.kind())
         .               }
         .           }
         .           
         .           impl<'tcx> PartialOrd for TyS<'tcx> {
         .               fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {
         .                   Some(self.kind().cmp(other.kind()))
         .               }
         .           }
-- line 450 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
   243,532 ( 0.00%)          ptr::eq(self.inner, other.inner)
   239,492 ( 0.00%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 2,158,159 ( 0.02%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
10,040,891 ( 0.11%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 5,548,745 ( 0.06%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
     1,185 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
     1,888 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
    33,993 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
     3,777 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    33,993 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    26,439 ( 0.00%)      }
         .           }
         .           
     8,338 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
   358,399 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
 1,041,627 ( 0.01%)      pub constness: BoundConstness,
         .           
 1,080,828 ( 0.01%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
   964,792 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
   844,469 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
       276 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
   120,461 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
   723,594 ( 0.01%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   516,994 ( 0.01%)          self.trait_ref.def_id
   258,497 ( 0.00%)      }
         .           
   162,835 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   488,505 ( 0.01%)          self.trait_ref.self_ty()
   325,670 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
    45,469 ( 0.00%)      }
         .           
         2 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
         8 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
         4 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
        39 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   171,252 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   221,906 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
     5,029 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
     8,943 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        20 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
    27,094 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    34,867 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
         4 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
     3,951 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
     5,574 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     2,787 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
        56 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     8,646 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
    11,932 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       232 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
       174 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
       174 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
        87 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
     3,727 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
     3,727 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
     3,727 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
   125,912 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   629,560 ( 0.01%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   251,824 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
       337 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       674 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
       674 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
       996 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     4,980 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     1,992 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
    18,946 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
    56,838 ( 0.00%)          match predicate.skip_binder() {
    46,350 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
       203 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
    18,946 ( 0.00%)      }
         .           
    15,567 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
    31,134 ( 0.00%)          match predicate.skip_binder() {
         9 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
    15,564 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
    15,567 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
   179,127 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
    34,099 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   159,898 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
    34,099 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
        17 ( 0.00%)      }
         .           }
         .           
        28 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// "Universes" are used during type- and trait-checking in the
         .               /// presence of `for<..>` binders to control what sets of names are
-- line 1043 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
    37,447 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   112,341 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
   188,890 ( 0.00%)          self.private >= other.private
    94,445 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
       582 ( 0.00%)          self.private < other.private
       291 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
     7,989 ( 0.00%)      pub universe: UniverseIndex,
     3,939 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
    23,770 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         .           #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    17,016 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
    51,784 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
    32,788 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     5,004 ( 0.00%)          if self.const_param_did.is_none() {
     8,004 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
         4 ( 0.00%)      }
         .           
     2,016 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
     1,560 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
       504 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     4,972 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     4,972 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    11,420 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     2,702 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
    18,048 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
     1,535 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
     1,535 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
   148,083 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 2,557,686 ( 0.03%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
       986 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
       986 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    41,074 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
    25,328 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
    28,494 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
    95,375 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
     5,891 ( 0.00%)                  if value.is_global() {
         .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
    89,325 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
     5,100 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
     8,795 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
    53,633 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 1,015,212 ( 0.01%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
    20,058 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
     5,948 ( 0.00%)  bitflags! {
     5,463 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   147,617 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
     2,800 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
       350 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
     1,050 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
     3,150 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
     1,400 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
     1,400 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    20,398 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    11,656 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    26,226 ( 0.00%)      }
         .           }
         .           
    87,785 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   198,931 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
     1,399 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   116,984 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
     1,365 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       315 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
       420 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     2,325 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
       840 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
       630 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
       210 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     2,940 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
     4,806 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     2,670 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
       340 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
       910 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
     1,820 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
       455 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
         .                   self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
   126,910 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    36,260 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   145,040 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    34,965 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    19,980 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    44,955 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    64,600 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    16,150 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    64,600 ( 0.00%)      }
         .           
         .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
         .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
         .               }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
     2,637 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
       293 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
       879 ( 0.00%)              let def_key = self.def_key(def_id);
     1,465 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
       586 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
     2,344 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
     2,051 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
       293 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
     1,465 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
   858,740 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   343,496 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
   772,866 ( 0.01%)      }
         .           
     7,131 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    14,262 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    12,170 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     2,434 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
    12,170 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
    12,170 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     3,651 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     3,651 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
     9,736 ( 0.00%)              };
     4,868 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
     4,868 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
     9,736 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
     6,811 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
    11,676 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
     7,784 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
         .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
         .                   match instance {
         .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
         .               }
         .           
         .               /// Gets the attributes of a definition.
   408,270 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   122,481 ( 0.00%)          if let Some(did) = did.as_local() {
   112,026 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
   326,616 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
    51,256 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   149,382 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
     3,136 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       448 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
        72 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     3,584 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
    18,368 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
     2,624 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    20,992 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
    13,636 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    17,532 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
       861 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     3,444 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
     1,722 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
    41,240 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
     5,155 ( 0.00%)          use_name.name == def_name.name
    15,381 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    41,240 ( 0.00%)      }
         .           
    14,688 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
     3,264 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
     3,264 ( 0.00%)          ident
    13,056 ( 0.00%)      }
         .           
    53,064 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
     5,896 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        98 ( 0.00%)              .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    23,388 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    35,376 ( 0.00%)          (ident, scope)
    53,064 ( 0.00%)      }
         .           
     2,975 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
     3,400 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
     9,591 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
     9,591 ( 0.00%)      let def_id = def_id.as_local()?;
    10,336 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     3,044 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        72 ( 0.00%)              return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    12,788 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
         .           
         .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         .           }
         .           
       385 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
       385 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
         .               pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
         6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
-- line 2308 ----------------------------------------

 7,707,838 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::iter;
        .           use std::num::NonZeroUsize;
        .           use std::ops::Bound;
        .           
        .           use rand::{seq::SliceRandom, SeedableRng};
        .           use rand_xoshiro::Xoshiro128StarStar;
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        6 ( 0.00%)      *providers =
        .                   ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };
        .           }
        .           
        .           pub trait IntegerExt {
        .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;
        .               fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;
        .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer;
        .               fn from_uint_ty<C: HasDataLayout>(cx: &C, uty: ty::UintTy) -> Integer;
-- line 39 ----------------------------------------
-- line 59 ----------------------------------------
        .                       (I16, true) => tcx.types.i16,
        .                       (I32, true) => tcx.types.i32,
        .                       (I64, true) => tcx.types.i64,
        .                       (I128, true) => tcx.types.i128,
        .                   }
        .               }
        .           
        .               /// Gets the Integer type from an attr::IntType.
      272 ( 0.00%)      fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer {
        .                   let dl = cx.data_layout();
        .           
      680 ( 0.00%)          match ity {
        .                       attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) => I8,
        .                       attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) => I16,
        .                       attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) => I32,
        .                       attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) => I64,
        .                       attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => I128,
        .                       attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => {
      136 ( 0.00%)                  dl.ptr_sized_integer()
        .                       }
        .                   }
      272 ( 0.00%)      }
        .           
        .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer {
        .                   match ity {
        .                       ty::IntTy::I8 => I8,
        .                       ty::IntTy::I16 => I16,
        .                       ty::IntTy::I32 => I32,
        .                       ty::IntTy::I64 => I64,
        .                       ty::IntTy::I128 => I128,
    5,248 ( 0.00%)              ty::IntTy::Isize => cx.data_layout().ptr_sized_integer(),
        .                   }
        .               }
        .               fn from_uint_ty<C: HasDataLayout>(cx: &C, ity: ty::UintTy) -> Integer {
    2,290 ( 0.00%)          match ity {
        .                       ty::UintTy::U8 => I8,
        .                       ty::UintTy::U16 => I16,
        .                       ty::UintTy::U32 => I32,
        .                       ty::UintTy::U64 => I64,
        .                       ty::UintTy::U128 => I128,
       19 ( 0.00%)              ty::UintTy::Usize => cx.data_layout().ptr_sized_integer(),
        .                   }
        .               }
        .           
        .               /// Finds the appropriate Integer type and signedness for the given
        .               /// signed discriminant range and `#[repr]` attribute.
        .               /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but
        .               /// that shouldn't affect anything, other than maybe debuginfo.
      204 ( 0.00%)      fn repr_discr<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   repr: &ReprOptions,
        .                   min: i128,
        .                   max: i128,
        .               ) -> (Integer, bool) {
        .                   // Theoretically, negative values could be larger in unsigned representation
        .                   // than the unsigned representation of the signed minimum. However, if there
        .                   // are any negative values, the only valid unsigned representation is u128
        .                   // which can fit all i128 values, so the result remains unaffected.
        .                   let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));
        .                   let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));
        .           
      204 ( 0.00%)          if let Some(ity) = repr.int {
        .                       let discr = Integer::from_attr(&tcx, ity);
        .                       let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };
        .                       if discr < fit {
        .                           bug!(
        .                               "Integer::repr_discr: `#[repr]` hint too small for \
        .                                 discriminant range of enum `{}",
        .                               ty
        .                           )
        .                       }
        .                       return (discr, ity.is_signed());
        .                   }
        .           
      136 ( 0.00%)          let at_least = if repr.c() {
        .                       // This is usually I32, however it can be different on some platforms,
        .                       // notably hexagon and arm-none/thumb-none
        .                       tcx.data_layout().c_enum_min_size
        .                   } else {
        .                       // repr(Rust) enums try to be as small as possible
        .                       I8
        .                   };
        .           
        .                   // If there are no negative values, we can use the unsigned fit.
      612 ( 0.00%)          if min >= 0 {
        .                       (cmp::max(unsigned_fit, at_least), false)
        .                   } else {
        .                       (cmp::max(signed_fit, at_least), true)
        .                   }
      408 ( 0.00%)      }
        .           }
        .           
        .           pub trait PrimitiveExt {
        .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
        .               fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
        .           }
        .           
        .           impl PrimitiveExt for Primitive {
-- line 157 ----------------------------------------
-- line 191 ----------------------------------------
        .           
        .           /// The maximum supported number of lanes in a SIMD vector.
        .           ///
        .           /// This value is selected based on backend support:
        .           /// * LLVM does not appear to have a vector width limit.
        .           /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.
        .           pub const MAX_SIMD_LANES: u64 = 1 << 0xF;
        .           
       20 ( 0.00%)  #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub enum LayoutError<'tcx> {
        .               Unknown(Ty<'tcx>),
        .               SizeOverflow(Ty<'tcx>),
        .               NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),
        .           }
        .           
        .           impl<'tcx> fmt::Display for LayoutError<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 207 ----------------------------------------
-- line 215 ----------------------------------------
        .                           "unable to determine layout for `{}` because `{}` cannot be normalized",
        .                           t,
        .                           e.get_type_for_failure()
        .                       ),
        .                   }
        .               }
        .           }
        .           
    7,280 ( 0.00%)  #[instrument(skip(tcx, query), level = "debug")]
        .           fn layout_of<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,
        .           ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {
        .               ty::tls::with_related_context(tcx, move |icx| {
      455 ( 0.00%)          let (param_env, ty) = query.into_parts();
        .                   debug!(?ty);
        .           
    1,820 ( 0.00%)          if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {
        .                       tcx.sess.fatal(&format!("overflow representing the type `{}`", ty));
        .                   }
        .           
        .                   // Update the ImplicitCtxt to increase the layout_depth
    4,095 ( 0.00%)          let icx = ty::tls::ImplicitCtxt { layout_depth: icx.layout_depth + 1, ..icx.clone() };
        .           
        .                   ty::tls::enter_context(&icx, |_| {
    1,365 ( 0.00%)              let param_env = param_env.with_reveal_all_normalized(tcx);
        .                       let unnormalized_ty = ty;
        .           
        .                       // FIXME: We might want to have two different versions of `layout_of`:
        .                       // One that can be called after typecheck has completed and can use
        .                       // `normalize_erasing_regions` here and another one that can be called
        .                       // before typecheck has completed and uses `try_normalize_erasing_regions`.
        .                       let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {
        .                           Ok(t) => t,
        .                           Err(normalization_error) => {
        .                               return Err(LayoutError::NormalizationFailure(ty, normalization_error));
        .                           }
        .                       };
        .           
      455 ( 0.00%)              if ty != unnormalized_ty {
        .                           // Ensure this layout is also cached for the normalized type.
        .                           return tcx.layout_of(param_env.and(ty));
        .                       }
        .           
    1,808 ( 0.00%)              let cx = LayoutCx { tcx, param_env };
        .           
    1,356 ( 0.00%)              let layout = cx.layout_of_uncached(ty)?;
        .                       let layout = TyAndLayout { ty, layout };
        .           
        .                       cx.record_layout_for_printing(layout);
        .           
        .                       // Type-level uninhabitedness should always imply ABI uninhabitedness.
      450 ( 0.00%)              if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
        .                           assert!(layout.abi.is_uninhabited());
        .                       }
        .           
    1,350 ( 0.00%)              Ok(layout)
        .                   })
        .               })
        .           }
        .           
        .           pub struct LayoutCx<'tcx, C> {
        .               pub tcx: C,
        .               pub param_env: ty::ParamEnv<'tcx>,
        .           }
-- line 279 ----------------------------------------
-- line 291 ----------------------------------------
        .           // Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`.
        .           // This is used to go between `memory_index` (source field order to memory order)
        .           // and `inverse_memory_index` (memory order to source field order).
        .           // See also `FieldsShape::Arbitrary::memory_index` for more details.
        .           // FIXME(eddyb) build a better abstraction for permutations, if possible.
        .           fn invert_mapping(map: &[u32]) -> Vec<u32> {
        .               let mut inverse = vec![0; map.len()];
        .               for i in 0..map.len() {
    1,344 ( 0.00%)          inverse[map[i] as usize] = i as u32;
        .               }
        .               inverse
        .           }
        .           
        .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
      315 ( 0.00%)      fn scalar_pair(&self, a: Scalar, b: Scalar) -> Layout {
        .                   let dl = self.data_layout();
      245 ( 0.00%)          let b_align = b.value.align(dl);
      280 ( 0.00%)          let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);
        .                   let b_offset = a.value.size(dl).align_to(b_align.abi);
        .                   let size = (b_offset + b.value.size(dl)).align_to(align.abi);
        .           
        .                   // HACK(nox): We iter on `b` and then `a` because `max_by_key`
        .                   // returns the last maximum.
      420 ( 0.00%)          let largest_niche = Niche::from_scalar(dl, b_offset, b)
        .                       .into_iter()
      350 ( 0.00%)              .chain(Niche::from_scalar(dl, Size::ZERO, a))
        .                       .max_by_key(|niche| niche.available(dl));
        .           
      665 ( 0.00%)          Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
        .                       fields: FieldsShape::Arbitrary {
       70 ( 0.00%)                  offsets: vec![Size::ZERO, b_offset],
       70 ( 0.00%)                  memory_index: vec![0, 1],
        .                       },
      455 ( 0.00%)              abi: Abi::ScalarPair(a, b),
      350 ( 0.00%)              largest_niche,
        .                       align,
        .                       size,
        .                   }
      280 ( 0.00%)      }
        .           
    5,460 ( 0.00%)      fn univariant_uninterned(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   fields: &[TyAndLayout<'_>],
        .                   repr: &ReprOptions,
        .                   kind: StructKind,
        .               ) -> Result<Layout, LayoutError<'tcx>> {
        .                   let dl = self.data_layout();
    1,820 ( 0.00%)          let pack = repr.pack;
      455 ( 0.00%)          if pack.is_some() && repr.align.is_some() {
        .                       self.tcx.sess.delay_span_bug(DUMMY_SP, "struct cannot be packed and aligned");
        .                       return Err(LayoutError::Unknown(ty));
        .                   }
        .           
    1,820 ( 0.00%)          let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };
        .           
        .                   let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();
        .           
        .                   let optimize = !repr.inhibit_struct_field_reordering_opt();
      455 ( 0.00%)          if optimize {
        .                       let end =
    3,185 ( 0.00%)                  if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };
        .                       let optimizing = &mut inverse_memory_index[..end];
      455 ( 0.00%)              let field_align = |f: &TyAndLayout<'_>| {
      931 ( 0.00%)                  if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }
        .                       };
        .           
        .                       // If `-Z randomize-layout` was enabled for the type definition we can shuffle
        .                       // the field ordering to try and catch some code making assumptions about layouts
        .                       // we don't guarantee
        .                       if repr.can_randomize_type_layout() {
        .                           // `ReprOptions.layout_seed` is a deterministic seed that we can use to
        .                           // randomize field ordering with
        .                           let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);
        .           
        .                           // Shuffle the ordering of the fields
        .                           optimizing.shuffle(&mut rng);
        .           
        .                       // Otherwise we just leave things alone and actually optimize the type's fields
        .                       } else {
      910 ( 0.00%)                  match kind {
        .                               StructKind::AlwaysSized | StructKind::MaybeUnsized => {
      495 ( 0.00%)                          optimizing.sort_by_key(|&x| {
        .                                       // Place ZSTs first to avoid "interesting offsets",
        .                                       // especially with only one or two non-ZST fields.
      623 ( 0.00%)                              let f = &fields[x as usize];
      116 ( 0.00%)                              (!f.is_zst(), cmp::Reverse(field_align(f)))
        .                                   });
        .                               }
        .           
        .                               StructKind::Prefixed(..) => {
        .                                   // Sort in ascending alignment so that the layout stays optimal
        .                                   // regardless of the prefix
    1,951 ( 0.00%)                          optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));
        .                               }
        .                           }
        .           
        .                           // FIXME(Kixiron): We can always shuffle fields within a given alignment class
        .                           //                 regardless of the status of `-Z randomize-layout`
        .                       }
        .                   }
        .           
-- line 393 ----------------------------------------
-- line 399 ----------------------------------------
        .                   // produce `memory_index` (see `invert_mapping`).
        .           
        .                   let mut sized = true;
        .                   let mut offsets = vec![Size::ZERO; fields.len()];
        .                   let mut offset = Size::ZERO;
        .                   let mut largest_niche = None;
        .                   let mut largest_niche_available = 0;
        .           
    1,365 ( 0.00%)          if let StructKind::Prefixed(prefix_size, prefix_align) = kind {
        .                       let prefix_align =
    2,492 ( 0.00%)                  if let Some(pack) = pack { prefix_align.min(pack) } else { prefix_align };
        .                       align = align.max(AbiAndPrefAlign::new(prefix_align));
        .                       offset = prefix_size.align_to(prefix_align);
        .                   }
        .           
      336 ( 0.00%)          for &i in &inverse_memory_index {
    4,469 ( 0.00%)              let field = fields[i as usize];
      672 ( 0.00%)              if !sized {
        .                           self.tcx.sess.delay_span_bug(
        .                               DUMMY_SP,
        .                               &format!(
        .                                   "univariant: field #{} of `{}` comes after unsized field",
        .                                   offsets.len(),
        .                                   ty
        .                               ),
        .                           );
        .                       }
        .           
    1,680 ( 0.00%)              if field.is_unsized() {
        .                           sized = false;
        .                       }
        .           
        .                       // Invariant: offset < dl.obj_size_bound() <= 1<<61
      672 ( 0.00%)              let field_align = if let Some(pack) = pack {
        .                           field.align.min(AbiAndPrefAlign::new(pack))
        .                       } else {
    1,008 ( 0.00%)                  field.align
        .                       };
        .                       offset = offset.align_to(field_align.abi);
        .                       align = align.max(field_align);
        .           
        .                       debug!("univariant offset: {:?} field: {:#?}", offset, field);
      672 ( 0.00%)              offsets[i as usize] = offset;
        .           
      336 ( 0.00%)              if !repr.hide_niche() {
    3,907 ( 0.00%)                  if let Some(mut niche) = field.largest_niche {
        .                               let available = niche.available(dl);
      892 ( 0.00%)                      if available > largest_niche_available {
        .                                   largest_niche_available = available;
        .                                   niche.offset += offset;
    2,944 ( 0.00%)                          largest_niche = Some(niche);
        .                               }
        .                           }
        .                       }
        .           
      336 ( 0.00%)              offset = offset.checked_add(field.size, dl).ok_or(LayoutError::SizeOverflow(ty))?;
        .                   }
        .           
    1,133 ( 0.00%)          if let Some(repr_align) = repr.align {
        .                       align = align.max(AbiAndPrefAlign::new(repr_align));
        .                   }
        .           
        .                   debug!("univariant min_size: {:?}", offset);
        .                   let min_size = offset;
        .           
        .                   // As stated above, inverse_memory_index holds field indices by increasing offset.
        .                   // This makes it an already-sorted view of the offsets vec.
        .                   // To invert it, consider:
        .                   // If field 5 has offset 0, offsets[0] is 5, and memory_index[5] should be 0.
        .                   // Field 5 would be the first element, so memory_index is i:
        .                   // Note: if we didn't optimize, it's already right.
        .           
        .                   let memory_index =
      910 ( 0.00%)              if optimize { invert_mapping(&inverse_memory_index) } else { inverse_memory_index };
        .           
        .                   let size = min_size.align_to(align.abi);
      910 ( 0.00%)          let mut abi = Abi::Aggregate { sized };
        .           
        .                   // Unpack newtype ABIs and find scalar pairs.
    1,820 ( 0.00%)          if sized && size.bytes() > 0 {
        .                       // All other fields must be ZSTs.
        .                       let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.is_zst());
        .           
      194 ( 0.00%)              match (non_zst_fields.next(), non_zst_fields.next(), non_zst_fields.next()) {
        .                           // We have exactly one non-ZST field.
        .                           (Some((i, field)), None, None) => {
        .                               // Field fills the struct and it has a scalar or scalar pair ABI.
      662 ( 0.00%)                      if offsets[i].bytes() == 0 && align.abi == field.align.abi && size == field.size
        .                               {
      150 ( 0.00%)                          match field.abi {
        .                                       // For plain scalars, or vectors of them, we can't unpack
        .                                       // newtypes for `#[repr(C)]`, as that affects C ABIs.
       32 ( 0.00%)                              Abi::Scalar(_) | Abi::Vector { .. } if optimize => {
        .                                           abi = field.abi;
        .                                       }
        .                                       // But scalar pairs are Rust-specific and get
        .                                       // treated as aggregates by C ABIs anyway.
        .                                       Abi::ScalarPair(..) => {
        .                                           abi = field.abi;
        .                                       }
        .                                       _ => {}
-- line 499 ----------------------------------------
-- line 503 ----------------------------------------
        .           
        .                           // Two non-ZST fields, and they're both scalars.
        .                           (
        .                               Some((i, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(a), .. }, .. })),
        .                               Some((j, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(b), .. }, .. })),
        .                               None,
        .                           ) => {
        .                               // Order by the memory placement, not source order.
      135 ( 0.00%)                      let ((i, a), (j, b)) =
      105 ( 0.00%)                          if offsets[i] < offsets[j] { ((i, a), (j, b)) } else { ((j, b), (i, a)) };
      165 ( 0.00%)                      let pair = self.scalar_pair(a, b);
       30 ( 0.00%)                      let pair_offsets = match pair.fields {
       30 ( 0.00%)                          FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
       15 ( 0.00%)                              assert_eq!(memory_index, &[0, 1]);
        .                                       offsets
        .                                   }
        .                                   _ => bug!(),
        .                               };
      110 ( 0.00%)                      if offsets[i] == pair_offsets[0]
       10 ( 0.00%)                          && offsets[j] == pair_offsets[1]
        .                                   && align == pair.align
        .                                   && size == pair.size
        .                               {
        .                                   // We can use `ScalarPair` only when it matches our
        .                                   // already computed layout (including `#[repr(C)]`).
      140 ( 0.00%)                          abi = pair.abi;
        .                               }
       15 ( 0.00%)                  }
        .           
        .                           _ => {}
        .                       }
        .                   }
        .           
      336 ( 0.00%)          if fields.iter().any(|f| f.abi.is_uninhabited()) {
        .                       abi = Abi::Uninhabited;
        .                   }
        .           
   14,560 ( 0.00%)          Ok(Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
    4,550 ( 0.00%)              fields: FieldsShape::Arbitrary { offsets, memory_index },
        .                       abi,
    5,005 ( 0.00%)              largest_niche,
        .                       align,
        .                       size,
        .                   })
    4,550 ( 0.00%)      }
        .           
    4,520 ( 0.00%)      fn layout_of_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx Layout, LayoutError<'tcx>> {
      904 ( 0.00%)          let tcx = self.tcx;
      452 ( 0.00%)          let param_env = self.param_env;
        .                   let dl = self.data_layout();
      492 ( 0.00%)          let scalar_unit = |value: Primitive| {
        2 ( 0.00%)              let size = value.size(dl);
      372 ( 0.00%)              assert!(size.bits() <= 128);
      141 ( 0.00%)              Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_int_max() } }
       40 ( 0.00%)          };
        .                   let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));
        .           
        .                   let univariant = |fields: &[TyAndLayout<'_>], repr: &ReprOptions, kind| {
      210 ( 0.00%)              Ok(tcx.intern_layout(self.univariant_uninterned(ty, fields, repr, kind)?))
        .                   };
        .                   debug_assert!(!ty.has_infer_types_or_consts());
        .           
    3,190 ( 0.00%)          Ok(match *ty.kind() {
        .                       // Basic scalars.
        .                       ty::Bool => tcx.intern_layout(Layout::scalar(
        .                           self,
       12 ( 0.00%)                  Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },
        .                       )),
        .                       ty::Char => tcx.intern_layout(Layout::scalar(
        .                           self,
       12 ( 0.00%)                  Scalar {
        .                               value: Int(I32, false),
        .                               valid_range: WrappingRange { start: 0, end: 0x10FFFF },
        .                           },
        .                       )),
       15 ( 0.00%)              ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),
       30 ( 0.00%)              ty::Uint(ity) => scalar(Int(Integer::from_uint_ty(dl, ity), false)),
        .                       ty::Float(fty) => scalar(match fty {
        .                           ty::FloatTy::F32 => F32,
        .                           ty::FloatTy::F64 => F64,
        .                       }),
        .                       ty::FnPtr(_) => {
        .                           let mut ptr = scalar_unit(Pointer);
        .                           ptr.valid_range = ptr.valid_range.with_start(1);
        .                           tcx.intern_layout(Layout::scalar(self, ptr))
-- line 588 ----------------------------------------
-- line 594 ----------------------------------------
        .                           fields: FieldsShape::Primitive,
        .                           abi: Abi::Uninhabited,
        .                           largest_niche: None,
        .                           align: dl.i8_align,
        .                           size: Size::ZERO,
        .                       }),
        .           
        .                       // Potentially-wide pointers.
      166 ( 0.00%)              ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
        .                           let mut data_ptr = scalar_unit(Pointer);
        .                           if !ty.is_unsafe_ptr() {
        .                               data_ptr.valid_range = data_ptr.valid_range.with_start(1);
        .                           }
        .           
        .                           let pointee = tcx.normalize_erasing_regions(param_env, pointee);
    1,256 ( 0.00%)                  if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {
    2,414 ( 0.00%)                      return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
        .                           }
        .           
       60 ( 0.00%)                  let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);
       60 ( 0.00%)                  let metadata = match unsized_part.kind() {
        .                               ty::Foreign(..) => {
        .                                   return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
        .                               }
      112 ( 0.00%)                      ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),
        .                               ty::Dynamic(..) => {
        2 ( 0.00%)                          let mut vtable = scalar_unit(Pointer);
        2 ( 0.00%)                          vtable.valid_range = vtable.valid_range.with_start(1);
        8 ( 0.00%)                          vtable
        .                               }
        .                               _ => return Err(LayoutError::Unknown(unsized_part)),
        .                           };
        .           
        .                           // Effectively a (ptr, meta) tuple.
      315 ( 0.00%)                  tcx.intern_layout(self.scalar_pair(data_ptr, metadata))
        .                       }
        .           
        .                       // Arrays and slices.
      378 ( 0.00%)              ty::Array(element, mut count) => {
      126 ( 0.00%)                  if count.has_projections() {
        .                               count = tcx.normalize_erasing_regions(param_env, count);
        .                               if count.has_projections() {
        .                                   return Err(LayoutError::Unknown(ty));
        .                               }
        .                           }
        .           
      504 ( 0.00%)                  let count = count.try_eval_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;
      630 ( 0.00%)                  let element = self.layout_of(element)?;
        .                           let size =
      630 ( 0.00%)                      element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;
        .           
        .                           let abi =
    1,008 ( 0.00%)                      if count != 0 && tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
        .                                   Abi::Uninhabited
        .                               } else {
        .                                   Abi::Aggregate { sized: true }
        .                               };
        .           
    1,386 ( 0.00%)                  let largest_niche = if count != 0 { element.largest_niche } else { None };
        .           
    2,772 ( 0.00%)                  tcx.intern_layout(Layout {
        .                               variants: Variants::Single { index: VariantIdx::new(0) },
      126 ( 0.00%)                      fields: FieldsShape::Array { stride: element.size, count },
        .                               abi,
        .                               largest_niche,
      126 ( 0.00%)                      align: element.align,
        .                               size,
        .                           })
        .                       }
       12 ( 0.00%)              ty::Slice(element) => {
       18 ( 0.00%)                  let element = self.layout_of(element)?;
       66 ( 0.00%)                  tcx.intern_layout(Layout {
        .                               variants: Variants::Single { index: VariantIdx::new(0) },
        6 ( 0.00%)                      fields: FieldsShape::Array { stride: element.size, count: 0 },
        .                               abi: Abi::Aggregate { sized: false },
        .                               largest_niche: None,
        6 ( 0.00%)                      align: element.align,
        .                               size: Size::ZERO,
        .                           })
        .                       }
        6 ( 0.00%)              ty::Str => tcx.intern_layout(Layout {
        .                           variants: Variants::Single { index: VariantIdx::new(0) },
        .                           fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },
        .                           abi: Abi::Aggregate { sized: false },
        .                           largest_niche: None,
        1 ( 0.00%)                  align: dl.i8_align,
        .                           size: Size::ZERO,
        .                       }),
        .           
        .                       // Odd unit types.
        .                       ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,
        .                       ty::Dynamic(..) | ty::Foreign(..) => {
        .                           let mut unit = self.univariant_uninterned(
        .                               ty,
-- line 687 ----------------------------------------
-- line 702 ----------------------------------------
        .                           let tys = substs.as_closure().upvar_tys();
        .                           univariant(
        .                               &tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,
        .                               &ReprOptions::default(),
        .                               StructKind::AlwaysSized,
        .                           )?
        .                       }
        .           
       10 ( 0.00%)              ty::Tuple(tys) => {
        .                           let kind =
       30 ( 0.00%)                      if tys.len() == 0 { StructKind::AlwaysSized } else { StructKind::MaybeUnsized };
        .           
       10 ( 0.00%)                  univariant(
       20 ( 0.00%)                      &tys.iter()
        .                                   .map(|k| self.layout_of(k.expect_ty()))
        .                                   .collect::<Result<Vec<_>, _>>()?,
       20 ( 0.00%)                      &ReprOptions::default(),
        .                               kind,
        .                           )?
        .                       }
        .           
        .                       // SIMD vector types.
      276 ( 0.00%)              ty::Adt(def, substs) if def.repr.simd() => {
        .                           if !def.is_struct() {
        .                               // Should have yielded E0517 by now.
        .                               tcx.sess.delay_span_bug(
        .                                   DUMMY_SP,
        .                                   "#[repr(simd)] was applied to an ADT that is not a struct",
        .                               );
        .                               return Err(LayoutError::Unknown(ty));
        .                           }
-- line 732 ----------------------------------------
-- line 833 ----------------------------------------
        .                               abi: Abi::Vector { element: e_abi, count: e_len },
        .                               largest_niche: e_ly.largest_niche,
        .                               size,
        .                               align,
        .                           })
        .                       }
        .           
        .                       // ADTs.
      276 ( 0.00%)              ty::Adt(def, substs) => {
        .                           // Cache the field layouts.
      274 ( 0.00%)                  let variants = def
        .                               .variants
        .                               .iter()
        .                               .map(|v| {
        .                                   v.fields
        .                                       .iter()
    2,385 ( 0.00%)                              .map(|field| self.layout_of(field.ty(tcx, substs)))
        .                                       .collect::<Result<Vec<_>, _>>()
        .                               })
        .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
        .           
      137 ( 0.00%)                  if def.is_union() {
        .                               if def.repr.pack.is_some() && def.repr.align.is_some() {
        .                                   self.tcx.sess.delay_span_bug(
        .                                       tcx.def_span(def.did),
        .                                       "union cannot be packed and aligned",
        .                                   );
        .                                   return Err(LayoutError::Unknown(ty));
        .                               }
        .           
-- line 862 ----------------------------------------
-- line 921 ----------------------------------------
        .                           }
        .           
        .                           // A variant is absent if it's uninhabited and only has ZST fields.
        .                           // Present uninhabited variants only require space for their fields,
        .                           // but *not* an encoding of the discriminant (e.g., a tag value).
        .                           // See issue #49298 for more details on the need to leave space
        .                           // for non-ZST uninhabited data (mostly partial initialization).
        .                           let absent = |fields: &[TyAndLayout<'_>]| {
      306 ( 0.00%)                      let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());
        .                               let is_zst = fields.iter().all(|f| f.is_zst());
      257 ( 0.00%)                      uninhabited && is_zst
      257 ( 0.00%)                  };
        .                           let (present_first, present_second) = {
        .                               let mut present_variants = variants
        .                                   .iter_enumerated()
      820 ( 0.00%)                          .filter_map(|(i, v)| if absent(v) { None } else { Some(i) });
        .                               (present_variants.next(), present_variants.next())
        .                           };
      274 ( 0.00%)                  let present_first = match present_first {
        .                               Some(present_first) => present_first,
        .                               // Uninhabited because it has no variants, or only absent ones.
        .                               None if def.is_enum() => {
        .                                   return Ok(tcx.layout_of(param_env.and(tcx.types.never))?.layout);
        .                               }
        .                               // If it's a struct, still compute a layout so that we can still compute the
        .                               // field offsets.
        .                               None => VariantIdx::new(0),
        .                           };
        .           
      137 ( 0.00%)                  let is_struct = !def.is_enum() ||
        .                               // Only one variant is present.
       68 ( 0.00%)                      (present_second.is_none() &&
        .                               // Representation optimizations are allowed.
        .                               !def.repr.inhibit_enum_layout_opt());
        .                           if is_struct {
        .                               // Struct, or univariant enum equivalent to a struct.
        .                               // (Typechecking will reject discriminant-sizing attrs.)
        .           
        .                               let v = present_first;
       69 ( 0.00%)                      let kind = if def.is_enum() || variants[v].is_empty() {
        .                                   StructKind::AlwaysSized
        .                               } else {
      177 ( 0.00%)                          let param_env = tcx.param_env(def.did);
       59 ( 0.00%)                          let last_field = def.variants[v].fields.last().unwrap();
        .                                   let always_sized =
      354 ( 0.00%)                              tcx.type_of(last_field.did).is_sized(tcx.at(DUMMY_SP), param_env);
      118 ( 0.00%)                          if !always_sized {
        .                                       StructKind::MaybeUnsized
        .                                   } else {
        .                                       StructKind::AlwaysSized
        .                                   }
        .                               };
        .           
      897 ( 0.00%)                      let mut st = self.univariant_uninterned(ty, &variants[v], &def.repr, kind)?;
      345 ( 0.00%)                      st.variants = Variants::Single { index: v };
      483 ( 0.00%)                      let (start, end) = self.tcx.layout_scalar_valid_range(def.did);
      276 ( 0.00%)                      match st.abi {
        .                                   Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {
        .                                       // the asserts ensure that we are not using the
        .                                       // `#[rustc_layout_scalar_valid_range(n)]`
        .                                       // attribute to widen the range of anything as that would probably
        .                                       // result in UB somewhere
        .                                       // FIXME(eddyb) the asserts are probably not needed,
        .                                       // as larger validity ranges would result in missed
        .                                       // optimizations, *not* wrongly assuming the inner
        .                                       // value is valid. e.g. unions enlarge validity ranges,
        .                                       // because the values may be uninitialized.
       66 ( 0.00%)                              if let Bound::Included(start) = start {
        .                                           // FIXME(eddyb) this might be incorrect - it doesn't
        .                                           // account for wrap-around (end < start) ranges.
       36 ( 0.00%)                                  assert!(scalar.valid_range.start <= start);
       18 ( 0.00%)                                  scalar.valid_range.start = start;
        .                                       }
       44 ( 0.00%)                              if let Bound::Included(end) = end {
        .                                           // FIXME(eddyb) this might be incorrect - it doesn't
        .                                           // account for wrap-around (end < start) ranges.
        .                                           assert!(scalar.valid_range.end >= end);
        .                                           scalar.valid_range.end = end;
        .                                       }
        .           
        .                                       // Update `largest_niche` if we have introduced a larger niche.
       66 ( 0.00%)                              let niche = if def.repr.hide_niche() {
        .                                           None
        .                                       } else {
      220 ( 0.00%)                                  Niche::from_scalar(dl, Size::ZERO, *scalar)
        .                                       };
      142 ( 0.00%)                              if let Some(niche) = niche {
       40 ( 0.00%)                                  match st.largest_niche {
       77 ( 0.00%)                                      Some(largest_niche) => {
        .                                                   // Replace the existing niche even if they're equal,
        .                                                   // because this one is at a lower offset.
       55 ( 0.00%)                                          if largest_niche.available(dl) <= niche.available(dl) {
       77 ( 0.00%)                                              st.largest_niche = Some(niche);
        .                                                   }
        .                                               }
       63 ( 0.00%)                                      None => st.largest_niche = Some(niche),
        .                                           }
        .                                       }
        .                                   }
        .                                   _ => assert!(
      141 ( 0.00%)                              start == Bound::Unbounded && end == Bound::Unbounded,
        .                                       "nonscalar layout for layout_scalar_valid_range type {:?}: {:#?}",
        .                                       def,
        .                                       st,
        .                                   ),
        .                               }
        .           
      621 ( 0.00%)                      return Ok(tcx.intern_layout(st));
        .                           }
        .           
        .                           // At this point, we have handled all unions and
        .                           // structs. (We have also handled univariant enums
        .                           // that allow representation optimization.)
        .                           assert!(def.is_enum());
        .           
        .                           // The current code for niche-filling relies on variant indices
        .                           // instead of actual discriminants, so dataful enums with
        .                           // explicit discriminants (RFC #2363) would misbehave.
        .                           let no_explicit_discriminants = def
        .                               .variants
        .                               .iter_enumerated()
        .                               .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));
        .           
      136 ( 0.00%)                  let mut niche_filling_layout = None;
        .           
        .                           // Niche-filling enum optimization.
      136 ( 0.00%)                  if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {
        .                               let mut dataful_variant = None;
        .                               let mut niche_variants = VariantIdx::MAX..=VariantIdx::new(0);
        .           
        .                               // Find one non-ZST variant.
    1,974 ( 0.00%)                      'variants: for (v, fields) in variants.iter_enumerated() {
      771 ( 0.00%)                          if absent(fields) {
        .                                       continue 'variants;
        .                                   }
      514 ( 0.00%)                          for f in fields {
       92 ( 0.00%)                              if !f.is_zst() {
        .                                           if dataful_variant.is_none() {
        .                                               dataful_variant = Some(v);
        .                                               continue 'variants;
        .                                           } else {
        .                                               dataful_variant = None;
        .                                               break 'variants;
        .                                           }
        .                                       }
        .                                   }
      692 ( 0.00%)                          niche_variants = *niche_variants.start().min(&v)..=v;
        .                               }
        .           
       87 ( 0.00%)                      if niche_variants.start() > niche_variants.end() {
        .                                   dataful_variant = None;
        .                               }
        .           
        .                               if let Some(i) = dataful_variant {
       30 ( 0.00%)                          let count = (niche_variants.end().as_u32()
        .                                       - niche_variants.start().as_u32()
        .                                       + 1) as u128;
        .           
        .                                   // Find the field with the largest niche
        6 ( 0.00%)                          let niche_candidate = variants[i]
        .                                       .iter()
        .                                       .enumerate()
       12 ( 0.00%)                              .filter_map(|(j, field)| Some((j, field.largest_niche?)))
        .                                       .max_by_key(|(_, niche)| niche.available(dl));
        .           
       90 ( 0.00%)                          if let Some((field_index, niche, (niche_start, niche_scalar))) =
      114 ( 0.00%)                              niche_candidate.and_then(|(field_index, niche)| {
       84 ( 0.00%)                                  Some((field_index, niche, niche.reserve(self, count)?))
        .                                       })
        .                                   {
       18 ( 0.00%)                              let mut align = dl.aggregate_align;
       12 ( 0.00%)                              let st = variants
        .                                           .iter_enumerated()
        .                                           .map(|(j, v)| {
      340 ( 0.00%)                                      let mut st = self.univariant_uninterned(
        .                                                   ty,
        .                                                   v,
        .                                                   &def.repr,
        .                                                   StructKind::AlwaysSized,
        .                                               )?;
       60 ( 0.00%)                                      st.variants = Variants::Single { index: j };
        .           
       40 ( 0.00%)                                      align = align.max(st.align);
        .           
      120 ( 0.00%)                                      Ok(st)
        .                                           })
        .                                           .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
        .           
       48 ( 0.00%)                              let offset = st[i].fields.offset(field_index) + niche.offset;
       12 ( 0.00%)                              let size = st[i].size;
        .           
        .                                       let abi = if st.iter().all(|v| v.abi.is_uninhabited()) {
        .                                           Abi::Uninhabited
        .                                       } else {
       30 ( 0.00%)                                  match st[i].abi {
       16 ( 0.00%)                                      Abi::Scalar(_) => Abi::Scalar(niche_scalar),
        .                                               Abi::ScalarPair(first, second) => {
        .                                                   // We need to use scalar_unit to reset the
        .                                                   // valid range to the maximal one for that
        .                                                   // primitive, because only the niche is
        .                                                   // guaranteed to be initialised, not the
        .                                                   // other primitive.
        .                                                   if offset.bytes() == 0 {
        .                                                       Abi::ScalarPair(niche_scalar, scalar_unit(second.value))
-- line 1124 ----------------------------------------
-- line 1125 ----------------------------------------
        .                                                   } else {
        .                                                       Abi::ScalarPair(scalar_unit(first.value), niche_scalar)
        .                                                   }
        .                                               }
        .                                               _ => Abi::Aggregate { sized: true },
        .                                           }
        .                                       };
        .           
       66 ( 0.00%)                              let largest_niche = Niche::from_scalar(dl, offset, niche_scalar);
        .           
      372 ( 0.00%)                              niche_filling_layout = Some(Layout {
       36 ( 0.00%)                                  variants: Variants::Multiple {
        .                                               tag: niche_scalar,
        .                                               tag_encoding: TagEncoding::Niche {
        .                                                   dataful_variant: i,
        .                                                   niche_variants,
        .                                                   niche_start,
        .                                               },
        .                                               tag_field: 0,
        .                                               variants: st,
        .                                           },
        .                                           fields: FieldsShape::Arbitrary {
       30 ( 0.00%)                                      offsets: vec![offset],
       30 ( 0.00%)                                      memory_index: vec![0],
        .                                           },
        .                                           abi,
        .                                           largest_niche,
        .                                           size,
       12 ( 0.00%)                                  align,
        .                                       });
        .                                   }
        .                               }
        .                           }
        .           
      340 ( 0.00%)                  let (mut min, mut max) = (i128::MAX, i128::MIN);
      356 ( 0.00%)                  let discr_type = def.repr.discr_type();
      204 ( 0.00%)                  let bits = Integer::from_attr(self, discr_type).size().bits();
    1,104 ( 0.00%)                  for (i, discr) in def.discriminants(tcx) {
      172 ( 0.00%)                      if variants[i].iter().any(|f| f.abi.is_uninhabited()) {
        .                                   continue;
        .                               }
        .                               let mut x = discr.val as i128;
      356 ( 0.00%)                      if discr_type.is_signed() {
        .                                   // sign extend the raw representation to be an i128
    6,764 ( 0.00%)                          x = (x << (128 - bits)) >> (128 - bits);
        .                               }
    1,424 ( 0.00%)                      if x < min {
      272 ( 0.00%)                          min = x;
        .                               }
    1,424 ( 0.00%)                      if x > max {
    1,068 ( 0.00%)                          max = x;
        .                               }
        .                           }
        .                           // We might have no inhabited variants, so pretend there's at least one.
       68 ( 0.00%)                  if (min, max) == (i128::MAX, i128::MIN) {
        .                               min = 0;
        .                               max = 0;
        .                           }
      340 ( 0.00%)                  assert!(min <= max, "discriminant range is {}...{}", min, max);
      612 ( 0.00%)                  let (min_ity, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);
        .           
      136 ( 0.00%)                  let mut align = dl.aggregate_align;
       68 ( 0.00%)                  let mut size = Size::ZERO;
        .           
        .                           // We're interested in the smallest alignment, so start large.
      136 ( 0.00%)                  let mut start_align = Align::from_bytes(256).unwrap();
      340 ( 0.00%)                  assert_eq!(Integer::for_align(dl, start_align), None);
        .           
        .                           // repr(C) on an enum tells us to make a (tag, union) layout,
        .                           // so we need to grow the prefix alignment to be at least
        .                           // the alignment of the union. (This value is used both for
        .                           // determining the alignment of the overall enum, and the
        .                           // determining the alignment of the payload after the tag.)
      884 ( 0.00%)                  let mut prefix_align = min_ity.align(dl).abi;
       68 ( 0.00%)                  if def.repr.c() {
        .                               for fields in &variants {
        .                                   for field in fields {
        .                                       prefix_align = prefix_align.max(field.align.abi);
        .                                   }
        .                               }
        .                           }
        .           
        .                           // Create the set of structs that represent each variant.
      136 ( 0.00%)                  let mut layout_variants = variants
        .                               .iter_enumerated()
        .                               .map(|(i, field_layouts)| {
    6,764 ( 0.00%)                          let mut st = self.univariant_uninterned(
      356 ( 0.00%)                              ty,
        .                                       &field_layouts,
      712 ( 0.00%)                              &def.repr,
    1,424 ( 0.00%)                              StructKind::Prefixed(min_ity.size(), prefix_align),
        .                                   )?;
    1,068 ( 0.00%)                          st.variants = Variants::Single { index: i };
        .                                   // Find the first field we can't move later
        .                                   // to make room for a larger discriminant.
        .                                   for field in
    4,924 ( 0.00%)                              st.fields.index_by_increasing_offset().map(|j| field_layouts[j])
        .                                   {
       82 ( 0.00%)                              if !field.is_zst() || field.align.abi.bytes() != 1 {
      296 ( 0.00%)                                  start_align = start_align.min(field.align.abi);
        .                                           break;
        .                                       }
        .                                   }
    1,424 ( 0.00%)                          size = cmp::max(size, st.size);
    1,068 ( 0.00%)                          align = align.max(st.align);
    2,136 ( 0.00%)                          Ok(st)
        .                               })
        .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
        .           
        .                           // Align the maximum variant size to the largest alignment.
      340 ( 0.00%)                  size = size.align_to(align.abi);
        .           
      272 ( 0.00%)                  if size.bytes() >= dl.obj_size_bound() {
        .                               return Err(LayoutError::SizeOverflow(ty));
        .                           }
        .           
      272 ( 0.00%)                  let typeck_ity = Integer::from_attr(dl, def.repr.discr_type());
      204 ( 0.00%)                  if typeck_ity < min_ity {
        .                               // It is a bug if Layout decided on a greater discriminant size than typeck for
        .                               // some reason at this point (based on values discriminant can take on). Mostly
        .                               // because this discriminant will be loaded, and then stored into variable of
        .                               // type calculated by typeck. Consider such case (a bug): typeck decided on
        .                               // byte-sized discriminant, but layout thinks we need a 16-bit to store all
        .                               // discriminant values. That would be a bug, because then, in codegen, in order
        .                               // to store this 16-bit discriminant into 8-bit sized temporary some of the
        .                               // space necessary to represent would have to be discarded (or layout is wrong
-- line 1250 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           // as the alignment of the first field of each variant.
        .                           // We increase the size of the discriminant to avoid LLVM copying
        .                           // padding when it doesn't need to. This normally causes unaligned
        .                           // load/stores and excessive memcpy/memset operations. By using a
        .                           // bigger integer size, LLVM can be sure about its contents and
        .                           // won't be so conservative.
        .           
        .                           // Use the initial field alignment
      204 ( 0.00%)                  let mut ity = if def.repr.c() || def.repr.int.is_some() {
        .                               min_ity
        .                           } else {
      204 ( 0.00%)                      Integer::for_align(dl, start_align).unwrap_or(min_ity)
        .                           };
        .           
        .                           // If the alignment is not larger than the chosen discriminant size,
        .                           // don't use the alignment as the final size.
       68 ( 0.00%)                  if ity <= min_ity {
        .                               ity = min_ity;
        .                           } else {
        .                               // Patch up the variants' first few fields.
       62 ( 0.00%)                      let old_ity_size = min_ity.size();
        .                               let new_ity_size = ity.size();
        .                               for variant in &mut layout_variants {
      346 ( 0.00%)                          match variant.fields {
        .                                       FieldsShape::Arbitrary { ref mut offsets, .. } => {
        .                                           for i in offsets {
      322 ( 0.00%)                                      if *i <= old_ity_size {
        .                                                   assert_eq!(*i, old_ity_size);
        .                                                   *i = new_ity_size;
        .                                               }
        .                                           }
        .                                           // We might be making the struct larger.
      173 ( 0.00%)                                  if variant.size <= old_ity_size {
      142 ( 0.00%)                                      variant.size = new_ity_size;
        .                                           }
        .                                       }
        .                                       _ => bug!(),
        .                                   }
        .                               }
        .                           }
        .           
       68 ( 0.00%)                  let tag_mask = ity.size().unsigned_int_max();
        .                           let tag = Scalar {
        .                               value: Int(ity, signed),
        .                               valid_range: WrappingRange {
      340 ( 0.00%)                          start: (min as u128 & tag_mask),
      272 ( 0.00%)                          end: (max as u128 & tag_mask),
        .                               },
        .                           };
        .                           let mut abi = Abi::Aggregate { sized: true };
      408 ( 0.00%)                  if tag.value.size(dl) == size {
        .                               abi = Abi::Scalar(tag);
        .                           } else {
        .                               // Try to use a ScalarPair for all tagged enums.
        .                               let mut common_prim = None;
        .                               for (field_layouts, layout_variant) in iter::zip(&variants, &layout_variants) {
      238 ( 0.00%)                          let offsets = match layout_variant.fields {
        .                                       FieldsShape::Arbitrary { ref offsets, .. } => offsets,
        .                                       _ => bug!(),
        .                                   };
        .                                   let mut fields =
        .                                       iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());
    1,190 ( 0.00%)                          let (field, offset) = match (fields.next(), fields.next()) {
        .                                       (None, None) => continue,
        .                                       (Some(pair), None) => pair,
        .                                       _ => {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   };
      180 ( 0.00%)                          let prim = match field.abi {
       66 ( 0.00%)                              Abi::Scalar(scalar) => scalar.value,
        .                                       _ => {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   };
       66 ( 0.00%)                          if let Some(pair) = common_prim {
        .                                       // This is pretty conservative. We could go fancier
        .                                       // by conflating things like i32 and u32, or even
        .                                       // realising that (u8, u8) could just cohabit with
        .                                       // u16 or even u32.
      117 ( 0.00%)                              if pair != (prim, offset) {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   } else {
        .                                       common_prim = Some((prim, offset));
        .                                   }
        .                               }
       10 ( 0.00%)                      if let Some((prim, offset)) = common_prim {
       85 ( 0.00%)                          let pair = self.scalar_pair(tag, scalar_unit(prim));
       10 ( 0.00%)                          let pair_offsets = match pair.fields {
       10 ( 0.00%)                              FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
        5 ( 0.00%)                                  assert_eq!(memory_index, &[0, 1]);
        .                                           offsets
        .                                       }
        .                                       _ => bug!(),
        .                                   };
       30 ( 0.00%)                          if pair_offsets[0] == Size::ZERO
       10 ( 0.00%)                              && pair_offsets[1] == *offset
        5 ( 0.00%)                              && align == pair.align
        5 ( 0.00%)                              && size == pair.size
        .                                   {
        .                                       // We can use `ScalarPair` only when it matches our
        .                                       // already computed layout (including `#[repr(C)]`).
      135 ( 0.00%)                              abi = pair.abi;
        .                                   }
        5 ( 0.00%)                      }
        .                           }
        .           
        .                           if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {
        .                               abi = Abi::Uninhabited;
        .                           }
        .           
    1,088 ( 0.00%)                  let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag);
        .           
        .                           let tagged_layout = Layout {
        .                               variants: Variants::Multiple {
        .                                   tag,
        .                                   tag_encoding: TagEncoding::Direct,
        .                                   tag_field: 0,
        .                                   variants: layout_variants,
        .                               },
        .                               fields: FieldsShape::Arbitrary {
      340 ( 0.00%)                          offsets: vec![Size::ZERO],
      272 ( 0.00%)                          memory_index: vec![0],
        .                               },
        .                               largest_niche,
        .                               abi,
      136 ( 0.00%)                      align,
       68 ( 0.00%)                      size,
        .                           };
        .           
      210 ( 0.00%)                  let best_layout = match (tagged_layout, niche_filling_layout) {
        .                               (tagged_layout, Some(niche_filling_layout)) => {
        .                                   // Pick the smaller layout; otherwise,
        .                                   // pick the layout with the larger niche; otherwise,
        .                                   // pick tagged as it has simpler codegen.
      414 ( 0.00%)                          cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {
       36 ( 0.00%)                              let niche_size = layout.largest_niche.map_or(0, |n| n.available(dl));
        6 ( 0.00%)                              (layout.size, cmp::Reverse(niche_size))
        .                                   })
        .                               }
    3,782 ( 0.00%)                      (tagged_layout, None) => tagged_layout,
        .                           };
        .           
      612 ( 0.00%)                  tcx.intern_layout(best_layout)
      274 ( 0.00%)              }
        .           
        .                       // Types with no meaningful known layout.
        .                       ty::Projection(_) | ty::Opaque(..) => {
        .                           // NOTE(eddyb) `layout_of` query should've normalized these away,
        .                           // if that was possible, so there's no reason to try again here.
        .                           return Err(LayoutError::Unknown(ty));
        .                       }
        .           
-- line 1419 ----------------------------------------
-- line 1420 ----------------------------------------
        .                       ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {
        .                           bug!("Layout::compute: unexpected type `{}`", ty)
        .                       }
        .           
        .                       ty::Bound(..) | ty::Param(_) | ty::Error(_) => {
        .                           return Err(LayoutError::Unknown(ty));
        .                       }
        .                   })
    3,616 ( 0.00%)      }
        .           }
        .           
        .           /// Overlap eligibility and variant assignment for each GeneratorSavedLocal.
        .           #[derive(Clone, Debug, PartialEq)]
        .           enum SavedLocalEligibility {
        .               Unassigned,
        .               Assigned(VariantIdx),
        .               // FIXME: Use newtype_index so we aren't wasting bytes
-- line 1436 ----------------------------------------
-- line 1755 ----------------------------------------
        .               }
        .           
        .               /// This is invoked by the `layout_of` query to record the final
        .               /// layout of each type.
        .               #[inline(always)]
        .               fn record_layout_for_printing(&self, layout: TyAndLayout<'tcx>) {
        .                   // If we are running with `-Zprint-type-sizes`, maybe record layouts
        .                   // for dumping later.
    2,250 ( 0.00%)          if self.tcx.sess.opts.debugging_opts.print_type_sizes {
        .                       self.record_layout_for_printing_outlined(layout)
        .                   }
        .               }
        .           
        .               fn record_layout_for_printing_outlined(&self, layout: TyAndLayout<'tcx>) {
        .                   // Ignore layouts that are done with non-empty environments or
        .                   // non-monomorphic layouts, as the user only wants to see the stuff
        .                   // resulting from the final codegen session.
-- line 1771 ----------------------------------------
-- line 2041 ----------------------------------------
        .           
        .           pub trait HasParamEnv<'tcx> {
        .               fn param_env(&self) -> ty::ParamEnv<'tcx>;
        .           }
        .           
        .           impl<'tcx> HasDataLayout for TyCtxt<'tcx> {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
1,870,467 ( 0.02%)          &self.data_layout
        .               }
        .           }
        .           
        .           impl<'tcx> HasTargetSpec for TyCtxt<'tcx> {
        .               fn target_spec(&self) -> &Target {
        .                   &self.sess.target
        .               }
        .           }
-- line 2057 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   **self
        .               }
        .           }
        .           
        .           impl<'tcx, C> HasParamEnv<'tcx> for LayoutCx<'tcx, C> {
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      331 ( 0.00%)          self.param_env
        .               }
        .           }
        .           
        .           impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {
        .               fn data_layout(&self) -> &TargetDataLayout {
        .                   self.tcx.data_layout()
        .               }
        .           }
-- line 2096 ----------------------------------------
-- line 2098 ----------------------------------------
        .           impl<'tcx, T: HasTargetSpec> HasTargetSpec for LayoutCx<'tcx, T> {
        .               fn target_spec(&self) -> &Target {
        .                   self.tcx.target_spec()
        .               }
        .           }
        .           
        .           impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      331 ( 0.00%)          self.tcx.tcx()
        .               }
        .           }
        .           
        .           pub trait MaybeResult<T> {
        .               type Error;
        .           
        .               fn from(x: Result<T, Self::Error>) -> Self;
        .               fn to_result(self) -> Result<T, Self::Error>;
-- line 2114 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   Ok(self)
        .               }
        .           }
        .           
        .           impl<T, E> MaybeResult<T> for Result<T, E> {
        .               type Error = E;
        .           
        .               fn from(x: Result<T, Self::Error>) -> Self {
  255,989 ( 0.00%)          x
        .               }
        .               fn to_result(self) -> Result<T, Self::Error> {
        .                   self
        .               }
        .           }
        .           
        .           pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;
        .           
-- line 2140 ----------------------------------------
-- line 2167 ----------------------------------------
        .               ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;
        .           }
        .           
        .           /// Blanket extension trait for contexts that can compute layouts of types.
        .           pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {
        .               /// Computes the layout of a type. Note that this implicitly
        .               /// executes in "reveal all" mode, and will normalize the input type.
        .               #[inline]
  672,080 ( 0.01%)      fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {
        .                   self.spanned_layout_of(ty, DUMMY_SP)
  671,864 ( 0.01%)      }
        .           
        .               /// Computes the layout of a type, at `span`. Note that this implicitly
        .               /// executes in "reveal all" mode, and will normalize the input type.
        .               // FIXME(eddyb) avoid passing information like this, and instead add more
        .               // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.
        .               #[inline]
        .               fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {
        .                   let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };
-- line 2185 ----------------------------------------
-- line 2268 ----------------------------------------
        .                       Variants::Multiple { ref variants, .. } => &variants[variant_index],
        .                   };
        .           
        .                   assert_eq!(layout.variants, Variants::Single { index: variant_index });
        .           
        .                   TyAndLayout { ty: this.ty, layout }
        .               }
        .           
6,165,285 ( 0.07%)      fn ty_and_layout_field(this: TyAndLayout<'tcx>, cx: &C, i: usize) -> TyAndLayout<'tcx> {
        .                   enum TyMaybeWithLayout<'tcx> {
        .                       Ty(Ty<'tcx>),
        .                       TyAndLayout(TyAndLayout<'tcx>),
        .                   }
        .           
4,932,228 ( 0.06%)          fn field_ty_or_layout<'tcx>(
        .                       this: TyAndLayout<'tcx>,
        .                       cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
        .                       i: usize,
        .                   ) -> TyMaybeWithLayout<'tcx> {
        .                       let tcx = cx.tcx();
        .                       let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {
        .                           let layout = Layout::scalar(cx, tag);
        .                           TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }
        .                       };
        .           
1,233,057 ( 0.01%)              match *this.ty.kind() {
        .                           ty::Bool
        .                           | ty::Char
        .                           | ty::Int(_)
        .                           | ty::Uint(_)
        .                           | ty::Float(_)
        .                           | ty::FnPtr(_)
        .                           | ty::Never
        .                           | ty::FnDef(..)
-- line 2301 ----------------------------------------
-- line 2350 ----------------------------------------
        .                                       */
        .                                   }
        .                                   _ => bug!("TyAndLayout::field({:?}): not applicable", this),
        .                               }
        .                           }
        .           
        .                           // Arrays and slices.
        .                           ty::Array(element, _) | ty::Slice(element) => TyMaybeWithLayout::Ty(element),
   21,688 ( 0.00%)                  ty::Str => TyMaybeWithLayout::Ty(tcx.types.u8),
        .           
        .                           // Tuples, generators and closures.
        .                           ty::Closure(_, ref substs) => field_ty_or_layout(
        .                               TyAndLayout { ty: substs.as_closure().tupled_upvars_ty(), ..this },
        .                               cx,
        .                               i,
        .                           ),
        .           
-- line 2366 ----------------------------------------
-- line 2377 ----------------------------------------
        .                               Variants::Multiple { tag, tag_field, .. } => {
        .                                   if i == tag_field {
        .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
        .                                   }
        .                                   TyMaybeWithLayout::Ty(substs.as_generator().prefix_tys().nth(i).unwrap())
        .                               }
        .                           },
        .           
1,396,096 ( 0.02%)                  ty::Tuple(tys) => TyMaybeWithLayout::Ty(tys[i].expect_ty()),
        .           
        .                           // ADTs.
        .                           ty::Adt(def, substs) => {
        .                               match this.variants {
        .                                   Variants::Single { index } => {
        .                                       TyMaybeWithLayout::Ty(def.variants[index].fields[i].ty(tcx, substs))
        .                                   }
        .           
-- line 2393 ----------------------------------------
-- line 2402 ----------------------------------------
        .                           ty::Projection(_)
        .                           | ty::Bound(..)
        .                           | ty::Placeholder(..)
        .                           | ty::Opaque(..)
        .                           | ty::Param(_)
        .                           | ty::Infer(_)
        .                           | ty::Error(_) => bug!("TyAndLayout::field: unexpected type `{}`", this.ty),
        .                       }
3,699,171 ( 0.04%)          }
        .           
1,644,076 ( 0.02%)          match field_ty_or_layout(this, cx, i) {
  822,038 ( 0.01%)              TyMaybeWithLayout::Ty(field_ty) => {
        .                           cx.tcx().layout_of(cx.param_env().and(field_ty)).unwrap_or_else(|e| {
        .                               bug!(
        .                                   "failed to get layout for `{}`: {},\n\
        .                                    despite it being a field (#{}) of an existing layout: {:#?}",
        .                                   field_ty,
        .                                   e,
        .                                   i,
        .                                   this
        .                               )
        .                           })
        .                       }
        .                       TyMaybeWithLayout::TyAndLayout(field_layout) => field_layout,
        .                   }
3,288,152 ( 0.04%)      }
        .           
        .               fn ty_and_layout_pointee_info_at(
        .                   this: TyAndLayout<'tcx>,
        .                   cx: &C,
        .                   offset: Size,
        .               ) -> Option<PointeeInfo> {
        .                   let tcx = cx.tcx();
        .                   let param_env = cx.param_env();
-- line 2435 ----------------------------------------

  739,087 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           };
        .           use rustc_ast_pretty::pprust::token_to_string;
        .           use rustc_data_structures::fx::FxHashMap;
        .           use rustc_errors::PResult;
        .           use rustc_span::Span;
        .           
        .           impl<'a> StringReader<'a> {
        .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      722 ( 0.00%)          let mut tt_reader = TokenTreesReader {
        .                       string_reader: self,
       38 ( 0.00%)              token: Token::dummy(),
        .                       open_braces: Vec::new(),
        .                       unmatched_braces: Vec::new(),
        .                       matching_delim_spans: Vec::new(),
        .                       last_unclosed_found_span: None,
        .                       last_delim_empty_block_spans: FxHashMap::default(),
        .                       matching_block_spans: Vec::new(),
        .                   };
       38 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
      228 ( 0.00%)          (res, tt_reader.unmatched_braces)
        .               }
        .           }
        .           
        .           struct TokenTreesReader<'a> {
        .               string_reader: StringReader<'a>,
        .               token: Token,
        .               /// Stack of open delimiters and their spans. Used for error message.
        .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
        .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
        .               /// Collect the spans of braces (Open, Close). Used only
        .               /// for detecting if blocks are empty and only braces.
        .               matching_block_spans: Vec<(Span, Span)>,
        .           }
        .           
        .           impl<'a> TokenTreesReader<'a> {
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
      304 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
        .                   let mut buf = TokenStreamBuilder::default();
        .           
        .                   self.bump();
   18,456 ( 0.00%)          while self.token != token::Eof {
   73,520 ( 0.00%)              buf.push(self.parse_token_tree()?);
        .                   }
        .           
        .                   Ok(buf.into_token_stream())
      342 ( 0.00%)      }
        .           
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
        .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
        .                   let mut buf = TokenStreamBuilder::default();
        .                   loop {
  610,146 ( 0.01%)              if let token::CloseDelim(..) = self.token.kind {
        .                           return buf.into_token_stream();
        .                       }
        .           
1,271,060 ( 0.01%)              match self.parse_token_tree() {
2,287,908 ( 0.03%)                  Ok(tree) => buf.push(tree),
        .                           Err(mut e) => {
        .                               e.emit();
        .                               return buf.into_token_stream();
        .                           }
        .                       }
        .                   }
        .               }
        .           
2,370,618 ( 0.03%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
  526,804 ( 0.01%)          let sm = self.string_reader.sess.source_map();
        .           
2,167,174 ( 0.02%)          match self.token.kind {
        .                       token::Eof => {
        .                           let msg = "this file contains an unclosed delimiter";
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
        .                           for &(_, sp) in &self.open_braces {
        .                               err.span_label(sp, "unclosed delimiter");
        .                               self.unmatched_braces.push(UnmatchedBrace {
        .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
        .                                   err.span_label(
        .                                       *close_sp,
        .                                       "...as it matches this but it has different indentation",
        .                                   );
        .                               }
        .                           }
        .                           Err(err)
        .                       }
   50,861 ( 0.00%)              token::OpenDelim(delim) => {
        .                           // The span for beginning of the delimited section
   50,861 ( 0.00%)                  let pre_span = self.token.span;
        .           
        .                           // Parse the open delimiter.
  356,027 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
        .                           self.bump();
        .           
        .                           // Parse the token trees within the delimiters.
        .                           // We stop at any delimiter so we can try to recover if the user
        .                           // uses an incorrect delimiter.
   50,861 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
        .           
        .                           // Expand to cover the entire delimited token tree
  254,305 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
        .           
  101,722 ( 0.00%)                  match self.token.kind {
        .                               // Correct delimiter.
  101,722 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
        .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  101,722 ( 0.00%)                          let close_brace_span = self.token.span;
        .           
  152,583 ( 0.00%)                          if tts.is_empty() {
    7,971 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   10,628 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
        .                                           // Only track if the block is in the form of `{}`, otherwise it is
        .                                           // likely that it was written on purpose.
        .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
        .                                       }
        .                                   }
        .           
        .                                   //only add braces
  203,444 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
        .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
        .                                   }
        .           
   50,861 ( 0.00%)                          if self.open_braces.is_empty() {
        .                                       // Clear up these spans to avoid suggesting them as we've found
        .                                       // properly matched delimiters so far for an entire block.
        .                                       self.matching_delim_spans.clear();
        .                                   } else {
        .                                       self.matching_delim_spans.push((
        .                                           open_brace,
        .                                           open_brace_span,
        .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
        .                               token::Eof => {
        .                                   // Silently recover, the EOF token will be seen again
        .                                   // and an error emitted then. Thus we don't pop from
        .                                   // self.open_braces here.
        .                               }
        .                               _ => {}
        .                           }
        .           
  356,027 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
        .                       }
        .                       token::CloseDelim(delim) => {
        .                           // An unexpected closing delimiter (i.e., there is no
        .                           // matching opening delimiter).
        .                           let token_str = token_to_string(&self.token);
        .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
        .                                   err.span_label(parent.1, "...matches this closing brace");
        .                               }
        .                           }
        .           
        .                           err.span_label(self.token.span, "unexpected closing delimiter");
        .                           Err(err)
        .                       }
        .                       _ => {
1,062,705 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
        .                           let mut spacing = self.bump();
  425,082 ( 0.00%)                  if !self.token.is_op() {
        .                               spacing = Alone;
        .                           }
1,275,246 ( 0.01%)                  Ok((tt, spacing))
        .                       }
        .                   }
2,107,216 ( 0.02%)      }
        .           
        .               fn bump(&mut self) -> Spacing {
2,574,290 ( 0.03%)          let (spacing, token) = self.string_reader.next_token();
1,317,352 ( 0.02%)          self.token = token;
        .                   spacing
        .               }
        .           }
        .           
   50,861 ( 0.00%)  #[derive(Default)]
        .           struct TokenStreamBuilder {
        .               buf: Vec<TreeAndSpacing>,
        .           }
        .           
        .           impl TokenStreamBuilder {
3,424,226 ( 0.04%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
1,478,648 ( 0.02%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
  111,946 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  194,707 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
        .                               self.buf.pop();
   80,364 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
        .                               return;
        .                           }
        .                       }
        .                   }
1,283,525 ( 0.01%)          self.buf.push((tree, joint))
2,107,216 ( 0.02%)      }
        .           
        .               fn into_token_stream(self) -> TokenStream {
  508,952 ( 0.01%)          TokenStream::new(self.buf)
        .               }
        .           }

1,120,322 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 55 ----------------------------------------
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
        .               pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
   44,544 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
        .               }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
  449,986 ( 0.01%)          match self {
  886,792 ( 0.01%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
        .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
      980 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
   81,904 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
  281,788 ( 0.00%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  818,922 ( 0.01%)          let alloc = match self.get_alloc(mplace)? {
1,364,870 ( 0.02%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
        .                               imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
2,093,006 ( 0.02%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
  223,174 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
  136,179 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
   90,786 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
  136,179 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
  226,965 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
3,100,266 ( 0.04%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
6,200,532 ( 0.07%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  545,948 ( 0.01%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
  715,000 ( 0.01%)              Err(val) => Ok(val),
        .                   })
3,100,266 ( 0.04%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  801,460 ( 0.01%)          if let Ok(imm) = self.try_read_immediate(op)? {
1,974,486 ( 0.02%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
2,438,678 ( 0.03%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
  221,698 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
1,995,282 ( 0.02%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
2,279,360 ( 0.03%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
2,507,296 ( 0.03%)                  return Ok(field.into());
        .                       }
        .                       Err(value) => value,
        .                   };
        .           
        .                   let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
        .                   Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
2,051,424 ( 0.02%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
  370,287 ( 0.00%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
    4,407 ( 0.00%)          let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
        .                       Operand::Immediate(Scalar::ZST.into())
        .                   } else {
        .                       M::access_local(&self, frame, local)?
        .                   };
  534,859 ( 0.01%)          Ok(OpTy { op, layout })
  329,144 ( 0.00%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
    7,570 ( 0.00%)          let op = match **place {
        .                       Place::Ptr(mplace) => Operand::Indirect(mplace),
        .                       Place::Local { frame, local } => {
   34,065 ( 0.00%)                  *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
   26,495 ( 0.00%)          Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
  290,976 ( 0.00%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
   36,372 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
  109,116 ( 0.00%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
        .                       .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
-- line 509 ----------------------------------------
-- line 510 ----------------------------------------
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
  109,116 ( 0.00%)          Ok(op)
  327,348 ( 0.00%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
  877,509 ( 0.01%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
  195,002 ( 0.00%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
  181,860 ( 0.00%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
  916,935 ( 0.01%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
        .                           self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
1,267,513 ( 0.01%)          Ok(op)
  585,006 ( 0.01%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  739,572 ( 0.01%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  308,155 ( 0.00%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
        .                       ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
        .                           Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  616,310 ( 0.01%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  554,679 ( 0.01%)      }
        .           
        .               pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  123,262 ( 0.00%)          match val {
  246,524 ( 0.00%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
        .               }
        .           
  616,310 ( 0.01%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  347,520 ( 0.00%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
  172,290 ( 0.00%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
   10,188 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
  192,315 ( 0.00%)          let op = match val_val {
    2,000 ( 0.00%)              ConstValue::ByRef { alloc, offset } => {
    2,000 ( 0.00%)                  let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
    4,000 ( 0.00%)                  Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  521,280 ( 0.01%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
    8,133 ( 0.00%)              ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
    8,133 ( 0.00%)                      self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
        .                           Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
1,294,251 ( 0.01%)          Ok(OpTy { op, layout })
  493,048 ( 0.01%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
        .               pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
-- line 638 ----------------------------------------

7,197,404 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
 8,283,408 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
 5,177,130 ( 0.06%)              .intern(kind, |kind| {
   279,846 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   559,692 ( 0.01%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
 9,318,834 ( 0.11%)      }
         .           
         .               #[inline(never)]
 2,884,912 ( 0.03%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 2,524,298 ( 0.03%)              .intern(kind, |kind| {
   473,208 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 3,245,526 ( 0.04%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 2,236,686 ( 0.03%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 1,610,474 ( 0.02%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   321,878 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   321,878 ( 0.00%)          self.data.get(&id.local_id)
 1,289,592 ( 0.01%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
     5,976 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         3 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     3,984 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    30,210 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   357,485 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    30,210 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   130,878 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    87,252 ( 0.00%)          match *qpath {
   219,516 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    42,240 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   218,130 ( 0.00%)      }
         .           
     1,035 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    10,074 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     1,035 ( 0.00%)      }
         .           
    12,989 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    27,109 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    25,978 ( 0.00%)      }
         .           
    28,320 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    28,320 ( 0.00%)      }
         .           
   149,054 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   149,054 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   149,054 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    11,755 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     2,312 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    15,732 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     7,866 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    25,244 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    12,622 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     4,164 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     2,082 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   312,786 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   156,393 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   577,408 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   288,704 ( 0.00%)      }
         .           
 2,943,222 ( 0.03%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   490,537 ( 0.01%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 2,452,685 ( 0.03%)      }
         .           
   631,809 ( 0.01%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   631,809 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
 1,263,618 ( 0.01%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    18,806 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     9,403 ( 0.00%)      }
         .           
   158,627 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   158,627 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   317,254 ( 0.00%)      }
         .           
   138,327 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   138,327 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   276,654 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    16,392 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   538,426 ( 0.01%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   550,065 ( 0.01%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   272,830 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   136,415 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   328,396 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   164,198 ( 0.00%)      }
         .           
   264,317 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   528,634 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   528,634 ( 0.01%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
     9,420 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     1,884 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,288 ( 0.00%)      }
         .           
     2,625 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       525 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     1,528 ( 0.00%)      }
         .           
     9,039 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    18,078 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    20,742 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    18,078 ( 0.00%)      }
         .           
    37,050 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    49,400 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    32,784 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    10,217 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    16,440 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     8,220 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    56,176 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    28,088 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    16,894 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     8,447 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
     7,192 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
     8,990 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     2,874 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     1,437 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     6,858 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     3,429 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     3,984 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     1,992 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     2,880 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     1,440 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        12 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         6 ( 0.00%)      }
         .           
       174 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        58 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       116 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     1,437 ( 0.00%)          &self.coercion_casts
     1,437 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     2,160 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     1,232 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     2,582 ( 0.00%)      pub fn is_identity(&self) -> bool {
     5,164 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     2,582 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
     4,870 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     2,424 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       254 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     5,164 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     7,392 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    34,978 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    79,660 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    31,864 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    63,728 ( 0.00%)      }
         .           
     4,500 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     1,500 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     6,000 ( 0.00%)      }
         .           
    25,020 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     5,004 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    35,028 ( 0.00%)      }
         .           
     6,000 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     1,500 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     7,500 ( 0.00%)      }
         .           
     1,512 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     2,688 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
       672 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        20 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         4 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        52 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
        20 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    26,520 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    13,260 ( 0.00%)          let attrs = self.get_attrs(def_id);
    56,355 ( 0.00%)          let get = |name| {
    13,260 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
        72 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
        36 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
        18 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
    66,300 ( 0.00%)          };
    19,890 ( 0.00%)          (
    19,890 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     9,945 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    26,520 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
       735 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       105 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
       840 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
       840 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 3,701,635 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 4,759,245 ( 0.05%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       539 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       616 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    57,190 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    65,360 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    80,885 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    92,440 ( 0.00%)      }
         .           
    20,615 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    26,505 ( 0.00%)      }
         .           
 1,702,512 ( 0.02%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 1,945,728 ( 0.02%)      }
         .           
        40 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    72,447 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
    16,024 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
        80 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
         .               pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
-- line 1274 ----------------------------------------
-- line 1277 ----------------------------------------
         .                   } else {
         .                       self.untracked_resolutions.cstore.def_path(id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    11,710 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
       240 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    60,228 ( 0.00%)          &*self.untracked_resolutions.cstore
    30,114 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       502 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     2,509 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     2,874 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     4,311 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     1,437 ( 0.00%)          self.sess.opts.borrowck_mode
     5,748 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
        69 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
        43 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
         .                   self.sess.crate_types().iter().any(|crate_type| {
         .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
         .                   self.mk_imm_ref(
         .                       self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
         .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
         .               }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    12,243 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     8,904 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    20,034 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
    10,017 ( 0.00%)      }
         .           
        14 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
        16 ( 0.00%)      }
         .           
 1,116,850 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 1,276,400 ( 0.01%)      }
         .           
         .               pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
         .               }
         .           
    13,804 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    15,776 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
         4 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   157,737 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
   673,989 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   333,133 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   332,678 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
   913,192 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   688,120 ( 0.01%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   290,970 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
   922,084 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   145,649 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   335,238 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
   280,643 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 3,142,711 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 1,767,260 ( 0.02%)                  self.interners.$name.intern(v, |v| {
    62,836 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 3,534,102 ( 0.04%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
10,327,987 ( 0.12%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
 9,194,697 ( 0.11%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       240 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
       180 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
        40 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
       180 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
        58 ( 0.00%)              let trait_did = stack.pop()?;
        29 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
        30 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        20 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   247,852 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 7,122,001 ( 0.08%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 4,083,772 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 2,013,328 ( 0.02%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   136,540 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 2,013,328 ( 0.02%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       855 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
       855 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     1,443 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     1,443 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         .                   match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     6,960 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
       216 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
       405 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
        27 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       108 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
        27 ( 0.00%)                          assert!(has_default);
        81 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
        27 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
       216 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       135 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       297 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    80,919 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    84,440 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
       776 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     1,729 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    66,672 ( 0.00%)          iter.intern_with(|ts| {
   392,947 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   570,391 ( 0.01%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    59,886 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     1,263 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     3,108 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     1,890 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
    12,481 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
     7,091 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
     5,472 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
     1,742 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
    12,481 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
    60,827 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    60,827 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
   121,654 ( 0.00%)      }
         .           
        18 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        54 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
        36 ( 0.00%)      }
         .           
        82 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
        82 ( 0.00%)          self.mk_place_elem(
         .                       place,
       164 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
       164 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
         .           
         .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Index(index))
         .               }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   548,343 ( 0.01%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   609,270 ( 0.01%)      }
         .           
     9,541 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     1,363 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
        70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
     5,452 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    10,904 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    14,609 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
     1,697 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    25,824 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
    91,962 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
       408 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 1,613,703 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    92,670 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   162,846 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    17,276 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
    67,937 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     3,114 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    15,021 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    23,238 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
     7,538 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     1,582 ( 0.00%)              c_variadic,
     2,154 ( 0.00%)              unsafety,
     2,020 ( 0.00%)              abi,
       580 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
     5,432 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        22 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
     7,543 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
         .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   806,117 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
         .               }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        54 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   193,412 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   386,824 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    75,377 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
 1,812,188 ( 0.02%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 1,812,188 ( 0.02%)          let hir = self.hir();
         .                   loop {
 2,687,877 ( 0.03%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,195,095 ( 0.04%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 1,911,225 ( 0.02%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 2,588,840 ( 0.03%)      }
         .           
    23,232 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   139,305 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    10,961 ( 0.00%)              let next = self.hir().get_parent_node(id);
    32,883 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    23,232 ( 0.00%)      }
         .           
     1,246 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
     7,586 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     2,321 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       712 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    22,666 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     6,476 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     6,476 ( 0.00%)          Some(&*candidates)
    25,904 ( 0.00%)      }
         .           
    44,919 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    57,753 ( 0.00%)      }
         .           
     1,197 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
        59 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     1,064 ( 0.00%)      }
         .           
    24,353 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    31,311 ( 0.00%)      }
         .           
    15,201 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    15,201 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
       870 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        87 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        19 ( 0.00%)              match self.lookup_const_stability(def_id) {
        28 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         8 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       783 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
    98,816 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 4,160,118 ( 0.05%)          E::intern_with(self, f)
   102,888 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,578,716 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,699,346 ( 0.02%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         3 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        46 ( 0.00%)                  assert!(iter.next().is_none());
   128,078 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       644 ( 0.00%)                  assert!(iter.next().is_none());
   179,726 ( 0.00%)                  f(&[t0, t1])
         .                       }
     3,808 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 1,721,138 ( 0.02%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
     9,684 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       232 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
     7,958 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
   838,753 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
   685,736 ( 0.01%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
     4,038 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
    31,187 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     1,210 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     1,210 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     1,815 ( 0.00%)                  assert!(iter.next().is_none());
    91,456 ( 0.00%)                  f(&[t0, t1])
         .                       }
     6,361 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
   960,456 ( 0.01%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   333,133 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         9 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    23,536 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 6,052,595 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .               fn default() -> SortedMap<K, V> {
        .                   SortedMap { data: Vec::new() }
        .               }
        .           }
        .           
        .           impl<K, V> SortedMap<K, V> {
        .               #[inline]
        .               pub const fn new() -> SortedMap<K, V> {
        1 ( 0.00%)          SortedMap { data: Vec::new() }
        .               }
        .           }
        .           
        .           impl<K: Ord, V> SortedMap<K, V> {
        .               /// Construct a `SortedMap` from a presorted set of elements. This is faster
        .               /// than creating an empty map and then inserting the elements individually.
        .               ///
        .               /// It is up to the caller to make sure that the elements are sorted by key
-- line 43 ----------------------------------------
-- line 45 ----------------------------------------
        .               #[inline]
        .               pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V> {
        .                   debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));
        .           
        .                   SortedMap { data: elements }
        .               }
        .           
        .               #[inline]
   91,432 ( 0.00%)      pub fn insert(&mut self, key: K, mut value: V) -> Option<V> {
        .                   match self.lookup_index_for(&key) {
        .                       Ok(index) => {
        .                           let slot = unsafe { self.data.get_unchecked_mut(index) };
        .                           mem::swap(&mut slot.1, &mut value);
        .                           Some(value)
        .                       }
        .                       Err(index) => {
        .                           self.data.insert(index, (key, value));
        .                           None
        .                       }
        .                   }
   71,584 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn remove(&mut self, key: &K) -> Option<V> {
        .                   match self.lookup_index_for(key) {
        .                       Ok(index) => Some(self.data.remove(index).1),
        .                       Err(_) => None,
        .                   }
        .               }
-- line 73 ----------------------------------------
-- line 129 ----------------------------------------
        .                   self.len() == 0
        .               }
        .           
        .               #[inline]
        .               pub fn range<R>(&self, range: R) -> &[(K, V)]
        .               where
        .                   R: RangeBounds<K>,
        .               {
2,098,523 ( 0.02%)          let (start, end) = self.range_slice_indices(range);
        .                   &self.data[start..end]
        .               }
        .           
        .               #[inline]
        .               pub fn remove_range<R>(&mut self, range: R)
        .               where
        .                   R: RangeBounds<K>,
        .               {
-- line 145 ----------------------------------------
-- line 160 ----------------------------------------
        .               /// Inserts a presorted range of elements into the map. If the range can be
        .               /// inserted as a whole in between to existing elements of the map, this
        .               /// will be faster than inserting the elements individually.
        .               ///
        .               /// It is up to the caller to make sure that the elements are sorted by key
        .               /// and that there are no duplicates.
        .               #[inline]
        .               pub fn insert_presorted(&mut self, mut elements: Vec<(K, V)>) {
    4,407 ( 0.00%)          if elements.is_empty() {
        .                       return;
        .                   }
        .           
        .                   debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));
        .           
        .                   let start_index = self.lookup_index_for(&elements[0].0);
        .           
        .                   let drain = match start_index {
        .                       Ok(index) => {
        .                           let mut drain = elements.drain(..);
        .                           self.data[index] = drain.next().unwrap();
        .                           drain
        .                       }
        .                       Err(index) => {
    8,776 ( 0.00%)                  if index == self.data.len() || elements.last().unwrap().0 < self.data[index].0 {
        .                               // We can copy the whole range without having to mix with
        .                               // existing elements.
        .                               self.data.splice(index..index, elements.drain(..));
        .                               return;
        .                           }
        .           
        .                           let mut drain = elements.drain(..);
        .                           self.data.insert(index, drain.next().unwrap());
-- line 191 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .               /// Looks up the key in `self.data` via `slice::binary_search()`.
        .               #[inline(always)]
        .               fn lookup_index_for<Q>(&self, key: &Q) -> Result<usize, usize>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Ord + ?Sized,
        .               {
5,295,270 ( 0.06%)          self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))
        .               }
        .           
        .               #[inline]
1,047,058 ( 0.01%)      fn range_slice_indices<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<K>,
        .               {
        .                   let start = match range.start_bound() {
        .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) | Err(index) => index,
        .                       },
        .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
-- line 221 ----------------------------------------
-- line 228 ----------------------------------------
        .                   let end = match range.end_bound() {
        .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) => index + 1,
        .                           Err(index) => index,
        .                       },
        .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) | Err(index) => index,
        .                       },
    7,158 ( 0.00%)              Bound::Unbounded => self.data.len(),
        .                   };
        .           
        .                   (start, end)
3,141,174 ( 0.04%)      }
        .           
        .               #[inline]
        .               pub fn contains_key<Q>(&self, key: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Ord + ?Sized,
        .               {
        .                   self.get(key).is_some()
-- line 248 ----------------------------------------
-- line 276 ----------------------------------------
        .               Q: Ord + ?Sized,
        .           {
        .               fn index_mut(&mut self, key: &Q) -> &mut Self::Output {
        .                   self.get_mut(key).expect("no entry found for key")
        .               }
        .           }
        .           
        .           impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {
   16,702 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {
        .                   let mut data: Vec<(K, V)> = iter.into_iter().collect();
        .           
        .                   data.sort_unstable_by(|&(ref k1, _), &(ref k2, _)| k1.cmp(k2));
        .                   data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);
        .           
    9,544 ( 0.00%)          SortedMap { data }
   19,088 ( 0.00%)      }
        .           }
        .           
        .           impl<K: HashStable<CTX>, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {
        .               #[inline]
        .               fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   self.data.hash_stable(ctx, hasher);
        .               }
        .           }
-- line 299 ----------------------------------------

1,868,265 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
3,753,072 ( 0.04%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
  387,720 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
      266 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
        .                       )
        .                   });
        .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
      304 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
1,251,024 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
  417,008 ( 0.00%)      Cursor::new(input).advance_token()
1,668,032 ( 0.02%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        .                   if cursor.is_eof() {
        .                       None
        .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  989,368 ( 0.01%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
        .                   | '\u{2028}' // LINE SEPARATOR
        .                   | '\u{2029}' // PARAGRAPH SEPARATOR
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
      106 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  157,340 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      106 ( 0.00%)  }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
       12 ( 0.00%)  }
        .           
        .           /// The passed string is lexically an identifier.
       25 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
        .               let mut chars = string.chars();
        .               if let Some(start) = chars.next() {
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
       35 ( 0.00%)  }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
3,336,064 ( 0.04%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
1,701,800 ( 0.02%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
   12,114 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        6 ( 0.00%)                  _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
    5,576 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
    8,030 ( 0.00%)                      let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
      730 ( 0.00%)                      if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
    5,110 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    7,960 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
    1,611 ( 0.00%)                      let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
    1,074 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
    1,074 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('"', _) => {
        .                               self.bump();
       24 ( 0.00%)                      let terminated = self.double_quoted_string();
        .                               let suffix_start = self.len_consumed();
       16 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = ByteStr { terminated };
       16 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('r', '"') | ('r', '#') => {
        .                               self.bump();
        .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  815,055 ( 0.01%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
   10,385 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
    7,848 ( 0.00%)              ';' => Semi,
  137,306 ( 0.00%)              ',' => Comma,
   10,988 ( 0.00%)              '.' => Dot,
   85,944 ( 0.00%)              '(' => OpenParen,
   85,944 ( 0.00%)              ')' => CloseParen,
    5,534 ( 0.00%)              '{' => OpenBrace,
    5,534 ( 0.00%)              '}' => CloseBrace,
   10,244 ( 0.00%)              '[' => OpenBracket,
   10,244 ( 0.00%)              ']' => CloseBracket,
        4 ( 0.00%)              '@' => At,
      910 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
      302 ( 0.00%)              '?' => Question,
   22,358 ( 0.00%)              ':' => Colon,
      174 ( 0.00%)              '$' => Dollar,
    5,596 ( 0.00%)              '=' => Eq,
    3,744 ( 0.00%)              '!' => Bang,
    1,216 ( 0.00%)              '<' => Lt,
    3,912 ( 0.00%)              '>' => Gt,
    1,244 ( 0.00%)              '-' => Minus,
   11,416 ( 0.00%)              '&' => And,
      768 ( 0.00%)              '|' => Or,
      138 ( 0.00%)              '+' => Plus,
      262 ( 0.00%)              '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
  178,353 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
   13,026 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
    8,684 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
    8,684 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
3,753,072 ( 0.04%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
    7,046 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
    7,557 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
  139,431 ( 0.00%)          self.eat_while(|c| c != '\n');
    9,063 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
       36 ( 0.00%)          let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `/***` (more than 2 stars) is not considered a doc comment.
        .                       // `/**/` is not considered a doc comment.
        .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
        .                   let mut depth = 1usize;
   62,506 ( 0.00%)          while let Some(c) = self.bump() {
        .                       match c {
      140 ( 0.00%)                  '/' if self.first() == '*' => {
        .                               self.bump();
        .                               depth += 1;
        .                           }
      114 ( 0.00%)                  '*' if self.first() == '/' => {
        .                               self.bump();
       18 ( 0.00%)                      depth -= 1;
       18 ( 0.00%)                      if depth == 0 {
        .                                   // This block comment is closed, so for a construction like "/* */ */"
        .                                   // there will be a successfully parsed block comment "/* */"
        .                                   // and " */" will be processed separately.
        .                                   break;
        .                               }
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .           
       45 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
  102,243 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
  193,860 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
   77,544 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
   77,544 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
   38,772 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
   38,772 ( 0.00%)              _ => Ident,
        .                   }
  155,088 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
    4,154 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
    2,369 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
       15 ( 0.00%)                      self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
    1,275 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
        6 ( 0.00%)              if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
    8,998 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
    1,222 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  416,157 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
  118,902 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
   11,416 ( 0.00%)          if !can_be_a_lifetime {
  176,004 ( 0.00%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
  117,336 ( 0.00%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
  234,672 ( 0.00%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
    1,566 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
    1,566 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
    1,566 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
  356,706 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
  213,872 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
        .                   loop {
  541,436 ( 0.01%)              match self.first() {
        .                           // Quotes are terminated, finish parsing.
        .                           '\'' => {
        .                               self.bump();
        .                               return true;
        .                           }
        .                           // Probably beginning of the comment, which we don't want to include
        .                           // to the error report.
        .                           '/' => break,
-- line 660 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   59,205 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
  164,040 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
      288 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
    4,350 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
    5,110 ( 0.00%)      fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
      730 ( 0.00%)          match u16::try_from(n_hashes) {
    5,110 ( 0.00%)              Ok(num) => (num, err),
        .                       // We lie about the number of hashes here :P
        .                       Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),
        .                   }
    5,840 ( 0.00%)      }
        .           
        .               fn raw_string_unvalidated(&mut self, prefix_len: usize) -> (usize, Option<RawStrError>) {
        .                   debug_assert!(self.prev() == 'r');
        .                   let start_pos = self.len_consumed();
        .                   let mut possible_terminator_offset = None;
        .                   let mut max_hashes = 0;
        .           
        .                   // Count opening '#' symbols.
        .                   let mut eaten = 0;
    1,464 ( 0.00%)          while self.first() == '#' {
        6 ( 0.00%)              eaten += 1;
        .                       self.bump();
        .                   }
        .                   let n_start_hashes = eaten;
        .           
        .                   // Check that string is started.
    2,920 ( 0.00%)          match self.bump() {
        .                       Some('"') => (),
        .                       c => {
        .                           let c = c.unwrap_or(EOF_CHAR);
        .                           return (n_start_hashes, Some(RawStrError::InvalidStarter { bad_char: c }));
        .                       }
        .                   }
        .           
        .                   // Skip the string contents and on each '#' character met, check if this is
        .                   // a raw string termination.
        .                   loop {
    6,407 ( 0.00%)              self.eat_while(|c| c != '"');
        .           
      730 ( 0.00%)              if self.is_eof() {
        .                           return (
        .                               n_start_hashes,
        .                               Some(RawStrError::NoTerminator {
        .                                   expected: n_start_hashes,
        .                                   found: max_hashes,
        .                                   possible_terminator_offset,
        .                               }),
        .                           );
-- line 749 ----------------------------------------
-- line 753 ----------------------------------------
        .                       self.bump();
        .           
        .                       // Check that amount of closing '#' symbols
        .                       // is equal to the amount of opening ones.
        .                       // Note that this will not consume extra trailing `#` characters:
        .                       // `r###"abcde"####` is lexed as a `RawStr { n_hashes: 3 }`
        .                       // followed by a `#` token.
        .                       let mut n_end_hashes = 0;
    2,928 ( 0.00%)              while self.first() == '#' && n_end_hashes < n_start_hashes {
        4 ( 0.00%)                  n_end_hashes += 1;
        .                           self.bump();
        .                       }
        .           
    1,460 ( 0.00%)              if n_end_hashes == n_start_hashes {
        .                           return (n_start_hashes, None);
        .                       } else if n_end_hashes > max_hashes {
        .                           // Keep track of possible terminators to give a hint about
        .                           // where there might be a missing terminator
        .                           possible_terminator_offset =
        .                               Some(self.len_consumed() - start_pos - n_end_hashes + prefix_len);
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
    4,070 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
    6,099 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
    3,608 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      598 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
    1,578 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
      206 ( 0.00%)      }
        .           
        .               /// Eats the float exponent. Returns true if at least one digit was met,
        .               /// and returns false otherwise.
        .               fn eat_float_exponent(&mut self) -> bool {
        .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
  132,724 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
  199,086 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        5 ( 0.00%)          self.eat_while(is_id_continue);
  265,444 ( 0.00%)      }
        .           }

5,907,732 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,317,225,752 (37.90%)  events annotated

