--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tracing --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="attributes" --cfg feature="default" --cfg feature="std" --cfg feature="tracing-attributes" -C metadata=b66c65052e4a7b63 -C extra-filename=-b66c65052e4a7b63 --out-dir /usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps --extern cfg_if=/usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps/libcfg_if-9d53a9e819e4a6be.rmeta --extern pin_project_lite=/usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps/libpin_project_lite-59182566af91ca39.rmeta --extern tracing_attributes=/usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps/libtracing_attributes-3f35820b0619e993.so --extern tracing_core=/usr/home/liquid/tmp/.tmpjn0b8r/target/debug/deps/libtracing_core-39dce036dc80510a.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tracing-0.1.29-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
481,064,897 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
19,674,502 ( 4.09%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
15,908,861 ( 3.31%)  ./malloc/malloc.c:_int_free
13,835,936 ( 2.88%)  ./elf/dl-lookup.c:do_lookup_x
13,681,758 ( 2.84%)  ./malloc/malloc.c:_int_malloc
 9,565,014 ( 1.99%)  ./malloc/malloc.c:malloc
 6,137,149 ( 1.28%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 5,081,735 ( 1.06%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,609,145 ( 0.96%)  ./malloc/malloc.c:free
 4,147,521 ( 0.86%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 4,090,465 ( 0.85%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 4,050,833 ( 0.84%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 3,403,321 ( 0.71%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 3,232,417 ( 0.67%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 3,061,355 ( 0.64%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
 2,857,338 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lint::builtin::MissingDoc as rustc_lint::passes::LateLintPass>::enter_lint_attrs
 2,850,692 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,844,842 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor as core::iter::traits::iterator::Iterator>::next
 2,782,188 ( 0.58%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 2,674,616 ( 0.56%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 2,532,605 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,429,215 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,421,381 ( 0.50%)  ./elf/do-rel.h:_dl_relocate_object
 2,378,136 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,200,694 ( 0.46%)  ./malloc/malloc.c:malloc_consolidate
 2,162,327 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 2,109,405 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 2,000,505 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 1,993,274 ( 0.41%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,901,528 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/attr/mod.rs:<rustc_lint::builtin::MissingDoc as rustc_lint::passes::LateLintPass>::enter_lint_attrs
 1,843,400 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
 1,831,456 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
 1,818,198 ( 0.38%)  ./malloc/malloc.c:realloc
 1,492,875 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
 1,485,140 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,425,679 ( 0.30%)  ./elf/dl-lookup.c:check_match
 1,362,217 ( 0.28%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,356,761 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 1,305,768 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
 1,272,237 ( 0.26%)  ./malloc/malloc.c:_int_realloc
 1,188,177 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_ast::ast::Lit>::from_lit_token
 1,179,776 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
 1,171,309 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
 1,166,730 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,104,500 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
 1,096,366 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,092,295 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,089,274 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,088,643 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   998,172 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   993,320 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   987,921 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   981,865 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<alloc::vec::Vec<(rustc_ast::tokenstream::TokenTree, rustc_ast::tokenstream::Spacing)>> as core::ops::drop::Drop>::drop
   979,052 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   971,104 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
   969,391 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next_desugared
   968,271 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:<rustc_lexer::cursor::Cursor>::advance_token
   935,047 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   930,939 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenStreamBuilder>::push
   916,017 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/quoted.rs:rustc_expand::mbe::quoted::parse
   910,388 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   900,110 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
   855,885 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   831,965 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   813,860 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lexer::cursor::Cursor>::advance_token
   797,159 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   794,489 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   776,225 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   726,987 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   706,634 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   705,859 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   701,957 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   663,624 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_parse::parser::Parser>::bump_with
   661,004 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs:core::slice::memchr::memchr_general_case
   654,174 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
   653,283 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   636,862 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<rustc_span::SourceFile> as core::ops::drop::Drop>::drop
   624,742 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   624,389 ( 0.13%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   619,824 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   616,451 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   599,645 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_ast::tokenstream::TokenStream as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   592,087 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   590,710 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   584,196 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::TokenStream as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   573,517 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   563,466 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   557,577 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   544,967 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
   544,574 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   537,856 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   532,640 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_parse::lexer::StringReader>::next_token
   530,396 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   527,217 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   525,251 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::count_names::{closure#0}
   524,392 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:<rustc_ast::ast::Lit>::from_lit_token
   524,392 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs:<rustc_ast::ast::Lit>::from_lit_token
   523,017 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   522,668 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   520,766 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::GrowableBitSet<usize>>::ensure
   518,740 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   507,732 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   488,246 ( 0.10%)  ./malloc/malloc.c:calloc
   483,356 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   482,789 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs:<rustc_lint::builtin::KeywordIdents>::check_tokens

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/attr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           
        .           use std::iter;
        .           
        .           pub struct MarkedAttrs(GrowableBitSet<AttrId>);
        .           
        .           impl MarkedAttrs {
        .               // We have no idea how many attributes there will be, so just
        .               // initiate the vectors with 0 bits. We'll grow them as necessary.
       12 ( 0.00%)      pub fn new() -> Self {
       15 ( 0.00%)          MarkedAttrs(GrowableBitSet::new_empty())
       12 ( 0.00%)      }
        .           
       56 ( 0.00%)      pub fn mark(&mut self, attr: &Attribute) {
       14 ( 0.00%)          self.0.insert(attr.id);
       56 ( 0.00%)      }
        .           
        .               pub fn is_marked(&self, attr: &Attribute) -> bool {
      307 ( 0.00%)          self.0.contains(attr.id)
      307 ( 0.00%)      }
        .           }
        .           
        .           impl NestedMetaItem {
        .               /// Returns the `MetaItem` if `self` is a `NestedMetaItem::MetaItem`.
        .               pub fn meta_item(&self) -> Option<&MetaItem> {
   12,270 ( 0.00%)          match *self {
        .                       NestedMetaItem::MetaItem(ref item) => Some(item),
        .                       _ => None,
        .                   }
      279 ( 0.00%)      }
        .           
        .               /// Returns the `Lit` if `self` is a `NestedMetaItem::Literal`s.
        .               pub fn literal(&self) -> Option<&Lit> {
        .                   match *self {
        .                       NestedMetaItem::Literal(ref lit) => Some(lit),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns `true` if this list item is a MetaItem with a name of `name`.
        .               pub fn has_name(&self, name: Symbol) -> bool {
        .                   self.meta_item().map_or(false, |meta_item| meta_item.has_name(name))
      110 ( 0.00%)      }
        .           
        .               /// For a single-segment meta item, returns its name; otherwise, returns `None`.
        3 ( 0.00%)      pub fn ident(&self) -> Option<Ident> {
        .                   self.meta_item().and_then(|meta_item| meta_item.ident())
        3 ( 0.00%)      }
        .               pub fn name_or_empty(&self) -> Symbol {
        3 ( 0.00%)          self.ident().unwrap_or_else(Ident::empty).name
        3 ( 0.00%)      }
        .           
        .               /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a
        .               /// `MetaItemKind::NameValue` variant containing a string, otherwise `None`.
        .               pub fn value_str(&self) -> Option<Symbol> {
        .                   self.meta_item().and_then(|meta_item| meta_item.value_str())
        .               }
        .           
        .               /// Returns a name and single literal value tuple of the `MetaItem`.
-- line 74 ----------------------------------------
-- line 90 ----------------------------------------
        .               /// Gets a list of inner meta items from a list `MetaItem` type.
        .               pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {
        .                   self.meta_item().and_then(|meta_item| meta_item.meta_item_list())
        .               }
        .           
        .               /// Returns `true` if the variant is `MetaItem`.
        .               pub fn is_meta_item(&self) -> bool {
        .                   self.meta_item().is_some()
       83 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` is a `MetaItem` and the meta item is a word.
        .               pub fn is_word(&self) -> bool {
        .                   self.meta_item().map_or(false, |meta_item| meta_item.is_word())
        .               }
        .           
        .               /// See [`MetaItem::name_value_literal_span`].
        .               pub fn name_value_literal_span(&self) -> Option<Span> {
        .                   self.meta_item()?.name_value_literal_span()
        .               }
        .           }
        .           
        .           impl Attribute {
        .               #[inline]
        .               pub fn has_name(&self, name: Symbol) -> bool {
2,154,752 ( 0.45%)          match self.kind {
        .                       AttrKind::Normal(ref item, _) => item.path == name,
        .                       AttrKind::DocComment(..) => false,
        .                   }
        .               }
        .           
        .               /// For a single-segment attribute, returns its name; otherwise, returns `None`.
   12,146 ( 0.00%)      pub fn ident(&self) -> Option<Ident> {
   65,850 ( 0.01%)          match self.kind {
        .                       AttrKind::Normal(ref item, _) => {
    6,640 ( 0.00%)                  if item.path.segments.len() == 1 {
    5,218 ( 0.00%)                      Some(item.path.segments[0].ident)
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                       AttrKind::DocComment(..) => None,
        .                   }
   72,876 ( 0.02%)      }
        .               pub fn name_or_empty(&self) -> Symbol {
    1,422 ( 0.00%)          self.ident().unwrap_or_else(Ident::empty).name
   20,779 ( 0.00%)      }
        .           
       20 ( 0.00%)      pub fn value_str(&self) -> Option<Symbol> {
       10 ( 0.00%)          match self.kind {
        .                       AttrKind::Normal(ref item, _) => item.meta_kind().and_then(|kind| kind.value_str()),
        .                       AttrKind::DocComment(..) => None,
        .                   }
       25 ( 0.00%)      }
        .           
    6,894 ( 0.00%)      pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {
    4,596 ( 0.00%)          match self.kind {
    4,596 ( 0.00%)              AttrKind::Normal(ref item, _) => match item.meta_kind() {
   14,056 ( 0.00%)                  Some(MetaItemKind::List(list)) => Some(list),
      290 ( 0.00%)                  _ => None,
        .                       },
        .                       AttrKind::DocComment(..) => None,
        .                   }
    9,192 ( 0.00%)      }
        .           
        .               pub fn is_word(&self) -> bool {
       12 ( 0.00%)          if let AttrKind::Normal(item, _) = &self.kind {
        .                       matches!(item.args, MacArgs::Empty)
        .                   } else {
        .                       false
        .                   }
        4 ( 0.00%)      }
        .           }
        .           
        .           impl MetaItem {
        .               /// For a single-segment meta item, returns its name; otherwise, returns `None`.
        .               pub fn ident(&self) -> Option<Ident> {
      796 ( 0.00%)          if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }
      444 ( 0.00%)      }
        .               pub fn name_or_empty(&self) -> Symbol {
      135 ( 0.00%)          self.ident().unwrap_or_else(Ident::empty).name
      135 ( 0.00%)      }
        .           
        .               // Example:
        .               //     #[attribute(name = "value")]
        .               //                 ^^^^^^^^^^^^^^
        .               pub fn name_value_literal(&self) -> Option<&Lit> {
        .                   match &self.kind {
        .                       MetaItemKind::NameValue(v) => Some(v),
        .                       _ => None,
        .                   }
        .               }
        .           
       82 ( 0.00%)      pub fn value_str(&self) -> Option<Symbol> {
      164 ( 0.00%)          match self.kind {
      110 ( 0.00%)              MetaItemKind::NameValue(ref v) => match v.kind {
       55 ( 0.00%)                  LitKind::Str(ref s, _) => Some(*s),
        .                           _ => None,
        .                       },
        .                       _ => None,
        .                   }
       82 ( 0.00%)      }
        .           
        .               pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {
      252 ( 0.00%)          match self.kind {
        .                       MetaItemKind::List(ref l) => Some(&l[..]),
        .                       _ => None,
        .                   }
       84 ( 0.00%)      }
        .           
        .               pub fn is_word(&self) -> bool {
      438 ( 0.00%)          matches!(self.kind, MetaItemKind::Word)
      219 ( 0.00%)      }
        .           
        .               pub fn has_name(&self, name: Symbol) -> bool {
        .                   self.path == name
      560 ( 0.00%)      }
        .           
        .               /// This is used in case you want the value span instead of the whole attribute. Example:
        .               ///
        .               /// ```text
        .               /// #[doc(alias = "foo")]
        .               /// ```
        .               ///
        .               /// In here, it'll return a span for `"foo"`.
-- line 213 ----------------------------------------
-- line 216 ----------------------------------------
        .               }
        .           }
        .           
        .           impl AttrItem {
        .               pub fn span(&self) -> Span {
        .                   self.args.span().map_or(self.path.span, |args_span| self.path.span.to(args_span))
        .               }
        .           
    1,072 ( 0.00%)      pub fn meta(&self, span: Span) -> Option<MetaItem> {
    1,340 ( 0.00%)          Some(MetaItem {
        .                       path: self.path.clone(),
        .                       kind: MetaItemKind::from_mac_args(&self.args)?,
        .                       span,
        .                   })
      938 ( 0.00%)      }
        .           
        .               pub fn meta_kind(&self) -> Option<MetaItemKind> {
        .                   Some(MetaItemKind::from_mac_args(&self.args)?)
        .               }
        .           }
        .           
        .           impl Attribute {
        .               pub fn is_doc_comment(&self) -> bool {
   30,304 ( 0.01%)          match self.kind {
        .                       AttrKind::Normal(..) => false,
        .                       AttrKind::DocComment(..) => true,
        .                   }
   15,152 ( 0.00%)      }
        .           
        .               pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {
        .                   match self.kind {
        .                       AttrKind::DocComment(kind, data) => Some((data, kind)),
        .                       AttrKind::Normal(ref item, _) if item.path == sym::doc => item
        .                           .meta_kind()
        .                           .and_then(|kind| kind.value_str())
        .                           .map(|data| (data, CommentKind::Line)),
-- line 251 ----------------------------------------
-- line 258 ----------------------------------------
        .                       AttrKind::DocComment(.., data) => Some(data),
        .                       AttrKind::Normal(ref item, _) if item.path == sym::doc => {
        .                           item.meta_kind().and_then(|kind| kind.value_str())
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
      400 ( 0.00%)      pub fn get_normal_item(&self) -> &AttrItem {
      800 ( 0.00%)          match self.kind {
      400 ( 0.00%)              AttrKind::Normal(ref item, _) => item,
        .                       AttrKind::DocComment(..) => panic!("unexpected doc comment"),
        .                   }
    1,200 ( 0.00%)      }
        .           
        .               pub fn unwrap_normal_item(self) -> AttrItem {
        .                   match self.kind {
        .                       AttrKind::Normal(item, _) => item,
        .                       AttrKind::DocComment(..) => panic!("unexpected doc comment"),
        .                   }
        .               }
        .           
        .               /// Extracts the MetaItem from inside this Attribute.
       92 ( 0.00%)      pub fn meta(&self) -> Option<MetaItem> {
       92 ( 0.00%)          match self.kind {
      184 ( 0.00%)              AttrKind::Normal(ref item, _) => item.meta(self.span),
        .                       AttrKind::DocComment(..) => None,
        .                   }
      138 ( 0.00%)      }
        .           
      290 ( 0.00%)      pub fn meta_kind(&self) -> Option<MetaItemKind> {
      116 ( 0.00%)          match self.kind {
        .                       AttrKind::Normal(ref item, _) => item.meta_kind(),
        .                       AttrKind::DocComment(..) => None,
        .                   }
      290 ( 0.00%)      }
        .           
        .               pub fn tokens(&self) -> AttrAnnotatedTokenStream {
        .                   match self.kind {
        .                       AttrKind::Normal(_, ref tokens) => tokens
        .                           .as_ref()
        .                           .unwrap_or_else(|| panic!("attribute is missing tokens: {:?}", self))
        .                           .create_token_stream(),
        .                       AttrKind::DocComment(comment_kind, data) => AttrAnnotatedTokenStream::from((
-- line 301 ----------------------------------------
-- line 317 ----------------------------------------
        .           }
        .           
        .           pub fn mk_name_value_item(ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {
        .               let lit = Lit::from_lit_kind(lit_kind, lit_span);
        .               let span = ident.span.to(lit_span);
        .               MetaItem { path: Path::from_ident(ident), span, kind: MetaItemKind::NameValue(lit) }
        .           }
        .           
       81 ( 0.00%)  pub fn mk_list_item(ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {
       99 ( 0.00%)      MetaItem { path: Path::from_ident(ident), span: ident.span, kind: MetaItemKind::List(items) }
       63 ( 0.00%)  }
        .           
       84 ( 0.00%)  pub fn mk_word_item(ident: Ident) -> MetaItem {
       98 ( 0.00%)      MetaItem { path: Path::from_ident(ident), span: ident.span, kind: MetaItemKind::Word }
       70 ( 0.00%)  }
        .           
       54 ( 0.00%)  pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {
       72 ( 0.00%)      NestedMetaItem::MetaItem(mk_word_item(ident))
       45 ( 0.00%)  }
        .           
    5,206 ( 0.00%)  crate fn mk_attr_id() -> AttrId {
        .               use std::sync::atomic::AtomicU32;
        .               use std::sync::atomic::Ordering;
        .           
        .               static NEXT_ATTR_ID: AtomicU32 = AtomicU32::new(0);
        .           
        .               let id = NEXT_ATTR_ID.fetch_add(1, Ordering::SeqCst);
   11,220 ( 0.00%)      assert!(id != u32::MAX);
        .               AttrId::from_u32(id)
    5,206 ( 0.00%)  }
        .           
        .           pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {
      360 ( 0.00%)      mk_attr_from_item(AttrItem { path, args, tokens: None }, None, style, span)
        .           }
        .           
      432 ( 0.00%)  pub fn mk_attr_from_item(
        .               item: AttrItem,
        .               tokens: Option<LazyTokenStream>,
        .               style: AttrStyle,
        .               span: Span,
        .           ) -> Attribute {
    7,902 ( 0.00%)      Attribute { kind: AttrKind::Normal(item, tokens), id: mk_attr_id(), style, span }
      864 ( 0.00%)  }
        .           
        .           /// Returns an inner attribute with the given value and span.
        .           pub fn mk_attr_inner(item: MetaItem) -> Attribute {
        .               mk_attr(AttrStyle::Inner, item.path, item.kind.mac_args(item.span), item.span)
        .           }
        .           
        .           /// Returns an outer attribute with the given value and span.
      180 ( 0.00%)  pub fn mk_attr_outer(item: MetaItem) -> Attribute {
      360 ( 0.00%)      mk_attr(AttrStyle::Outer, item.path, item.kind.mac_args(item.span), item.span)
      180 ( 0.00%)  }
        .           
    5,522 ( 0.00%)  pub fn mk_doc_comment(
        .               comment_kind: CommentKind,
        .               style: AttrStyle,
        .               data: Symbol,
        .               span: Span,
        .           ) -> Attribute {
   57,981 ( 0.01%)      Attribute { kind: AttrKind::DocComment(comment_kind, data), id: mk_attr_id(), style, span }
   11,044 ( 0.00%)  }
        .           
        .           pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {
        .               items.iter().any(|item| item.has_name(name))
    1,780 ( 0.00%)  }
        .           
        .           impl MetaItem {
        .               fn token_trees_and_spacings(&self) -> Vec<TreeAndSpacing> {
        .                   let mut idents = vec![];
        .                   let mut last_pos = BytePos(0_u32);
        .                   for (i, segment) in self.path.segments.iter().enumerate() {
       18 ( 0.00%)              let is_first = i == 0;
       18 ( 0.00%)              if !is_first {
        .                           let mod_sep_span =
        .                               Span::new(last_pos, segment.ident.span.lo(), segment.ident.span.ctxt(), None);
        .                           idents.push(TokenTree::token(token::ModSep, mod_sep_span).into());
        .                       }
       36 ( 0.00%)              idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());
       54 ( 0.00%)              last_pos = segment.ident.span.hi();
        .                   }
        .                   idents.extend(self.kind.token_trees_and_spacings(self.span));
        .                   idents
        .               }
        .           
        .               fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>
        .               where
        .                   I: Iterator<Item = TokenTree>,
        .               {
        .                   // FIXME: Share code with `parse_path`.
   25,488 ( 0.01%)          let path = match tokens.next().map(TokenTree::uninterpolate) {
        .                       Some(TokenTree::Token(Token {
    6,372 ( 0.00%)                  kind: kind @ (token::Ident(..) | token::ModSep),
    3,186 ( 0.00%)                  span,
        .                       })) => 'arm: {
    9,558 ( 0.00%)                  let mut segments = if let token::Ident(name, _) = kind {
   14,604 ( 0.00%)                      if let Some(TokenTree::Token(Token { kind: token::ModSep, .. })) = tokens.peek()
        .                               {
      106 ( 0.00%)                          tokens.next();
      530 ( 0.00%)                          vec![PathSegment::from_ident(Ident::new(name, span))]
        .                               } else {
        .                                   break 'arm Path::from_ident(Ident::new(name, span));
        .                               }
        .                           } else {
        .                               vec![PathSegment::path_root(span)]
        .                           };
        .                           loop {
      636 ( 0.00%)                      if let Some(TokenTree::Token(Token { kind: token::Ident(name, _), span })) =
        .                                   tokens.next().map(TokenTree::uninterpolate)
        .                               {
        .                                   segments.push(PathSegment::from_ident(Ident::new(name, span)));
        .                               } else {
        .                                   return None;
        .                               }
      138 ( 0.00%)                      if let Some(TokenTree::Token(Token { kind: token::ModSep, .. })) = tokens.peek()
        .                               {
        .                                   tokens.next();
        .                               } else {
        .                                   break;
        .                               }
        .                           }
      530 ( 0.00%)                  let span = span.with_hi(segments.last().unwrap().ident.span.hi());
      530 ( 0.00%)                  Path { span, segments, tokens: None }
        .                       }
        .                       Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {
        .                           token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),
        .                           token::Nonterminal::NtPath(ref path) => path.clone(),
        .                           _ => return None,
        .                       },
        .                       _ => return None,
    6,372 ( 0.00%)          };
        .                   let list_closing_paren_pos = tokens.peek().map(|tt| tt.span().hi());
    3,186 ( 0.00%)          let kind = MetaItemKind::from_tokens(tokens)?;
   12,618 ( 0.00%)          let hi = match kind {
    5,260 ( 0.00%)              MetaItemKind::NameValue(ref lit) => lit.span.hi(),
      189 ( 0.00%)              MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(path.span.hi()),
    1,479 ( 0.00%)              _ => path.span.hi(),
        .                   };
   14,818 ( 0.00%)          let span = path.span.with_hi(hi);
   95,580 ( 0.02%)          Some(MetaItem { path, kind, span })
        .               }
        .           }
        .           
        .           impl MetaItemKind {
        .               pub fn value_str(&self) -> Option<Symbol> {
       30 ( 0.00%)          match self {
       15 ( 0.00%)              MetaItemKind::NameValue(ref v) => match v.kind {
       10 ( 0.00%)                  LitKind::Str(ref s, _) => Some(*s),
        .                           _ => None,
        .                       },
        .                       _ => None,
        .                   }
        .               }
        .           
      240 ( 0.00%)      pub fn mac_args(&self, span: Span) -> MacArgs {
      122 ( 0.00%)          match self {
       28 ( 0.00%)              MetaItemKind::Word => MacArgs::Empty,
        .                       MetaItemKind::NameValue(lit) => MacArgs::Eq(span, lit.to_token()),
        .                       MetaItemKind::List(list) => {
        .                           let mut tts = Vec::new();
        .                           for (i, item) in list.iter().enumerate() {
       36 ( 0.00%)                      if i > 0 {
        .                                   tts.push(TokenTree::token(token::Comma, span).into());
        .                               }
       54 ( 0.00%)                      tts.extend(item.token_trees_and_spacings())
        .                           }
       80 ( 0.00%)                  MacArgs::Delimited(
        .                               DelimSpan::from_single(span),
        .                               MacDelimiter::Parenthesis,
        .                               TokenStream::new(tts),
        .                           )
        .                       }
        .                   }
      270 ( 0.00%)      }
        .           
        .               fn token_trees_and_spacings(&self, span: Span) -> Vec<TreeAndSpacing> {
       54 ( 0.00%)          match *self {
        .                       MetaItemKind::Word => vec![],
        .                       MetaItemKind::NameValue(ref lit) => {
        .                           vec![
        .                               TokenTree::token(token::Eq, span).into(),
        .                               TokenTree::Token(lit.to_token()).into(),
        .                           ]
        .                       }
        .                       MetaItemKind::List(ref list) => {
-- line 501 ----------------------------------------
-- line 513 ----------------------------------------
        .                                   TokenStream::new(tokens),
        .                               )
        .                               .into(),
        .                           ]
        .                       }
        .                   }
        .               }
        .           
   17,368 ( 0.00%)      fn list_from_tokens(tokens: TokenStream) -> Option<MetaItemKind> {
        .                   let mut tokens = tokens.into_trees().peekable();
        .                   let mut result = Vec::new();
    5,357 ( 0.00%)          while tokens.peek().is_some() {
    9,558 ( 0.00%)              let item = NestedMetaItem::from_tokens(&mut tokens)?;
   25,488 ( 0.01%)              result.push(item);
   14,679 ( 0.00%)              match tokens.next() {
        .                           None | Some(TokenTree::Token(Token { kind: token::Comma, .. })) => {}
        .                           _ => return None,
        .                       }
        .                   }
   15,197 ( 0.00%)          Some(MetaItemKind::List(result))
   17,368 ( 0.00%)      }
        .           
        .               fn name_value_from_tokens(
        .                   tokens: &mut impl Iterator<Item = TokenTree>,
        .               ) -> Option<MetaItemKind> {
   13,150 ( 0.00%)          match tokens.next() {
        .                       Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {
        .                           MetaItemKind::name_value_from_tokens(&mut inner_tokens.trees())
        .                       }
   15,780 ( 0.00%)              Some(TokenTree::Token(token)) => {
    2,630 ( 0.00%)                  Lit::from_token(&token).ok().map(MetaItemKind::NameValue)
        .                       }
        .                       _ => None,
        .                   }
   10,520 ( 0.00%)      }
        .           
        .               fn from_mac_args(args: &MacArgs) -> Option<MetaItemKind> {
   16,523 ( 0.00%)          match args {
        .                       MacArgs::Delimited(_, MacDelimiter::Parenthesis, tokens) => {
    4,216 ( 0.00%)                  MetaItemKind::list_from_tokens(tokens.clone())
        .                       }
        .                       MacArgs::Delimited(..) => None,
      948 ( 0.00%)              MacArgs::Eq(_, token) => Lit::from_token(token).ok().map(MetaItemKind::NameValue),
        .                       MacArgs::Empty => Some(MetaItemKind::Word),
        .                   }
        .               }
        .           
        .               fn from_tokens(
        .                   tokens: &mut iter::Peekable<impl Iterator<Item = TokenTree>>,
        .               ) -> Option<MetaItemKind> {
   14,338 ( 0.00%)          match tokens.peek() {
        .                       Some(TokenTree::Delimited(_, token::Paren, inner_tokens)) => {
      126 ( 0.00%)                  let inner_tokens = inner_tokens.clone();
        .                           tokens.next();
      189 ( 0.00%)                  MetaItemKind::list_from_tokens(inner_tokens)
        .                       }
        .                       Some(TokenTree::Delimited(..)) => None,
        .                       Some(TokenTree::Token(Token { kind: token::Eq, .. })) => {
        .                           tokens.next();
        .                           MetaItemKind::name_value_from_tokens(tokens)
        .                       }
      493 ( 0.00%)              _ => Some(MetaItemKind::Word),
        .                   }
        .               }
        .           }
        .           
        .           impl NestedMetaItem {
        .               pub fn span(&self) -> Span {
      888 ( 0.00%)          match *self {
        .                       NestedMetaItem::MetaItem(ref item) => item.span,
        .                       NestedMetaItem::Literal(ref lit) => lit.span,
        .                   }
      222 ( 0.00%)      }
        .           
      162 ( 0.00%)      fn token_trees_and_spacings(&self) -> Vec<TreeAndSpacing> {
       36 ( 0.00%)          match *self {
        .                       NestedMetaItem::MetaItem(ref item) => item.token_trees_and_spacings(),
        .                       NestedMetaItem::Literal(ref lit) => vec![TokenTree::Token(lit.to_token()).into()],
        .                   }
      144 ( 0.00%)      }
        .           
   28,674 ( 0.01%)      fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<NestedMetaItem>
        .               where
        .                   I: Iterator<Item = TokenTree>,
        .               {
    9,558 ( 0.00%)          match tokens.peek() {
    6,372 ( 0.00%)              Some(TokenTree::Token(token))
    9,558 ( 0.00%)                  if let Ok(lit) = Lit::from_token(token) =>
        .                       {
        .                           tokens.next();
        .                           return Some(NestedMetaItem::Literal(lit));
        .                       }
        .                       Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {
        .                           let inner_tokens = inner_tokens.clone();
        .                           tokens.next();
        .                           return NestedMetaItem::from_tokens(&mut inner_tokens.into_trees().peekable());
        .                       }
        .                       _ => {}
        .                   }
        .                   MetaItem::from_tokens(tokens).map(NestedMetaItem::MetaItem)
   25,488 ( 0.01%)      }
        .           }

   58,876 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/attr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
    100 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
    100 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    200 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 13,475 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 91,630 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  8,085 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 16,170 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    255 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 32,329 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    159 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    220 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 13,072 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 16,407 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 24,376 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 24,418 ( 0.01%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
  1,287 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
    338 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    216 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
    269 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  2,695 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  8,085 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  2,695 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  2,493 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  3,047 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  1,385 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,939 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    222 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    111 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    776 ( 0.00%)          self
    333 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  5,206 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  6,994 ( 0.00%)              let (value, subst) =
    677 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 10,373 ( 0.00%)              f(infcx, value, subst)
      .                   })
  5,601 ( 0.00%)      }
      .           
 13,819 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  7,398 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
115,726 ( 0.02%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  2,695 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  2,695 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 14,675 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     99 ( 0.00%)          let InferOk { value, obligations } = self;
    422 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  2,297 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  9,188 ( 0.00%)          self.obligations
  2,297 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  2,692 ( 0.00%)      }
      .           
 20,464 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 23,022 ( 0.00%)          t.fold_with(&mut self.freshener())
 23,022 ( 0.00%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     38 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     76 ( 0.00%)          match *ty.kind() {
     19 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     76 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
     76 ( 0.00%)      }
      .           
  2,558 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  2,558 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 11,744 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 11,744 ( 0.00%)      }
      .           
    444 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    222 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    222 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     38 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
     20 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    777 ( 0.00%)      }
      .           
  5,241 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 21,116 ( 0.00%)          CombineFields {
      .                       infcx: self,
 52,790 ( 0.01%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
  5,241 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    936 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 27,588 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
 82,764 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 13,794 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
 55,176 ( 0.01%)      }
      .           
 48,257 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  4,387 ( 0.00%)              undo_snapshot,
  4,387 ( 0.00%)              region_constraints_snapshot,
  4,387 ( 0.00%)              universe,
  4,387 ( 0.00%)              was_in_snapshot,
  8,774 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  4,387 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
141,105 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  9,407 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
  9,407 ( 0.00%)              was_in_snapshot,
 18,814 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  6,377 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  7,887 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    717 ( 0.00%)          let snapshot = self.start_snapshot();
  2,588 ( 0.00%)          let r = f(&snapshot);
  5,019 ( 0.00%)          self.commit_from(snapshot);
  4,204 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 58,886 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 72,432 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 10,635 ( 0.00%)          let snapshot = self.start_snapshot();
 33,367 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  9,649 ( 0.00%)          match r {
      .                       Ok(_) => {
 62,823 ( 0.01%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 12,717 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
 58,375 ( 0.01%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 22,033 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 25,484 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  5,797 ( 0.00%)          let snapshot = self.start_snapshot();
  9,501 ( 0.00%)          let r = f(&snapshot);
 27,811 ( 0.01%)          self.rollback_to("probe", snapshot);
  4,143 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    342 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    456 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
     76 ( 0.00%)          let snapshot = self.start_snapshot();
     38 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
     76 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
    152 ( 0.00%)          let r = f(&snapshot);
    342 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
    456 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  2,230 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  4,460 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  3,345 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
     36 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     27 ( 0.00%)      }
      .           
  1,692 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
  1,269 ( 0.00%)      }
      .           
  9,380 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  8,442 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
      .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      .                   self.subtype_predicate(cause, param_env, subtype_predicate)
      .               }
      .           
     60 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
      5 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      5 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     40 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     10 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     10 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      .                       let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      .                       let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
     45 ( 0.00%)      }
      .           
  2,904 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
  2,420 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
  1,936 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     11 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     22 ( 0.00%)      }
      .           
  1,790 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  8,950 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  2,685 ( 0.00%)      }
      .           
  1,784 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  6,262 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  2,676 ( 0.00%)      }
      .           
    126 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    693 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     63 ( 0.00%)          self.tcx.mk_ty_var(vid)
    189 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
     40 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
     24 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
     32 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  1,219 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 28,227 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  2,438 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 12,046 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 78,299 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 30,115 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 18,069 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  1,706 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  2,559 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    910 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  1,365 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  2,466 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  4,932 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     29 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
    235 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     58 ( 0.00%)      }
      .           
 18,296 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  9,519 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
    958 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  5,316 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  6,645 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  1,329 ( 0.00%)                              param.name,
  1,329 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  1,329 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
-- line 1196 ----------------------------------------
-- line 1202 ----------------------------------------
      .                               });
      .                           self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
      .               }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  3,609 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 17,863 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  2,406 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    238 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  7,775 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    357 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  8,099 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 21,983 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  1,157 ( 0.00%)              assert!(
  3,471 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  1,157 ( 0.00%)          };
      .           
      .                   let region_rels =
  1,157 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 10,413 ( 0.00%)          let (lexical_region_resolutions, errors) =
 27,768 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  4,628 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  1,157 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 10,413 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 11,570 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  2,314 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  3,471 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  2,314 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  5,785 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  2,196 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    555 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  2,109 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    111 ( 0.00%)              .into_infos_and_data();
    111 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    888 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    500 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  1,500 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  1,750 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 18,036 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,056 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  1,584 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
    760 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,089 ( 0.00%)          if !value.needs_infer() {
 20,279 ( 0.00%)              return value; // Avoid duplicated subst-folding.
      .                   }
 15,770 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 19,844 ( 0.00%)          value.fold_with(&mut r)
    684 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
    828 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 12,495 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 20,034 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    552 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
  1,080 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
    405 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  2,295 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    945 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    196 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    392 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    294 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 37,341 ( 0.01%)          self.universe.get()
 10,608 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
     98 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
     98 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
     98 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
154,104 ( 0.03%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 73,326 ( 0.02%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
 33,052 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
    276 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
     87 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
173,367 ( 0.04%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
  9,833 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    283 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    283 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      6 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  2,601 ( 0.00%)          match *ty.kind() {
    578 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 30,214 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
     16 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      8 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      .                       self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
      .                           .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
     20 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      2 ( 0.00%)          self.cause.span
      .               }
      .           
      .               pub fn types(
      .                   cause: &ObligationCause<'tcx>,
      .                   a_is_expected: bool,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> TypeTrace<'tcx> {
      .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
      .               }
      .           }
      .           
      .           impl<'tcx> SubregionOrigin<'tcx> {
      .               pub fn span(&self) -> Span {
      5 ( 0.00%)          match *self {
      1 ( 0.00%)              Subtype(ref a) => a.span(),
      .                       RelateObjectBound(a) => a,
      .                       RelateParamBound(a, ..) => a,
      .                       RelateRegionParamBound(a) => a,
      .                       Reborrow(a) => a,
      .                       ReborrowUpvar(a, _) => a,
      .                       DataBorrowed(_, a) => a,
      .                       ReferenceOutlivesReferent(_, a) => a,
      .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  4,023 ( 0.00%)          match *cause.code() {
    578 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  2,890 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

110,683 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   29,875 ( 0.01%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   36,394 ( 0.01%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   80,308 ( 0.02%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    8,520 ( 0.00%)          i += 2
        .               }
        .           
   36,394 ( 0.01%)      if i < count {
   22,545 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  326,574 ( 0.07%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
2,125,097 ( 0.44%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  628,227 ( 0.13%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
   84,519 ( 0.02%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   31,279 ( 0.01%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   31,279 ( 0.01%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  312,790 ( 0.07%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  250,232 ( 0.05%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  281,511 ( 0.06%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  145,935 ( 0.03%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  125,116 ( 0.03%)          self.processed += BUFFER_SIZE;
   62,558 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    8,013 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
   97,642 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   35,660 ( 0.01%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   17,853 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   12,426 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
    8,130 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    1,626 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    4,878 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    1,626 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    3,252 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   12,749 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   14,375 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   25,498 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    3,252 ( 0.00%)          let input_left = length - processed;
      903 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      462 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      462 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      462 ( 0.00%)              self.state.v0 ^= elem;
      924 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    1,626 ( 0.00%)          self.nbuf = extra_bytes_left;
    8,130 ( 0.00%)          self.processed += nbuf + processed;
    9,756 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
    7,812 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   10,416 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
    7,516 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    7,516 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
    7,516 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    5,208 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    2,287 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
    7,495 ( 0.00%)          let length = self.processed + self.nbuf;
    5,206 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    2,603 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    2,603 ( 0.00%)          state.v0 ^= b;
        .           
    2,603 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
    8,022 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    2,814 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    2,814 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,130,405 ( 0.23%)          compress!(state);
1,226,332 ( 0.25%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   16,040 ( 0.00%)          compress!(state);
   16,040 ( 0.00%)          compress!(state);
   16,040 ( 0.00%)          compress!(state);
   13,438 ( 0.00%)          compress!(state);
        .               }
        .           }

  143,530 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .           use std::collections::hash_map::Entry::{Occupied, Vacant};
      .           use std::mem;
      .           use std::ops::{Deref, DerefMut};
      .           
      .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
      .           
      .           /// Either a sequence of token trees or a single one. This is used as the representation of the
      .           /// sequence of tokens that make up a matcher.
 39,994 ( 0.01%)  #[derive(Clone)]
      .           enum TokenTreeOrTokenTreeSlice<'tt> {
    759 ( 0.00%)      Tt(TokenTree),
  8,547 ( 0.00%)      TtSeq(&'tt [TokenTree]),
      .           }
      .           
      .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
      .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
      .               /// will not recursively descend into subtrees).
      .               fn len(&self) -> usize {
117,861 ( 0.02%)          match *self {
 11,820 ( 0.00%)              TtSeq(ref v) => v.len(),
      .                       Tt(ref tt) => tt.len(),
      .                   }
      .               }
      .           
      .               /// The `index`-th token tree of `self`.
      .               fn get_tt(&self, index: usize) -> TokenTree {
 15,997 ( 0.00%)          match *self {
 19,004 ( 0.00%)              TtSeq(ref v) => v[index].clone(),
 46,766 ( 0.01%)              Tt(ref tt) => tt.get_tt(index),
      .                   }
      .               }
      .           }
      .           
      .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
      .           ///
      .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
      .           /// descended into.
  5,038 ( 0.00%)  #[derive(Clone)]
      .           struct MatcherTtFrame<'tt> {
      .               /// The "parent" matcher that we are descending into.
      .               elts: TokenTreeOrTokenTreeSlice<'tt>,
      .               /// The position of the "dot" in `elts` at the time we descended.
  2,519 ( 0.00%)      idx: usize,
      .           }
      .           
      .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
      .           
      .           /// Represents a single "position" (aka "matcher position", aka "item"), as
      .           /// described in the module documentation.
      .           ///
      .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
      .           ///   position refers to.
      .           ///
      .           /// It is important to distinguish these two lifetimes because we have a
      .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
      .           /// that is considered to possibly access the data from its elements (it lacks
      .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
      .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
      .           /// lifetime. By separating `'tt` from `'root`, we can show that.
197,071 ( 0.04%)  #[derive(Clone)]
      .           struct MatcherPos<'root, 'tt> {
      .               /// The token or sequence of tokens that make up the matcher
      .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
      .           
      .               /// The position of the "dot" in this matcher
  4,193 ( 0.00%)      idx: usize,
      .           
      .               /// For each named metavar in the matcher, we keep track of token trees matched against the
      .               /// metavar by the black box parser. In particular, there may be more than one match per
      .               /// metavar if we are in a repetition (each repetition matches each of the variables).
      .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
      .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
      .               /// the current position of the `self` matcher position in the shared `matches` list.
      .               ///
      .               /// Also, note that while we are descending into a sequence, matchers are given their own
      .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
      .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
      .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
      .               /// wants the shared `matches`, one should use `up.matches`.
 16,772 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
      .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
      .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
      .               /// to `matches[match_lo]`.
  4,193 ( 0.00%)      match_lo: usize,
      .               /// The position in `matches` corresponding to the metavar we are currently trying to match
      .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
      .               match_cur: usize,
      .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
      .               /// in this matcher.
  4,193 ( 0.00%)      match_hi: usize,
      .           
      .               // The following fields are used if we are matching a repetition. If we aren't, they should be
      .               // `None`.
      .               /// The KleeneOp of this sequence if we are in a repetition.
  4,193 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
      .           
      .               /// The separator if we are in a repetition.
      .               sep: Option<Token>,
      .           
      .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
      .               /// before we enter the sequence.
  8,386 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
      .           
      .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
      .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
      .               /// comment...
      .               ///
      .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
      .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
      .               /// that where the bottom of the stack is the outermost matcher.
      .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
      .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
      .           }
      .           
      .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
      .               /// Adds `m` as a named match for the `idx`-th metavar.
      .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
 28,596 ( 0.01%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
      .                   matches.push(m);
      .               }
      .           }
      .           
      .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
      .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
      .           // on the stack is also slow, because MatcherPos is quite a large type and
      .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
      .           // and this type is used to encapsulate both cases.
      .           enum MatcherPosHandle<'root, 'tt> {
      .               Ref(&'root mut MatcherPos<'root, 'tt>),
      .               Box(Box<MatcherPos<'root, 'tt>>),
      .           }
      .           
      .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
      .               // This always produces a new Box.
 16,772 ( 0.00%)      fn clone(&self) -> Self {
  8,386 ( 0.00%)          MatcherPosHandle::Box(match *self {
  2,451 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
      .                       MatcherPosHandle::Box(ref b) => b.clone(),
      .                   })
 25,158 ( 0.01%)      }
      .           }
      .           
      .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
      .               type Target = MatcherPos<'root, 'tt>;
      .               fn deref(&self) -> &Self::Target {
      .                   match *self {
      .                       MatcherPosHandle::Ref(ref r) => r,
      .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
      .           
      .           /// A `ParseResult` where the `Success` variant contains a mapping of
      .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
      .           /// of metavars to the token trees they bind to.
      .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
      .           
      .           /// Count how many metavars are named in the given matcher `ms`.
      .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
115,448 ( 0.02%)      ms.iter().fold(0, |count, elt| {
 57,724 ( 0.01%)          count
173,172 ( 0.04%)              + match *elt {
 13,880 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
  8,023 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
      .                           TokenTree::MetaVar(..) => 0,
      .                           TokenTree::MetaVarDecl(..) => 1,
      .                           TokenTree::Token(..) => 0,
      .                       }
144,310 ( 0.03%)      })
      .           }
      .           
      .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
      .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
  8,323 ( 0.00%)      if len == 0 {
      .                   vec![]
      .               } else {
      .                   let empty_matches = Lrc::new(SmallVec::new());
      .                   vec![empty_matches; len]
      .               }
      .               .into_boxed_slice()
      .           }
      .           
      .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
      .           /// matcher `ms`.
      .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
      .               let match_idx_hi = count_names(ms);
      .               let matches = create_matches(match_idx_hi);
 31,425 ( 0.01%)      MatcherPos {
      .                   // Start with the top level matcher given to us
      .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
      .                   // The "dot" is before the first token of the matcher
      .                   idx: 0,
      .           
      .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
      .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
      .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
      .           /// particular token tree.
      .           ///
      .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
      .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
      .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
      .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
      .           /// only on the nesting depth of `ast::TTSeq`s in the originating
      .           /// token tree it was derived from.
  1,550 ( 0.00%)  #[derive(Debug, Clone)]
      .           crate enum NamedMatch {
      .               MatchedSeq(Lrc<NamedMatchVec>),
      .               MatchedNonterminal(Lrc<Nonterminal>),
      .           }
      .           
      .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
      .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
      .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
      .               sess: &ParseSess,
      .               ms: &[TokenTree],
      .               mut res: I,
      .           ) -> NamedParseResult {
      .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
      .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
      .               // binding, then there is an error. If it does, then we insert the binding into the
      .               // `NamedParseResult`.
 19,459 ( 0.00%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
      .                   sess: &ParseSess,
      .                   m: &TokenTree,
      .                   res: &mut I,
      .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               ) -> Result<(), (rustc_span::Span, String)> {
  9,941 ( 0.00%)          match *m {
      .                       TokenTree::Sequence(_, ref seq) => {
    439 ( 0.00%)                  for next_m in &seq.tts {
  3,846 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
      .                           }
      .                       }
      .                       TokenTree::Delimited(_, ref delim) => {
    344 ( 0.00%)                  for next_m in &delim.tts {
  2,442 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
      .                           }
      .                       }
      .                       TokenTree::MetaVarDecl(span, _, None) => {
      .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
      .                               return Err((span, "missing fragment specifier".to_string()));
      .                           }
      .                       }
  3,288 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
  2,192 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
      .                       {
      .                           Vacant(spot) => {
      .                               spot.insert(res.next().unwrap());
      .                           }
      .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
      .                       },
      .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
      .                   }
      .           
  1,769 ( 0.00%)          Ok(())
 14,152 ( 0.00%)      }
      .           
      .               let mut ret_val = FxHashMap::default();
      .               for m in ms {
  6,403 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
      .                       Ok(_) => {}
      .                       Err((sp, msg)) => return Error(sp, msg),
      .                   }
      .               }
      .           
  1,143 ( 0.00%)      Success(ret_val)
      .           }
      .           
      .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
      .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
 45,040 ( 0.01%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
  1,422 ( 0.00%)          ident1.name == ident2.name && is_raw1 == is_raw2
 51,443 ( 0.01%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
      .                   ident1.name == ident2.name
      .               } else {
 21,688 ( 0.00%)          t1.kind == t2.kind
      .               }
      .           }
      .           
      .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
      .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
      .           ///
      .           /// For more info about the how this happens, see the module-level doc comments and the inline
      .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
      .               sess: &ParseSess,
      .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
      .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
      .               token: &Token,
      .           ) -> ParseResult<()> {
      .               // Pop items from `cur_items` until it is empty.
 74,424 ( 0.02%)      while let Some(mut item) = cur_items.pop() {
      .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
      .                   // delimited submatcher into which we already descended. In backtracking out again, we need
      .                   // to advance the "dot" past the delimiters in the outer matcher.
234,121 ( 0.05%)          while item.idx >= item.top_elts.len() {
  1,538 ( 0.00%)              match item.stack.pop() {
      .                           Some(MatcherTtFrame { elts, idx }) => {
  6,921 ( 0.00%)                      item.top_elts = elts;
  3,076 ( 0.00%)                      item.idx = idx + 1;
      .                           }
      .                           None => break,
      .                       }
      .                   }
      .           
      .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
      .                   // the matcher (`len`).
      .                   let idx = item.idx;
      .                   let len = item.top_elts.len();
      .           
      .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
 45,179 ( 0.01%)          if idx >= len {
      .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
      .                       // then we could be at the end of a sequence or at the beginning of the next
      .                       // repetition.
  4,713 ( 0.00%)              if item.up.is_some() {
      .                           // At this point, regardless of whether there is a separator, we should add all
      .                           // matches from the complete repetition of the sequence to the shared, top-level
      .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
      .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
      .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
      .                           // matcher is also advanced sufficiently.
      .                           //
      .                           // NOTE: removing the condition `idx == len` allows trailing separators.
  6,770 ( 0.00%)                  if idx == len {
      .                               // Get the `up` matcher
      .                               let mut new_pos = item.up.clone().unwrap();
      .           
      .                               // Add matches from this repetition to the `matches` of `up`
  6,078 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
 15,625 ( 0.00%)                          let sub = item.matches[idx].clone();
  9,375 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
      .                               }
      .           
      .                               // Move the "dot" past the repetition in `up`
  5,747 ( 0.00%)                      new_pos.match_cur = item.match_hi;
 18,234 ( 0.00%)                      new_pos.idx += 1;
      .                               cur_items.push(new_pos);
      .                           }
      .           
      .                           // Check if we need a separator.
  3,039 ( 0.00%)                  if idx == len && item.sep.is_some() {
      .                               // We have a separator, and it is the current token. We can advance past the
      .                               // separator token.
    740 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
  2,422 ( 0.00%)                          item.idx += 1;
      .                                   next_items.push(item);
      .                               }
      .                           }
      .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
      .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
  3,015 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
  5,974 ( 0.00%)                      item.match_cur = item.match_lo;
 11,948 ( 0.00%)                      item.idx = 0;
      .                               cur_items.push(item);
      .                           }
      .                       }
      .                       // If we are not in a repetition, then being at the end of a matcher means that we have
      .                       // reached the potential end of the input.
      .                       else {
      .                           eof_items.push(item);
      .                       }
      .                   }
      .                   // We are in the middle of a matcher.
      .                   else {
      .                       // Look at what token in the matcher we are trying to match the current token (`token`)
      .                       // against. Depending on that, we may generate new items.
102,319 ( 0.02%)              match item.top_elts.get_tt(idx) {
      .                           // Need to descend into a sequence
  4,673 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
      .                               // Examine the case where there are 0 matches of this sequence. We are
      .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
      .                               // result in a "no rules expected token" error by virtue of this matcher not
      .                               // working.
  2,038 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
      .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
      .                               {
  1,952 ( 0.00%)                          let mut new_item = item.clone();
  3,904 ( 0.00%)                          new_item.match_cur += seq.num_captures;
  4,880 ( 0.00%)                          new_item.idx += 1;
  5,856 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
  2,043 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
      .                                   }
      .                                   cur_items.push(new_item);
      .                               }
      .           
  1,019 ( 0.00%)                      let matches = create_matches(item.matches.len());
 12,228 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
  1,019 ( 0.00%)                          stack: smallvec![],
      .                                   sep: seq.separator.clone(),
  1,019 ( 0.00%)                          seq_op: Some(seq.kleene.op),
      .                                   idx: 0,
  5,095 ( 0.00%)                          matches,
  2,038 ( 0.00%)                          match_lo: item.match_cur,
      .                                   match_cur: item.match_cur,
  2,038 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
      .                                   up: Some(item),
  7,133 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
      .                               })));
      .                           }
      .           
      .                           // We need to match a metavar (but the identifier is invalid)... this is an error
      .                           TokenTree::MetaVarDecl(span, _, None) => {
      .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
      .                                   return Error(span, "missing fragment specifier".to_string());
      .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
      .                           // We need to match a metavar with a valid ident... call out to the black-box
      .                           // parser by adding an item to `bb_items`.
      .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
      .                               // Built-in nonterminals never start with these tokens, so we can eliminate
      .                               // them from consideration.
      .                               //
      .                               // We use the span of the metavariable declaration to determine any
      .                               // edition-specific matching behavior for non-terminals.
 19,890 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
      .                                   bb_items.push(item);
      .                               }
      .                           }
      .           
      .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
      .                           // push the current matcher onto a stack and push a new item containing the
      .                           // submatcher onto `cur_items`.
      .                           //
      .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
      .                           // we pop the stack to backtrack out of the descent.
  4,310 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
      .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
      .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    862 ( 0.00%)                      let idx = item.idx;
  6,034 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
  3,448 ( 0.00%)                      item.idx = 0;
      .                               cur_items.push(item);
      .                           }
      .           
      .                           // We just matched a normal token. We can just advance the parser.
 33,675 ( 0.01%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
 27,573 ( 0.01%)                      item.idx += 1;
      .                               next_items.push(item);
      .                           }
      .           
      .                           // There was another token that was not `token`... This means we can't add any
      .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
      .                           // `cur_items` end up doing this. There may still be some other matchers that do
      .                           // end up working out.
      .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
      .                       }
 73,189 ( 0.02%)          }
 26,062 ( 0.01%)      }
      .           
      .               // Yay a successful parse (so far)!
      .               Success(())
      .           }
      .           
      .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
      .           /// stream from the given `parser` against it and return the match.
 20,950 ( 0.00%)  pub(super) fn parse_tt(
      .               parser: &mut Cow<'_, Parser<'_>>,
      .               ms: &[TokenTree],
      .               macro_name: Ident,
      .           ) -> NamedParseResult {
      .               // A queue of possible matcher positions. We initialize it with the matcher position in which
      .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
      .               // processes all of these possible matcher positions and produces possible next positions into
      .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
      .               // and we start over again.
      .               //
      .               // This MatcherPos instance is allocated on the stack. All others -- and
      .               // there are frequently *no* others! -- are allocated on the heap.
      .               let mut initial = initial_matcher_pos(ms);
 10,475 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
      .               let mut next_items = Vec::new();
      .           
      .               loop {
      .                   // Matcher positions black-box parsed by parser.rs (`parser`)
      .                   let mut bb_items = SmallVec::new();
      .           
      .                   // Matcher positions that would be valid if the macro invocation was over now
      .                   let mut eof_items = SmallVec::new();
  9,381 ( 0.00%)          assert!(next_items.is_empty());
      .           
      .                   // Process `cur_items` until either we have finished the input or we need to get some
      .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
      .                   // bunch of possible next matcher positions in `next_items`.
      .                   match inner_parse_loop(
      .                       parser.sess,
      .                       &mut cur_items,
      .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
      .                   ) {
      .                       Success(_) => {}
      .                       Failure(token, msg) => return Failure(token, msg),
      .                       Error(sp, msg) => return Error(sp, msg),
      .                       ErrorReported => return ErrorReported,
      .                   }
      .           
      .                   // inner parse loop handled all cur_items, so it's empty
  9,381 ( 0.00%)          assert!(cur_items.is_empty());
      .           
      .                   // We need to do some post processing after the `inner_parser_loop`.
      .                   //
      .                   // Error messages here could be improved with links to original rules.
      .           
      .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
      .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
 46,905 ( 0.01%)          if parser.token == token::Eof {
    522 ( 0.00%)              if eof_items.len() == 1 {
      .                           let matches =
    802 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    381 ( 0.00%)                  return nameize(parser.sess, ms, matches);
      .                       } else if eof_items.len() > 1 {
      .                           return Error(
      .                               parser.token.span,
      .                               "ambiguity: multiple successful parses".to_string(),
      .                           );
      .                       } else {
     63 ( 0.00%)                  return Failure(
     21 ( 0.00%)                      Token::new(
      .                                   token::Eof,
     28 ( 0.00%)                          if parser.token.span.is_dummy() {
      .                                       parser.token.span
      .                                   } else {
      .                                       parser.token.span.shrink_to_hi()
      .                                   },
      .                               ),
      .                               "missing tokens in macro arguments",
      .                           );
      .                       }
      .                   }
      .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
      .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
      .                   // unnecessary implicit clone later in Rc::make_mut.
 36,988 ( 0.01%)          drop(eof_items);
      .           
      .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
      .                   // then there is a syntax error.
 33,645 ( 0.01%)          if bb_items.is_empty() && next_items.is_empty() {
 25,493 ( 0.01%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
      .                   }
      .                   // Another possibility is that we need to call out to parse some rust nonterminal
      .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
 13,372 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
      .                       let nts = bb_items
      .                           .iter()
      .                           .map(|item| match item.top_elts.get_tt(item.idx) {
      .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
      .                               _ => panic!(),
      .                           })
      .                           .collect::<Vec<String>>()
      .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
      .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
      .                               }
      .                           ),
      .                       );
      .                   }
      .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
      .                   else if !next_items.is_empty() {
      .                       // Now process the next token
 11,829 ( 0.00%)              cur_items.extend(next_items.drain(..));
  3,943 ( 0.00%)              parser.to_mut().bump();
      .                   }
      .                   // Finally, we have the case where we need to call the black-box parser to get some
      .                   // nonterminal.
      .                   else {
      .                       assert_eq!(bb_items.len(), 1);
      .           
  6,686 ( 0.00%)              let mut item = bb_items.pop().unwrap();
 26,237 ( 0.01%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
  3,343 ( 0.00%)                  let match_cur = item.match_cur;
      .                           // We use the span of the metavariable declaration to determine any
      .                           // edition-specific matching behavior for non-terminals.
 20,112 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
      .                               Err(mut err) => {
      .                                   err.span_label(
      .                                       span,
      .                                       format!("while parsing argument for this `{}` macro fragment", kind),
      .                                   )
      .                                   .emit();
      .                                   return ErrorReported;
      .                               }
 20,058 ( 0.00%)                      Ok(nt) => nt,
      .                           };
 13,372 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
 13,372 ( 0.00%)                  item.idx += 1;
 20,058 ( 0.00%)                  item.match_cur += 1;
      .                       } else {
      .                           unreachable!()
      .                       }
      .                       cur_items.push(item);
      .                   }
      .           
 14,572 ( 0.00%)          assert!(!cur_items.is_empty());
      .               }
 18,855 ( 0.00%)  }

262,231 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
373,608 ( 0.08%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 75,790 ( 0.02%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     91 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
    104 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
124,536 ( 0.03%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 41,512 ( 0.01%)      Cursor::new(input).advance_token()
166,048 ( 0.03%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 93,666 ( 0.02%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
    414 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      .           }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
      .           }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
332,096 ( 0.07%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
156,019 ( 0.03%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
 11,380 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
      .                           _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
    448 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    279 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
      .                               let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
      .                               if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 61,212 ( 0.01%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
     55 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    970 ( 0.00%)              ';' => Semi,
  3,616 ( 0.00%)              ',' => Comma,
  1,164 ( 0.00%)              '.' => Dot,
  5,056 ( 0.00%)              '(' => OpenParen,
  5,056 ( 0.00%)              ')' => CloseParen,
  1,542 ( 0.00%)              '{' => OpenBrace,
  1,542 ( 0.00%)              '}' => CloseBrace,
    332 ( 0.00%)              '[' => OpenBracket,
    332 ( 0.00%)              ']' => CloseBracket,
    216 ( 0.00%)              '@' => At,
    324 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
    178 ( 0.00%)              '?' => Question,
  7,132 ( 0.00%)              ':' => Colon,
  6,394 ( 0.00%)              '$' => Dollar,
  1,196 ( 0.00%)              '=' => Eq,
  1,040 ( 0.00%)              '!' => Bang,
    260 ( 0.00%)              '<' => Lt,
  1,040 ( 0.00%)              '>' => Gt,
    156 ( 0.00%)              '-' => Minus,
    602 ( 0.00%)              '&' => And,
     56 ( 0.00%)              '|' => Or,
    916 ( 0.00%)              '+' => Plus,
  1,100 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
    170 ( 0.00%)              '%' => Percent,
      .           
      .                       // Lifetime or character literal.
    258 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    336 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    224 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    224 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
373,608 ( 0.08%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  8,560 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
  4,230 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
102,861 ( 0.02%)          self.eat_while(|c| c != '\n');
  8,535 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
      .                   let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
      .                   }
      .           
      .                   BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
 10,684 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 37,895 ( 0.01%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
 15,158 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
 15,158 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  7,579 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  7,579 ( 0.00%)              _ => Ident,
      .                   }
 30,316 ( 0.01%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
     22 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
     28 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
     15 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
     40 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
      4 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
      .                           if self.first().is_digit(10) {
      .                               self.eat_decimal_digits();
      .                               match self.first() {
      .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
    602 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
    172 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
    172 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
    172 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
    172 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
    516 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
      .                   if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  4,772 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
      .                           '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
    112 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
     14 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
     21 ( 0.00%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
     14 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
     20 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
     60 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
      2 ( 0.00%)      }
      .           
      .               /// Eats the float exponent. Returns true if at least one digit was met,
      .               /// and returns false otherwise.
      .               fn eat_float_exponent(&mut self) -> bool {
      .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
    246 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
    369 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
      .                   self.eat_while(is_id_continue);
    492 ( 0.00%)      }
      .           }

605,132 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     88 ( 0.00%)      fn clone(&self) -> Self {
  6,177 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
  1,249 ( 0.00%)              table: self.table.clone(),
      .                   }
     99 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 18,238 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 53,967 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 65,200 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      8 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 33,132 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     64 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  3,102 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 12,247 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    152 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    180 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    190 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
104,213 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
179,400 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 62,330 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 95,008 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     41 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    123 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     82 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     41 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
725,682 ( 0.15%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    179 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
367,992 ( 0.08%)              self.table
328,575 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 33,658 ( 0.01%)              None
      .                   }
681,356 ( 0.14%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  8,670 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
181,967 ( 0.04%)          match self.remove_entry(k) {
  4,783 ( 0.00%)              Some((_, v)) => Some(v),
  7,677 ( 0.00%)              None => None,
      .                   }
 19,523 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 49,312 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
278,358 ( 0.06%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
742,634 ( 0.15%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
788,723 ( 0.16%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 81,150 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
411,066 ( 0.09%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 72,781 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
171,597 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
225,869 ( 0.05%)          self.from_hash(hash, equivalent(k))
322,211 ( 0.07%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
331,872 ( 0.07%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
118,459 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    413 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  8,814 ( 0.00%)          IntoIter {
  5,118 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
  1,239 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 21,144 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    281 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    532 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     11 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     22 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
      2 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  8,312 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  7,041 ( 0.00%)          let iter = iter.into_iter();
  3,188 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      7 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 23,666 ( 0.00%)              self.insert(k, v);
      .                   });
  4,842 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

345,301 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
200,077 ( 0.04%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
  1,414 ( 0.00%)      base_or_index: u32,
    725 ( 0.00%)      len_or_tag: u16,
  1,207 ( 0.00%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
101,995 ( 0.02%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
203,978 ( 0.04%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
725,708 ( 0.15%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
  2,810 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
283,145 ( 0.06%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
  1,150 ( 0.00%)          if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
959,349 ( 0.20%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
917,761 ( 0.19%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
    749 ( 0.00%)              let index = self.base_or_index;
  4,327 ( 0.00%)              with_span_interner(|interner| interner.spans[index as usize])
      .                   }
452,471 ( 0.09%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
     54 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     72 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
     72 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

804,696 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  626,675 ( 0.13%)          Vec { buf: RawVec::NEW, len: 0 }
       28 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  225,064 ( 0.05%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   13,104 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  172,689 ( 0.04%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   44,696 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,195 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   22,067 ( 0.00%)          if self.capacity() > self.len {
    1,152 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    8,289 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  396,537 ( 0.08%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  245,460 ( 0.05%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   97,679 ( 0.02%)              self.len = len;
      898 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  475,844 ( 0.10%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  742,099 ( 0.15%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
1,018,117 ( 0.21%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  222,223 ( 0.05%)          self.len = new_len;
      264 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        3 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,274 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      203 ( 0.00%)          let len = self.len();
      408 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      756 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,071 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      756 ( 0.00%)              self.set_len(len + 1);
        .                   }
    1,092 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      124 ( 0.00%)          let len = self.len();
      419 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,057 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      262 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      202 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   26,479 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    3,035 ( 0.00%)          self.retain_mut(|elem| f(elem));
   25,520 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,404 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,962 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,861 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   38,149 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    9,668 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      146 ( 0.00%)                      g.processed_len += 1;
       62 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
       63 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
       42 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    3,150 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      450 ( 0.00%)          let len = self.len();
    1,498 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      296 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      206 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      128 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    3,600 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      175 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
2,015,597 ( 0.42%)          if self.len == self.buf.capacity() {
  132,313 ( 0.03%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   58,306 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
2,415,782 ( 0.50%)              self.len += 1;
        .                   }
      140 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  192,524 ( 0.04%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  148,248 ( 0.03%)                  self.len -= 1;
   16,710 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      399 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      342 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    6,908 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   75,497 ( 0.02%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,528 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       28 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   23,713 ( 0.00%)              Drain {
        .                           tail_start: end,
       26 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  677,995 ( 0.14%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   85,208 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      495 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      393 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,847 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      793 ( 0.00%)          let len = self.len();
    1,586 ( 0.00%)          if new_len > len {
    5,774 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    5,054 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       73 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       90 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        9 ( 0.00%)          let len = self.len();
        .           
       27 ( 0.00%)          if new_len > len {
    1,380 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       25 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       46 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   49,053 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,624 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   54,223 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   35,363 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      451 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    7,122 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   45,830 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    8,441 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  853,645 ( 0.18%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       69 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  164,834 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   80,295 ( 0.02%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   98,825 ( 0.02%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   23,748 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        8 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  270,924 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  108,028 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   33,090 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,082 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       64 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  121,011 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       64 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        4 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   22,762 ( 0.00%)          while let Some(element) = iterator.next() {
    4,854 ( 0.00%)              let len = self.len();
   41,859 ( 0.01%)              if len == self.capacity() {
      269 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   35,028 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      229 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      154 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      506 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      680 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  217,067 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   88,839 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  256,232 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  280,363 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs
--------------------------------------------------------------------------------
Ir               

-- line 51 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   let len = self.iter.len();
      .                   // `(len + 3)` can't overflow, because we know that the `slice::Iter`
      .                   // belongs to a slice in memory which has a maximum length of
      .                   // `isize::MAX` (that's well below `usize::MAX`).
    348 ( 0.00%)          ((len + 3) / 4, Some(len))
      .               }
      .           
      .               #[inline]
      .               fn last(mut self) -> Option<char> {
      .                   // No need to go through the entire string.
      .                   self.next_back()
      .               }
      .           }
-- line 67 ----------------------------------------
-- line 138 ----------------------------------------
      .               #[inline]
      .               fn next(&mut self) -> Option<(usize, char)> {
      .                   let pre_len = self.iter.iter.len();
      .                   match self.iter.next() {
      .                       None => None,
      .                       Some(ch) => {
      .                           let index = self.front_offset;
      .                           let len = self.iter.iter.len();
525,113 ( 0.11%)                  self.front_offset += pre_len - len;
      .                           Some((index, ch))
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn count(self) -> usize {
      .                   self.iter.count()
-- line 154 ----------------------------------------
-- line 166 ----------------------------------------
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<'a> DoubleEndedIterator for CharIndices<'a> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<(usize, char)> {
      .                   self.iter.next_back().map(|ch| {
     12 ( 0.00%)              let index = self.front_offset + self.iter.iter.len();
      .                       (index, ch)
      .                   })
      .               }
      .           }
      .           
      .           #[stable(feature = "fused", since = "1.26.0")]
      .           impl FusedIterator for CharIndices<'_> {}
      .           
-- line 182 ----------------------------------------
-- line 450 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   $(#[$common_stability_attribute])*
      .                   impl<'a, P: Pattern<'a>> Iterator for $forward_iterator<'a, P> {
      .                       type Item = $iterty;
      .           
      .                       #[inline]
    780 ( 0.00%)              fn next(&mut self) -> Option<$iterty> {
      .                           self.0.next()
  1,120 ( 0.00%)              }
      .                   }
      .           
      .                   $(#[$common_stability_attribute])*
      .                   impl<'a, P> Clone for $forward_iterator<'a, P>
      .                   where
      .                       P: Pattern<'a, Searcher: Clone>,
      .                   {
      .                       fn clone(&self) -> Self {
     44 ( 0.00%)                  $forward_iterator(self.0.clone())
      .                       }
      .                   }
      .           
      .                   $(#[$reverse_iterator_attribute])*
      .                   $(#[$common_stability_attribute])*
      .                   pub struct $reverse_iterator<'a, P: Pattern<'a>>(pub(super) $internal_iterator<'a, P>);
      .           
      .                   $(#[$common_stability_attribute])*
-- line 477 ----------------------------------------
-- line 582 ----------------------------------------
      .                       .field("finished", &self.finished)
      .                       .finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {
      .               #[inline]
      .               fn get_end(&mut self) -> Option<&'a str> {
    131 ( 0.00%)          if !self.finished && (self.allow_trailing_empty || self.end - self.start > 0) {
     28 ( 0.00%)              self.finished = true;
      .                       // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.
      .                       unsafe {
     88 ( 0.00%)                  let string = self.matcher.haystack().get_unchecked(self.start..self.end);
      .                           Some(string)
      .                       }
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<&'a str> {
    268 ( 0.00%)          if self.finished {
      .                       return None;
      .                   }
      .           
     74 ( 0.00%)          let haystack = self.matcher.haystack();
    249 ( 0.00%)          match self.matcher.next_match() {
      .                       // SAFETY: `Searcher` guarantees that `a` and `b` lie on unicode boundaries.
     73 ( 0.00%)              Some((a, b)) => unsafe {
    112 ( 0.00%)                  let elt = haystack.get_unchecked(self.start..a);
    126 ( 0.00%)                  self.start = b;
      .                           Some(elt)
      .                       },
      .                       None => self.get_end(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next_inclusive(&mut self) -> Option<&'a str> {
-- line 621 ----------------------------------------
-- line 870 ----------------------------------------
      .                       .field("count", &self.count)
      .                       .finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {
      .               #[inline]
      .               fn next(&mut self) -> Option<&'a str> {
    200 ( 0.00%)          match self.count {
      .                       0 => None,
      .                       1 => {
     16 ( 0.00%)                  self.count = 0;
      .                           self.iter.get_end()
      .                       }
      .                       _ => {
     48 ( 0.00%)                  self.count -= 1;
      .                           self.iter.next()
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next_back(&mut self) -> Option<&'a str>
      .               where
-- line 893 ----------------------------------------
-- line 986 ----------------------------------------
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple("MatchIndicesInternal").field(&self.0).finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {
      .               #[inline]
      .               fn next(&mut self) -> Option<(usize, &'a str)> {
     35 ( 0.00%)          self.0
      .                       .next_match()
      .                       // SAFETY: `Searcher` guarantees that `start` and `end` lie on unicode boundaries.
      .                       .map(|(start, end)| unsafe { (start, self.0.haystack().get_unchecked(start..end)) })
      .               }
      .           
      .               #[inline]
      .               fn next_back(&mut self) -> Option<(usize, &'a str)>
      .               where
-- line 1002 ----------------------------------------
-- line 1204 ----------------------------------------
      .           #[stable(feature = "split_inclusive", since = "1.51.0")]
      .           pub struct SplitInclusive<'a, P: Pattern<'a>>(pub(super) SplitInternal<'a, P>);
      .           
      .           #[stable(feature = "split_whitespace", since = "1.1.0")]
      .           impl<'a> Iterator for SplitWhitespace<'a> {
      .               type Item = &'a str;
      .           
      .               #[inline]
     30 ( 0.00%)      fn next(&mut self) -> Option<&'a str> {
      .                   self.inner.next()
     18 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           
      .               #[inline]
      .               fn last(mut self) -> Option<&'a str> {
-- line 1222 ----------------------------------------
-- line 1444 ----------------------------------------
      .                   FlatMap<Chars<'a>, char::EscapeDebug, CharEscapeDebugContinue>,
      .               >,
      .           }
      .           
      .           /// The return type of [`str::escape_default`].
      .           #[stable(feature = "str_escape", since = "1.34.0")]
      .           #[derive(Clone, Debug)]
      .           pub struct EscapeDefault<'a> {
     32 ( 0.00%)      pub(super) inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,
      .           }
      .           
      .           /// The return type of [`str::escape_unicode`].
      .           #[stable(feature = "str_escape", since = "1.34.0")]
      .           #[derive(Clone, Debug)]
      .           pub struct EscapeUnicode<'a> {
      .               pub(super) inner: FlatMap<Chars<'a>, char::EscapeUnicode, CharEscapeUnicode>,
      .           }
      .           
      .           macro_rules! escape_types_impls {
      .               ($( $Name: ident ),+) => {$(
      .                   #[stable(feature = "str_escape", since = "1.34.0")]
      .                   impl<'a> fmt::Display for $Name<'a> {
    160 ( 0.00%)              fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                           self.clone().try_for_each(|c| f.write_char(c))
    128 ( 0.00%)              }
      .                   }
      .           
      .                   #[stable(feature = "str_escape", since = "1.34.0")]
      .                   impl<'a> Iterator for $Name<'a> {
      .                       type Item = char;
      .           
      .                       #[inline]
      .                       fn next(&mut self) -> Option<char> { self.inner.next() }
-- line 1476 ----------------------------------------

    782 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  460,388 ( 0.10%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   35,753 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
5,381,454 ( 1.12%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   54,316 ( 0.01%)          self.stride += Group::WIDTH;
   54,316 ( 0.01%)          self.pos += self.stride;
   44,590 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   30,654 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   64,805 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   14,196 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   78,863 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   18,020 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   63,898 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   84,321 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      288 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
    3,744 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       60 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    2,412 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    3,534 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    3,534 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    7,068 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      972 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    6,096 ( 0.00%)          self.erase_no_drop(&item);
       93 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  147,542 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      176 ( 0.00%)          match self.find(hash, eq) {
    1,259 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   25,202 ( 0.01%)              None => None,
        .                   }
  219,510 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    4,258 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   86,909 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   52,069 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  122,052 ( 0.03%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   84,376 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  671,020 ( 0.14%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,394 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  432,957 ( 0.09%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  494,414 ( 0.10%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  169,488 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       72 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  127,116 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      218 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  104,048 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    2,225 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  213,357 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  172,598 ( 0.04%)          self.table.items += 1;
        .                   bucket
      415 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    1,464 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      797 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    4,954 ( 0.00%)              eq(self.bucket(index).as_ref())
       95 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       20 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    1,464 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   10,247 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,077 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  177,722 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   21,216 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,368 ( 0.00%)          let allocation = self.into_allocation();
    1,776 ( 0.00%)          RawIntoIter {
    2,960 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,005 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      232 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  147,297 ( 0.03%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  110,998 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   26,356 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   63,858 ( 0.01%)          Ok(Self {
        .                       ctrl,
   25,982 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   81,094 ( 0.02%)      }
        .           
        .               #[inline]
    7,580 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,970 ( 0.00%)          if capacity == 0 {
    1,347 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   50,937 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    4,175 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    7,580 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   35,552 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   35,552 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   71,104 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  300,497 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  876,683 ( 0.18%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  400,222 ( 0.08%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   11,560 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  704,254 ( 0.15%)              for bit in group.match_byte(h2_hash) {
1,207,949 ( 0.25%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  801,035 ( 0.17%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  253,064 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,096,088 ( 0.23%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
4,477,373 ( 0.93%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  541,030 ( 0.11%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  432,824 ( 0.09%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  842,910 ( 0.18%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  280,970 ( 0.06%)          *self.ctrl(index) = ctrl;
  281,513 ( 0.06%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   68,634 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   63,088 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  279,657 ( 0.06%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,071 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   32,405 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   14,987 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   29,976 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   29,974 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   62,954 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   14,987 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,619 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  168,372 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   14,987 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    9,802 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,944 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    2,383 ( 0.00%)          self.items = 0;
    1,944 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   31,026 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  124,104 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  155,025 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  124,104 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
   10,000 ( 0.00%)      fn clone(&self) -> Self {
    1,261 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
   11,250 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       24 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  185,586 ( 0.04%)      fn drop(&mut self) {
  118,299 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  197,234 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,368 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    2,960 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   62,335 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    5,816 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    9,547 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   43,473 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,064 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      534 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    2,187 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      826 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    7,206 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   48,368 ( 0.01%)          if let Some(b) = self.iter.next() {
   83,544 ( 0.02%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   14,412 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,186 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    4,715 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      262 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      281 ( 0.00%)      fn next(&mut self) -> Option<T> {
      213 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      562 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       30 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      808 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
      101 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      808 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

2,516,865 ( 0.52%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
775,292 ( 0.16%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
581,469 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 17,672 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 26,508 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
198,230 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 77,408 ( 0.02%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
154,816 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
284,238 ( 0.06%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,510 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 56,860 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
672,669 ( 0.14%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
112,910 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
112,910 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
126,557 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 27,887 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  2,319 ( 0.00%)          self.hash = hash.hash;
  1,510 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     47 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    874 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
459,886 ( 0.10%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    5,942 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  514,307 ( 0.11%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       98 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      833 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  488,310 ( 0.10%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    5,525 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       24 ( 0.00%)          self.position += bytes;
       24 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      621 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,963 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   31,918 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  140,648 ( 0.03%)          read_leb128!(self, read_u32_leb128)
   63,836 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.12%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.03%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,887,431 ( 0.39%)          let value = self.data[self.position];
  364,445 ( 0.08%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  188,466 ( 0.04%)      fn read_usize(&mut self) -> usize {
  188,498 ( 0.04%)          read_leb128!(self, read_usize_leb128)
  376,932 ( 0.08%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   14,208 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   31,788 ( 0.01%)          let len = self.read_usize();
  163,432 ( 0.03%)          let sentinel = self.data[self.position + len];
   40,882 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  102,205 ( 0.02%)          self.position += len + 1;
   34,137 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      121 ( 0.00%)          let start = self.position;
      673 ( 0.00%)          self.position += s.len();
      121 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  646,783 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  354,669 ( 0.07%)                  if value < 0x80 {
        .                               unsafe {
  164,420 ( 0.03%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
  205,698 ( 0.04%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
  198,368 ( 0.04%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   95,305 ( 0.02%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,330,920 ( 0.28%)              let byte = slice[*position];
  665,460 ( 0.14%)              *position += 1;
  665,460 ( 0.14%)              if (byte & 0x80) == 0 {
      160 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,082 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  444,885 ( 0.09%)                  let byte = slice[*position];
  289,882 ( 0.06%)                  *position += 1;
  296,590 ( 0.06%)                  if (byte & 0x80) == 0 {
  234,430 ( 0.05%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  516,791 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
 35,943 ( 0.01%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
172,234 ( 0.04%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      6 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      6 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     24 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     42 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
     21 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     42 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  3,144 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  1,965 ( 0.00%)      }
      .           
    480 ( 0.00%)      pub fn without_first_quote(self) -> Ident {
    480 ( 0.00%)          Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
    300 ( 0.00%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 45,513 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 35,399 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
 49,464 ( 0.01%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
 38,472 ( 0.01%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
    300 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
 35,085 ( 0.01%)      fn eq(&self, rhs: &Self) -> bool {
 66,800 ( 0.01%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 46,780 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
  1,300 ( 0.00%)          self.name.hash(state);
 15,915 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
    252 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    321 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
    252 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
    397 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
  4,251 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    397 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
  1,156 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
  1,156 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
    578 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
  5,220 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  2,088 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
  1,044 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
    110 ( 0.00%)              if let Some(span) = self.convert_dollar_crate {
     22 ( 0.00%)                  let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
    198 ( 0.00%)                      f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
      .                   fmt::Display::fmt(&self.symbol, f)
     88 ( 0.00%)      }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
 20,970 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
  5,276 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 16,970 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
      .               }
      .           
      .               /// Maps a string to its interned representation.
274,140 ( 0.06%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
274,140 ( 0.06%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
 92,169 ( 0.02%)      pub fn as_str(&self) -> &str {
 30,723 ( 0.01%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
122,892 ( 0.03%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
      .           
      .               /// This method is supposed to be used in error messages, so it's expected to be
      .               /// identical to printing the original identifier token written in source code
      .               /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag
      .               /// or edition, so we have to guess the rawness using the global edition.
     36 ( 0.00%)      pub fn to_ident_string(self) -> String {
      .                   Ident::with_dummy_span(self).to_string()
     36 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    704 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 11,420 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
 59,130 ( 0.01%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 11,382 ( 0.00%)      fn decode(d: &mut D) -> Symbol {
 53,543 ( 0.01%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    834 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
 24,439 ( 0.01%)          self.as_str().hash_stable(hcx, hasher);
    828 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 46,426 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  7,247 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
 92,169 ( 0.02%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1879 ----------------------------------------
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    624 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
 11,898 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    624 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    208 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 19,445 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 44,333 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
  3,600 ( 0.00%)          self == kw::True || self == kw::False
  3,600 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
  1,406 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      .               }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
    208 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    208 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    208 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    416 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    208 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    208 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    416 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
  3,262 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  6,524 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  6,327 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
    596 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
  1,192 ( 0.00%)      }
      .           }

 64,358 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 83 ----------------------------------------
      .                   if $self.is_proc_macro {
      .                       return Lazy::empty();
      .                   }
      .               };
      .           }
      .           
      .           macro_rules! encoder_methods {
      .               ($($name:ident($ty:ty);)*) => {
 42,790 ( 0.01%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
      .                       self.opaque.$name(value)
 51,348 ( 0.01%)          })*
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
      .               type Error = <opaque::Encoder as Encoder>::Error;
      .           
      .               #[inline]
      .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
      .                   emit_raw_bytes(&[u8]);
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  1,274 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
     55 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    276 ( 0.00%)          if self.meta == 0 {
      .                       return Ok(());
      .                   }
    655 ( 0.00%)          e.emit_lazy_distance(*self)
     12 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    144 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
  9,002 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  9,403 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
      .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
      .                   }
      .                   s.emit_u32(self.as_u32())
  7,716 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
  2,555 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
  3,066 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
114,590 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
 68,754 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
137,508 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    473 ( 0.00%)          if self.krate == LOCAL_CRATE {
      .                       // We will only write details for local expansions.  Non-local expansions will fetch
      .                       // data from the corresponding crate's metadata.
      .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
      .                       // metadata from proc-macro crates.
  1,803 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
      .                   }
  1,252 ( 0.00%)          self.krate.encode(s)?;
      .                   self.local_id.encode(s)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
181,640 ( 0.04%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
136,230 ( 0.03%)          let span = self.data();
      .           
      .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
      .                   // since we don't load proc-macro dependencies during serialization.
      .                   // This means that any hygiene information from macros used *within*
      .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
      .                   // definition) will be lost.
      .                   //
      .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
      .                   // None of these user-visible effects should result in any
      .                   // cross-crate inconsistencies (getting one behavior in the same
      .                   // crate, and a different behavior in another crate) due to the
      .                   // limited surface that proc-macros can expose.
      .                   //
      .                   // IMPORTANT: If this is ever changed, be sure to update
      .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
      .                   // encoding `ExpnData` for proc-macro crates.
 45,410 ( 0.01%)          if s.is_proc_macro {
      .                       SyntaxContext::root().encode(s)?;
      .                   } else {
 22,705 ( 0.00%)              span.ctxt.encode(s)?;
      .                   }
      .           
 22,705 ( 0.00%)          if self.is_dummy() {
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   // The Span infrastructure should make sure that this invariant holds:
      .                   debug_assert!(span.lo <= span.hi);
      .           
112,724 ( 0.02%)          if !s.source_file_cache.0.contains(span.lo) {
  1,000 ( 0.00%)              let source_map = s.tcx.sess.source_map();
  2,000 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
  1,000 ( 0.00%)              s.source_file_cache =
  2,000 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
      .                   }
      .           
 69,926 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
      .                       // Unfortunately, macro expansion still sometimes generates Spans
      .                       // that malformed in this way.
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
      .                   // Record the fact that we need to encode the data for this `SourceFile`
 22,642 ( 0.00%)          source_files.insert(s.source_file_cache.1);
      .           
      .                   // There are two possible cases here:
      .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
      .                   // crate we are writing metadata for. When the metadata for *this* crate gets
      .                   // deserialized, the deserializer will need to know which crate it originally came
      .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
      .                   // be deserialized after the rest of the span data, which tells the deserializer
      .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
      .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
      .                   // our own source map information.
      .                   //
      .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
      .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
      .                   // if we're a proc-macro crate.
      .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
      .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
135,852 ( 0.03%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
      .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
      .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
      .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
      .                       // we write into the metadata. This allows `imported_source_files` to binary
      .                       // search through the 'foreign' crate's source map information, using the
      .                       // deserialized 'lo' and 'hi' values directly.
      .                       //
      .                       // All of this logic ensures that the final result of deserialization is a 'normal'
      .                       // Span that can be used without any additional trouble.
      .                       let external_start_pos = {
      .                           // Introduce a new scope so that we drop the 'lock()' temporary
  2,178 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
    726 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
      .                               src => panic!("Unexpected external source {:?}", src),
      .                           }
      .                       };
  2,178 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
    726 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
      .           
      .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
      .                   } else {
 65,748 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
      .                   };
      .           
      .                   tag.encode(s)?;
      .                   lo.encode(s)?;
      .           
      .                   // Encode length which is usually less than span.hi and profits more
      .                   // from the variable-length integer encoding that we use.
      .                   let len = hi - lo;
      .                   len.encode(s)?;
      .           
 45,284 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
      .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
      .                       // while calling `cnum.encode(s)`
  2,904 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
  2,178 ( 0.00%)              cnum.encode(s)?;
      .                   }
      .           
      .                   Ok(())
181,640 ( 0.04%)      }
      .           }
      .           
      .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
      .               const CLEAR_CROSS_CRATE: bool = true;
      .           
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
      .           }
      .           
      .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
      .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
      .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
  3,583 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
  1,557 ( 0.00%)          self.encode(ecx).unwrap()
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
  6,868 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
  4,033 ( 0.00%)          self.encode(ecx).unwrap()
  4,029 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
      .           where
      .               I: IntoIterator,
      .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
      .           {
    553 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
 12,011 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
    711 ( 0.00%)      }
      .           }
      .           
      .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
      .           // normally need extra variables to avoid errors about multiple mutable borrows.
      .           macro_rules! record {
      .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
      .                   {
      .                       let value = $value;
      .                       let lazy = $self.lazy(value);
      .                       $self.$tables.$table.set($def_id.index, lazy);
      .                   }
      .               }};
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
  1,770 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   lazy: Lazy<T>,
      .               ) -> Result<(), <Self as Encoder>::Error> {
      .                   let pos = lazy.position.get();
  1,170 ( 0.00%)          let distance = match self.lazy_state {
      .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
    300 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
    600 ( 0.00%)                  assert!(pos <= start);
      .                           start - pos
      .                       }
     54 ( 0.00%)              LazyState::Previous(last_pos) => {
     54 ( 0.00%)                  assert!(
      .                               last_pos <= lazy.position,
      .                               "make sure that the calls to `lazy*` \
      .                                are in the same order as the metadata fields",
      .                           );
    162 ( 0.00%)                  lazy.position.get() - last_pos.get()
      .                       }
      .                   };
    708 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
      .                   self.emit_usize(distance)
  1,770 ( 0.00%)      }
      .           
  3,891 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
      .               ) -> Lazy<T> {
      .                   let pos = NonZeroUsize::new(self.position()).unwrap();
      .           
  4,610 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
 13,889 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
  9,444 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
  5,548 ( 0.00%)          self.lazy_state = LazyState::NoNode;
      .           
  9,977 ( 0.00%)          assert!(pos.get() <= self.position());
      .           
      .                   Lazy::from_position_and_meta(pos, meta)
  5,695 ( 0.00%)      }
      .           
      .               fn encode_info_for_items(&mut self) {
      9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
      .           
      .                   // Proc-macro crates only export proc-macro items, which are looked
      .                   // up using `proc_macro_data`
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
      .               }
      .           
      .               fn encode_def_path_table(&mut self) {
      4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
      2 ( 0.00%)          if self.is_proc_macro {
      .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
      .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
      .                       {
      .                           let def_key = self.lazy(table.def_key(def_index));
      .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
      .                           self.tables.def_keys.set(def_index, def_key);
      .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   } else {
      5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
      .                           let def_key = self.lazy(def_key);
      .                           let def_path_hash = self.lazy(def_path_hash);
  2,048 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
  2,048 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
      .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
      2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
      .                   ))
      .               }
      .           
      .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
      2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
      3 ( 0.00%)          let all_source_files = source_map.files();
      .           
      .                   // By replacing the `Option` with `None`, we ensure that we can't
      .                   // accidentally serialize any more `Span`s after the source map encoding
      .                   // is done.
      .                   let required_source_files = self.required_source_files.take().unwrap();
      .           
      .                   let adapted = all_source_files
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(idx, source_file)| {
      .                           // Only serialize `SourceFile`s that were used
      .                           // during the encoding of a `Span`
  1,099 ( 0.00%)                  required_source_files.contains(*idx) &&
      .                           // Don't serialize imported `SourceFile`s, unless
      .                           // we're in a proc-macro crate.
    121 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
      .                       })
      .                       .map(|(_, source_file)| {
     27 ( 0.00%)                  let mut adapted = match source_file.name {
      .                               FileName::Real(ref realname) => {
     18 ( 0.00%)                          let mut adapted = (**source_file).clone();
    144 ( 0.00%)                          adapted.name = FileName::Real(match realname {
      .                                       RealFileName::LocalPath(path_to_file) => {
      .                                           // Prepend path of working directory onto potentially
      .                                           // relative paths, because they could become relative
      .                                           // to a wrong directory.
      .                                           // We include `working_dir` as part of the crate hash,
      .                                           // so it's okay for us to use it as part of the encoded
      .                                           // metadata.
     18 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
     18 ( 0.00%)                                  match working_dir {
      .                                               RealFileName::LocalPath(absolute) => {
      .                                                   // Although neither working_dir or the file name were subject
      .                                                   // to path remapping, the concatenation between the two may
      .                                                   // be. Hence we need to do a remapping here.
      .                                                   let joined = Path::new(absolute).join(path_to_file);
     63 ( 0.00%)                                          let (joined, remapped) =
     99 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
     18 ( 0.00%)                                          if remapped {
      .                                                       RealFileName::Remapped {
      .                                                           local_path: None,
      .                                                           virtual_name: joined,
      .                                                       }
      .                                                   } else {
      .                                                       RealFileName::LocalPath(joined)
      .                                                   }
      .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
      .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
      .                                           RealFileName::Remapped {
      .                                               // We do not want any local path to be exported into metadata
      .                                               local_path: None,
      .                                               virtual_name: virtual_name.clone(),
      .                                           }
      .                                       }
      .                                   });
     18 ( 0.00%)                          adapted.name_hash = {
      .                                       let mut hasher: StableHasher = StableHasher::new();
      9 ( 0.00%)                              adapted.name.hash(&mut hasher);
      .                                       hasher.finish::<u128>()
      .                                   };
      9 ( 0.00%)                          Lrc::new(adapted)
      .                               }
      .           
      .                               // expanded code, not from a file
      .                               _ => source_file.clone(),
      .                           };
      .           
      .                           // We're serializing this `SourceFile` into our crate metadata,
      .                           // so mark it as coming from this crate.
      .                           // This also ensures that we don't try to deserialize the
      .                           // `CrateNum` for a proc-macro dependency - since proc macro
      .                           // dependencies aren't loaded when we deserialize a proc-macro,
      .                           // trying to remap the `CrateNum` would fail.
     18 ( 0.00%)                  if self.is_proc_macro {
      .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
      .                           }
      .                           adapted
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   self.lazy(adapted.iter().map(|rc| &**rc))
      .               }
      .           
      8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
      .                   let mut i = self.position();
      .           
      .                   // Encode the crate deps
      .                   let crate_deps = self.encode_crate_deps();
      .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
      5 ( 0.00%)          let dep_bytes = self.position() - i;
      .           
      .                   // Encode the lib features.
      .                   i = self.position();
      .                   let lib_features = self.encode_lib_features();
      7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
      .           
      .                   // Encode the language items.
      .                   i = self.position();
      .                   let lang_items = self.encode_lang_items();
      .                   let lang_items_missing = self.encode_lang_items_missing();
      5 ( 0.00%)          let lang_item_bytes = self.position() - i;
      .           
      .                   // Encode the diagnostic items.
      .                   i = self.position();
      .                   let diagnostic_items = self.encode_diagnostic_items();
      5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
      .           
      .                   // Encode the native libraries used
      .                   i = self.position();
      .                   let native_libraries = self.encode_native_libraries();
      4 ( 0.00%)          let native_lib_bytes = self.position() - i;
      .           
      .                   let foreign_modules = self.encode_foreign_modules();
      .           
      .                   // Encode DefPathTable
      .                   i = self.position();
      .                   self.encode_def_path_table();
      5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
      .                   i = self.position();
      .                   let traits = self.encode_traits();
      5 ( 0.00%)          let traits_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of impls, for coherence checking.
      .                   i = self.position();
      .                   let impls = self.encode_impls();
      5 ( 0.00%)          let impls_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let tcx = self.tcx;
      .           
      .                   // Encode MIR.
      .                   i = self.position();
      .                   self.encode_mir();
      5 ( 0.00%)          let mir_bytes = self.position() - i;
      .           
      .                   // Encode the items.
      .                   i = self.position();
      .                   self.encode_def_ids();
      .                   self.encode_info_for_items();
      4 ( 0.00%)          let item_bytes = self.position() - i;
      .           
      .                   // Encode the allocation index
      .                   let interpret_alloc_index = {
      .                       let mut interpret_alloc_index = Vec::new();
      .                       let mut n = 0;
      .                       trace!("beginning to encode alloc ids");
      .                       loop {
      .                           let new_n = self.interpret_allocs.len();
      .                           // if we have found new ids, serialize those, too
      2 ( 0.00%)                  if n == new_n {
      .                               // otherwise, abort
      .                               break;
      .                           }
      .                           trace!("encoding {} further alloc ids", new_n - n);
      .                           for idx in n..new_n {
      .                               let id = self.interpret_allocs[idx];
      .                               let pos = self.position() as u32;
      .                               interpret_alloc_index.push(pos);
      .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
      .                           }
      .                           n = new_n;
      .                       }
      6 ( 0.00%)              self.lazy(interpret_alloc_index)
      .                   };
      .           
      .                   // Encode the proc macro data. This affects 'tables',
      .                   // so we need to do this before we encode the tables
      .                   i = self.position();
      .                   let proc_macro_data = self.encode_proc_macros();
      4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
      .           
      .                   i = self.position();
      4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
      4 ( 0.00%)          let tables_bytes = self.position() - i;
      .           
      .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
      .                   // this as late as possible to give the prefetching as much time as possible to complete.
      .                   i = self.position();
      .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
      .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
      4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
      .           
      .                   // Encode the hygiene data,
      .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
      .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
      .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
      .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
      .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
      .                   // any `SyntaxContext`s that might be used.
      .                   i = self.position();
      .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
      5 ( 0.00%)          let hygiene_bytes = self.position() - i;
      .           
      .                   i = self.position();
      .                   let def_path_hash_map = self.encode_def_path_hash_map();
      1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
      .           
      .                   // Encode source_map. This needs to be done last,
      .                   // since encoding `Span`s tells us which `SourceFiles` we actually
      .                   // need to encode.
      .                   i = self.position();
      .                   let source_map = self.encode_source_map();
      4 ( 0.00%)          let source_map_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
      7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
      .           
    118 ( 0.00%)          let root = self.lazy(CrateRoot {
      .                       name: tcx.crate_name(LOCAL_CRATE),
      3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
      1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
      .                       hash: tcx.crate_hash(LOCAL_CRATE),
      .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
      3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
      3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
      2 ( 0.00%)              edition: tcx.sess.edition(),
      .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
      .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
      .                       has_default_lib_allocator,
      .                       proc_macro_data,
      6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
      6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
      6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
      6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
      5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
      5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
      2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
      .           
      .                       crate_deps,
      .                       dylib_dependency_formats,
      .                       lib_features,
      .                       lang_items,
      .                       diagnostic_items,
      .                       lang_items_missing,
      .                       native_libraries,
      .                       foreign_modules,
      .                       source_map,
      .                       traits,
      .                       impls,
      .                       exported_symbols,
      .                       interpret_alloc_index,
      2 ( 0.00%)              tables,
      .                       syntax_contexts,
      .                       expn_data,
      .                       expn_hashes,
      .                       def_path_hash_map,
      .                   });
      .           
      1 ( 0.00%)          let total_bytes = self.position();
      .           
      4 ( 0.00%)          if tcx.sess.meta_stats() {
      .                       let mut zero_bytes = 0;
      .                       for e in self.opaque.data.iter() {
      .                           if *e == 0 {
      .                               zero_bytes += 1;
      .                           }
      .                       }
      .           
      .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
      .                       eprintln!("            item bytes: {}", item_bytes);
      .                       eprintln!("           table bytes: {}", tables_bytes);
      .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
      .                       eprintln!("            zero bytes: {}", zero_bytes);
      .                       eprintln!("           total bytes: {}", total_bytes);
      .                   }
      .           
      .                   root
      9 ( 0.00%)      }
      .           }
      .           
      .           fn should_encode_visibility(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Mod
      .                   | DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
      .           /// Whether we should encode MIR.
      .           ///
      .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
      .           /// We want to avoid this work when not required. Therefore:
      .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
      .           /// - we skip `optimized_mir` for check runs.
      .           ///
      .           /// Return a pair, resp. for CTFE and for LLVM.
    999 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
    555 ( 0.00%)      match tcx.def_kind(def_id) {
      .                   // Constructors
      .                   DefKind::Ctor(_, _) => {
      .                       let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
      .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
      .                       (true, mir_opt_base)
      .                   }
      .                   // Constants
      .                   DefKind::AnonConst
      .                   | DefKind::InlineConst
      .                   | DefKind::AssocConst
      .                   | DefKind::Static
      .                   | DefKind::Const => (true, false),
      .                   // Full-fledged functions
      .                   DefKind::AssocFn | DefKind::Fn => {
      .                       let generics = tcx.generics_of(def_id);
    486 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
    106 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
    189 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
      .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
     95 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
    465 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
      .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
    190 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
      .                   }
      .                   // Closures can't be const fn.
      .                   DefKind::Closure => {
      .                       let generics = tcx.generics_of(def_id);
     44 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
      .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
     22 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
     22 ( 0.00%)              let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
     22 ( 0.00%)              (false, needs_inline || always_encode_mir)
      .                   }
      .                   // Generators require optimized MIR to compute layout.
      .                   DefKind::Generator => (false, true),
      .                   // The others don't have MIR.
      .                   _ => (false, false),
      .               }
    999 ( 0.00%)  }
      .           
      .           fn should_encode_variances(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
      .                   | DefKind::Variant
      .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
      .                   | DefKind::LifetimeParam
      .                   | DefKind::GlobalAsm
      .                   | DefKind::ExternCrate => false,
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      .               fn encode_def_ids(&mut self) {
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      1 ( 0.00%)          let tcx = self.tcx;
      3 ( 0.00%)          let hir = tcx.hir();
     45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
      .                       let def_id = local_id.to_def_id();
      .                       let def_kind = tcx.opt_def_kind(local_id);
  3,072 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
  6,416 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
      .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
      .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
      .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
      .                           def_kind => def_kind,
      .                       });
  1,203 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
  4,812 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
  3,208 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
      .                       if should_encode_visibility(def_kind) {
  1,920 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
      .                       }
      .                       if should_encode_stability(def_kind) {
      .                           self.encode_stability(def_id);
      .                           self.encode_const_stability(def_id);
  1,704 ( 0.00%)                  self.encode_deprecation(def_id);
      .                       }
      .                       if should_encode_variances(def_kind) {
    222 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
    777 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
      .                       }
      .                       if should_encode_generics(def_kind) {
      .                           let g = tcx.generics_of(def_id);
  1,056 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
  3,168 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
    264 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
    311 ( 0.00%)                  if !inferred_outlives.is_empty() {
     36 ( 0.00%)                      record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
      .                           }
      .                       }
  2,807 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
     98 ( 0.00%)                  record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
      .                       }
      .                   }
      .                   let inherent_impls = tcx.crate_inherent_impls(());
      .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
      6 ( 0.00%)              if implementations.is_empty() {
      .                           continue;
      .                       }
     54 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
      8 ( 0.00%)                  assert!(def_id.is_local());
      .                           def_id.index
      .                       }));
      .                   }
      .               }
      .           
  1,470 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
  1,260 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
  1,680 ( 0.00%)      }
      .           
      .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
      .                   let tcx = self.tcx;
      .                   let variant = &def.variants[index];
      .                   let def_id = variant.def_id;
      .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
      .           
      .                   let data = VariantData {
-- line 1043 ----------------------------------------
-- line 1078 ----------------------------------------
      .           
      .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
      .                   self.encode_item_type(def_id);
      .                   if variant.ctor_kind == CtorKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
    110 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
     22 ( 0.00%)          let tcx = self.tcx;
      .                   let def_id = local_def_id.to_def_id();
      .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
      .           
      .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
      .                   // only ever get called for the crate root. We still want to encode
      .                   // the crate root for consistency with other crates (some of the resolver
      .                   // code uses it). However, we skip encoding anything relating to child
      .                   // items - we encode information about proc-macros later on.
     33 ( 0.00%)          let reexports = if !self.is_proc_macro {
     22 ( 0.00%)              match tcx.module_reexports(local_def_id) {
      .                           Some(exports) => self.lazy(exports),
      .                           _ => Lazy::empty(),
      .                       }
      .                   } else {
      .                       Lazy::empty()
      .                   };
      .           
     44 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
     22 ( 0.00%)          if self.is_proc_macro {
      .                       // Encode this here because we don't do it in encode_def_ids.
      .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
      .                   } else {
      .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
      .                       // Foreign items are planted into their parent modules from name resolution point of view.
     22 ( 0.00%)              let tcx = self.tcx;
      .                       let foreign_item_children = md
      .                           .item_ids
      .                           .iter()
    895 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
      .                               hir::ItemKind::ForeignMod { items, .. } => {
      .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
      .                               }
      .                               _ => None,
      .                           })
      .                           .flatten();
      .           
     77 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
      .                   }
     88 ( 0.00%)      }
      .           
      .               fn encode_field(
      .                   &mut self,
      .                   adt_def: &ty::AdtDef,
      .                   variant_index: VariantIdx,
      .                   field_index: usize,
      .               ) {
      .                   let variant = &adt_def.variants[variant_index];
      .                   let field = &variant.fields[field_index];
      .           
      .                   let def_id = field.did;
      .                   debug!("EncodeContext::encode_field({:?})", def_id);
      .           
      .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
     58 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
     87 ( 0.00%)          self.encode_item_type(def_id);
      .               }
      .           
      .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
      .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
      .                   let tcx = self.tcx;
      .                   let variant = adt_def.non_enum_variant();
      .           
      .                   let data = VariantData {
-- line 1150 ----------------------------------------
-- line 1166 ----------------------------------------
      .                   let bounds = self.tcx.explicit_item_bounds(def_id);
      .                   if !bounds.is_empty() {
      .                       record!(self.tables.explicit_item_bounds[def_id] <- bounds);
      .                   }
      .               }
      .           
      .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
      6 ( 0.00%)          let tcx = self.tcx;
      .           
     42 ( 0.00%)          let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
      .                   let trait_item = tcx.associated_item(def_id);
      .           
     30 ( 0.00%)          let container = match trait_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,
      .                       hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,
      .                       hir::Defaultness::Final => span_bug!(ast_item.span, "traits cannot have final items"),
      .                   };
      .           
     36 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const => {
      .                           let rendered = rustc_hir_pretty::to_string(
      .                               &(&self.tcx.hir() as &dyn intravisit::Map<'_>),
      .                               |s| s.print_trait_item(ast_item),
      .                           );
      .                           let rendered_const = self.lazy(RenderedConst(rendered));
      .           
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                               container,
      .                               Default::default(),
      .                               rendered_const,
      .                           ));
      .                       }
      .                       ty::AssocKind::Fn => {
     12 ( 0.00%)                  let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {
     12 ( 0.00%)                      let param_names = match *m {
      .                                   hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),
      8 ( 0.00%)                          hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),
      .                               };
      .                               FnData {
      .                                   asyncness: m_sig.header.asyncness,
      .                                   constness: hir::Constness::NotConst,
      .                                   param_names,
      .                               }
      .                           } else {
      .                               bug!()
-- line 1211 ----------------------------------------
-- line 1217 ----------------------------------------
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
      .                   self.encode_ident_span(def_id, ast_item.ident);
     18 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const | ty::AssocKind::Fn => {
      .                           self.encode_item_type(def_id);
      .                       }
      .                       ty::AssocKind::Type => {
      .                           if trait_item.defaultness.has_value() {
      .                               self.encode_item_type(def_id);
      .                           }
      .                       }
      .                   }
      6 ( 0.00%)          if trait_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
      .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
    178 ( 0.00%)          let tcx = self.tcx;
      .           
    534 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
     89 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
      .           
    356 ( 0.00%)          let container = match impl_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
      .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
      .                       hir::Defaultness::Default { has_value: false } => {
      .                           span_bug!(ast_item.span, "impl items always have values (currently)")
      .                       }
      .                   };
      .           
    534 ( 0.00%)          match impl_item.kind {
      .                       ty::AssocKind::Const => {
      .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
      .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
      .           
      .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                                   container,
      .                                   qualifs,
      .                                   self.encode_rendered_const_for_body(body_id))
      .                               );
      .                           } else {
      .                               bug!()
      .                           }
      .                       }
      .                       ty::AssocKind::Fn => {
    172 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
      .                               FnData {
      .                                   asyncness: sig.header.asyncness,
      .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
     86 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
      .                                       hir::Constness::Const
      .                                   } else {
      .                                       hir::Constness::NotConst
      .                                   },
      .                                   param_names: self.encode_fn_param_names_for_body(body),
      .                               }
      .                           } else {
      .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
      .                               container,
      .                               has_self: impl_item.fn_has_self_parameter,
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
    267 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
    445 ( 0.00%)          self.encode_item_type(def_id);
    356 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
      .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
      .                   }
     89 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
     40 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
    647 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
     40 ( 0.00%)      }
      .           
      .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
      .                   self.lazy(param_names.iter())
      .               }
      .           
      .               fn encode_mir(&mut self) {
      3 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      .                   let keys_and_jobs = self
      .                       .tcx
      .                       .mir_keys(())
      .                       .iter()
      .                       .filter_map(|&def_id| {
    555 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
    354 ( 0.00%)                  if encode_const || encode_opt {
     14 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
      .                           } else {
      .                               None
      .                           }
    222 ( 0.00%)              })
      .                       .collect::<Vec<_>>();
     40 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
      .                       debug_assert!(encode_const || encode_opt);
      .           
      .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
      7 ( 0.00%)              if encode_opt {
      .                           record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
      .                       }
      7 ( 0.00%)              if encode_const {
     28 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
      .           
      .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
      7 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
     28 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
      .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
      .                           }
      .                       }
     28 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
      .           
      .                       let instance =
      .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
      7 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
      7 ( 0.00%)              if !unused.is_empty() {
      .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
  2,272 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
      .                           record!(self.tables.stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_const_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
  1,988 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
      .                           record!(self.tables.const_stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
  1,704 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
  1,420 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
      .                       record!(self.tables.deprecation[def_id] <- depr);
      .                   }
  1,420 ( 0.00%)      }
      .           
     30 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
     15 ( 0.00%)          let hir = self.tcx.hir();
     10 ( 0.00%)          let body = hir.body(body_id);
     40 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
     15 ( 0.00%)              s.print_expr(&body.value)
      .                   });
     10 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
      .                   self.lazy(rendered_const)
     35 ( 0.00%)      }
      .           
  1,008 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
      .                   let tcx = self.tcx;
      .           
      .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
      .           
      .                   self.encode_ident_span(def_id, item.ident);
      .           
    672 ( 0.00%)          let entry_kind = match item.kind {
      .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
      .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
     15 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
     15 ( 0.00%)                  let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
     35 ( 0.00%)                  EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
      .                       }
     10 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
      .                           let data = FnData {
      5 ( 0.00%)                      asyncness: sig.header.asyncness,
      5 ( 0.00%)                      constness: sig.header.constness,
     10 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
      .                           };
      .           
      .                           EntryKind::Fn(self.lazy(data))
      .                       }
     20 ( 0.00%)              hir::ItemKind::Macro(ref macro_def) => {
      .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
      .                       }
      .                       hir::ItemKind::Mod(ref m) => {
    120 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
      .                       }
      .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
      .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
      .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           EntryKind::OpaqueTy
      .                       }
      .                       hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
      .                       hir::ItemKind::Struct(ref struct_def, _) => {
     28 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
     42 ( 0.00%)                  let variant = adt_def.non_enum_variant();
      .           
      .                           // Encode def_ids for each field and method
      .                           // for methods, write all the stuff get_trait_method
      .                           // needs to know
     56 ( 0.00%)                  let ctor = struct_def
      .                               .ctor_hir_id()
      .                               .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
      .           
      .                           EntryKind::Struct(
      .                               self.lazy(VariantData {
     14 ( 0.00%)                          ctor_kind: variant.ctor_kind,
     56 ( 0.00%)                          discr: variant.discr,
      .                                   ctor,
      .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                               }),
     42 ( 0.00%)                      adt_def.repr,
      .                           )
      .                       }
      .                       hir::ItemKind::Union(..) => {
      .                           let adt_def = self.tcx.adt_def(def_id);
      .                           let variant = adt_def.non_enum_variant();
      .           
      .                           EntryKind::Union(
      .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
      .                                   ctor_kind: variant.ctor_kind,
      .                                   discr: variant.discr,
      .                                   ctor: None,
      .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                               }),
      .                               adt_def.repr,
      .                           )
      .                       }
    204 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
    188 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
    102 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
    102 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
     43 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
    258 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
    258 ( 0.00%)                          an.nth(1).and_then(|node| match node {
      .                                       specialization_graph::Node::Impl(parent) => Some(parent),
      .                                       _ => None,
      .                                   })
      .                               })
      .                           } else {
      .                               None
      .                           };
      .           
      .                           // if this is an impl of `CoerceUnsized`, create its
      .                           // "unsized info", else just store None
      .                           let coerce_unsized_info = trait_ref.and_then(|t| {
    258 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
      .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
      .                               } else {
      .                                   None
      .                               }
      .                           });
      .           
      .                           let data = ImplData {
      .                               polarity,
-- line 1496 ----------------------------------------
-- line 1498 ----------------------------------------
      .                               constness,
      .                               parent_impl: parent,
      .                               coerce_unsized_info,
      .                           };
      .           
      .                           EntryKind::Impl(self.lazy(data))
      .                       }
      .                       hir::ItemKind::Trait(..) => {
     14 ( 0.00%)                  let trait_def = self.tcx.trait_def(def_id);
      .                           let data = TraitData {
      7 ( 0.00%)                      unsafety: trait_def.unsafety,
     14 ( 0.00%)                      paren_sugar: trait_def.paren_sugar,
     35 ( 0.00%)                      has_auto_impl: self.tcx.trait_is_auto(def_id),
      7 ( 0.00%)                      is_marker: trait_def.is_marker,
      7 ( 0.00%)                      skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,
      7 ( 0.00%)                      specialization_kind: trait_def.specialization_kind,
      .                               must_implement_one_of: trait_def.must_implement_one_of.clone(),
      .                           };
      .           
      .                           EntryKind::Trait(self.lazy(data))
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
      .                           bug!("cannot encode info for item {:?}", item)
      .                       }
      .                   };
      .                   record!(self.tables.kind[def_id] <- entry_kind);
      .                   // FIXME(eddyb) there should be a nicer way to do this.
    510 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
      .                           self.tcx.adt_def(def_id).variants.iter().map(|v| {
      .                               assert!(v.def_id.is_local());
      .                               v.def_id.index
      .                           })
      .                       ),
      .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
      .                           record!(self.tables.children[def_id] <-
     42 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
     29 ( 0.00%)                          assert!(f.did.is_local());
      .                                   f.did.index
      .                               })
      .                           )
      .                       }
      .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
    116 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
      .                           record!(self.tables.children[def_id] <-
      .                               associated_item_def_ids.iter().map(|&def_id| {
     95 ( 0.00%)                          assert!(def_id.is_local());
      .                                   def_id.index
      .                               })
      .                           );
      .                       }
      .                       _ => {}
      .                   }
    276 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::OpaqueTy(..)
      .                       | hir::ItemKind::Enum(..)
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..)
    300 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
      .                       _ => {}
      .                   }
    279 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
     20 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
    209 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
    255 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
    215 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
      .                       }
      .                   }
    816 ( 0.00%)      }
      .           
      .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
    141 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
     47 ( 0.00%)          if encode_type {
      .                       self.encode_item_type(def_id);
      .                   }
      .               }
      .           
      .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
     66 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
      .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
      .           
      .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
      .                   // including on the signature, which is inferred in `typeck.
     33 ( 0.00%)          let ty = self.tcx.typeck(def_id).node_type(hir_id);
      .           
     33 ( 0.00%)          match ty.kind() {
      .                       ty::Generator(..) => {
      .                           let data = self.tcx.generator_kind(def_id).unwrap();
      .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));
      .                       }
      .           
      .                       ty::Closure(..) => {
      .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);
      .                       }
      .           
      .                       _ => bug!("closure that is neither generator nor closure"),
      .                   }
     44 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
     44 ( 0.00%)          if let ty::Closure(def_id, substs) = *ty.kind() {
     99 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
      .                   }
      .               }
      .           
      .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
      .                   let def_id = self.tcx.hir().local_def_id(id);
      .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
      .                   let body_id = self.tcx.hir().body_owned_by(id);
      .                   let const_data = self.encode_rendered_const_for_body(body_id);
      .                   let qualifs = self.tcx.mir_const_qualif(def_id);
      .           
      .                   record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
      .                   self.encode_item_type(def_id.to_def_id());
      .               }
      .           
      .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
      .                   self.lazy(used_libraries.iter())
      .               }
      .           
      .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
      5 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
      .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
      .               }
      .           
      .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
      .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
      .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
      .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
      .           
      2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
      8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
      .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
      .                           syntax_contexts.set(index, this.lazy(ctxt_data));
      .                           Ok(())
      .                       },
      .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
      .                           if let Some(index) = index.as_local() {
    158 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
    158 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
      .                           }
      .                           Ok(())
      .                       },
      .                   );
      .           
      .                   (
      .                       syntax_contexts.encode(&mut self.opaque),
      .                       expn_data_table.encode(&mut self.opaque),
      .                       expn_hash_table.encode(&mut self.opaque),
      .                   )
      .               }
      .           
      .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
      6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
      .                   if is_proc_macro {
      .                       let tcx = self.tcx;
      .                       let hir = tcx.hir();
      .           
      .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
      .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
      .                       let macros =
      .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
      .           
      .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
      7 ( 0.00%)          empty_proc_macro!(self);
      .           
      1 ( 0.00%)          let deps = self
      .                       .tcx
      .                       .crates(())
      .                       .iter()
      .                       .map(|&cnum| {
      .                           let dep = CrateDep {
     24 ( 0.00%)                      name: self.tcx.crate_name(cnum),
     24 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
     24 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
     24 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
     24 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
      .                           };
    120 ( 0.00%)                  (cnum, dep)
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   {
      .                       // Sanity-check the crate numbers
      .                       let mut expected_cnum = 1;
     48 ( 0.00%)              for &(n, _) in &deps {
     60 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
      .                           expected_cnum += 1;
      .                       }
      .                   }
      .           
      .                   // We're just going to write a list of crate 'name-hash-version's, with
      .                   // the assumption that they are numbered 1 to n.
      .                   // FIXME (#2166): This is not nearly enough to support correct versioning
      .                   // but is enough to get transitive crate dependencies working.
      .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
      .               }
      .           
      .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let lib_features = tcx.lib_features(());
      2 ( 0.00%)          self.lazy(lib_features.to_vec())
      .               }
      .           
      .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
      .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
      .               }
      .           
      .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
      4 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          let lang_items = tcx.lang_items();
      2 ( 0.00%)          let lang_items = lang_items.items().iter();
      .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
    568 ( 0.00%)              if let Some(def_id) = opt_def_id {
      .                           if def_id.is_local() {
      .                               return Some((def_id.index, i));
      .                           }
      .                       }
      .                       None
      .                   }))
      .               }
      .           
      .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
      .               }
      .           
      .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
      .               }
      .           
      .               /// Encodes an index, mapping each trait to its (local) implementations.
      .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
      .                   debug!("EncodeContext::encode_traits_and_impls()");
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let tcx = self.tcx;
      5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
      4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
      .           
      .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
      .           
      .                   // Bring everything into deterministic order for hashing
     17 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
      .           
      .                   let all_impls: Vec<_> = all_impls
      .                       .into_iter()
    255 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
      .                           // Bring everything into deterministic order for hashing
     12 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
     38 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
      .                           });
      .           
     68 ( 0.00%)                  TraitImpls {
      .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
     51 ( 0.00%)                      impls: self.lazy(&impls),
      .                           }
    136 ( 0.00%)              })
      .                       .collect();
      .           
      .                   self.lazy(&all_impls)
      .               }
      .           
      .               // Encodes all symbols exported from this crate into the metadata.
      .               //
      .               // This pass is seeded off the reachability list calculated in the
      .               // middle::reachable module but filters out items that either don't have a
      .               // symbol associated with them (they weren't translated) or if they're an FFI
      .               // definition (as that's not defined in this crate).
      .               fn encode_exported_symbols(
      .                   &mut self,
      .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
      .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      .                   // The metadata symbol name is special. It should not show up in
      .                   // downstream crates.
      9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
      .           
      .                   self.lazy(
      .                       exported_symbols
      .                           .iter()
      .                           .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
      .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
      .                               _ => true,
      .                           })
      .                           .cloned(),
      .                   )
      .               }
      .           
      .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
      4 ( 0.00%)          for (ty, arr) in formats.iter() {
      2 ( 0.00%)              if *ty != CrateType::Dylib {
      .                           continue;
      .                       }
      .                       return self.lazy(arr.iter().map(|slot| match *slot {
      .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
      .           
      .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
      .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
      .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
      .               }
      .           }
      .           
      .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
      .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    111 ( 0.00%)          self.tcx.hir()
      .               }
  9,360 ( 0.00%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
  1,040 ( 0.00%)          intravisit::walk_expr(self, ex);
      .                   self.encode_info_for_expr(ex);
  8,320 ( 0.00%)      }
      .               fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
      .                   intravisit::walk_anon_const(self, c);
      .                   self.encode_info_for_anon_const(c.hir_id);
      .               }
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    591 ( 0.00%)          intravisit::walk_item(self, item);
    394 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
    448 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
      .                   }
    788 ( 0.00%)          self.encode_addl_info_for_item(item);
      .               }
      .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
      .                   intravisit::walk_foreign_item(self, ni);
      .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
      .               }
  1,548 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   intravisit::walk_generics(self, generics);
      .                   self.encode_info_for_generics(generics);
  1,376 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
     98 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
      .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
      .                       for (field_index, _field) in variant.fields.iter().enumerate() {
      .                           self.encode_field(adt_def, variant_index, field_index);
      .                       }
      .                   }
    112 ( 0.00%)      }
      .           
      .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
      .                   for param in generics.params {
    408 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
    518 ( 0.00%)              match param.kind {
      .                           GenericParamKind::Lifetime { .. } => continue,
      .                           GenericParamKind::Type { default, .. } => {
      .                               self.encode_info_for_generic_param(
      .                                   def_id.to_def_id(),
      .                                   EntryKind::TypeParam,
      .                                   default.is_some(),
      .                               );
      .                           }
-- line 1970 ----------------------------------------
-- line 1975 ----------------------------------------
      .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  2,080 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
      .                       self.encode_info_for_closure(expr.hir_id);
      .                   }
      .               }
      .           
      .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
      .                   record!(self.tables.ident_span[def_id] <- ident.span);
      .               }
      .           
      .               /// In some cases, along with the item itself, we also
      .               /// encode some sub-items. Usually we want some info from the item
      .               /// so it's easier to do that here then to wait until we would encounter
      .               /// normally in the visitor walk.
  1,773 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
    985 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::Macro(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::ForeignMod { .. }
      .                       | hir::ItemKind::GlobalAsm(..)
      .                       | hir::ItemKind::ExternCrate(..)
-- line 2005 ----------------------------------------
-- line 2017 ----------------------------------------
      .                               self.encode_enum_variant_info(def, i);
      .           
      .                               if let Some(_ctor_def_id) = variant.ctor_def_id {
      .                                   self.encode_enum_variant_ctor(def, i);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Struct(ref struct_def, _) => {
     14 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
     28 ( 0.00%)                  self.encode_fields(def);
      .           
      .                           // If the struct has a constructor, encode it.
     56 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
      .                               let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
      .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
      .                           }
      .                       }
      .                       hir::ItemKind::Union(..) => {
      .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
      .                           self.encode_fields(def);
      .                       }
      .                       hir::ItemKind::Impl { .. } => {
    356 ( 0.00%)                  for &trait_item_def_id in
     51 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_impl_item(trait_item_def_id);
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(..) => {
     25 ( 0.00%)                  for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_trait_item(item_def_id);
      .                           }
      .                       }
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           struct ImplsVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
      .           }
      .           
      .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
  1,379 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
    394 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Impl(..) => {
    188 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
    258 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
      .                                   self.tcx,
      .                                   trait_ref.self_ty(),
      .                                   SimplifyParams::No,
      .                                   StripReferences::No,
      .                               );
      .           
      .                               self.impls
      .                                   .entry(trait_ref.def_id)
      .                                   .or_default()
      .                                   .push((item.def_id.local_def_index, simplified_self_ty));
      .                           }
      .                       }
      .                       _ => {}
      .                   }
  1,576 ( 0.00%)      }
      .           
      .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
      .           
      .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
      .                   // handled in `visit_item` above
      .               }
      .           
      .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn raw_data(&self) -> &[u8] {
      .                   &self.raw_data
      .               }
      .           }
      .           
     10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
      5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
      .           
      .               // Since encoding metadata is not in a query, and nothing is cached,
      .               // there's no need to do dep-graph tracking for any of it.
      .               tcx.dep_graph.assert_ignored();
      .           
      7 ( 0.00%)      join(
      3 ( 0.00%)          || encode_metadata_impl(tcx),
      .                   || {
      5 ( 0.00%)              if tcx.sess.threads() == 1 {
      .                           return;
      .                       }
      .                       // Prefetch some queries used by metadata encoding.
      .                       // This is not necessary for correctness, but is only done for performance reasons.
      .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
      .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
      .                   },
      .               )
      .               .0
      9 ( 0.00%)  }
      .           
      9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
      1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
      .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
      .           
      .               // Will be filled with the root position after encoding everything.
      .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
      .           
      2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
      3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
      2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
      .               drop(source_map_files);
      .           
      .               let hygiene_ctxt = HygieneEncodeContext::default();
      .           
     35 ( 0.00%)      let mut ecx = EncodeContext {
      4 ( 0.00%)          opaque: encoder,
      .                   tcx,
      2 ( 0.00%)          feat: tcx.features(),
      .                   tables: Default::default(),
      .                   lazy_state: LazyState::NoNode,
      .                   type_shorthands: Default::default(),
      .                   predicate_shorthands: Default::default(),
      4 ( 0.00%)          source_file_cache,
      .                   interpret_allocs: Default::default(),
      4 ( 0.00%)          required_source_files,
      2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
      .                   hygiene_ctxt: &hygiene_ctxt,
      .               };
      .           
      .               // Encode the rustc version string in a predictable location.
      .               rustc_version().encode(&mut ecx).unwrap();
      .           
      .               // Encode all the entries and extra information in the crate,
      .               // culminating in the `CrateRoot` which points to all of it.
      1 ( 0.00%)      let root = ecx.encode_crate_root();
      .           
      7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
      .           
      .               // Encode the root position.
      .               let header = METADATA_HEADER.len();
      .               let pos = root.position.get();
      3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
      3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
      1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
      5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
      .           
      .               // Record metadata size for self-profiling
      .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
      .           
      5 ( 0.00%)      EncodedMetadata { raw_data: result }
     12 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      *providers = Providers {
      .                   traits_in_crate: |tcx, cnum| {
      1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
      .           
      1 ( 0.00%)              #[derive(Default)]
      .                       struct TraitsVisitor {
      .                           traits: Vec<DefId>,
      .                       }
      .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
      .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
    788 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
      7 ( 0.00%)                          self.traits.push(item.def_id.to_def_id());
      .                               }
      .                           }
      .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
      .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
      .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
      .                       }
      .           
      .                       let mut visitor = TraitsVisitor::default();
      4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
      .                       // Bring everything into deterministic order.
      7 ( 0.00%)              visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
      .                       tcx.arena.alloc_slice(&visitor.traits)
      .                   },
      .           
      .                   ..*providers
      .               };
      .           }

 64,793 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
      .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
      .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
      .               ///
      .               /// The result is meaningful only if the tree is ordered by key, like the tree
      .               /// in a `BTreeMap` is.
119,922 ( 0.02%)      pub fn search_tree<Q: ?Sized>(
      .                   mut self,
      .                   key: &Q,
      .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   loop {
      .                       self = match self.search_node(key) {
      .                           Found(handle) => return Found(handle),
  4,869 ( 0.00%)                  GoDown(handle) => match handle.force() {
      .                               Leaf(leaf) => return GoDown(leaf),
      .                               Internal(internal) => internal.descend(),
      .                           },
      .                       }
      .                   }
 63,699 ( 0.01%)      }
      .           
      .               /// Descends to the nearest node where the edge matching the lower bound
      .               /// of the range is different from the edge matching the upper bound, i.e.,
      .               /// the nearest node that has at least one key contained in the range.
      .               ///
      .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
      .               /// edge indices in the node delimiting the range, and the corresponding
      .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
      .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   let node = self.reborrow();
      .                   let keys = node.keys();
      .                   debug_assert!(start_index <= keys.len());
 64,800 ( 0.01%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
224,336 ( 0.05%)              match key.cmp(k.borrow()) {
      .                           Ordering::Greater => {}
      .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
      .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
      .                       }
      .                   }
      .                   IndexResult::Edge(keys.len())
      .               }
      .           
-- line 219 ----------------------------------------

114,429 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    182 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
    117 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 38,363 ( 0.01%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
215,397 ( 0.04%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 61,542 ( 0.01%)          let start_src_index = self.src_index(self.pos);
 92,313 ( 0.02%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 30,771 ( 0.01%)          if is_beginning_of_file {
     52 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 52,279 ( 0.01%)              let start_src_index = self.src_index(self.pos);
124,575 ( 0.03%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 41,525 ( 0.01%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     65 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
124,536 ( 0.03%)              let token = rustc_lexer::first_token(text);
      .           
 83,024 ( 0.02%)              let start = self.pos;
 41,512 ( 0.01%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
343,196 ( 0.07%)              match self.cook_lexer_token(token.kind, start) {
246,064 ( 0.05%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
184,548 ( 0.04%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
276,939 ( 0.06%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
    490 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
    560 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
207,560 ( 0.04%)          Some(match token {
  2,845 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
 14,015 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
 13,875 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      .                           if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 30,316 ( 0.01%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 37,895 ( 0.01%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
 15,158 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
 22,737 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 37,895 ( 0.01%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 30,316 ( 0.01%)                  self.sess.symbol_gallery.insert(sym, span);
 15,158 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 53,053 ( 0.01%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
  1,968 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
    369 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
      .                                       .emit();
      .                                   None
      .                               } else {
      .                                   Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
    984 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
    172 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
     86 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
    258 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    344 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
 33,300 ( 0.01%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
  2,775 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  8,325 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 41,625 ( 0.01%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
    112 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    112 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
     22 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
     11 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
     33 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    336 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 66,427 ( 0.01%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
  1,421 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 10,745 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 42,980 ( 0.01%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
    672 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 11,112 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  2,162 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
  9,729 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
     44 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 68,211 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 15,158 ( 0.00%)      match is_nfc_quick(string.chars()) {
 75,790 ( 0.02%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

167,647 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,799 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 70,005 ( 0.01%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
  2,595 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
  2,494 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
  1,248 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
  3,741 ( 0.00%)      pub prev_token: Token,
  1,249 ( 0.00%)      pub capture_cfg: bool,
  2,499 ( 0.00%)      restrictions: Restrictions,
  2,496 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
  2,496 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
  2,496 ( 0.00%)      unmatched_angle_bracket_count: u32,
  3,744 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
  1,248 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
  1,248 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
  5,092 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
  4,992 ( 0.00%)      capturing: Capturing,
  1,248 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  5,166 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 43,997 ( 0.01%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  9,992 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  3,263 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 20,046 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  4,331 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  8,662 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  2,075 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
 11,166 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
896,940 ( 0.19%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
445,771 ( 0.09%)              let (tree, spacing) = if !self.frame.open_delim {
 10,322 ( 0.00%)                  self.frame.open_delim = true;
 51,610 ( 0.01%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
872,528 ( 0.18%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 42,080 ( 0.01%)              } else if !self.frame.close_delim {
 10,261 ( 0.00%)                  self.frame.close_delim = true;
 51,305 ( 0.01%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
 20,506 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
133,289 ( 0.03%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  9,468 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
170,106 ( 0.04%)              match tree {
      .                           TokenTree::Token(token) => {
597,960 ( 0.12%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
597,960 ( 0.12%)      }
      .           
357,290 ( 0.07%)      fn next_desugared(&mut self) -> (Token, Spacing) {
107,215 ( 0.02%)          let (data, attr_style, sp) = match self.next() {
     42 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
178,575 ( 0.04%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
  2,858 ( 0.00%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
      .                           '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
     56 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
     70 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
    168 ( 0.00%)              [
     98 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
     56 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    112 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
     14 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
     14 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
    168 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
     42 ( 0.00%)          self.next()
321,561 ( 0.07%)      }
      .           }
      .           
  5,190 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  4,152 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     36 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    592 ( 0.00%)      Some(match token.kind {
  1,184 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
  1,184 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
  1,184 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  2,072 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    592 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  2,072 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  1,480 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  5,810 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    415 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    830 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 12,865 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    415 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    415 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  2,490 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    830 ( 0.00%)          parser.bump();
      .           
      .                   parser
  3,735 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
442,554 ( 0.09%)              let (mut next, spacing) = if self.desugar_doc_comments {
142,916 ( 0.03%)                  self.token_cursor.next_desugared()
      .                       } else {
114,090 ( 0.02%)                  self.token_cursor.next()
      .                       };
295,036 ( 0.06%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 73,759 ( 0.02%)              self.token_cursor.break_last_token = false;
295,036 ( 0.06%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,724 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
252,080 ( 0.05%)              if matches!(
147,518 ( 0.03%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
294,924 ( 0.06%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 13,122 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  1,458 ( 0.00%)          if self.expected_tokens.is_empty() {
  1,692 ( 0.00%)              if self.token == *t {
  1,410 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 14,112 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 21,870 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 16,236 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  2,706 ( 0.00%)          if edible.contains(&self.token.kind) {
  3,645 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 20,295 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  8,967 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  6,915 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 15,932 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  2,276 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 13,656 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  9,104 ( 0.00%)          self.bump();
      .                   Ok(ident)
 22,760 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
196,581 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
 85,824 ( 0.02%)          let is_present = self.token == *tok;
 57,844 ( 0.01%)          if !is_present {
121,451 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
196,581 ( 0.04%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
 37,567 ( 0.01%)          let is_present = self.check(tok);
 24,699 ( 0.01%)          if is_present {
  5,274 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
      .               }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  9,695 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  2,084 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 59,935 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 13,965 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 12,116 ( 0.00%)          if self.check_keyword(kw) {
  1,357 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 13,965 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,924 ( 0.00%)          if self.token.is_keyword(kw) {
    388 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    500 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    400 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  7,944 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  3,972 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  8,937 ( 0.00%)      }
      .           
  9,852 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,704 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  2,104 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  9,852 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,742 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  3,604 ( 0.00%)      fn check_path(&mut self) -> bool {
  8,209 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  4,505 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    782 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    656 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,746 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    970 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,746 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,080 ( 0.00%)          self.check_or_expected(
    540 ( 0.00%)              self.token.is_like_plus(),
    540 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 16,500 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  9,625 ( 0.00%)          if self.token.kind == expected {
  1,040 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  4,275 ( 0.00%)          match self.token.kind.break_two_token_op() {
     35 ( 0.00%)              Some((first, second)) if first == expected => {
     20 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     25 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     45 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      5 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
     70 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  2,550 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 15,775 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    196 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    960 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     72 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    820 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  3,213 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  2,088 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    688 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    739 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    820 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  1,032 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    516 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    344 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  3,669 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    204 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  3,378 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  2,170 ( 0.00%)              if let Some(ref t) = sep.sep {
  3,009 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  1,941 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  1,232 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    789 ( 0.00%)              let t = f(self)?;
  2,111 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,836 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,937 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  2,280 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  1,144 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    644 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  2,869 ( 0.00%)          Ok((val, trailing))
  1,824 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  1,016 ( 0.00%)          self.expect(bra)?;
  1,824 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    440 ( 0.00%)              &token::OpenDelim(delim),
    652 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
958,568 ( 0.20%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
442,416 ( 0.09%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
294,944 ( 0.06%)          self.prev_token = mem::replace(&mut self.token, next_token);
 73,736 ( 0.02%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 73,736 ( 0.02%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
589,848 ( 0.12%)      pub fn bump(&mut self) {
294,924 ( 0.06%)          let next_token = self.next_tok(self.token.span);
442,386 ( 0.09%)          self.bump_with(next_token);
589,848 ( 0.12%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    900 ( 0.00%)          if dist == 0 {
    340 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  3,216 ( 0.00%)          let frame = &self.token_cursor.frame;
  3,445 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  7,846 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 10,280 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 12,892 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  4,472 ( 0.00%)                      Some(tree) => match tree {
  2,035 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,674 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  2,174 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    949 ( 0.00%)          let mut token = Token::dummy();
    837 ( 0.00%)          while i < dist {
  7,308 ( 0.00%)              token = cursor.next().0;
  3,111 ( 0.00%)              if matches!(
  1,944 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    435 ( 0.00%)              i += 1;
      .                   }
     73 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  3,501 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    989 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  3,501 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    332 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      5 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  1,328 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  3,672 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  1,206 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     45 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  6,426 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
     28 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    362 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      6 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      6 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     78 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    117 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    443 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    735 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  3,600 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  3,200 ( 0.00%)          Ok(
  2,780 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    585 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    585 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,288 ( 0.00%)                  match self.parse_token_tree() {
  1,610 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    644 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    156 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     24 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     24 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     24 ( 0.00%)                      let span = expr.span;
      .           
    120 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    216 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  2,800 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,746 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    972 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
 24,704 ( 0.01%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
 14,536 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
135,188 ( 0.03%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
109,446 ( 0.02%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
  3,540 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
  3,540 ( 0.00%)                  let span = frame.span;
  1,770 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
  3,540 ( 0.00%)                  self.bump();
  8,850 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
  2,636 ( 0.00%)                  self.bump();
  6,590 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
 21,616 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    686 ( 0.00%)          let old = self.restrictions;
    904 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    865 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  5,000 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  3,125 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  5,625 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  5,490 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  1,805 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    481 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,924 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    372 ( 0.00%)              return Ok(Visibility {
  1,116 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
    109 ( 0.00%)          let lo = self.prev_token.span;
      .           
    545 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
    207 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     69 ( 0.00%)                  self.bump(); // `(`
     46 ( 0.00%)                  self.bump(); // `crate`
     69 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
     23 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     69 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    258 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  4,941 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     92 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
    590 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    107 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
    590 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 16,728 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  8,364 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  4,860 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 17,028 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
 13,304 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  6,652 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  6,652 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
 13,304 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

292,529 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    247 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
     13 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
     13 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     78 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
    104 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
  5,988 ( 0.00%)          while self.token != token::Eof {
 23,848 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
    117 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
 55,554 ( 0.01%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
121,560 ( 0.03%)              match self.parse_token_tree() {
218,808 ( 0.05%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
245,637 ( 0.05%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 54,586 ( 0.01%)          let sm = self.string_reader.sess.source_map();
      .           
231,777 ( 0.05%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
  3,465 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
  3,465 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
 24,255 ( 0.01%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
  3,465 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
 17,325 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
  6,930 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
  6,930 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  6,930 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
 10,395 ( 0.00%)                          if tts.is_empty() {
    975 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
  1,300 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
 13,860 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
  3,465 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
 24,255 ( 0.01%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
119,140 ( 0.02%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
 47,656 ( 0.01%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
142,968 ( 0.03%)                  Ok((tt, spacing))
      .                       }
      .                   }
218,344 ( 0.05%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
259,575 ( 0.05%)          let (spacing, token) = self.string_reader.next_token();
136,582 ( 0.03%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
  3,465 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
354,809 ( 0.07%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
170,785 ( 0.04%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 14,028 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 26,666 ( 0.01%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
 16,872 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
129,435 ( 0.03%)          self.buf.push((tree, joint))
218,344 ( 0.05%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
 34,767 ( 0.01%)          TokenStream::new(self.buf)
      .               }
      .           }

 92,296 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                 

-- line 4 ----------------------------------------
        .           
        .           use super::Utf8Error;
        .           
        .           /// Returns the initial codepoint accumulator for the first byte.
        .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
        .           /// for width 3, and 3 bits for width 4.
        .           #[inline]
        .           const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
       20 ( 0.00%)      (byte & (0x7F >> width)) as u32
        .           }
        .           
        .           /// Returns the value of `ch` updated with continuation byte `byte`.
        .           #[inline]
        .           const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
       60 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
        .           }
        .           
        .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
        .           /// bits `10`).
        .           #[inline]
        .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
        .               (byte as i8) < -64
        .           }
-- line 26 ----------------------------------------
-- line 30 ----------------------------------------
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[inline]
        .           pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
        .               // Decode UTF-8
  583,988 ( 0.12%)      let x = *bytes.next()?;
1,144,076 ( 0.24%)      if x < 128 {
      172 ( 0.00%)          return Some(x as u32);
        .               }
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [[[x y] z] w]
        .               // NOTE: Performance is sensitive to the exact formulation here
        .               let init = utf8_first_byte(x, 2);
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
        .               let y = unsafe { *bytes.next().unwrap_unchecked() };
        .               let mut ch = utf8_acc_cont_byte(init, y);
       30 ( 0.00%)      if x >= 0xE0 {
        .                   // [[x y z] w] case
        .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        .                   // SAFETY: `bytes` produces an UTF-8-like string,
        .                   // so the iterator must produce a value here.
        .                   let z = unsafe { *bytes.next().unwrap_unchecked() };
        .                   let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
        .                   ch = init << 12 | y_z;
       30 ( 0.00%)          if x >= 0xF0 {
        .                       // [x y z w] case
        .                       // use only the lower 3 bits of `init`
        .                       // SAFETY: `bytes` produces an UTF-8-like string,
        .                       // so the iterator must produce a value here.
        .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
        .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        .                   }
        .               }
-- line 67 ----------------------------------------
-- line 77 ----------------------------------------
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[inline]
        .           pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
        .           where
        .               I: DoubleEndedIterator<Item = &'a u8>,
        .           {
        .               // Decode UTF-8
        .               let w = match *bytes.next_back()? {
    1,524 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
        .                   back_byte => back_byte,
        .               };
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [x [y [z w]]]
        .               let mut ch;
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 113 ----------------------------------------
        .           }
        .           
        .           // use truncation to fit u64 into usize
        .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
        .           
        .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
        .           #[inline]
        .           const fn contains_nonascii(x: usize) -> bool {
   16,092 ( 0.00%)      (x & NONASCII_MASK) != 0
        .           }
        .           
        .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
        .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
        .           #[inline(always)]
        .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
        .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
        .               let mut index = 0;
        .               let len = v.len();
        .           
        .               let usize_bytes = mem::size_of::<usize>();
        .               let ascii_block_size = 2 * usize_bytes;
      513 ( 0.00%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
        .               let align = v.as_ptr().align_offset(usize_bytes);
        .           
    1,156 ( 0.00%)      while index < len {
        .                   let old_offset = index;
        .                   macro_rules! err {
        .                       ($error_len: expr) => {
        .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
        .                       };
        .                   }
        .           
        .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
        .                           // we needed data, but there was none: error!
        .                           if index >= len {
        .                               err!(None)
        .                           }
        .                           v[index]
        .                       }};
        .                   }
        .           
      567 ( 0.00%)          let first = v[index];
    1,134 ( 0.00%)          if first >= 128 {
        .                       let w = utf8_char_width(first);
        .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
        .                       //        first  C2 80        last DF BF
        .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
        .                       //        first  E0 A0 80     last EF BF BF
        .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
        .                       //               ED A0 80 to       ED BF BF
        .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
        .                       //
        .                       // https://tools.ietf.org/html/rfc3629
        .                       // UTF8-1      = %x00-7F
        .                       // UTF8-2      = %xC2-DF UTF8-tail
        .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
        .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
        .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
        .                       //               %xF4 %x80-8F 2( UTF8-tail )
       20 ( 0.00%)              match w {
        .                           2 => {
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(1))
        .                               }
        .                           }
        .                           3 => {
       40 ( 0.00%)                      match (first, next!()) {
        .                                   (0xE0, 0xA0..=0xBF)
       35 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
        .                                   | (0xED, 0x80..=0x9F)
        .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
        .                                   _ => err!(Some(1)),
        .                               }
       25 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(2))
        .                               }
        .                           }
        .                           4 => {
        .                               match (first, next!()) {
        .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
        .                                   _ => err!(Some(1)),
        .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
        .                                   err!(Some(2))
        .                               }
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(3))
        .                               }
        .                           }
        .                           _ => err!(Some(1)),
        .                       }
       15 ( 0.00%)              index += 1;
        .                   } else {
        .                       // Ascii case, try to skip forward quickly.
        .                       // When the pointer is aligned, read 2 words of data per iteration
        .                       // until we find a word containing a non-ascii byte.
    1,861 ( 0.00%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
        .                           let ptr = v.as_ptr();
   32,524 ( 0.01%)                  while index < blocks_end {
        .                               // SAFETY: since `align - index` and `ascii_block_size` are
        .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
        .                               // always aligned with a `usize` so it's safe to dereference
        .                               // both `block` and `block.offset(1)`.
        .                               unsafe {
        .                                   let block = ptr.add(index) as *const usize;
        .                                   // break if there is a nonascii byte
   16,092 ( 0.00%)                          let zu = contains_nonascii(*block);
        .                                   let zv = contains_nonascii(*block.offset(1));
   32,184 ( 0.01%)                          if zu || zv {
        .                                       break;
        .                                   }
        .                               }
   32,174 ( 0.01%)                      index += ascii_block_size;
        .                           }
        .                           // step from the point where the wordwise loop stopped
    6,070 ( 0.00%)                  while index < len && v[index] < 128 {
    1,305 ( 0.00%)                      index += 1;
        .                           }
        .                       } else {
      387 ( 0.00%)                  index += 1;
        .                       }
        .                   }
        .               }
        .           
        .               Ok(())
        .           }
        .           
        .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
        .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
        .           ];
        .           
        .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[must_use]
        .           #[inline]
        .           pub const fn utf8_char_width(b: u8) -> usize {
       10 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
        .           }
        .           
        .           /// Mask of the value bits of a continuation byte.
        .           const CONT_MASK: u8 = 0b0011_1111;
        .           
        .           // truncate `&str` to length at most equal to `max`
        .           // return `true` if it were truncated, and the new str.
        .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

  150,093 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
   17,708 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      767 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
   21,107 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
      977 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   10,861 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      125 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      225 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
       75 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
-- line 91 ----------------------------------------
-- line 92 ----------------------------------------
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
       50 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      125 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      217 ( 0.00%)      }
        .           }
        .           
       28 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       49 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
       28 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       35 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      426 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      154 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
3,691,964 ( 0.77%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   30,876 ( 0.01%)      BinOp(BinOpToken),
        .               BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   16,569 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    5,577 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
   12,854 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   54,252 ( 0.01%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
      891 ( 0.00%)      Lifetime(Symbol),
        .           
    2,535 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
    8,409 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
1,015,282 ( 0.21%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   17,549 ( 0.00%)      pub kind: TokenKind,
    1,222 ( 0.00%)      pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
       70 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
      855 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    3,475 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
      850 ( 0.00%)              _ => return None,
        .                   })
      855 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
      514 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      121 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
   36,375 ( 0.01%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  114,741 ( 0.02%)          Token { kind, span }
   36,375 ( 0.01%)      }
        .           
        .               /// Some token that will be thrown away later.
    1,768 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    1,768 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
      144 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
   23,828 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
   23,828 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      566 ( 0.00%)          match &self.kind {
       16 ( 0.00%)              Interpolated(nt) => nt.span(),
      275 ( 0.00%)              _ => self.span,
        .                   }
      275 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   71,484 ( 0.01%)          !matches!(
   23,828 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
   23,828 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    3,595 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
      715 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       36 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
      204 ( 0.00%)          match self.uninterpolate().kind {
       63 ( 0.00%)              Ident(name, is_raw)              =>
       21 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
        .                       // DotDotDot is no longer supported, but we need some way to display the error
        .                       DotDot | DotDotDot | DotDotEq     | // range notation
        .                       Lt | BinOp(Shl)                   | // associated path
        .                       ModSep                            | // global path
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
      160 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      856 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    1,412 ( 0.00%)          match self.uninterpolate().kind {
      639 ( 0.00%)              Ident(name, is_raw)        =>
       71 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
      242 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
    1,284 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
      410 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
      160 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
       62 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
        .                       || self == &Question
        .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
       64 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
      605 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      132 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      128 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    1,091 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  217,261 ( 0.05%)          match &self.kind {
   16,087 ( 0.00%)              Interpolated(nt) => match **nt {
    3,144 ( 0.00%)                  NtIdent(ident, is_raw) => {
    7,868 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    1,091 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   42,804 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  139,065 ( 0.03%)          match token.kind {
  456,622 ( 0.09%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  270,549 ( 0.06%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
   14,857 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
   30,840 ( 0.01%)          match token.kind {
    1,752 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
  103,999 ( 0.02%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    3,210 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      563 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    1,126 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      376 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
      752 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    4,780 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      114 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       32 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       16 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      288 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    2,678 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    4,780 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    7,007 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
      839 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    5,975 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   19,336 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   38,672 ( 0.01%)      }
        .           
      159 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      296 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      296 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      296 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      159 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      318 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
       16 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  129,768 ( 0.03%)          match self.ident() {
      786 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
       20 ( 0.00%)      }
        .           
   70,140 ( 0.01%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   35,070 ( 0.01%)          let kind = match self.kind {
    1,605 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
      118 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      175 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        2 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
    2,935 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        9 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        2 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       78 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
    1,480 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
    1,966 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
   18,278 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   63,126 ( 0.01%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   60,004 ( 0.01%)          self.kind == *rhs
        .               }
        .           }
        .           
      126 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
        .               NtStmt(ast::Stmt),
        .               NtPat(P<ast::Pat>),
       36 ( 0.00%)      NtExpr(P<ast::Expr>),
        .               NtTy(P<ast::Ty>),
        .               NtIdent(Ident, /* is_raw */ bool),
        .               NtLifetime(Ident),
        .               NtLiteral(P<ast::Expr>),
        .               /// Stuff inside brackets for attributes
        .               NtMeta(P<ast::AttrItem>),
        .               NtPath(ast::Path),
        .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
    4,188 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
    9,656 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
    4,188 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------
-- line 765 ----------------------------------------
        .           
        .           impl fmt::Display for NonterminalKind {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "{}", self.symbol())
        .               }
        .           }
        .           
        .           impl Nonterminal {
        8 ( 0.00%)      pub fn span(&self) -> Span {
       40 ( 0.00%)          match self {
        .                       NtItem(item) => item.span,
        .                       NtBlock(block) => block.span,
        .                       NtStmt(stmt) => stmt.span,
        .                       NtPat(pat) => pat.span,
        .                       NtExpr(expr) | NtLiteral(expr) => expr.span,
        .                       NtTy(ty) => ty.span,
        8 ( 0.00%)              NtIdent(ident, _) | NtLifetime(ident) => ident.span,
        .                       NtMeta(attr_item) => attr_item.span(),
        .                       NtPath(path) => path.span,
        .                       NtVis(vis) => vis.span,
        .                       NtTT(tt) => tt.span(),
        .                   }
       16 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq for Nonterminal {
        .               fn eq(&self, rhs: &Self) -> bool {
        .                   match (self, rhs) {
        .                       (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) => {
        .                           ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs
        .                       }
-- line 795 ----------------------------------------

1,043,015 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 159 ----------------------------------------
      .               /// let s = "not empty";
      .               /// assert!(!s.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_str_is_empty", since = "1.39.0")]
      .               #[must_use]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 81,243 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Checks that `index`-th byte is the first byte in a UTF-8 code point
      .               /// sequence or the end of the string.
      .               ///
      .               /// The start and end of the string (when `index == self.len()`) are
      .               /// considered to be boundaries.
      .               ///
-- line 175 ----------------------------------------
-- line 193 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "is_char_boundary", since = "1.9.0")]
      .               #[inline]
      .               pub fn is_char_boundary(&self, index: usize) -> bool {
      .                   // 0 is always ok.
      .                   // Test for 0 explicitly so that it can optimize out the check
      .                   // easily and skip reading string data for that case.
      .                   // Note that optimizing `self.get(..index)` relies on this.
336,252 ( 0.07%)          if index == 0 {
      .                       return true;
      .                   }
      .           
168,360 ( 0.03%)          match self.as_bytes().get(index) {
      .                       // For `None` we have two options:
      .                       //
      .                       // - index == self.len()
      .                       //   Empty strings are valid, so return true
      .                       // - index > self.len()
      .                       //   In this case return false
      .                       //
      .                       // The check is placed exactly here, because it improves generated
      .                       // code on higher opt-levels. See PR #84751 for more details.
 72,296 ( 0.02%)              None => index == self.len(),
      .           
      .                       // This is bit magic equivalent to: b < 128 || b >= 192
 97,525 ( 0.02%)              Some(&b) => (b as i8) >= -0x40,
      .                   }
      .               }
      .           
      .               /// Converts a string slice to a byte slice. To convert the byte slice back
      .               /// into a string slice, use the [`from_utf8`] function.
      .               ///
      .               /// # Examples
      .               ///
-- line 226 ----------------------------------------
-- line 808 ----------------------------------------
      .               ///
      .               /// assert_eq!(None, iter.next());
      .               /// ```
      .               #[must_use = "this returns the split string as an iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "split_whitespace", since = "1.1.0")]
      .               #[inline]
      .               pub fn split_whitespace(&self) -> SplitWhitespace<'_> {
      9 ( 0.00%)          SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }
      .               }
      .           
      .               /// Splits a string slice by ASCII whitespace.
      .               ///
      .               /// The iterator returned will return string slices that are sub-slices of
      .               /// the original string slice, separated by any amount of ASCII whitespace.
      .               ///
      .               /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].
-- line 824 ----------------------------------------
-- line 1056 ----------------------------------------
      .               /// ```
      .               /// let s = "Löwe 老虎 Léopard";
      .               /// let x: &[_] = &['1', '2'];
      .               ///
      .               /// assert_eq!(s.find(x), None);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      6 ( 0.00%)      pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {
      1 ( 0.00%)          pat.into_searcher(self).next_match().map(|(i, _)| i)
      2 ( 0.00%)      }
      .           
      .               /// Returns the byte index for the first character of the rightmost match of the pattern in
      .               /// this string slice.
      .               ///
      .               /// Returns [`None`] if the pattern doesn't match.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
-- line 1074 ----------------------------------------
-- line 1102 ----------------------------------------
      .               /// ```
      .               /// let s = "Löwe 老虎 Léopard";
      .               /// let x: &[_] = &['1', '2'];
      .               ///
      .               /// assert_eq!(s.rfind(x), None);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
  1,776 ( 0.00%)      pub fn rfind<'a, P>(&'a self, pat: P) -> Option<usize>
      .               where
      .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
      .               {
      .                   pat.into_searcher(self).next_match_back().map(|(i, _)| i)
  1,776 ( 0.00%)      }
      .           
      .               /// An iterator over substrings of this string slice, separated by
      .               /// characters matched by a pattern.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 1123 ----------------------------------------
-- line 1225 ----------------------------------------
      .               /// ```
      .               ///
      .               /// Use [`split_whitespace`] for this behavior.
      .               ///
      .               /// [`split_whitespace`]: str::split_whitespace
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {
    900 ( 0.00%)          Split(SplitInternal {
      .                       start: 0,
      .                       end: self.len(),
      .                       matcher: pat.into_searcher(self),
      .                       allow_trailing_empty: true,
      .                       finished: false,
      .                   })
      .               }
      .           
-- line 1241 ----------------------------------------
-- line 1472 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let v: Vec<&str> = "abc1defXghi".splitn(2, |c| c == '1' || c == 'X').collect();
      .               /// assert_eq!(v, ["abc", "defXghi"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {
    265 ( 0.00%)          SplitN(SplitNInternal { iter: self.split(pat).0, count: n })
      .               }
      .           
      .               /// An iterator over substrings of this string slice, separated by a
      .               /// pattern, starting from the end of the string, restricted to returning
      .               /// at most `n` items.
      .               ///
      .               /// If `n` substrings are returned, the last substring (the `n`th substring)
      .               /// will contain the remainder of the string.
-- line 1488 ----------------------------------------
-- line 1540 ----------------------------------------
      .               /// ```
      .               /// assert_eq!("cfg".split_once('='), None);
      .               /// assert_eq!("cfg=foo".split_once('='), Some(("cfg", "foo")));
      .               /// assert_eq!("cfg=foo=bar".split_once('='), Some(("cfg", "foo=bar")));
      .               /// ```
      .               #[stable(feature = "str_split_once", since = "1.52.0")]
      .               #[inline]
      .               pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {
     60 ( 0.00%)          let (start, end) = delimiter.into_searcher(self).next_match()?;
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
      .               }
      .           
      .               /// Splits the string on the last occurrence of the specified delimiter and
      .               /// returns prefix before delimiter and suffix after delimiter.
      .               ///
      .               /// # Examples
-- line 1556 ----------------------------------------
-- line 1749 ----------------------------------------
      .               ///
      .               /// assert_eq!("Hello\tworld", s.trim());
      .               /// ```
      .               #[inline]
      .               #[must_use = "this returns the trimmed string as a slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn trim(&self) -> &str {
      8 ( 0.00%)          self.trim_matches(|c: char| c.is_whitespace())
      .               }
      .           
      .               /// Returns a string slice with leading whitespace removed.
      .               ///
      .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
      .               /// Core Property `White_Space`.
      .               ///
      .               /// # Text directionality
-- line 1765 ----------------------------------------
-- line 1825 ----------------------------------------
      .               /// let s = "  עברית  ";
      .               /// assert!(Some('ת') == s.trim_end().chars().rev().next());
      .               /// ```
      .               #[inline]
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
      .               pub fn trim_end(&self) -> &str {
     75 ( 0.00%)          self.trim_end_matches(|c: char| c.is_whitespace())
      .               }
      .           
      .               /// Returns a string slice with leading whitespace removed.
      .               ///
      .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
      .               /// Core Property `White_Space`.
      .               ///
      .               /// # Text directionality
-- line 1841 ----------------------------------------
-- line 1945 ----------------------------------------
      .               /// A more complex pattern, using a closure:
      .               ///
      .               /// ```
      .               /// assert_eq!("1foo1barXX".trim_matches(|c| c == '1' || c == 'X'), "foo1bar");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  3,248 ( 0.00%)      pub fn trim_matches<'a, P>(&'a self, pat: P) -> &'a str
      .               where
      .                   P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,
      .               {
      .                   let mut i = 0;
      .                   let mut j = 0;
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((a, b)) = matcher.next_reject() {
      .                       i = a;
-- line 1961 ----------------------------------------
-- line 1962 ----------------------------------------
      .                       j = b; // Remember earliest known match, correct it below if
      .                       // last match is different
      .                   }
      .                   if let Some((_, b)) = matcher.next_reject_back() {
      .                       j = b;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(i..j) }
  3,248 ( 0.00%)      }
      .           
      .               /// Returns a string slice with all prefixes that match a pattern
      .               /// repeatedly removed.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 1978 ----------------------------------------
-- line 1994 ----------------------------------------
      .               /// assert_eq!("123foo1bar123".trim_start_matches(char::is_numeric), "foo1bar123");
      .               ///
      .               /// let x: &[_] = &['1', '2'];
      .               /// assert_eq!("12foo1bar12".trim_start_matches(x), "foo1bar12");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
  2,394 ( 0.00%)      pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {
      .                   let mut i = self.len();
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((a, _)) = matcher.next_reject() {
      .                       i = a;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(i..self.len()) }
  2,394 ( 0.00%)      }
      .           
      .               /// Returns a string slice with the prefix removed.
      .               ///
      .               /// If the string starts with the pattern `prefix`, returns substring after the prefix, wrapped
      .               /// in `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.
      .               ///
      .               /// If the string does not start with `prefix`, returns `None`.
      .               ///
-- line 2018 ----------------------------------------
-- line 2098 ----------------------------------------
      .               /// A more complex pattern, using a closure:
      .               ///
      .               /// ```
      .               /// assert_eq!("1fooX".trim_end_matches(|c| c == '1' || c == 'X'), "1foo");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
    675 ( 0.00%)      pub fn trim_end_matches<'a, P>(&'a self, pat: P) -> &'a str
      .               where
      .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
      .               {
      .                   let mut j = 0;
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((_, b)) = matcher.next_reject_back() {
      .                       j = b;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(0..j) }
    750 ( 0.00%)      }
      .           
      .               /// Returns a string slice with all prefixes that match a pattern
      .               /// repeatedly removed.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 2125 ----------------------------------------
-- line 2240 ----------------------------------------
      .               /// ```
      .               /// let nope = "j".parse::<u32>();
      .               ///
      .               /// assert!(nope.is_err());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     18 ( 0.00%)          FromStr::from_str(self)
      .               }
      .           
      .               /// Checks if all characters in this string are within the ASCII range.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let ascii = "hello!\n";
-- line 2256 ----------------------------------------
-- line 2420 ----------------------------------------
      .               /// Using `to_string`:
      .               ///
      .               /// ```
      .               /// assert_eq!("❤\n!".escape_default().to_string(), "\\u{2764}\\n!");
      .               /// ```
      .               #[must_use = "this returns the escaped string as an iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "str_escape", since = "1.34.0")]
     16 ( 0.00%)      pub fn escape_default(&self) -> EscapeDefault<'_> {
     64 ( 0.00%)          EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }
     16 ( 0.00%)      }
      .           
      .               /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].
      .               ///
      .               /// # Examples
      .               ///
      .               /// As an iterator:
      .               ///
      .               /// ```
-- line 2438 ----------------------------------------

    552 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
       18 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        9 ( 0.00%)              from_str_radix(src, radix)
       27 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   22,815 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  125,062 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  119,994 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
4,424,421 ( 0.92%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       16 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  252,489 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    9,780 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   22,809 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      608 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
3,318,827 ( 0.69%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  500,276 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,400,159 ( 0.29%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  201,765 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1587 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        6 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   56,905 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
       12 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  392,864 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      186 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    4,038 ( 0.00%)              if self <= 1 { return 0; }
        .           
    5,645 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   16,849 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    5,699 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    7,236 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   24,425 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
   45,959 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  237,620 ( 0.05%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       24 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
  274,625 ( 0.06%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   32,826 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
   43,859 ( 0.01%)                          assume(!self.end.is_null());
        .                               }
9,715,310 ( 2.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        1 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  187,376 ( 0.04%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    2,675 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      845 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      441 ( 0.00%)                  while let Some(x) = self.next() {
    5,304 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
       64 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   61,998 ( 0.01%)                  while let Some(x) = self.next() {
  638,338 ( 0.13%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
       64 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    2,337 ( 0.00%)                  while let Some(x) = self.next() {
   15,673 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    1,688 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    6,672 ( 0.00%)                  while let Some(x) = self.next() {
   33,180 ( 0.01%)                      if let Some(y) = f(x) {
    4,034 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,518 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   81,963 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,531 ( 0.00%)                  while let Some(x) = self.next_back() {
   30,222 ( 0.01%)                      i -= 1;
   26,516 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    7,476 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       24 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  125,131 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

2,178,920 ( 0.45%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir               

-- line 357 ----------------------------------------
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
      .               ///
      .               /// let five = Rc::new(5);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  2,758 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
      .                   // There is an implicit weak pointer owned by all the strong
      .                   // pointers, which ensures that the weak destructor never frees
      .                   // the allocation while the strong destructor is running, even
      .                   // if the weak pointer is stored inside the strong one.
      .                   unsafe {
      .                       Self::from_inner(
209,428 ( 0.04%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
      .                       )
      .                   }
  2,758 ( 0.00%)      }
      .           
      .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
      .               /// weak reference to the constructing `Rc<T>`.
      .               ///
      .               /// Generally, a structure circularly referencing itself, either directly or
      .               /// indirectly, should not hold a strong reference to prevent a memory leak.
      .               /// In `data_fn`, initialization of `T` can make use of the weak reference
      .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
      .               ///
      .               /// let x = Rc::new(4);
      .               /// let _y = Rc::clone(&x);
      .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
      2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
      .                       unsafe {
      .                           let val = ptr::read(&*this); // copy the contained object
      .           
      .                           // Indicate to Weaks that they can't be promoted by decrementing
      .                           // the strong count, and then remove the implicit "strong weak"
      .                           // pointer while also handling drop logic by just crafting a
      .                           // fake Weak.
      .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
      .               /// let five = Rc::new(5);
      .               /// let _weak_five = Rc::downgrade(&five);
      .               ///
      .               /// assert_eq!(1, Rc::weak_count(&five));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_counts", since = "1.15.0")]
      .               pub fn weak_count(this: &Self) -> usize {
  9,780 ( 0.00%)          this.inner().weak() - 1
      .               }
      .           
      .               /// Gets the number of strong (`Rc`) pointers to this allocation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
      .               pub unsafe fn decrement_strong_count(ptr: *const T) {
      .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
      .               }
      .           
      .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
      .               /// this allocation.
      .               #[inline]
      .               fn is_unique(this: &Self) -> bool {
    186 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`, if there are
      .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
      .               ///
      .               /// Returns [`None`] otherwise, because it is not safe to
      .               /// mutate a shared value.
      .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
      .               /// assert_eq!(*x, 4);
      .               ///
      .               /// let _y = Rc::clone(&x);
      .               /// assert!(Rc::get_mut(&mut x).is_none());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
     62 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`,
      .               /// without any check.
      .               ///
      .               /// See also [`get_mut`], which is safe and does appropriate checks.
      .               ///
      .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
      .               /// }
      .               /// assert_eq!(*x, "foo");
      .               /// ```
      .               #[inline]
      .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
      .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
      .                   // We are careful to *not* create a reference covering the "count" fields, as
      .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
 22,760 ( 0.00%)          unsafe { &mut (*this.ptr.as_ptr()).value }
      .               }
      .           
      .               #[inline]
      .               #[stable(feature = "ptr_eq", since = "1.17.0")]
      .               /// Returns `true` if the two `Rc`s point to the same allocation
      .               /// (in a vein similar to [`ptr::eq`]).
      .               ///
      .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
      .               /// let five = Rc::new(5);
      .               /// let same_five = Rc::clone(&five);
      .               /// let other_five = Rc::new(5);
      .               ///
      .               /// assert!(Rc::ptr_eq(&five, &same_five));
      .               /// assert!(!Rc::ptr_eq(&five, &other_five));
      .               /// ```
      .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    284 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
      .               }
      .           }
      .           
      .           impl<T: Clone> Rc<T> {
      .               /// Makes a mutable reference into the given `Rc`.
      .               ///
      .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
      .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
      .               /// *Rc::make_mut(&mut data) += 1;
      .               ///
      .               /// assert!(76 == *data);
      .               /// assert!(weak.upgrade().is_none());
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
 38,789 ( 0.01%)      pub fn make_mut(this: &mut Self) -> &mut T {
 23,205 ( 0.00%)          if Rc::strong_count(this) != 1 {
      .                       // Gotta clone the data, there are other Rcs.
      .                       // Pre-allocate memory to allow writing the cloned value directly.
  4,600 ( 0.00%)              let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           (**this).write_clone_into_raw(data.as_mut_ptr());
  9,200 ( 0.00%)                  *this = rc.assume_init();
      .                       }
  6,396 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
      .                       // Can just steal the data, all that's left is Weaks
      .                       let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
      .           
      .                           this.inner().dec_strong();
      .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
      .                           ptr::write(this, rc.assume_init());
      .                       }
      .                   }
      .                   // This unsafety is ok because we're guaranteed that the pointer
      .                   // returned is the *only* pointer that will ever be returned to T. Our
      .                   // reference count is guaranteed to be 1 at this point, and we required
      .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
      .                   // reference to the allocation.
  7,798 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
 46,524 ( 0.01%)      }
      .           }
      .           
      .           impl Rc<dyn Any> {
      .               #[inline]
      .               #[stable(feature = "rc_downcast", since = "1.29.0")]
      .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
      .               ///
      .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Copy elements from slice into newly allocated Rc<\[T\]>
      .               ///
      .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
      .               #[cfg(not(no_global_oom_handling))]
  1,656 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
      .                   unsafe {
      .                       let ptr = Self::allocate_for_slice(v.len());
    350 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
      .                       Self::from_ptr(ptr)
      .                   }
  2,134 ( 0.00%)      }
      .           
      .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
      .               ///
      .               /// Behavior is undefined should the size be wrong.
      .               #[cfg(not(no_global_oom_handling))]
      .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
      .                   // Panic guard while cloning T elements.
      .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
      .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
      .               #[inline]
      .               fn from_slice(v: &[T]) -> Self {
     13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Deref for Rc<T> {
      .               type Target = T;
      .           
      .               #[inline(always)]
      .               fn deref(&self) -> &T {
123,128 ( 0.03%)          &self.inner().value
      .               }
      .           }
      .           
      .           #[unstable(feature = "receiver_trait", issue = "none")]
      .           impl<T: ?Sized> Receiver for Rc<T> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
      .               /// }
      .               ///
      .               /// let foo  = Rc::new(Foo);
      .               /// let foo2 = Rc::clone(&foo);
      .               ///
      .               /// drop(foo);    // Doesn't print anything
      .               /// drop(foo2);   // Prints "dropped!"
      .               /// ```
538,407 ( 0.11%)      fn drop(&mut self) {
      .                   unsafe {
181,744 ( 0.04%)              self.inner().dec_strong();
408,425 ( 0.08%)              if self.inner().strong() == 0 {
      .                           // destroy the contained object
 10,592 ( 0.00%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
      .           
      .                           // remove the implicit "strong weak" pointer now that we've
      .                           // destroyed the contents.
      1 ( 0.00%)                  self.inner().dec_weak();
      .           
 63,574 ( 0.01%)                  if self.inner().weak() == 0 {
    254 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
      .                           }
      .                       }
      .                   }
586,194 ( 0.12%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Clone for Rc<T> {
      .               /// Makes a clone of the `Rc` pointer.
      .               ///
      .               /// This creates another pointer to the same allocation, increasing the
      .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
      .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
      .           /// the same value, than two `&T`s.
      .           ///
      .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
      .               #[inline]
      .               fn eq(&self, other: &Rc<T>) -> bool {
    284 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
      .               }
      .           
      .               #[inline]
      .               fn ne(&self, other: &Rc<T>) -> bool {
      .                   !Rc::ptr_eq(self, other) && **self != **other
      .               }
      .           }
      .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
      .               /// # use std::rc::Rc;
      .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
      .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
      .               /// assert_eq!(vec![1, 2, 3], *shared);
      .               /// ```
      .               #[inline]
      .               fn from(mut v: Vec<T>) -> Rc<[T]> {
      .                   unsafe {
    474 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
      .           
      .                       // Allow the Vec to free its memory, but not destroy its contents
      .                       v.set_len(0);
      .           
      .                       rc
      .                   }
      .               }
      .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
      .               #[must_use]
      .               pub fn new() -> Weak<T> {
      .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
      .               }
      .           }
      .           
      .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
      .               let address = ptr as *mut () as usize;
     28 ( 0.00%)      address == usize::MAX
      .           }
      .           
      .           /// Helper type to allow accessing the reference counts without
      .           /// making any assertions about the data field.
      .           struct WeakInner<'a> {
      .               weak: &'a Cell<usize>,
      .               strong: &'a Cell<usize>,
      .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
      .                       })
      .                       .unwrap_or(0)
      .               }
      .           
      .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
      .               /// (i.e., when this `Weak` was created by `Weak::new`).
      .               #[inline]
      .               fn inner(&self) -> Option<WeakInner<'_>> {
      1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
      .                       None
      .                   } else {
      .                       // We are careful to *not* create a reference covering the "data" field, as
      .                       // the field may be mutated concurrently (for example, if the last `Rc`
      .                       // is dropped, the data field will be dropped in-place).
      .                       Some(unsafe {
      .                           let ptr = self.ptr.as_ptr();
      .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
      .               /// assert!(other_weak_foo.upgrade().is_none());
      .               /// ```
      .               fn drop(&mut self) {
      .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
      .           
      .                   inner.dec_weak();
      .                   // the weak count starts at 1, and will only go to zero if all
      .                   // the strong pointers have disappeared.
      2 ( 0.00%)          if inner.weak() == 0 {
      .                       unsafe {
      .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
      .           
      .               #[inline]
      .               fn strong(&self) -> usize {
      .                   self.strong_ref().get()
      .               }
      .           
      .               #[inline]
      .               fn inc_strong(&self) {
171,080 ( 0.04%)          let strong = self.strong();
      .           
      .                   // We want to abort on overflow instead of dropping the value.
      .                   // The reference count will never be zero when this is called;
      .                   // nevertheless, we insert an abort here to hint LLVM at
      .                   // an otherwise missed optimization.
524,264 ( 0.11%)          if strong == 0 || strong == usize::MAX {
      .                       abort();
      .                   }
  1,113 ( 0.00%)          self.strong_ref().set(strong + 1);
      .               }
      .           
      .               #[inline]
      .               fn dec_strong(&self) {
641,875 ( 0.13%)          self.strong_ref().set(self.strong() - 1);
      .               }
      .           
      .               #[inline]
      .               fn weak(&self) -> usize {
      .                   self.weak_ref().get()
      .               }
      .           
      .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
      .                   if weak == 0 || weak == usize::MAX {
      .                       abort();
      .                   }
      .                   self.weak_ref().set(weak + 1);
      .               }
      .           
      .               #[inline]
      .               fn dec_weak(&self) {
 95,477 ( 0.02%)          self.weak_ref().set(self.weak() - 1);
      .               }
      .           }
      .           
      .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
      .               #[inline(always)]
      .               fn weak_ref(&self) -> &Cell<usize> {
      .                   &self.weak
      .               }
-- line 2523 ----------------------------------------
-- line 2545 ----------------------------------------
      .               fn borrow(&self) -> &T {
      .                   &**self
      .               }
      .           }
      .           
      .           #[stable(since = "1.5.0", feature = "smart_ptr_as_ref")]
      .           impl<T: ?Sized> AsRef<T> for Rc<T> {
      .               fn as_ref(&self) -> &T {
     88 ( 0.00%)          &**self
      .               }
      .           }
      .           
      .           #[stable(feature = "pin", since = "1.33.0")]
      .           impl<T: ?Sized> Unpin for Rc<T> {}
      .           
      .           /// Get the offset within an `RcBox` for the payload behind a pointer.
      .           ///
-- line 2561 ----------------------------------------

 72,822 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/quoted.rs
--------------------------------------------------------------------------------
Ir               

-- line 33 ----------------------------------------
      .           /// - `sess`: the parsing session. Any errors will be emitted to this session.
      .           /// - `node_id`: the NodeId of the macro we are parsing.
      .           /// - `features`: language features so we can do feature gating.
      .           /// - `edition`: the edition of the crate defining the macro
      .           ///
      .           /// # Returns
      .           ///
      .           /// A collection of `self::TokenTree`. There may also be some errors emitted to `sess`.
 52,793 ( 0.01%)  pub(super) fn parse(
      .               input: tokenstream::TokenStream,
      .               expect_matchers: bool,
      .               sess: &ParseSess,
      .               node_id: NodeId,
      .               features: &Features,
      .               edition: Edition,
      .           ) -> Vec<TokenTree> {
      .               // Will contain the final collection of `self::TokenTree`
      .               let mut result = Vec::new();
      .           
      .               // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming
      .               // additional trees if need be.
 52,793 ( 0.01%)      let mut trees = input.trees();
 82,030 ( 0.02%)      while let Some(tree) = trees.next() {
      .                   // Given the parsed tree, if there is a metavar and we are expecting matchers, actually
      .                   // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).
 61,725 ( 0.01%)          let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features, edition);
 22,644 ( 0.00%)          match tree {
  6,282 ( 0.00%)              TokenTree::MetaVar(start_sp, ident) if expect_matchers => {
  7,329 ( 0.00%)                  let span = match trees.next() {
  1,047 ( 0.00%)                      Some(tokenstream::TokenTree::Token(Token { kind: token::Colon, span })) => {
  5,235 ( 0.00%)                          match trees.next() {
  9,423 ( 0.00%)                              Some(tokenstream::TokenTree::Token(token)) => match token.ident() {
  2,094 ( 0.00%)                                  Some((frag, _)) => {
  6,282 ( 0.00%)                                      let span = token.span.with_lo(start_sp.lo());
      .           
      .                                               let kind =
  4,188 ( 0.00%)                                          token::NonterminalKind::from_symbol(frag.name, || {
      .                                                       // FIXME(#85708) - once we properly decode a foreign
      .                                                       // crate's `SyntaxContext::root`, then we can replace
      .                                                       // this with just `span.edition()`. A
      .                                                       // `SyntaxContext::root()` from the current crate will
      .                                                       // have the edition of the current crate, and a
      .                                                       // `SyntaxContext::root()` from a foreign crate will
      .                                                       // have the edition of that crate (which we manually
      .                                                       // retrieve via the `edition` parameter).
-- line 77 ----------------------------------------
-- line 89 ----------------------------------------
      .                                                           );
      .                                                           sess.span_diagnostic
      .                                                               .struct_span_err(span, &msg)
      .                                                               .help(VALID_FRAGMENT_NAMES_MSG)
      .                                                               .emit();
      .                                                           token::NonterminalKind::Ident
      .                                                       },
      .                                                   );
  8,376 ( 0.00%)                                      result.push(TokenTree::MetaVarDecl(span, ident, Some(kind)));
      .                                               continue;
      .                                           }
      .                                           _ => token.span,
      .                                       },
      .                                       tree => tree.as_ref().map_or(span, tokenstream::TokenTree::span),
      .                                   }
  2,094 ( 0.00%)                      }
      .                               tree => tree.as_ref().map_or(start_sp, tokenstream::TokenTree::span),
      .                           };
      .                           if node_id != DUMMY_NODE_ID {
      .                               // Macros loaded from other crates have dummy node ids.
      .                               sess.missing_fragment_specifiers.borrow_mut().insert(span, node_id);
      .                           }
      .                           result.push(TokenTree::MetaVarDecl(span, ident, None));
      .                       }
      .           
      .                       // Not a metavar or no matchers allowed, so just return the tree
158,172 ( 0.03%)              _ => result.push(tree),
      .                   }
      .               }
      .               result
 36,549 ( 0.01%)  }
      .           
      .           /// Takes a `tokenstream::TokenTree` and returns a `self::TokenTree`. Specifically, this takes a
      .           /// generic `TokenTree`, such as is used in the rest of the compiler, and returns a `TokenTree`
      .           /// for use in parsing a macro.
      .           ///
      .           /// Converting the given tree may involve reading more tokens.
      .           ///
      .           /// # Parameters
-- line 127 ----------------------------------------
-- line 138 ----------------------------------------
      .               outer_trees: &mut impl Iterator<Item = tokenstream::TokenTree>,
      .               expect_matchers: bool,
      .               sess: &ParseSess,
      .               node_id: NodeId,
      .               features: &Features,
      .               edition: Edition,
      .           ) -> TokenTree {
      .               // Depending on what `tree` is, we could be parsing different parts of a macro
 45,304 ( 0.01%)      match tree {
      .                   // `tree` is a `$` token. Look at the next token in `trees`
  4,123 ( 0.00%)          tokenstream::TokenTree::Token(Token { kind: token::Dollar, span }) => {
      .                       // FIXME: Handle `None`-delimited groups in a more systematic way
      .                       // during parsing.
 12,369 ( 0.00%)              let mut next = outer_trees.next();
      .                       let mut trees: Box<dyn Iterator<Item = tokenstream::TokenTree>>;
 15,127 ( 0.00%)              if let Some(tokenstream::TokenTree::Delimited(_, token::NoDelim, tts)) = next {
      .                           trees = Box::new(tts.into_trees());
      .                           next = trees.next();
      .                       } else {
 16,492 ( 0.00%)                  trees = Box::new(outer_trees);
      .                       }
      .           
 13,734 ( 0.00%)              match next {
      .                           // `tree` is followed by a delimited set of token trees. This indicates the beginning
      .                           // of a repetition sequence in the macro (e.g. `$(pat)*`).
  9,653 ( 0.00%)                  Some(tokenstream::TokenTree::Delimited(span, delim, tts)) => {
      .                               // Must have `(` not `{` or `[`
  1,379 ( 0.00%)                      if delim != token::Paren {
      .                                   let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));
      .                                   let msg = format!("expected `(`, found `{}`", tok);
      .                                   sess.span_diagnostic.span_err(span.entire(), &msg);
      .                               }
      .                               // Parse the contents of the sequence itself
 12,411 ( 0.00%)                      let sequence = parse(tts, expect_matchers, sess, node_id, features, edition);
      .                               // Get the Kleene operator and optional separator
  8,274 ( 0.00%)                      let (separator, kleene) =
  1,379 ( 0.00%)                          parse_sep_and_kleene_op(&mut trees, span.entire(), sess);
      .                               // Count the number of captured "names" (i.e., named metavars)
      .                               let name_captures = macro_parser::count_names(&sequence);
 11,032 ( 0.00%)                      TokenTree::Sequence(
      .                                   span,
      .                                   Lrc::new(SequenceRepetition {
  5,516 ( 0.00%)                              tts: sequence,
  6,895 ( 0.00%)                              separator,
      .                                       kleene,
      .                                       num_captures: name_captures,
      .                                   }),
      .                               )
      .                           }
      .           
      .                           // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special
      .                           // metavariable that names the crate of the invocation.
 21,952 ( 0.00%)                  Some(tokenstream::TokenTree::Token(token)) if token.is_ident() => {
  5,488 ( 0.00%)                      let (ident, is_raw) = token.ident().unwrap();
  8,232 ( 0.00%)                      let span = ident.span.with_lo(span.lo());
 19,208 ( 0.00%)                      if ident.name == kw::Crate && !is_raw {
  2,152 ( 0.00%)                          TokenTree::token(token::Ident(kw::DollarCrate, is_raw), span)
      .                               } else {
 11,030 ( 0.00%)                          TokenTree::MetaVar(span, ident)
      .                               }
      .                           }
      .           
      .                           // `tree` is followed by a random token. This is an error.
      .                           Some(tokenstream::TokenTree::Token(token)) => {
      .                               let msg = format!(
      .                                   "expected identifier, found `{}`",
      .                                   pprust::token_to_string(&token),
-- line 204 ----------------------------------------
-- line 208 ----------------------------------------
      .                           }
      .           
      .                           // There are no more tokens. Just return the `$` we already have.
      .                           None => TokenTree::token(token::Dollar, span),
      .                       }
      .                   }
      .           
      .                   // `tree` is an arbitrary token. Keep it.
 30,920 ( 0.01%)          tokenstream::TokenTree::Token(token) => TokenTree::Token(token),
      .           
      .                   // `tree` is the beginning of a delimited set of tokens (e.g., `(` or `{`). We need to
      .                   // descend into the delimited set and further parse it.
 14,266 ( 0.00%)          tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(
      .                       span,
  8,152 ( 0.00%)              Lrc::new(Delimited {
      .                           delim,
 16,304 ( 0.00%)                  tts: parse(tts, expect_matchers, sess, node_id, features, edition),
      .                       }),
      .                   ),
      .               }
 20,615 ( 0.00%)  }
      .           
      .           /// Takes a token and returns `Some(KleeneOp)` if the token is `+` `*` or `?`. Otherwise, return
      .           /// `None`.
      .           fn kleene_op(token: &Token) -> Option<KleeneOp> {
 10,312 ( 0.00%)      match token.kind {
      .                   token::BinOp(token::Star) => Some(KleeneOp::ZeroOrMore),
      .                   token::BinOp(token::Plus) => Some(KleeneOp::OneOrMore),
      .                   token::Question => Some(KleeneOp::ZeroOrOne),
      .                   _ => None,
      .               }
      .           }
      .           
      .           /// Parse the next token tree of the input looking for a KleeneOp. Returns
      .           ///
      .           /// - Ok(Ok((op, span))) if the next token tree is a KleeneOp
      .           /// - Ok(Err(tok, span)) if the next token tree is a token but not a KleeneOp
      .           /// - Err(span) if the next token tree is not a token
  8,885 ( 0.00%)  fn parse_kleene_op(
      .               input: &mut impl Iterator<Item = tokenstream::TokenTree>,
      .               span: Span,
      .           ) -> Result<Result<(KleeneOp, Span), Token>, Span> {
  3,554 ( 0.00%)      match input.next() {
  3,554 ( 0.00%)          Some(tokenstream::TokenTree::Token(token)) => match kleene_op(&token) {
  4,137 ( 0.00%)              Some(op) => Ok(Ok((op, token.span))),
  3,582 ( 0.00%)              None => Ok(Err(token)),
      .                   },
      .                   tree => Err(tree.as_ref().map_or(span, tokenstream::TokenTree::span)),
      .               }
  7,108 ( 0.00%)  }
      .           
      .           /// Attempt to parse a single Kleene star, possibly with a separator.
      .           ///
      .           /// For example, in a pattern such as `$(a),*`, `a` is the pattern to be repeated, `,` is the
      .           /// separator, and `*` is the Kleene operator. This function is specifically concerned with parsing
      .           /// the last two tokens of such a pattern: namely, the optional separator and the Kleene operator
      .           /// itself. Note that here we are parsing the _macro_ itself, rather than trying to match some
      .           /// stream of tokens in an invocation of a macro.
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .           /// operator and separator, then a tuple with `(separator, KleeneOp)` is returned. Otherwise, an
      .           /// error with the appropriate span is emitted to `sess` and a dummy value is returned.
      .           fn parse_sep_and_kleene_op(
      .               input: &mut impl Iterator<Item = tokenstream::TokenTree>,
      .               span: Span,
      .               sess: &ParseSess,
      .           ) -> (Option<Token>, KleeneToken) {
      .               // We basically look at two token trees here, denoted as #1 and #2 below
 11,032 ( 0.00%)      let span = match parse_kleene_op(input, span) {
      .                   // #1 is a `?`, `+`, or `*` KleeneOp
  2,943 ( 0.00%)          Ok(Ok((op, span))) => return (None, KleeneToken::new(op, span)),
      .           
      .                   // #1 is a separator followed by #2, a KleeneOp
  5,970 ( 0.00%)          Ok(Err(token)) => match parse_kleene_op(input, token.span) {
      .                       // #2 is the `?` Kleene op, which does not take a separator (error)
      .                       Ok(Ok((KleeneOp::ZeroOrOne, span))) => {
      .                           // Error!
      .                           sess.span_diagnostic.span_err(
      .                               token.span,
      .                               "the `?` macro repetition operator does not take a separator",
      .                           );
      .           
      .                           // Return a dummy
      .                           return (None, KleeneToken::new(KleeneOp::ZeroOrMore, span));
      .                       }
      .           
      .                       // #2 is a KleeneOp :D
  2,388 ( 0.00%)              Ok(Ok((op, span))) => return (Some(token), KleeneToken::new(op, span)),
      .           
      .                       // #2 is a random token or not a token at all :(
      .                       Ok(Err(Token { span, .. })) | Err(span) => span,
      .                   },
      .           
      .                   // #1 is not a token
      .                   Err(span) => span,
      .               };
-- line 304 ----------------------------------------

 58,639 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/quoted.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .           fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {
      .               while let ast::ExprKind::Paren(sub) = &expr.kind {
      .                   expr = sub;
      .               }
      .               expr
      .           }
      .           
      .           impl EarlyLintPass for WhileTrue {
  5,640 ( 0.00%)      fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {
  1,880 ( 0.00%)          if let ast::ExprKind::While(cond, _, label) = &e.kind {
      .                       if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind {
      .                           if let ast::LitKind::Bool(true) = lit.kind {
      .                               if !lit.span.from_expansion() {
      .                                   let msg = "denote infinite loops with `loop { ... }`";
      .                                   let condition_span = e.span.with_hi(cond.span.hi());
      .                                   cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {
      .                                       lint.build(msg)
      .                                           .span_suggestion_short(
-- line 107 ----------------------------------------
-- line 117 ----------------------------------------
      .                                               Applicability::MachineApplicable,
      .                                           )
      .                                           .emit();
      .                                   })
      .                               }
      .                           }
      .                       }
      .                   }
  6,580 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `box_pointers` lints use of the Box type.
      .               ///
      .               /// ### Example
      .               ///
      .               /// ```rust,compile_fail
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
      .               BOX_POINTERS,
      .               Allow,
      .               "use of owned (Box type) heap memory"
      .           }
      .           
      .           declare_lint_pass!(BoxPointers => [BOX_POINTERS]);
      .           
      .           impl BoxPointers {
 11,968 ( 0.00%)      fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {
 28,156 ( 0.01%)          for leaf in ty.walk() {
      .                       if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {
    949 ( 0.00%)                  if leaf_ty.is_box() {
      .                               cx.struct_span_lint(BOX_POINTERS, span, |lint| {
      .                                   lint.build(&format!("type uses owned (Box type) pointers: {}", ty)).emit()
      .                               });
      .                           }
      .                       }
      .                   }
  8,704 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for BoxPointers {
  1,773 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    788 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::Enum(..)
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..) => {
     95 ( 0.00%)                  self.check_heap_type(cx, it.span, cx.tcx.type_of(it.def_id))
      .                       }
      .                       _ => (),
      .                   }
      .           
      .                   // If it's a struct, we also have to check the fields' types
    610 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     42 ( 0.00%)                  for struct_field in struct_def.fields() {
    203 ( 0.00%)                      let def_id = cx.tcx.hir().local_def_id(struct_field.hir_id);
    174 ( 0.00%)                      self.check_heap_type(cx, struct_field.span, cx.tcx.type_of(def_id));
      .                           }
      .                       }
      .                       _ => (),
      .                   }
  1,576 ( 0.00%)      }
      .           
      .               fn check_expr(&mut self, cx: &LateContext<'_>, e: &hir::Expr<'_>) {
  3,120 ( 0.00%)          let ty = cx.typeck_results().node_type(e.hir_id);
  4,160 ( 0.00%)          self.check_heap_type(cx, e.span, ty);
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `non_shorthand_field_patterns` lint detects using `Struct { x: x }`
      .               /// instead of `Struct { x }` in a pattern.
      .               ///
      .               /// ### Example
-- line 203 ----------------------------------------
-- line 230 ----------------------------------------
      .               NON_SHORTHAND_FIELD_PATTERNS,
      .               Warn,
      .               "using `Struct { x: x }` instead of `Struct { x }` in a pattern"
      .           }
      .           
      .           declare_lint_pass!(NonShorthandFieldPatterns => [NON_SHORTHAND_FIELD_PATTERNS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {
  1,967 ( 0.00%)      fn check_pat(&mut self, cx: &LateContext<'_>, pat: &hir::Pat<'_>) {
    604 ( 0.00%)          if let PatKind::Struct(ref qpath, field_pats, _) = pat.kind {
     70 ( 0.00%)              let variant = cx
      .                           .typeck_results()
      .                           .pat_ty(pat)
      .                           .ty_adt_def()
      .                           .expect("struct pattern type is not an ADT")
     84 ( 0.00%)                  .variant_of_res(cx.qpath_res(qpath, pat.hir_id));
      .                       for fieldpat in field_pats {
     52 ( 0.00%)                  if fieldpat.is_shorthand {
      .                               continue;
      .                           }
     64 ( 0.00%)                  if fieldpat.span.from_expansion() {
      .                               // Don't lint if this is a macro expansion: macro authors
      .                               // shouldn't have to worry about this kind of style issue
      .                               // (Issue #49588)
      .                               continue;
      .                           }
      .                           if let PatKind::Binding(binding_annot, _, ident, None) = fieldpat.pat.kind {
      .                               if cx.tcx.find_field_index(ident, &variant)
      .                                   == Some(cx.tcx.field_index(fieldpat.hir_id, cx.typeck_results()))
-- line 258 ----------------------------------------
-- line 278 ----------------------------------------
      .                                           Applicability::MachineApplicable,
      .                                       );
      .                                       err.emit();
      .                                   });
      .                               }
      .                           }
      .                       }
      .                   }
  2,248 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unsafe_code` lint catches usage of `unsafe` code.
      .               ///
      .               /// ### Example
      .               ///
      .               /// ```rust,compile_fail
-- line 294 ----------------------------------------
-- line 316 ----------------------------------------
      .           impl UnsafeCode {
      .               fn report_unsafe(
      .                   &self,
      .                   cx: &EarlyContext<'_>,
      .                   span: Span,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   // This comes from a macro that has `#[allow_internal_unsafe]`.
     20 ( 0.00%)          if span.allows_unsafe() {
      .                       return;
      .                   }
      .           
      .                   cx.struct_span_lint(UNSAFE_CODE, span, decorate);
      .               }
      .           
      .               fn report_overriden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {
      .                   self.report_unsafe(cx, span, |lint| {
-- line 332 ----------------------------------------
-- line 337 ----------------------------------------
      .                               override them",
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           }
      .           
      .           impl EarlyLintPass for UnsafeCode {
  8,790 ( 0.00%)      fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {
    171 ( 0.00%)          if attr.has_name(sym::allow_internal_unsafe) {
      .                       self.report_unsafe(cx, attr.span, |lint| {
      .                           lint.build(
      .                               "`allow_internal_unsafe` allows defining \
      .                                                          macros using unsafe without triggering \
      .                                                          the `unsafe_code` lint at their call site",
      .                           )
      .                           .emit()
      .                       });
      .                   }
 11,720 ( 0.00%)      }
      .           
  2,820 ( 0.00%)      fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {
  1,880 ( 0.00%)          if let ast::ExprKind::Block(ref blk, _) = e.kind {
      .                       // Don't warn about generated blocks; that'll just pollute the output.
     25 ( 0.00%)              if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {
      4 ( 0.00%)                  self.report_unsafe(cx, blk.span, |lint| {
      .                               lint.build("usage of an `unsafe` block").emit()
      .                           });
      .                       }
      .                   }
  3,760 ( 0.00%)      }
      .           
    882 ( 0.00%)      fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {
    909 ( 0.00%)          match it.kind {
      .                       ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self
      .                           .report_unsafe(cx, it.span, |lint| {
      .                               lint.build("declaration of an `unsafe` trait").emit()
      .                           }),
      .           
      .                       ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self
      1 ( 0.00%)                  .report_unsafe(cx, it.span, |lint| {
      .                               lint.build("implementation of an `unsafe` trait").emit()
      .                           }),
      .           
      .                       ast::ItemKind::Fn(..) => {
     35 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a `no_mangle` function",
      .                               );
      .                           }
     35 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a function with `export_name`",
      .                               );
      .                           }
      .                       }
      .           
-- line 397 ----------------------------------------
-- line 409 ----------------------------------------
      .                                   attr.span,
      .                                   "declaration of a static with `export_name`",
      .                               );
      .                           }
      .                       }
      .           
      .                       _ => {}
      .                   }
  1,029 ( 0.00%)      }
      .           
    534 ( 0.00%)      fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {
    178 ( 0.00%)          if let ast::AssocItemKind::Fn(..) = it.kind {
    602 ( 0.00%)              if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {
      .                           self.report_overriden_symbol_name(
      .                               cx,
      .                               attr.span,
      .                               "declaration of a `no_mangle` method",
      .                           );
      .                       }
    602 ( 0.00%)              if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {
      .                           self.report_overriden_symbol_name(
      .                               cx,
      .                               attr.span,
      .                               "declaration of a method with `export_name`",
      .                           );
      .                       }
      .                   }
    623 ( 0.00%)      }
      .           
      .               fn check_fn(&mut self, cx: &EarlyContext<'_>, fk: FnKind<'_>, span: Span, _: ast::NodeId) {
    410 ( 0.00%)          if let FnKind::Fn(
      .                       ctxt,
      .                       _,
      .                       ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafe::Yes(_), .. }, .. },
      .                       _,
      .                       body,
      .                   ) = fk
      .                   {
      .                       let msg = match ctxt {
-- line 447 ----------------------------------------
-- line 487 ----------------------------------------
      .           
      .               /// Private traits or trait items that leaked through. Don't check their methods.
      .               private_traits: FxHashSet<hir::HirId>,
      .           }
      .           
      .           impl_lint_pass!(MissingDoc => [MISSING_DOCS]);
      .           
      .           fn has_doc(attr: &ast::Attribute) -> bool {
    292 ( 0.00%)      if attr.is_doc_comment() {
      .                   return true;
      .               }
      .           
      2 ( 0.00%)      if !attr.has_name(sym::doc) {
      .                   return false;
      .               }
      .           
      6 ( 0.00%)      if attr.value_str().is_some() {
      .                   return true;
      .               }
      .           
      .               if let Some(list) = attr.meta_item_list() {
      .                   for meta in list {
      .                       if meta.has_name(sym::hidden) {
      .                           return true;
      .                       }
-- line 511 ----------------------------------------
-- line 512 ----------------------------------------
      .                   }
      .               }
      .           
      .               false
      .           }
      .           
      .           impl MissingDoc {
      .               pub fn new() -> MissingDoc {
      4 ( 0.00%)          MissingDoc { doc_hidden_stack: vec![false], private_traits: FxHashSet::default() }
      .               }
      .           
      .               fn doc_hidden(&self) -> bool {
  4,735 ( 0.00%)          *self.doc_hidden_stack.last().expect("empty doc_hidden_stack")
      .               }
      .           
  1,937 ( 0.00%)      fn check_missing_docs_attrs(
      .                   &self,
      .                   cx: &LateContext<'_>,
      .                   def_id: LocalDefId,
      .                   sp: Span,
      .                   article: &'static str,
      .                   desc: &'static str,
      .               ) {
      .                   // If we're building a test harness, then warning about
      .                   // documentation is probably not really relevant right now.
    298 ( 0.00%)          if cx.sess().opts.test {
      .                       return;
      .                   }
      .           
      .                   // `#[doc(hidden)]` disables missing_docs check.
    149 ( 0.00%)          if self.doc_hidden() {
      .                       return;
      .                   }
      .           
      .                   // Only check publicly-visible items, using the result from the privacy pass.
      .                   // It's an option so the crate root can also use this function (it doesn't
      .                   // have a `NodeId`).
    128 ( 0.00%)          if def_id != CRATE_DEF_ID {
    456 ( 0.00%)              if !cx.access_levels.is_exported(def_id) {
      .                           return;
      .                       }
      .                   }
      .           
    291 ( 0.00%)          let attrs = cx.tcx.get_attrs(def_id.to_def_id());
      .                   let has_doc = attrs.iter().any(has_doc);
      .                   if !has_doc {
      .                       cx.struct_span_lint(
      .                           MISSING_DOCS,
      .                           cx.tcx.sess.source_map().guess_head_span(sp),
      .                           |lint| {
      .                               lint.build(&format!("missing documentation for {} {}", article, desc)).emit()
      .                           },
      .                       );
      .                   }
  1,192 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingDoc {
 32,102 ( 0.01%)      fn enter_lint_attrs(&mut self, _cx: &LateContext<'_>, attrs: &[ast::Attribute]) {
  4,586 ( 0.00%)          let doc_hidden = self.doc_hidden()
      .                       || attrs.iter().any(|attr| {
  4,088 ( 0.00%)                  attr.has_name(sym::doc)
  9,490 ( 0.00%)                      && match attr.meta_item_list() {
      .                                   None => false,
 12,404 ( 0.00%)                          Some(l) => attr::list_contains_name(&l, sym::hidden),
      .                               }
      .                       });
      .                   self.doc_hidden_stack.push(doc_hidden);
 36,688 ( 0.01%)      }
      .           
      .               fn exit_lint_attrs(&mut self, _: &LateContext<'_>, _attrs: &[ast::Attribute]) {
      .                   self.doc_hidden_stack.pop().expect("empty doc_hidden_stack");
      .               }
      .           
      6 ( 0.00%)      fn check_crate(&mut self, cx: &LateContext<'_>) {
     10 ( 0.00%)          self.check_missing_docs_attrs(
      .                       cx,
      .                       CRATE_DEF_ID,
      1 ( 0.00%)              cx.tcx.def_span(CRATE_DEF_ID),
      .                       "the",
      .                       "crate",
      .                   );
      4 ( 0.00%)      }
      .           
  1,182 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    693 ( 0.00%)          match it.kind {
      4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           // Issue #11592: traits are always considered exported, even when private.
     14 ( 0.00%)                  if let hir::VisibilityKind::Inherited = it.vis.node {
      2 ( 0.00%)                      self.private_traits.insert(it.hir_id());
      .                               for trait_item_ref in trait_item_refs {
      .                                   self.private_traits.insert(trait_item_ref.id.hir_id());
      .                               }
      .                               return;
      .                           }
      .                       }
     86 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), items, .. }) => {
      .                           // If the trait is private, add the impl items to `private_traits` so they don't get
      .                           // reported for missing docs.
    129 ( 0.00%)                  let real_trait = trait_ref.path.res.def_id();
     43 ( 0.00%)                  let Some(def_id) = real_trait.as_local() else { return };
     48 ( 0.00%)                  let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(def_id) else { return };
     24 ( 0.00%)                  if let hir::VisibilityKind::Inherited = item.vis.node {
      .                               for impl_item_ref in items {
      .                                   self.private_traits.insert(impl_item_ref.id.hir_id());
      .                               }
      .                           }
      .                           return;
      .                       }
      .           
      .                       hir::ItemKind::TyAlias(..)
-- line 622 ----------------------------------------
-- line 627 ----------------------------------------
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..) => {}
      .           
      .                       _ => return,
      .                   };
      .           
    531 ( 0.00%)          let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());
      .           
    354 ( 0.00%)          self.check_missing_docs_attrs(cx, it.def_id, it.span, article, desc);
  1,379 ( 0.00%)      }
      .           
      .               fn check_trait_item(&mut self, cx: &LateContext<'_>, trait_item: &hir::TraitItem<'_>) {
     30 ( 0.00%)          if self.private_traits.contains(&trait_item.hir_id()) {
      .                       return;
      .                   }
      .           
     48 ( 0.00%)          let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());
      .           
     36 ( 0.00%)          self.check_missing_docs_attrs(cx, trait_item.def_id, trait_item.span, article, desc);
      .               }
      .           
    890 ( 0.00%)      fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {
      .                   // If the method is an impl for a trait, don't doc.
    534 ( 0.00%)          if method_context(cx, impl_item.hir_id()) == MethodLateContext::TraitImpl {
      .                       return;
      .                   }
      .           
      .                   // If the method is an impl for an item with docs_hidden, don't doc.
    270 ( 0.00%)          if method_context(cx, impl_item.hir_id()) == MethodLateContext::PlainImpl {
    324 ( 0.00%)              let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());
     54 ( 0.00%)              let impl_ty = cx.tcx.type_of(parent);
    270 ( 0.00%)              let outerdef = match impl_ty.kind() {
    216 ( 0.00%)                  ty::Adt(def, _) => Some(def.did),
      .                           ty::Foreign(def_id) => Some(*def_id),
      .                           _ => None,
      .                       };
      .                       let is_hidden = match outerdef {
    108 ( 0.00%)                  Some(id) => cx.tcx.is_doc_hidden(id),
      .                           None => false,
      .                       };
    108 ( 0.00%)              if is_hidden {
      .                           return;
      .                       }
      .                   }
      .           
    432 ( 0.00%)          let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());
    324 ( 0.00%)          self.check_missing_docs_attrs(cx, impl_item.def_id, impl_item.span, article, desc);
    712 ( 0.00%)      }
      .           
      .               fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'_>) {
      .                   let (article, desc) = cx.tcx.article_and_description(foreign_item.def_id.to_def_id());
      .                   self.check_missing_docs_attrs(cx, foreign_item.def_id, foreign_item.span, article, desc);
      .               }
      .           
      .               fn check_field_def(&mut self, cx: &LateContext<'_>, sf: &hir::FieldDef<'_>) {
    116 ( 0.00%)          if !sf.is_positional() {
    174 ( 0.00%)              let def_id = cx.tcx.hir().local_def_id(sf.hir_id);
    319 ( 0.00%)              self.check_missing_docs_attrs(cx, def_id, sf.span, "a", "struct field")
      .                   }
      .               }
      .           
      .               fn check_variant(&mut self, cx: &LateContext<'_>, v: &hir::Variant<'_>) {
      .                   self.check_missing_docs_attrs(cx, cx.tcx.hir().local_def_id(v.id), v.span, "a", "variant");
      .               }
      .           }
      .           
-- line 694 ----------------------------------------
-- line 724 ----------------------------------------
      .               pub MISSING_COPY_IMPLEMENTATIONS,
      .               Allow,
      .               "detects potentially-forgotten implementations of `Copy`"
      .           }
      .           
      .           declare_lint_pass!(MissingCopyImplementations => [MISSING_COPY_IMPLEMENTATIONS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {
  1,773 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    911 ( 0.00%)          if !cx.access_levels.is_reachable(item.def_id) {
      .                       return;
      .                   }
    845 ( 0.00%)          let (def, ty) = match item.kind {
      .                       hir::ItemKind::Struct(_, ref ast_generics) => {
      8 ( 0.00%)                  if !ast_generics.params.is_empty() {
      .                               return;
      .                           }
      3 ( 0.00%)                  let def = cx.tcx.adt_def(item.def_id);
      .                           (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))
      .                       }
      .                       hir::ItemKind::Union(_, ref ast_generics) => {
      .                           if !ast_generics.params.is_empty() {
      .                               return;
      .                           }
      .                           let def = cx.tcx.adt_def(item.def_id);
      .                           (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))
-- line 749 ----------------------------------------
-- line 752 ----------------------------------------
      .                           if !ast_generics.params.is_empty() {
      .                               return;
      .                           }
      .                           let def = cx.tcx.adt_def(item.def_id);
      .                           (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))
      .                       }
      .                       _ => return,
      .                   };
     15 ( 0.00%)          if def.has_dtor(cx.tcx) {
      .                       return;
      .                   }
      .                   let param_env = ty::ParamEnv::empty();
      9 ( 0.00%)          if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {
      .                       return;
      .                   }
      7 ( 0.00%)          if can_type_implement_copy(cx.tcx, param_env, ty).is_ok() {
      .                       cx.struct_span_lint(MISSING_COPY_IMPLEMENTATIONS, item.span, |lint| {
      .                           lint.build(
      .                               "type could implement `Copy`; consider adding `impl \
      .                                     Copy`",
      .                           )
      .                           .emit()
      .                       })
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `missing_debug_implementations` lint detects missing
      .               /// implementations of [`fmt::Debug`].
      .               ///
      .               /// [`fmt::Debug`]: https://doc.rust-lang.org/std/fmt/trait.Debug.html
      .               ///
-- line 784 ----------------------------------------
-- line 811 ----------------------------------------
      .           #[derive(Default)]
      .           pub struct MissingDebugImplementations {
      .               impling_types: Option<LocalDefIdSet>,
      .           }
      .           
      .           impl_lint_pass!(MissingDebugImplementations => [MISSING_DEBUG_IMPLEMENTATIONS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {
  1,379 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    911 ( 0.00%)          if !cx.access_levels.is_reachable(item.def_id) {
      .                       return;
      .                   }
      .           
    492 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) | hir::ItemKind::Enum(..) => {}
      .                       _ => return,
      .                   }
      .           
     56 ( 0.00%)          let Some(debug) = cx.tcx.get_diagnostic_item(sym::Debug) else {
      .                       return
      .                   };
      .           
      8 ( 0.00%)          if self.impling_types.is_none() {
      .                       let mut impls = LocalDefIdSet::default();
  9,210 ( 0.00%)              cx.tcx.for_each_impl(debug, |d| {
  6,341 ( 0.00%)                  if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {
  1,206 ( 0.00%)                      if let Some(def_id) = ty_def.did.as_local() {
      8 ( 0.00%)                          impls.insert(def_id);
      .                               }
      .                           }
 10,520 ( 0.00%)              });
      .           
      4 ( 0.00%)              self.impling_types = Some(impls);
      .                       debug!("{:?}", self.impling_types);
      .                   }
      .           
     16 ( 0.00%)          if !self.impling_types.as_ref().unwrap().contains(&item.def_id) {
     12 ( 0.00%)              cx.struct_span_lint(MISSING_DEBUG_IMPLEMENTATIONS, item.span, |lint| {
      .                           lint.build(&format!(
      .                               "type does not implement `{}`; consider adding `#[derive(Debug)]` \
      .                                or a manual implementation",
      .                               cx.tcx.def_path_str(debug)
      .                           ))
      .                           .emit()
      .                       });
      .                   }
    985 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `anonymous_parameters` lint detects anonymous parameters in trait
      .               /// definitions.
      .               ///
      .               /// ### Example
      .               ///
-- line 865 ----------------------------------------
-- line 907 ----------------------------------------
      .           
      .           declare_lint_pass!(
      .               /// Checks for use of anonymous parameters (RFC 1685).
      .               AnonymousParameters => [ANONYMOUS_PARAMETERS]
      .           );
      .           
      .           impl EarlyLintPass for AnonymousParameters {
      .               fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {
     24 ( 0.00%)          if cx.sess().edition() != Edition::Edition2015 {
      .                       // This is a hard error in future editions; avoid linting and erroring
      .                       return;
      .                   }
      .                   if let ast::AssocItemKind::Fn(box Fn { ref sig, .. }) = it.kind {
      .                       for arg in sig.decl.inputs.iter() {
      .                           if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {
      .                               if ident.name == kw::Empty {
      .                                   cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {
-- line 923 ----------------------------------------
-- line 956 ----------------------------------------
      .               // compute it for every attribute.
      .               depr_attrs: Vec<&'static BuiltinAttribute>,
      .           }
      .           
      .           impl_lint_pass!(DeprecatedAttr => []);
      .           
      .           impl DeprecatedAttr {
      .               pub fn new() -> DeprecatedAttr {
      1 ( 0.00%)          DeprecatedAttr { depr_attrs: deprecated_attributes() }
      .               }
      .           }
      .           
      .           fn lint_deprecated_attr(
      .               cx: &EarlyContext<'_>,
      .               attr: &ast::Attribute,
      .               msg: &str,
      .               suggestion: Option<&str>,
-- line 972 ----------------------------------------
-- line 979 ----------------------------------------
      .                           String::new(),
      .                           Applicability::MachineApplicable,
      .                       )
      .                       .emit();
      .               })
      .           }
      .           
      .           impl EarlyLintPass for DeprecatedAttr {
 26,370 ( 0.01%)      fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {
 14,650 ( 0.00%)          for BuiltinAttribute { name, gate, .. } in &self.depr_attrs {
 12,062 ( 0.00%)              if attr.ident().map(|ident| ident.name) == Some(*name) {
      .                           if let &AttributeGate::Gated(
      .                               Stability::Deprecated(link, suggestion),
      .                               name,
      .                               reason,
      .                               _,
      .                           ) = gate
      .                           {
      .                               let msg =
      .                                   format!("use of deprecated attribute `{}`: {}. See {}", name, reason, link);
      .                               lint_deprecated_attr(cx, attr, &msg, suggestion);
      .                           }
      .                           return;
      .                       }
      .                   }
    684 ( 0.00%)          if attr.has_name(sym::no_start) || attr.has_name(sym::crate_id) {
      .                       let path_str = pprust::path_to_string(&attr.get_normal_item().path);
      .                       let msg = format!("use of deprecated attribute `{}`: no longer used.", path_str);
      .                       lint_deprecated_attr(cx, attr, &msg, None);
      .                   }
 23,440 ( 0.00%)      }
      .           }
      .           
 12,840 ( 0.00%)  fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {
      .               use rustc_ast::token::CommentKind;
      .           
      .               let mut attrs = attrs.iter().peekable();
      .           
      .               // Accumulate a single span for sugared doc comments.
      .               let mut sugared_span: Option<Span> = None;
      .           
      .               while let Some(attr) = attrs.next() {
-- line 1020 ----------------------------------------
-- line 1044 ----------------------------------------
      .                               AttrKind::DocComment(CommentKind::Block, _) => {
      .                                   err.help("use `/* */` for a plain comment");
      .                               }
      .                           }
      .                           err.emit();
      .                       });
      .                   }
      .               }
  8,560 ( 0.00%)  }
      .           
      .           impl EarlyLintPass for UnusedDocComment {
      .               fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {
    547 ( 0.00%)          let kind = match stmt.kind {
      .                       ast::StmtKind::Local(..) => "statements",
      .                       // Disabled pending discussion in #78306
      .                       ast::StmtKind::Item(..) => return,
      .                       // expressions will be reported by `check_expr`.
      .                       ast::StmtKind::Empty
      .                       | ast::StmtKind::Semi(_)
      .                       | ast::StmtKind::Expr(_)
      .                       | ast::StmtKind::MacCall(_) => return,
      .                   };
      .           
    616 ( 0.00%)          warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());
      .               }
      .           
    161 ( 0.00%)      fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {
    161 ( 0.00%)          let arm_span = arm.pat.span.with_hi(arm.body.span.hi());
    230 ( 0.00%)          warn_if_doc(cx, arm_span, "match arms", &arm.attrs);
      .               }
      .           
      .               fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {
  7,520 ( 0.00%)          warn_if_doc(cx, expr.span, "expressions", &expr.attrs);
      .               }
      .           
      .               fn check_generic_param(&mut self, cx: &EarlyContext<'_>, param: &ast::GenericParam) {
    504 ( 0.00%)          warn_if_doc(cx, param.ident.span, "generic parameters", &param.attrs);
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `no_mangle_const_items` lint detects any `const` items with the
      .               /// [`no_mangle` attribute].
      .               ///
      .               /// [`no_mangle` attribute]: https://doc.rust-lang.org/reference/abi.html#the-no_mangle-attribute
-- line 1088 ----------------------------------------
-- line 1133 ----------------------------------------
      .               NO_MANGLE_GENERIC_ITEMS,
      .               Warn,
      .               "generic items must be mangled"
      .           }
      .           
      .           declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GENERIC_ITEMS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {
  1,773 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
  1,379 ( 0.00%)          let attrs = cx.tcx.hir().attrs(it.hir_id());
      .                   let check_no_mangle_on_generic_fn = |no_mangle_attr: &ast::Attribute,
      .                                                        impl_generics: Option<&hir::Generics<'_>>,
      .                                                        generics: &hir::Generics<'_>,
      .                                                        span| {
      .                       for param in
      .                           generics.params.iter().chain(impl_generics.map(|g| g.params).into_iter().flatten())
      .                       {
      .                           match param.kind {
-- line 1150 ----------------------------------------
-- line 1162 ----------------------------------------
      .                                           )
      .                                           .emit();
      .                                   });
      .                                   break;
      .                               }
      .                           }
      .                       }
      .                   };
  1,349 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Fn(.., ref generics, _) => {
     25 ( 0.00%)                  if let Some(no_mangle_attr) = cx.sess().find_by_name(attrs, sym::no_mangle) {
      .                               check_no_mangle_on_generic_fn(no_mangle_attr, None, generics, it.span);
      .                           }
      .                       }
      .                       hir::ItemKind::Const(..) => {
     25 ( 0.00%)                  if cx.sess().contains_name(attrs, sym::no_mangle) {
      .                               // Const items do not refer to a particular location in memory, and therefore
      .                               // don't have anything to attach a symbol to
      .                               cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, |lint| {
      .                                   let msg = "const items should never be `#[no_mangle]`";
      .                                   let mut err = lint.build(msg);
      .           
      .                                   // account for "pub const" (#45562)
      .                                   let start = cx
-- line 1185 ----------------------------------------
-- line 1196 ----------------------------------------
      .                                       "try a static value",
      .                                       "pub static".to_owned(),
      .                                       Applicability::MachineApplicable,
      .                                   );
      .                                   err.emit();
      .                               });
      .                           }
      .                       }
     51 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { ref generics, items, .. }) => {
      .                           for it in items {
    462 ( 0.00%)                      if let hir::AssocItemKind::Fn { .. } = it.kind {
    516 ( 0.00%)                          if let Some(no_mangle_attr) = cx
      .                                       .sess()
    430 ( 0.00%)                              .find_by_name(cx.tcx.hir().attrs(it.id.hir_id()), sym::no_mangle)
      .                                   {
      .                                       check_no_mangle_on_generic_fn(
      .                                           no_mangle_attr,
      .                                           Some(generics),
      .                                           cx.tcx.hir().get_generics(it.id.def_id).unwrap(),
      .                                           it.span,
      .                                       );
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       _ => {}
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `mutable_transmutes` lint catches transmuting from `&T` to `&mut
      .               /// T` because it is [undefined behavior].
      .               ///
      .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
      .               ///
-- line 1231 ----------------------------------------
-- line 1248 ----------------------------------------
      .               MUTABLE_TRANSMUTES,
      .               Deny,
      .               "transmuting &T to &mut T is undefined behavior, even if the reference is unused"
      .           }
      .           
      .           declare_lint_pass!(MutableTransmutes => [MUTABLE_TRANSMUTES]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {
  7,280 ( 0.00%)      fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {
      .                   use rustc_target::spec::abi::Abi::RustIntrinsic;
      .                   if let Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) =
      .                       get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (ty1.kind(), ty2.kind()))
      .                   {
      .                       if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {
      .                           let msg = "transmuting &T to &mut T is undefined behavior, \
      .                               even if the reference is unused, consider instead using an UnsafeCell";
      .                           cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| lint.build(msg).emit());
      .                       }
      .                   }
      .           
      .                   fn get_transmute_from_to<'tcx>(
      .                       cx: &LateContext<'tcx>,
      .                       expr: &hir::Expr<'_>,
      .                   ) -> Option<(Ty<'tcx>, Ty<'tcx>)> {
  2,457 ( 0.00%)              let def = if let hir::ExprKind::Path(ref qpath) = expr.kind {
  1,508 ( 0.00%)                  cx.qpath_res(qpath, expr.hir_id)
      .                       } else {
      .                           return None;
      .                       };
    976 ( 0.00%)              if let Res::Def(DefKind::Fn, did) = def {
      .                           if !def_id_is_transmute(cx, did) {
      .                               return None;
      .                           }
      .                           let sig = cx.typeck_results().node_type(expr.hir_id).fn_sig(cx.tcx);
      .                           let from = sig.inputs().skip_binder()[0];
      .                           let to = sig.output().skip_binder();
      .                           return Some((from, to));
      .                       }
      .                       None
      .                   }
      .           
      .                   fn def_id_is_transmute(cx: &LateContext<'_>, def_id: DefId) -> bool {
     48 ( 0.00%)              cx.tcx.fn_sig(def_id).abi() == RustIntrinsic
      .                           && cx.tcx.item_name(def_id) == sym::transmute
      .                   }
  8,320 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unstable_features` is deprecated and should no longer be used.
      .               UNSTABLE_FEATURES,
      .               Allow,
      .               "enabling unstable features (deprecated. do not use)"
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Forbids using the `#[feature(...)]` attribute
      .               UnstableFeatures => [UNSTABLE_FEATURES]
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {
 20,545 ( 0.00%)      fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {
    176 ( 0.00%)          if attr.has_name(sym::feature) {
      .                       if let Some(items) = attr.meta_item_list() {
      .                           for item in items {
      .                               cx.struct_span_lint(UNSTABLE_FEATURES, item.span(), |lint| {
      .                                   lint.build("unstable feature").emit()
      .                               });
      .                           }
      .                       }
      .                   }
 23,480 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unreachable_pub` lint triggers for `pub` items not reachable from
      .               /// the crate root.
      .               ///
      .               /// ### Example
      .               ///
-- line 1327 ----------------------------------------
-- line 1352 ----------------------------------------
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Lint for items marked `pub` that aren't reachable from other crates.
      .               UnreachablePub => [UNREACHABLE_PUB]
      .           );
      .           
      .           impl UnreachablePub {
  2,520 ( 0.00%)      fn perform_lint(
      .                   &self,
      .                   cx: &LateContext<'_>,
      .                   what: &str,
      .                   def_id: LocalDefId,
      .                   vis: &hir::Visibility<'_>,
      .                   span: Span,
      .                   exportable: bool,
      .               ) {
    315 ( 0.00%)          let mut applicability = Applicability::MachineApplicable;
    630 ( 0.00%)          match vis.node {
    400 ( 0.00%)              hir::VisibilityKind::Public if !cx.access_levels.is_reachable(def_id) => {
      .                           if span.from_expansion() {
      .                               applicability = Applicability::MaybeIncorrect;
      .                           }
      .                           let def_span = cx.tcx.sess.source_map().guess_head_span(span);
      .                           cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {
      .                               let mut err = lint.build(&format!("unreachable `pub` {}", what));
      .                               let replacement = if cx.tcx.features().crate_visibility_modifier {
      .                                   "crate"
-- line 1379 ----------------------------------------
-- line 1391 ----------------------------------------
      .                               if exportable {
      .                                   err.help("or consider exporting it for use by other crates");
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                       _ => {}
      .                   }
  1,575 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnreachablePub {
      .               fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
  1,576 ( 0.00%)          self.perform_lint(cx, "item", item.def_id, &item.vis, item.span, true);
      .               }
      .           
      .               fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'tcx>) {
      .                   self.perform_lint(
      .                       cx,
      .                       "item",
      .                       foreign_item.def_id,
      .                       &foreign_item.vis,
      .                       foreign_item.span,
      .                       true,
      .                   );
      .               }
      .           
      .               fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {
    145 ( 0.00%)          let def_id = cx.tcx.hir().local_def_id(field.hir_id);
    232 ( 0.00%)          self.perform_lint(cx, "field", def_id, &field.vis, field.span, false);
      .               }
      .           
      .               fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {
    890 ( 0.00%)          self.perform_lint(cx, "item", impl_item.def_id, &impl_item.vis, impl_item.span, false);
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `type_alias_bounds` lint detects bounds in type aliases.
      .               ///
      .               /// ### Example
      .               ///
-- line 1432 ----------------------------------------
-- line 1493 ----------------------------------------
      .           
      .                   // Let's go for a walk!
      .                   let mut visitor = WalkAssocTypes { err };
      .                   visitor.visit_ty(ty);
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {
  1,379 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    394 ( 0.00%)          let hir::ItemKind::TyAlias(ty, type_alias_generics) = &item.kind else {
      .                       return
      .                   };
      .                   if let hir::TyKind::OpaqueDef(..) = ty.kind {
      .                       // Bounds are respected for `type X = impl Trait`
      .                       return;
      .                   }
      .                   let mut suggested_changing_assoc_types = false;
      .                   // There must not be a where clause
-- line 1510 ----------------------------------------
-- line 1554 ----------------------------------------
      .                               if !suggested_changing_assoc_types {
      .                                   TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);
      .                                   suggested_changing_assoc_types = true;
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Lint constants that are erroneous.
      .               /// Without this lint, we might not get any diagnostic if the constant is
      .               /// unused within this crate, even though downstream crates can't use it
      .               /// without producing an error.
      .               UnusedBrokenConst => []
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {
      .               fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    975 ( 0.00%)          match it.kind {
     10 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
     20 ( 0.00%)                  let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();
      .                           // trigger the query once for all constants since that will already report the errors
      .                           // FIXME: Use ensure here
     25 ( 0.00%)                  let _ = cx.tcx.const_eval_poly(def_id);
      .                       }
      .                       hir::ItemKind::Static(_, _, body_id) => {
      .                           let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();
      .                           // FIXME: Use ensure here
      .                           let _ = cx.tcx.eval_static_initializer(def_id);
      .                       }
      .                       _ => {}
      .                   }
-- line 1588 ----------------------------------------
-- line 1626 ----------------------------------------
      .           
      .           declare_lint_pass!(
      .               /// Lint for trait and lifetime bounds that don't depend on type parameters
      .               /// which either do nothing, or stop the item from being used.
      .               TrivialConstraints => [TRIVIAL_BOUNDS]
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {
  1,773 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {
      .                   use rustc_middle::ty::fold::TypeFoldable;
      .                   use rustc_middle::ty::PredicateKind::*;
      .           
    788 ( 0.00%)          if cx.tcx.features().trivial_bounds {
      .                       let predicates = cx.tcx.predicates_of(item.def_id);
      .                       for &(predicate, span) in predicates.predicates {
      .                           let predicate_kind_name = match predicate.kind().skip_binder() {
      .                               Trait(..) => "trait",
      .                               TypeOutlives(..) |
      .                               RegionOutlives(..) => "lifetime",
      .           
      .                               // Ignore projections, as they can only be global
-- line 1646 ----------------------------------------
-- line 1663 ----------------------------------------
      .                                           or lifetime parameters",
      .                                       predicate_kind_name, predicate
      .                                   ))
      .                                   .emit()
      .                               });
      .                           }
      .                       }
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Does nothing as a lint pass, but registers some `Lint`s
      .               /// which are used by other parts of the compiler.
      .               SoftLints => [
      .                   WHILE_TRUE,
      .                   BOX_POINTERS,
-- line 1679 ----------------------------------------
-- line 1732 ----------------------------------------
      .               /// If `Some(_)`, suppress all subsequent pattern
      .               /// warnings for better diagnostics.
      .               node_id: Option<ast::NodeId>,
      .           }
      .           
      .           impl_lint_pass!(EllipsisInclusiveRangePatterns => [ELLIPSIS_INCLUSIVE_RANGE_PATTERNS]);
      .           
      .           impl EarlyLintPass for EllipsisInclusiveRangePatterns {
  1,988 ( 0.00%)      fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat) {
    284 ( 0.00%)          if self.node_id.is_some() {
      .                       // Don't recursively warn about patterns inside range endpoints.
      .                       return;
      .                   }
      .           
      .                   use self::ast::{PatKind, RangeSyntax::DotDotDot};
      .           
      .                   /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span
      .                   /// corresponding to the ellipsis.
      .                   fn matches_ellipsis_pat(pat: &ast::Pat) -> Option<(Option<&Expr>, &Expr, Span)> {
    568 ( 0.00%)              match &pat.kind {
      .                           PatKind::Range(
      .                               a,
      .                               Some(b),
      .                               Spanned { span, node: RangeEnd::Included(DotDotDot) },
      .                           ) => Some((a.as_deref(), b, *span)),
      .                           _ => None,
      .                       }
      .                   }
      .           
    852 ( 0.00%)          let (parenthesise, endpoints) = match &pat.kind {
      .                       PatKind::Ref(subpat, _) => (true, matches_ellipsis_pat(&subpat)),
      .                       _ => (false, matches_ellipsis_pat(pat)),
      .                   };
      .           
      .                   if let Some((start, end, join)) = endpoints {
      .                       let msg = "`...` range patterns are deprecated";
      .                       let suggestion = "use `..=` for an inclusive range";
      .                       if parenthesise {
-- line 1769 ----------------------------------------
-- line 1816 ----------------------------------------
      .                                           replace,
      .                                           Applicability::MachineApplicable,
      .                                       )
      .                                       .emit();
      .                               });
      .                           }
      .                       };
      .                   }
  2,272 ( 0.00%)      }
      .           
      .               fn check_pat_post(&mut self, _cx: &EarlyContext<'_>, pat: &ast::Pat) {
    852 ( 0.00%)          if let Some(node_id) = self.node_id {
      .                       if pat.id == node_id {
      .                           self.node_id = None
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           declare_lint! {
-- line 1835 ----------------------------------------
-- line 1880 ----------------------------------------
      .           
      .           impl UnnameableTestItems {
      .               pub fn new() -> Self {
      .                   Self { boundary: None, items_nameable: true }
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {
    985 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    394 ( 0.00%)          if self.items_nameable {
    358 ( 0.00%)              if let hir::ItemKind::Mod(..) = it.kind {
      .                       } else {
    169 ( 0.00%)                  self.items_nameable = false;
    507 ( 0.00%)                  self.boundary = Some(it.def_id);
      .                       }
      .                       return;
      .                   }
      .           
    108 ( 0.00%)          let attrs = cx.tcx.hir().attrs(it.hir_id());
     90 ( 0.00%)          if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {
      .                       cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {
      .                           lint.build("cannot test inner items").emit()
      .                       });
      .                   }
  1,182 ( 0.00%)      }
      .           
      .               fn check_item_post(&mut self, _cx: &LateContext<'_>, it: &hir::Item<'_>) {
  1,142 ( 0.00%)          if !self.items_nameable && self.boundary == Some(it.def_id) {
    169 ( 0.00%)              self.items_nameable = true;
      .                   }
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `keyword_idents` lint detects edition keywords being used as an
      .               /// identifier.
      .               ///
-- line 1916 ----------------------------------------
-- line 1958 ----------------------------------------
      .           declare_lint_pass!(
      .               /// Check for uses of edition keywords used as an identifier.
      .               KeywordIdents => [KEYWORD_IDENTS]
      .           );
      .           
      .           struct UnderMacro(bool);
      .           
      .           impl KeywordIdents {
 21,128 ( 0.00%)      fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {
237,737 ( 0.05%)          for tt in tokens.into_trees() {
 35,542 ( 0.01%)              match tt {
      .                           // Only report non-raw idents.
 60,672 ( 0.01%)                  TokenTree::Token(token) => {
 75,936 ( 0.02%)                      if let Some((ident, false)) = token.ident() {
 20,352 ( 0.00%)                          self.check_ident_token(cx, UnderMacro(true), ident);
      .                               }
      .                           }
  5,206 ( 0.00%)                  TokenTree::Delimited(_, _, tts) => self.check_tokens(cx, tts),
      .                       }
      .                   }
 21,128 ( 0.00%)      }
      .           
 81,888 ( 0.02%)      fn check_ident_token(
      .                   &mut self,
      .                   cx: &EarlyContext<'_>,
      .                   UnderMacro(under_macro): UnderMacro,
      .                   ident: Ident,
      .               ) {
 27,296 ( 0.01%)          let next_edition = match cx.sess().edition() {
      .                       Edition::Edition2015 => {
      .                           match ident.name {
      .                               kw::Async | kw::Await | kw::Try => Edition::Edition2018,
      .           
      .                               // rust-lang/rust#56327: Conservatively do not
      .                               // attempt to report occurrences of `dyn` within
      .                               // macro definitions or invocations, because `dyn`
      .                               // can legitimately occur as a contextual keyword
-- line 1994 ----------------------------------------
-- line 2020 ----------------------------------------
      .                           .span_suggestion(
      .                               ident.span,
      .                               "you can use a raw identifier to stay compatible",
      .                               format!("r#{}", ident),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit()
      .                   });
 47,768 ( 0.01%)      }
      .           }
      .           
      .           impl EarlyLintPass for KeywordIdents {
      .               fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {
    130 ( 0.00%)          self.check_tokens(cx, mac_def.body.inner_tokens());
      .               }
      .               fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {
     60 ( 0.00%)          self.check_tokens(cx, mac.args.inner_tokens());
      .               }
      .               fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {
  3,472 ( 0.00%)          self.check_ident_token(cx, UnderMacro(false), ident);
      .               }
      .           }
      .           
      2 ( 0.00%)  declare_lint_pass!(ExplicitOutlivesRequirements => [EXPLICIT_OUTLIVES_REQUIREMENTS]);
      .           
      .           impl ExplicitOutlivesRequirements {
      .               fn lifetimes_outliving_lifetime<'tcx>(
      .                   inferred_outlives: &'tcx [(ty::Predicate<'tcx>, Span)],
      .                   index: u32,
      .               ) -> Vec<ty::Region<'tcx>> {
      .                   inferred_outlives
      .                       .iter()
-- line 2051 ----------------------------------------
-- line 2179 ----------------------------------------
      .                           }
      .                       }
      .                       merged
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {
  1,773 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {
      .                   use rustc_middle::middle::resolve_lifetime::Region;
      .           
    788 ( 0.00%)          let infer_static = cx.tcx.features().infer_static_outlives_requirements;
    197 ( 0.00%)          let def_id = item.def_id;
  1,351 ( 0.00%)          if let hir::ItemKind::Struct(_, ref hir_generics)
      .                   | hir::ItemKind::Enum(_, ref hir_generics)
      .                   | hir::ItemKind::Union(_, ref hir_generics) = item.kind
      .                   {
     14 ( 0.00%)              let inferred_outlives = cx.tcx.inferred_outlives_of(def_id);
     24 ( 0.00%)              if inferred_outlives.is_empty() {
      .                           return;
      .                       }
      .           
      4 ( 0.00%)              let ty_generics = cx.tcx.generics_of(def_id);
      .           
      4 ( 0.00%)              let mut bound_count = 0;
      .                       let mut lint_spans = Vec::new();
      .           
      .                       for param in hir_generics.params {
     24 ( 0.00%)                  let has_lifetime_bounds = param
      .                               .bounds
      .                               .iter()
      .                               .any(|bound| matches!(bound, hir::GenericBound::Outlives(_)));
      .                           if !has_lifetime_bounds {
      .                               continue;
      .                           }
      .           
      .                           let relevant_lifetimes =
-- line 2215 ----------------------------------------
-- line 2229 ----------------------------------------
      .                               param.span.shrink_to_hi(),
      .                               &param.bounds,
      .                               bound_spans,
      .                           ));
      .                       }
      .           
      .                       let mut where_lint_spans = Vec::new();
      .                       let mut dropped_predicate_count = 0;
      4 ( 0.00%)              let num_predicates = hir_generics.where_clause.predicates.len();
      .                       for (i, where_predicate) in hir_generics.where_clause.predicates.iter().enumerate() {
     12 ( 0.00%)                  let (relevant_lifetimes, bounds, span) = match where_predicate {
      .                               hir::WherePredicate::RegionPredicate(predicate) => {
      .                                   if let Some(Region::EarlyBound(index, ..)) =
      .                                       cx.tcx.named_region(predicate.lifetime.hir_id)
      .                                   {
      .                                       (
      .                                           Self::lifetimes_outliving_lifetime(inferred_outlives, index),
      .                                           &predicate.bounds,
      .                                           predicate.span,
-- line 2247 ----------------------------------------
-- line 2248 ----------------------------------------
      .                                       )
      .                                   } else {
      .                                       continue;
      .                                   }
      .                               }
      .                               hir::WherePredicate::BoundPredicate(predicate) => {
      .                                   // FIXME we can also infer bounds on associated types,
      .                                   // and should check for them here.
     28 ( 0.00%)                          match predicate.bounded_ty.kind {
      .                                       hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {
     20 ( 0.00%)                                  let Res::Def(DefKind::TyParam, def_id) = path.res else {
      .                                               continue
      .                                           };
      .                                           let index = ty_generics.param_def_id_to_index[&def_id];
      .                                           (
      .                                               Self::lifetimes_outliving_type(inferred_outlives, index),
      .                                               &predicate.bounds,
      .                                               predicate.span,
      .                                           )
-- line 2266 ----------------------------------------
-- line 2300 ----------------------------------------
      .                                   bounds,
      .                                   bound_spans,
      .                               ));
      .                           }
      .                       }
      .           
      .                       // If all predicates are inferable, drop the entire clause
      .                       // (including the `where`)
      8 ( 0.00%)              if num_predicates > 0 && dropped_predicate_count == num_predicates {
      .                           let where_span = hir_generics
      .                               .where_clause
      .                               .span()
      .                               .expect("span of (nonempty) where clause should exist");
      .                           // Extend the where clause back to the closing `>` of the
      .                           // generics, except for tuple struct, which have the `where`
      .                           // after the fields of the struct.
      .                           let full_where_span =
-- line 2316 ----------------------------------------
-- line 2319 ----------------------------------------
      .                               } else {
      .                                   hir_generics.span.shrink_to_hi().to(where_span)
      .                               };
      .                           lint_spans.push(full_where_span);
      .                       } else {
      .                           lint_spans.extend(where_lint_spans);
      .                       }
      .           
      4 ( 0.00%)              if !lint_spans.is_empty() {
      .                           cx.struct_span_lint(EXPLICIT_OUTLIVES_REQUIREMENTS, lint_spans.clone(), |lint| {
      .                               lint.build("outlives requirements can be inferred")
      .                                   .multipart_suggestion(
      .                                       if bound_count == 1 {
      .                                           "remove this bound"
      .                                       } else {
      .                                           "remove these bounds"
      .                                       },
-- line 2335 ----------------------------------------
-- line 2338 ----------------------------------------
      .                                           .map(|span| (span, "".to_owned()))
      .                                           .collect::<Vec<_>>(),
      .                                       Applicability::MachineApplicable,
      .                                   )
      .                                   .emit();
      .                           });
      .                       }
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `incomplete_features` lint detects unstable features enabled with
      .               /// the [`feature` attribute] that may function improperly in some or all
      .               /// cases.
      .               ///
      .               /// [`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/
-- line 2354 ----------------------------------------
-- line 2448 ----------------------------------------
      .               pub INVALID_VALUE,
      .               Warn,
      .               "an invalid value is being created (such as a null reference)"
      .           }
      .           
      .           declare_lint_pass!(InvalidValue => [INVALID_VALUE]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for InvalidValue {
  7,280 ( 0.00%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {
      .                   #[derive(Debug, Copy, Clone, PartialEq)]
      .                   enum InitKind {
      .                       Zeroed,
      .                       Uninit,
      .                   }
      .           
      .                   /// Information about why a type cannot be initialized this way.
      .                   /// Contains an error message and optionally a span to point at.
-- line 2464 ----------------------------------------
-- line 2478 ----------------------------------------
      .                           }
      .                           Tup(tup) => tup.iter().all(is_zero),
      .                           _ => false,
      .                       }
      .                   }
      .           
      .                   /// Determine if this expression is a "dangerous initialization".
      .                   fn is_dangerous_init(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<InitKind> {
  4,968 ( 0.00%)              if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {
      .                           // Find calls to `mem::{uninitialized,zeroed}` methods.
    336 ( 0.00%)                  if let hir::ExprKind::Path(ref qpath) = path_expr.kind {
    752 ( 0.00%)                      let def_id = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;
    656 ( 0.00%)                      match cx.tcx.get_diagnostic_name(def_id) {
      .                                   Some(sym::mem_zeroed) => return Some(InitKind::Zeroed),
      .                                   Some(sym::mem_uninitialized) => return Some(InitKind::Uninit),
      .                                   Some(sym::transmute) if is_zero(&args[0]) => return Some(InitKind::Zeroed),
      .                                   _ => {}
      .                               }
      .                           }
      .                       } else if let hir::ExprKind::MethodCall(_, ref args, _) = expr.kind {
      .                           // Find problematic calls to `MaybeUninit::assume_init`.
    580 ( 0.00%)                  let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;
    696 ( 0.00%)                  if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {
      .                               // This is a call to *some* method named `assume_init`.
      .                               // See if the `self` parameter is one of the dangerous constructors.
      .                               if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {
      .                                   if let hir::ExprKind::Path(ref qpath) = path_expr.kind {
      .                                       let def_id = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;
      .                                       match cx.tcx.get_diagnostic_name(def_id) {
      .                                           Some(sym::maybe_uninit_zeroed) => return Some(InitKind::Zeroed),
      .                                           Some(sym::maybe_uninit_uninit) => return Some(InitKind::Uninit),
-- line 2508 ----------------------------------------
-- line 2655 ----------------------------------------
      .                                   err.span_note(span, &msg);
      .                               } else {
      .                                   err.note(&msg);
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                   }
  6,240 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `clashing_extern_declarations` lint detects when an `extern fn`
      .               /// has been declared with the same name but different types.
      .               ///
      .               /// ### Example
      .               ///
-- line 2671 ----------------------------------------
-- line 3078 ----------------------------------------
      .               pub DEREF_NULLPTR,
      .               Warn,
      .               "detects when an null pointer is dereferenced"
      .           }
      .           
      .           declare_lint_pass!(DerefNullPtr => [DEREF_NULLPTR]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {
  3,120 ( 0.00%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {
      .                   /// test if expression is a null ptr
      .                   fn is_null_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {
    156 ( 0.00%)              match &expr.kind {
      .                           rustc_hir::ExprKind::Cast(ref expr, ref ty) => {
      .                               if let rustc_hir::TyKind::Ptr(_) = ty.kind {
      .                                   return is_zero(expr) || is_null_ptr(cx, expr);
      .                               }
      .                           }
      .                           // check for call to `core::ptr::null` or `core::ptr::null_mut`
      .                           rustc_hir::ExprKind::Call(ref path, _) => {
      .                               if let rustc_hir::ExprKind::Path(ref qpath) = path.kind {
-- line 3097 ----------------------------------------
-- line 3116 ----------------------------------------
      .                                   return a == 0;
      .                               }
      .                           }
      .                           _ => {}
      .                       }
      .                       false
      .                   }
      .           
  2,158 ( 0.00%)          if let rustc_hir::ExprKind::Unary(rustc_hir::UnOp::Deref, expr_deref) = expr.kind {
      .                       if is_null_ptr(cx, expr_deref) {
      .                           cx.struct_span_lint(DEREF_NULLPTR, expr.span, |lint| {
      .                               let mut err = lint.build("dereferencing a null pointer");
      .                               err.span_label(expr.span, "this code causes undefined behavior when executed");
      .                               err.emit();
      .                           });
      .                       }
      .                   }
  4,160 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `named_asm_labels` lint detects the use of named labels in the
      .               /// inline `asm!` macro.
      .               ///
      .               /// ### Example
      .               ///
-- line 3141 ----------------------------------------
-- line 3162 ----------------------------------------
      .               pub NAMED_ASM_LABELS,
      .               Deny,
      .               "named labels in inline assembly",
      .           }
      .           
      .           declare_lint_pass!(NamedAsmLabels => [NAMED_ASM_LABELS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {
  7,280 ( 0.00%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {
  2,080 ( 0.00%)          if let hir::Expr {
      .                       kind: hir::ExprKind::InlineAsm(hir::InlineAsm { template_strs, .. }),
      .                       ..
      .                   } = expr
      .                   {
      .                       for (template_sym, template_snippet, template_span) in template_strs.iter() {
      .                           let template_str = template_sym.as_str();
      .                           let find_label_span = |needle: &str| -> Option<Span> {
      .                               if let Some(template_snippet) = template_snippet {
-- line 3179 ----------------------------------------
-- line 3242 ----------------------------------------
      .                                       BuiltinLintDiagnostics::NamedAsmLabel(
      .                                           "only local labels of the form `<number>:` should be used in inline asm"
      .                                               .to_string(),
      .                                       ),
      .                                   );
      .                           }
      .                       }
      .                   }
  8,320 ( 0.00%)      }
      .           }

 14,802 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .               }
      .               Some((start, end))
      .           }
      .           
      .           macro_rules! bit_relations_inherent_impls {
      .               () => {
      .                   /// Sets `self = self | other` and returns `true` if `self` changed
      .                   /// (i.e., if new bits were added).
 11,496 ( 0.00%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
      .                   where
      .                       Self: BitRelations<Rhs>,
      .                   {
      .                       <Self as BitRelations<Rhs>>::union(self, other)
  8,622 ( 0.00%)          }
      .           
      .                   /// Sets `self = self - other` and returns `true` if `self` changed.
      .                   /// (i.e., if any bits were removed).
      .                   pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
      .                   where
      .                       Self: BitRelations<Rhs>,
      .                   {
      .                       <Self as BitRelations<Rhs>>::subtract(self, other)
-- line 65 ----------------------------------------
-- line 92 ----------------------------------------
      .               domain_size: usize,
      .               words: Vec<Word>,
      .               marker: PhantomData<T>,
      .           }
      .           
      .           impl<T> BitSet<T> {
      .               /// Gets the domain size.
      .               pub fn domain_size(&self) -> usize {
      5 ( 0.00%)          self.domain_size
      .               }
      .           }
      .           
      .           impl<T: Idx> BitSet<T> {
      .               /// Creates a new, empty bitset with a given `domain_size`.
      .               #[inline]
      .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
      .                   let num_words = num_words(domain_size);
 10,674 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
      .               }
      .           
      .               /// Creates a new, filled bitset with a given `domain_size`.
      .               #[inline]
      .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
      .                   let num_words = num_words(domain_size);
     85 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
      .                   result.clear_excess_bits();
      .                   result
      .               }
      .           
      .               /// Clear all elements.
      .               #[inline]
      .               pub fn clear(&mut self) {
      .                   for word in &mut self.words {
    266 ( 0.00%)              *word = 0;
      .                   }
      .               }
      .           
      .               /// Clear excess bits in the final word.
      .               fn clear_excess_bits(&mut self) {
    118 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
    270 ( 0.00%)          if num_bits_in_final_word > 0 {
    152 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
    422 ( 0.00%)              let final_word_idx = self.words.len() - 1;
    135 ( 0.00%)              self.words[final_word_idx] &= mask;
      .                   }
      .               }
      .           
      .               /// Count the number of set bits in the set.
      .               pub fn count(&self) -> usize {
      .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
      .               }
      .           
      .               /// Returns `true` if `self` contains `elem`.
      .               #[inline]
      .               pub fn contains(&self, elem: T) -> bool {
  6,254 ( 0.00%)          assert!(elem.index() < self.domain_size);
      .                   let (word_index, mask) = word_index_and_mask(elem);
  5,706 ( 0.00%)          (self.words[word_index] & mask) != 0
      .               }
      .           
      .               /// Is `self` is a (non-strict) superset of `other`?
      .               #[inline]
      .               pub fn superset(&self, other: &BitSet<T>) -> bool {
      .                   assert_eq!(self.domain_size, other.domain_size);
      .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
      .               }
-- line 157 ----------------------------------------
-- line 160 ----------------------------------------
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
      .                   self.words.iter().all(|a| *a == 0)
      .               }
      .           
      .               /// Insert `elem`. Returns whether the set has changed.
      .               #[inline]
      .               pub fn insert(&mut self, elem: T) -> bool {
 94,438 ( 0.02%)          assert!(elem.index() < self.domain_size);
      .                   let (word_index, mask) = word_index_and_mask(elem);
      .                   let word_ref = &mut self.words[word_index];
 15,935 ( 0.00%)          let word = *word_ref;
 31,870 ( 0.01%)          let new_word = word | mask;
 45,480 ( 0.01%)          *word_ref = new_word;
 16,810 ( 0.00%)          new_word != word
      .               }
      .           
      .               #[inline]
      .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
      .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
      .                       return;
      .                   };
      .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
      .                   } else {
      .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
      .                   }
      .               }
      .           
      .               /// Sets all bits to true.
      .               pub fn insert_all(&mut self) {
      .                   for word in &mut self.words {
    236 ( 0.00%)              *word = !0;
      .                   }
      .                   self.clear_excess_bits();
      .               }
      .           
      .               /// Returns `true` if the set has changed.
      .               #[inline]
      .               pub fn remove(&mut self, elem: T) -> bool {
 18,386 ( 0.00%)          assert!(elem.index() < self.domain_size);
      .                   let (word_index, mask) = word_index_and_mask(elem);
      .                   let word_ref = &mut self.words[word_index];
      .                   let word = *word_ref;
 17,514 ( 0.00%)          let new_word = word & !mask;
  8,791 ( 0.00%)          *word_ref = new_word;
      .                   new_word != word
      .               }
      .           
      .               /// Gets a slice of the underlying words.
      .               pub fn words(&self) -> &[Word] {
      .                   &self.words
      .               }
      .           
-- line 228 ----------------------------------------
-- line 308 ----------------------------------------
      .               }
      .           
      .               bit_relations_inherent_impls! {}
      .           }
      .           
      .           // dense REL dense
      .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
      .               fn union(&mut self, other: &BitSet<T>) -> bool {
  8,622 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size);
  2,787 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
      .               }
      .           
      .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
      .                   assert_eq!(self.domain_size, other.domain_size);
      .                   bitwise(&mut self.words, &other.words, |a, b| a & !b)
      .               }
      .           
      .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
-- line 325 ----------------------------------------
-- line 330 ----------------------------------------
      .           
      .           // Applies a function to mutate a bitset, and returns true if any
      .           // of the applications return true
      .           fn sequential_update<T: Idx>(
      .               mut self_update: impl FnMut(T) -> bool,
      .               it: impl Iterator<Item = T>,
      .           ) -> bool {
      .               let mut changed = false;
      2 ( 0.00%)      for elem in it {
      6 ( 0.00%)          changed |= self_update(elem);
      .               }
      .               changed
      6 ( 0.00%)  }
      .           
      .           // Optimization of intersection for SparseBitSet that's generic
      .           // over the RHS
      .           fn sparse_intersect<T: Idx>(
      .               set: &mut SparseBitSet<T>,
      .               other_contains: impl Fn(&T) -> bool,
      .           ) -> bool {
      .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 414 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           // dense REL hybrid
      .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
      .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
      .                   assert_eq!(self.domain_size, other.domain_size());
      4 ( 0.00%)          match other {
      .                       HybridBitSet::Sparse(sparse) => {
      .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
      .                       }
      .                       HybridBitSet::Dense(dense) => self.union(dense),
      .                   }
      .               }
      .           
      .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 430 ----------------------------------------
-- line 455 ----------------------------------------
      .                       HybridBitSet::Dense(dense) => self.intersect(dense),
      .                   }
      .               }
      .           }
      .           
      .           // hybrid REL hybrid
      .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
      .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
  1,698 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
    566 ( 0.00%)          match self {
      .                       HybridBitSet::Sparse(_) => {
    562 ( 0.00%)                  match other {
      .                               HybridBitSet::Sparse(other_sparse) => {
      .                                   // Both sets are sparse. Add the elements in
      .                                   // `other_sparse` to `self` one at a time. This
      .                                   // may or may not cause `self` to be densified.
      .                                   let mut changed = false;
      .                                   for elem in other_sparse.iter() {
  1,698 ( 0.00%)                              changed |= self.insert(*elem);
      .                                   }
      .                                   changed
      .                               }
      .           
      .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
      .                           }
      .                       }
      .           
-- line 481 ----------------------------------------
-- line 508 ----------------------------------------
      .                           HybridBitSet::Dense(other_dense) => self_dense.intersect(other_dense),
      .                       },
      .                   }
      .               }
      .           }
      .           
      .           impl<T> Clone for BitSet<T> {
      .               fn clone(&self) -> Self {
     44 ( 0.00%)          BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
      .               }
      .           
 17,605 ( 0.00%)      fn clone_from(&mut self, from: &Self) {
 13,650 ( 0.00%)          if self.domain_size != from.domain_size {
      .                       self.words.resize(from.domain_size, 0);
      .                       self.domain_size = from.domain_size;
      .                   }
      .           
      .                   self.words.copy_from_slice(&from.words);
      .               }
      .           }
      .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
      .               type Item = T;
      .               fn next(&mut self) -> Option<T> {
      .                   loop {
 13,124 ( 0.00%)              if self.word != 0 {
      .                           // Get the position of the next set bit in the current word,
      .                           // then clear the bit.
      .                           let bit_pos = self.word.trailing_zeros() as usize;
      .                           let bit = 1 << bit_pos;
      .                           self.word ^= bit;
  6,713 ( 0.00%)                  return Some(T::new(bit_pos + self.offset));
      .                       }
      .           
      .                       // Move onto the next word. `wrapping_add()` is needed to handle
      .                       // the degenerate initial value given to `offset` in `new()`.
      .                       let word = self.iter.next()?;
  1,639 ( 0.00%)              self.word = *word;
      .                       self.offset = self.offset.wrapping_add(WORD_BITS);
      .                   }
      .               }
      .           }
      .           
      .           #[inline]
      .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
      .           where
      .               Op: Fn(Word, Word) -> Word,
      .           {
 11,496 ( 0.00%)      assert_eq!(out_vec.len(), in_vec.len());
      .               let mut changed = 0;
  5,178 ( 0.00%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
  5,376 ( 0.00%)          let old_val = *out_elem;
      .                   let new_val = op(old_val, *in_elem);
  2,787 ( 0.00%)          *out_elem = new_val;
      .                   // This is essentially equivalent to a != with changed being a bool, but
      .                   // in practice this code gets auto-vectorized by the compiler for most
      .                   // operators. Using != here causes us to generate quite poor code as the
      .                   // compiler tries to go back to a boolean on each loop iteration.
 10,752 ( 0.00%)          changed |= old_val ^ new_val;
      .               }
      .               changed != 0
      .           }
      .           
      .           const SPARSE_MAX: usize = 8;
      .           
      .           /// A fixed-size bitset type with a sparse representation and a maximum of
      .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
-- line 648 ----------------------------------------
-- line 656 ----------------------------------------
      .           }
      .           
      .           impl<T: Idx> SparseBitSet<T> {
      .               fn new_empty(domain_size: usize) -> Self {
      .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
      .               }
      .           
      .               fn len(&self) -> usize {
  4,234 ( 0.00%)          self.elems.len()
      .               }
      .           
      .               fn is_empty(&self) -> bool {
      .                   self.elems.len() == 0
      .               }
      .           
      .               fn contains(&self, elem: T) -> bool {
     25 ( 0.00%)          assert!(elem.index() < self.domain_size);
      .                   self.elems.contains(&elem)
      .               }
      .           
      .               fn insert(&mut self, elem: T) -> bool {
  4,230 ( 0.00%)          assert!(elem.index() < self.domain_size);
  1,559 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
    963 ( 0.00%)              if self.elems[i] == elem {
      .                           // `elem` is already in the set.
      .                           false
      .                       } else {
      .                           // `elem` is smaller than one or more existing elements.
      .                           self.elems.insert(i, elem);
      .                           true
      .                       }
      .                   } else {
      .                       // `elem` is larger than all existing elements.
      .                       self.elems.push(elem);
      .                       true
      .                   };
  4,230 ( 0.00%)          assert!(self.len() <= SPARSE_MAX);
      .                   changed
      .               }
      .           
      .               fn remove(&mut self, elem: T) -> bool {
      .                   assert!(elem.index() < self.domain_size);
      .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
      .                       self.elems.remove(i);
      .                       true
-- line 700 ----------------------------------------
-- line 701 ----------------------------------------
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               fn to_dense(&self) -> BitSet<T> {
      .                   let mut dense = BitSet::new_empty(self.domain_size);
      .                   for elem in self.elems.iter() {
     16 ( 0.00%)              dense.insert(*elem);
      .                   }
      .                   dense
      .               }
      .           
      .               fn iter(&self) -> slice::Iter<'_, T> {
  1,372 ( 0.00%)          self.elems.iter()
      .               }
      .           
      .               bit_relations_inherent_impls! {}
      .           }
      .           
      .           impl<T: Idx + Ord> SparseBitSet<T> {
      .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
      .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 767 ----------------------------------------
      .                   match self {
      .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
      .                       HybridBitSet::Dense(dense) => dense.domain_size,
      .                   }
      .               }
      .           
      .               pub fn clear(&mut self) {
      .                   let domain_size = self.domain_size();
    940 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
      .               }
      .           
      .               pub fn contains(&self, elem: T) -> bool {
     38 ( 0.00%)          match self {
      .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
      .                       HybridBitSet::Dense(dense) => dense.contains(elem),
      .                   }
      .               }
      .           
      .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
      .                   match (self, other) {
      .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
      .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
      .                       HybridBitSet::Dense(dense) => dense.is_empty(),
      .                   }
      .               }
      .           
      .               /// Returns the previous element present in the bitset from `elem`,
      .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
      .               /// bitset.
  1,372 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
      .               where
      .                   T: Ord,
      .               {
  1,372 ( 0.00%)          match self {
      .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
      .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
      .                   }
  2,058 ( 0.00%)      }
      .           
 19,053 ( 0.00%)      pub fn insert(&mut self, elem: T) -> bool {
      .                   // No need to check `elem` against `self.domain_size` here because all
      .                   // the match cases check it, one way or another.
  4,234 ( 0.00%)          match self {
  4,234 ( 0.00%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
      .                           // The set is sparse and has space for `elem`.
      .                           sparse.insert(elem)
      .                       }
      .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
      .                           // The set is sparse and does not have space for `elem`, but
      .                           // that doesn't matter because `elem` is already present.
      .                           false
      .                       }
      .                       HybridBitSet::Sparse(sparse) => {
      .                           // The set is sparse and full. Convert to a dense set.
      .                           let mut dense = sparse.to_dense();
      .                           let changed = dense.insert(elem);
      2 ( 0.00%)                  assert!(changed);
     12 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
      .                           changed
      .                       }
      .                       HybridBitSet::Dense(dense) => dense.insert(elem),
      .                   }
 16,936 ( 0.00%)      }
      .           
      .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
      .                   // No need to check `elem` against `self.domain_size` here because all
      .                   // the match cases check it, one way or another.
      .                   let start = match elems.start_bound().cloned() {
      .                       Bound::Included(start) => start.index(),
      .                       Bound::Excluded(start) => start.index() + 1,
      .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 896 ----------------------------------------
      .               pub fn to_dense(self) -> BitSet<T> {
      .                   match self {
      .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
      .                       HybridBitSet::Dense(dense) => dense,
      .                   }
      .               }
      .           
      .               pub fn iter(&self) -> HybridIter<'_, T> {
  1,014 ( 0.00%)          match self {
  1,920 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
      .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
      .                   }
      .               }
      .           
      .               bit_relations_inherent_impls! {}
      .           }
      .           
      .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
      .           /// to or greater than the domain size.
      .           #[derive(Clone, Debug, PartialEq)]
      .           pub struct GrowableBitSet<T: Idx> {
      .               bit_set: BitSet<T>,
      .           }
      .           
      .           impl<T: Idx> GrowableBitSet<T> {
      .               /// Ensure that the set can hold at least `min_domain_size` elements.
158,592 ( 0.03%)      pub fn ensure(&mut self, min_domain_size: usize) {
 45,312 ( 0.01%)          if self.bit_set.domain_size < min_domain_size {
     13 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
      .                   }
      .           
      .                   let min_num_words = num_words(min_domain_size);
 90,624 ( 0.02%)          if self.bit_set.words.len() < min_num_words {
      .                       self.bit_set.words.resize(min_num_words, 0)
      .                   }
135,936 ( 0.03%)      }
      .           
      .               pub fn new_empty() -> GrowableBitSet<T> {
    582 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
      .               }
      .           
      .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
      4 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
      .               }
      .           
      .               /// Returns `true` if the set has changed.
      .               #[inline]
      .               pub fn insert(&mut self, elem: T) -> bool {
113,238 ( 0.02%)          self.ensure(elem.index() + 1);
      .                   self.bit_set.insert(elem)
      .               }
      .           
      .               /// Returns `true` if the set has changed.
      .               #[inline]
      .               pub fn remove(&mut self, elem: T) -> bool {
      .                   self.ensure(elem.index() + 1);
      .                   self.bit_set.remove(elem)
-- line 973 ----------------------------------------
-- line 976 ----------------------------------------
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
      .                   self.bit_set.is_empty()
      .               }
      .           
      .               #[inline]
      .               pub fn contains(&self, elem: T) -> bool {
      .                   let (word_index, mask) = word_index_and_mask(elem);
    704 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
      .               }
      .           }
      .           
      .           /// A fixed-size 2D bit matrix type with a dense representation.
      .           ///
      .           /// `R` and `C` are index types used to identify rows and columns respectively;
      .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
      .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
      .           }
      .           
      .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
      .               /// Creates a new `rows x columns` matrix, initially empty.
      .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
      .                   // For every element, we need one bit for every other
      .                   // element. Round up to an even number of words.
      .                   let words_per_row = num_words(num_columns);
  1,095 ( 0.00%)          BitMatrix {
      .                       num_rows,
      .                       num_columns,
    735 ( 0.00%)              words: vec![0; num_rows * words_per_row],
      .                       marker: PhantomData,
      .                   }
      .               }
      .           
      .               /// Creates a new matrix, with `row` used as the value for every row.
      .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
      .                   let num_columns = row.domain_size();
      .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
      .           
      .               pub fn rows(&self) -> impl Iterator<Item = R> {
      .                   (0..self.num_rows).map(R::new)
      .               }
      .           
      .               /// The range of bits for a given row.
      .               fn range(&self, row: R) -> (usize, usize) {
      .                   let words_per_row = num_words(self.num_columns);
 17,396 ( 0.00%)          let start = row.index() * words_per_row;
 14,754 ( 0.00%)          (start, start + words_per_row)
      .               }
      .           
      .               /// Sets the cell at `(row, column)` to true. Put another way, insert
      .               /// `column` to the bitset for `row`.
      .               ///
      .               /// Returns `true` if this changed the matrix.
      .               pub fn insert(&mut self, row: R, column: C) -> bool {
  9,388 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
      .                   let (start, _) = self.range(row);
      .                   let (word_index, mask) = word_index_and_mask(column);
      .                   let words = &mut self.words[..];
  9,470 ( 0.00%)          let word = words[start + word_index];
  3,788 ( 0.00%)          let new_word = word | mask;
  1,894 ( 0.00%)          words[start + word_index] = new_word;
  3,788 ( 0.00%)          word != new_word
      .               }
      .           
      .               /// Do the bits from `row` contain `column`? Put another way, is
      .               /// the matrix cell at `(row, column)` true?  Put yet another way,
      .               /// if the matrix represents (transitive) reachability, can
      .               /// `row` reach `column`?
    748 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
  3,740 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
      .                   let (start, _) = self.range(row);
      .                   let (word_index, mask) = word_index_and_mask(column);
  3,740 ( 0.00%)          (self.words[start + word_index] & mask) != 0
  1,496 ( 0.00%)      }
      .           
      .               /// Returns those indices that are true in rows `a` and `b`. This
      .               /// is an *O*(*n*) operation where *n* is the number of elements
      .               /// (somewhat independent from the actual size of the
      .               /// intersection, in particular).
      .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
      .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
      .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
      .           
      .               /// Adds the bits from row `read` to the bits from row `write`, and
      .               /// returns `true` if anything changed.
      .               ///
      .               /// This is used when computing transitive reachability because if
      .               /// you have an edge `write -> read`, because in that case
      .               /// `write` can reach everything that `read` can (and
      .               /// potentially more).
  1,812 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
  9,470 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
  1,894 ( 0.00%)          let (read_start, read_end) = self.range(read);
      .                   let (write_start, write_end) = self.range(write);
      .                   let words = &mut self.words[..];
      .                   let mut changed = false;
      .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
 10,126 ( 0.00%)              let word = words[write_index];
  5,682 ( 0.00%)              let new_word = word | words[read_index];
  1,894 ( 0.00%)              words[write_index] = new_word;
  9,552 ( 0.00%)              changed |= word != new_word;
      .                   }
      .                   changed
  5,436 ( 0.00%)      }
      .           
      .               /// Adds the bits from `with` to the bits from row `write`, and
      .               /// returns `true` if anything changed.
      .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
      .                   assert!(write.index() < self.num_rows);
      .                   assert_eq!(with.domain_size(), self.num_columns);
      .                   let (write_start, write_end) = self.range(write);
      .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
      .               /// Creates a new empty sparse bit matrix with no rows or columns.
      .               pub fn new(num_columns: usize) -> Self {
      .                   Self { num_columns, rows: IndexVec::new() }
      .               }
      .           
      .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
      .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
      .                   // Then replace row `row` with a full HybridBitSet if necessary.
    724 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
      .               }
      .           
      .               /// Sets the cell at `(row, column)` to true. Put another way, insert
      .               /// `column` to the bitset for `row`.
      .               ///
      .               /// Returns `true` if this changed the matrix.
      .               pub fn insert(&mut self, row: R, column: C) -> bool {
    962 ( 0.00%)          self.ensure_row(row).insert(column)
      .               }
      .           
      .               /// Sets the cell at `(row, column)` to false. Put another way, delete
      .               /// `column` from the bitset for `row`. Has no effect if `row` does not
      .               /// exist.
      .               ///
      .               /// Returns `true` if this changed the matrix.
      .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
      .           
      .               /// Adds the bits from row `read` to the bits from row `write`, and
      .               /// returns `true` if anything changed.
      .               ///
      .               /// This is used when computing transitive reachability because if
      .               /// you have an edge `write -> read`, because in that case
      .               /// `write` can reach everything that `read` can (and
      .               /// potentially more).
 42,392 ( 0.01%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
  6,056 ( 0.00%)          if read == write || self.row(read).is_none() {
      .                       return false;
      .                   }
      .           
      .                   self.ensure_row(write);
  3,113 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
      .                       write_row.union(read_row)
      .                   } else {
      .                       unreachable!()
      .                   }
 54,504 ( 0.01%)      }
      .           
      .               /// Insert all bits in the given row.
      .               pub fn insert_all_into_row(&mut self, row: R) {
      .                   self.ensure_row(row).insert_all();
      .               }
      .           
      .               pub fn rows(&self) -> impl Iterator<Item = R> {
      .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
      .           
      .               /// Iterates through all the columns set to true in a given row of
      .               /// the matrix.
      .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
      .                   self.row(row).into_iter().flat_map(|r| r.iter())
      .               }
      .           
      .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
 14,884 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
      .               }
      .           
      .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
      .               /// `HybridBitSet`. Has no effect if `row` does not exist.
      .               ///
      .               /// Returns true if the row was changed.
      .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
      .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
      .                   HybridBitSet<C>: BitRelations<Set>,
      .               {
      .                   self.ensure_row(row).union(set)
      .               }
      .           }
      .           
      .           #[inline]
      .           fn num_words<T: Idx>(domain_size: T) -> usize {
138,552 ( 0.03%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
      .           }
      .           
      .           #[inline]
      .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
      .               let elem = elem.index();
116,676 ( 0.02%)      let word_index = elem / WORD_BITS;
 61,057 ( 0.01%)      let mask = 1 << (elem % WORD_BITS);
      .               (word_index, mask)
      .           }
      .           
      .           #[inline]
      .           fn max_bit(word: Word) -> usize {
      .               WORD_BITS - 1 - word.leading_zeros() as usize
      .           }
      .           
-- line 1352 ----------------------------------------

 99,314 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  179,007 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       29 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,070 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,852 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       18 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       72 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,252 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        9 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        9 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,063 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,567 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        4 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       63 ( 0.00%)      fn from(p: PathBuf) -> Self {
       18 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       54 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       63 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       36 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       54 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       54 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       45 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,100 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        9 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       18 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       20 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        8 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       20 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       74 ( 0.00%)      pub lo: BytePos,
       74 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       74 ( 0.00%)      pub ctxt: SyntaxContext,
       16 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  174,546 ( 0.04%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      342 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   26,368 ( 0.01%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   19,776 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   26,368 ( 0.01%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   41,490 ( 0.01%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   27,660 ( 0.01%)      }
        .               #[inline]
   13,168 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   13,168 ( 0.00%)      }
        .               #[inline]
   30,591 ( 0.01%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   20,394 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    2,465 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,479 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       42 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       28 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,026 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      684 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// the macro callsite that expanded to it.
        .               pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
        .               }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
      310 ( 0.00%)      pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
      124 ( 0.00%)          if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      744 ( 0.00%)      }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      390 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      485 ( 0.00%)          while !outer.contains(self) {
      310 ( 0.00%)              self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      429 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    3,675 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    2,450 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      741 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      540 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      483 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,176 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,008 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      840 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       25 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       30 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       20 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        5 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       20 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  107,503 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   19,420 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      126 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      107 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   67,613 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   87,957 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      528 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      336 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      384 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      726 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      132 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      462 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      594 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      124 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      756 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      441 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   32,886 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   12,780 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    8,520 ( 0.00%)          let mut span = self.data();
    7,030 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   12,780 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   14,130 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       62 ( 0.00%)          let mut span = self.data();
       93 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      248 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      747 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
    1,054 ( 0.00%)          let mut span = self.data();
    1,527 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    2,971 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      830 ( 0.00%)      }
        .           
        .               #[inline]
    9,120 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    7,980 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
       30 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
    1,650 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
       30 ( 0.00%)      }
        .           
        5 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       75 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        5 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
       24 ( 0.00%)          self.span_labels.push((span, label));
       60 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      312 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
       16 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,620 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,620 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       70 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       56 ( 0.00%)          MultiSpan::from_spans(spans)
       70 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       55 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       27 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       56 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,082 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       54 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,164 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       42 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       41 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      522 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        9 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        9 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        9 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       36 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       18 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       18 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       27 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       99 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,869 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      541 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  881,988 ( 0.18%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,082 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,951 ( 0.00%)              SourceFile {
    4,328 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,164 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,164 ( 0.00%)                  lines,
    2,164 ( 0.00%)                  multibyte_chars,
    2,164 ( 0.00%)                  non_narrow_chars,
    2,164 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,869 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      143 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       39 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       26 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       26 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       39 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      156 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       26 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      221 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      143 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       52 ( 0.00%)              lines,
       52 ( 0.00%)              multibyte_chars,
       52 ( 0.00%)              non_narrow_chars,
       52 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      117 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      532 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       88 ( 0.00%)          if matches!(
      152 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       75 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      684 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      550 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   23,207 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    8,384 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   19,333 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   13,065 ( 0.00%)          assert!(line_index < self.lines.len());
   18,963 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       43 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   12,610 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      140 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      126 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   40,272 ( 0.01%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    4,785 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   88,900 ( 0.02%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,660,428 ( 0.35%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,412,764 ( 0.29%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   97,572 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  329,770 ( 0.07%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   86,420 ( 0.02%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  243,350 ( 0.05%)          let span = self.data_untracked();
   23,416 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
  141,330 ( 0.03%)          span.parent.hash_stable(ctx, hasher);
        .           
   94,409 ( 0.02%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   93,842 ( 0.02%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  187,684 ( 0.04%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   93,842 ( 0.02%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   46,921 ( 0.01%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   46,921 ( 0.01%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  376,880 ( 0.08%)      }
        .           }

1,844,315 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
312,504 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
195,315 ( 0.04%)              .intern(kind, |kind| {
 14,572 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 29,144 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
351,567 ( 0.07%)      }
      .           
      .               #[inline(never)]
 77,536 ( 0.02%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 67,844 ( 0.01%)              .intern(kind, |kind| {
 21,774 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 87,228 ( 0.02%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 30,822 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 22,869 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  4,633 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  4,633 ( 0.00%)          self.data.get(&id.local_id)
 18,342 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    636 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    424 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  2,262 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 26,767 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  2,262 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  4,587 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  3,058 ( 0.00%)          match *qpath {
  7,746 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  1,428 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  7,645 ( 0.00%)      }
      .           
     62 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    231 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     62 ( 0.00%)      }
      .           
    531 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
  1,140 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  1,062 ( 0.00%)      }
      .           
  1,484 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,484 ( 0.00%)      }
      .           
  1,987 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  1,987 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  1,987 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    602 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    141 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    864 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    432 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    822 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    411 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    148 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     74 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  4,342 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  2,171 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  7,516 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  3,758 ( 0.00%)      }
      .           
 29,586 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  4,931 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 24,655 ( 0.01%)      }
      .           
  6,496 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  6,496 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 12,992 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    698 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    349 ( 0.00%)      }
      .           
  2,263 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  2,263 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  4,526 ( 0.00%)      }
      .           
  1,614 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  1,614 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  3,228 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    844 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  5,481 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  5,856 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  2,764 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  1,382 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  4,752 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  2,376 ( 0.00%)      }
      .           
  2,605 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  5,210 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  5,210 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    450 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     90 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    252 ( 0.00%)      }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    169 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    338 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    366 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    338 ( 0.00%)      }
      .           
  1,965 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  2,620 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,645 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    495 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    880 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    440 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,728 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    864 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    586 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    293 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    676 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    845 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    200 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    100 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    624 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    312 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    424 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    212 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    200 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    100 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      3 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      1 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      2 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    100 ( 0.00%)          &self.coercion_casts
    100 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     34 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     37 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    114 ( 0.00%)      pub fn is_identity(&self) -> bool {
    228 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    114 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    206 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    103 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
     14 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    228 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    222 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  1,436 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  4,540 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,816 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  3,632 ( 0.00%)      }
      .           
    333 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    111 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    444 ( 0.00%)      }
      .           
  1,700 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    340 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  2,380 ( 0.00%)      }
      .           
    444 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    111 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    555 ( 0.00%)      }
      .           
    423 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    752 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    188 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
  1,128 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    564 ( 0.00%)          let attrs = self.get_attrs(def_id);
  2,397 ( 0.00%)          let get = |name| {
    564 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  2,820 ( 0.00%)          };
    846 ( 0.00%)          (
    846 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    423 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
  1,128 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     98 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     14 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    112 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    112 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 97,601 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
125,487 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     77 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     88 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  1,897 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,168 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  3,402 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  3,888 ( 0.00%)      }
      .           
  2,002 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,574 ( 0.00%)      }
      .           
 45,703 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 52,232 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  3,729 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    859 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,024 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    132 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 26,112 ( 0.01%)          &*self.untracked_resolutions.cstore
 13,056 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      8 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     39 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    200 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    300 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
    100 ( 0.00%)          self.sess.opts.borrowck_mode
    400 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
  1,309 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    952 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  2,142 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
  1,071 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 30,772 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 35,168 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
    168 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    192 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 26,283 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
104,876 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 51,902 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 51,874 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 32,818 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  6,550 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 29,774 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  9,212 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 14,907 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  6,996 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
130,913 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 66,457 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,852 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
146,952 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
373,356 ( 0.08%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
333,414 ( 0.07%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
      .               /// unsafe.
      .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
      .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
      .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
      .               }
      .           
      .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
      .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     24 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
      .                   self.super_traits_of(trait_def_id).any(|trait_did| {
      .                       self.associated_items(trait_did)
      .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
      .                           .is_some()
      .                   })
     18 ( 0.00%)      }
      .           
      .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
      .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
      .               /// to identify which traits may define a given associated type to help avoid cycle errors.
      .               /// Returns a `DefId` iterator.
      .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
      .                   let mut set = FxHashSet::default();
      4 ( 0.00%)          let mut stack = vec![trait_def_id];
      .           
      .                   set.insert(trait_def_id);
      .           
     18 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      4 ( 0.00%)              let trait_did = stack.pop()?;
      2 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
      .           
      .                       for (predicate, _) in generic_predicates.predicates {
      .                           if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
      .                               if set.insert(data.def_id()) {
      .                                   stack.push(data.def_id());
      .                               }
      .                           }
      .                       }
-- line 2165 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 17,612 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
275,482 ( 0.06%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
103,553 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 98,248 ( 0.02%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  7,887 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 98,248 ( 0.02%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      6 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
      6 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     60 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
     23 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     24 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     87 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  1,792 ( 0.00%)          iter.intern_with(|ts| {
    512 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  1,946 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
  1,602 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     66 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    144 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  2,317 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  1,543 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
    336 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    550 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  2,317 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      6 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      6 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     12 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      2 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      2 ( 0.00%)          self.mk_place_elem(
      .                       place,
      4 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
      4 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
     72 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     80 ( 0.00%)      }
      .           
  1,988 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    284 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
    120 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
  1,136 ( 0.00%)          self._intern_poly_existential_predicates(eps)
  2,272 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,750 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    552 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  2,408 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  4,741 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    106 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 62,374 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  5,728 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  1,165 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    358 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  4,354 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    232 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  1,577 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  2,138 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    866 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    155 ( 0.00%)              c_variadic,
    220 ( 0.00%)              unsafety,
    180 ( 0.00%)              abi,
    110 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  1,068 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    971 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 93,365 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    157 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  2,432 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  4,864 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  8,112 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 17,402 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 17,402 ( 0.00%)          let hir = self.hir();
      .                   loop {
 27,231 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 32,955 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 19,773 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 24,860 ( 0.01%)      }
      .           
  2,344 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
 11,068 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    774 ( 0.00%)              let next = self.hir().get_parent_node(id);
  2,322 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  2,344 ( 0.00%)      }
      .           
     84 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    224 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     77 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     48 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
  1,246 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    356 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    356 ( 0.00%)          Some(&*candidates)
  1,424 ( 0.00%)      }
      .           
  4,410 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  5,670 ( 0.00%)      }
      .           
    414 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
     29 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    368 ( 0.00%)      }
      .           
  2,940 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  3,780 ( 0.00%)      }
      .           
  2,223 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  2,223 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
    170 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
     17 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      2 ( 0.00%)              match self.lookup_const_stability(def_id) {
      4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      2 ( 0.00%)                      self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
    153 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 54,392 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
161,769 ( 0.03%)          E::intern_with(self, f)
 53,019 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 22,916 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 48,705 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      3 ( 0.00%)                  assert!(iter.next().is_none());
  6,510 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     77 ( 0.00%)                  assert!(iter.next().is_none());
  6,171 ( 0.00%)                  f(&[t0, t1])
      .                       }
    316 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 19,237 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,378 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     44 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  1,142 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 46,100 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 33,892 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
    660 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  4,482 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     64 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     64 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     96 ( 0.00%)                  assert!(iter.next().is_none());
  2,102 ( 0.00%)                  f(&[t0, t1])
      .                       }
    351 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 51,619 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 51,902 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,272 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

189,922 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir               

      .           #![allow(clippy::many_single_char_names)]
      .           use crate::consts::RC;
      .           use core::convert::TryInto;
      .           
      .           #[inline(always)]
      .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
425,967 ( 0.09%)      ((x & y) | (!x & z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           #[inline(always)]
      .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
406,062 ( 0.08%)      ((x & z) | (y & !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
199,050 ( 0.04%)      (x ^ y ^ z)
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
254,784 ( 0.05%)      (y ^ (x | !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline]
 35,829 ( 0.01%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
  7,962 ( 0.00%)      let mut a = state[0];
  3,981 ( 0.00%)      let mut b = state[1];
  3,981 ( 0.00%)      let mut c = state[2];
  3,981 ( 0.00%)      let mut d = state[3];
      .           
      .               let mut data = [0u32; 16];
      .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
 99,525 ( 0.02%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
      .               }
      .           
      .               // round 1
      .               a = op_f(a, b, c, d, data[0], RC[0], 7);
      .               d = op_f(d, a, b, c, data[1], RC[1], 12);
      .               c = op_f(c, d, a, b, data[2], RC[2], 17);
      .               b = op_f(b, c, d, a, data[3], RC[3], 22);
      .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
      .               c = op_i(c, d, a, b, data[6], RC[58], 15);
      .               b = op_i(b, c, d, a, data[13], RC[59], 21);
      .           
      .               a = op_i(a, b, c, d, data[4], RC[60], 6);
      .               d = op_i(d, a, b, c, data[11], RC[61], 10);
      .               c = op_i(c, d, a, b, data[2], RC[62], 15);
      .               b = op_i(b, c, d, a, data[9], RC[63], 21);
      .           
  7,962 ( 0.00%)      state[0] = state[0].wrapping_add(a);
  3,981 ( 0.00%)      state[1] = state[1].wrapping_add(b);
  3,981 ( 0.00%)      state[2] = state[2].wrapping_add(c);
  3,981 ( 0.00%)      state[3] = state[3].wrapping_add(d);
 31,848 ( 0.01%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  6,797 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,823 ( 0.00%)              self.file = file;
  2,536 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,868 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 12,642 ( 0.00%)          self.line_number = line_index + 1;
 18,910 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 87,891 ( 0.02%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  1,002 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    501 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,505 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  3,507 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  2,004 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
328,447 ( 0.07%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
187,684 ( 0.04%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 46,921 ( 0.01%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 46,921 ( 0.01%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 82,164 ( 0.02%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 81,940 ( 0.02%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
245,820 ( 0.05%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 81,940 ( 0.02%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 40,970 ( 0.01%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 40,970 ( 0.01%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 40,970 ( 0.01%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
163,880 ( 0.03%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 11,678 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 47,296 ( 0.01%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  5,415 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  6,498 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,332 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 14,604 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 14,604 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 29,755 ( 0.01%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 16,248 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    224 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    336 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    423 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    846 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  1,692 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 11,902 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  5,951 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 11,902 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  5,951 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 29,755 ( 0.01%)          assert!(lo.file.contains(span_data.lo));
 17,853 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 17,853 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 17,853 ( 0.00%)          Some((
  5,951 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  5,951 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
422,289 ( 0.09%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
545,067 ( 0.11%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 32,496 ( 0.01%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  5,459 ( 0.00%)              if idx != avoid_idx
  2,860 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  5,415 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,083 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,166 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  8,664 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  5,415 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

588,349 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs
--------------------------------------------------------------------------------
Ir               

-- line 16 ----------------------------------------
      .           ///
      .           /// From *Matters Computational*, J. Arndt:
      .           ///
      .           /// "The idea is to subtract one from each of the bytes and then look for
      .           /// bytes where the borrow propagated all the way to the most significant
      .           /// bit."
      .           #[inline]
      .           fn contains_zero_byte(x: usize) -> bool {
133,365 ( 0.03%)      x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0
      .           }
      .           
      .           #[cfg(target_pointer_width = "16")]
      .           #[inline]
      .           fn repeat_byte(b: u8) -> usize {
      .               (b as usize) << 8 | b as usize
      .           }
      .           
-- line 32 ----------------------------------------
-- line 36 ----------------------------------------
      .               (b as usize) * (usize::MAX / 255)
      .           }
      .           
      .           /// Returns the first index matching the byte `x` in `text`.
      .           #[must_use]
      .           #[inline]
      .           pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {
      .               // Fast path for small slices
 15,245 ( 0.00%)      if text.len() < 2 * USIZE_BYTES {
  8,294 ( 0.00%)          return text.iter().position(|elt| *elt == x);
      .               }
      .           
 16,023 ( 0.00%)      memchr_general_case(x, text)
      .           }
      .           
 15,676 ( 0.00%)  fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {
      .               // Scan for a single byte value by reading two `usize` words at a time.
      .               //
      .               // Split `text` in three parts
      .               // - unaligned initial part, before the first word aligned address in text
      .               // - body, scan by 2 words at a time
      .               // - the last remaining part, < 2 word size
      .           
      .               // search up to an aligned boundary
      .               let len = text.len();
      .               let ptr = text.as_ptr();
      .               let mut offset = ptr.align_offset(USIZE_BYTES);
      .           
  7,838 ( 0.00%)      if offset > 0 {
      .                   offset = cmp::min(offset, len);
 13,194 ( 0.00%)          if let Some(index) = text[..offset].iter().position(|elt| *elt == x) {
      .                       return Some(index);
      .                   }
      .               }
      .           
      .               // search the body of the text
      .               let repeated_x = repeat_byte(x);
 63,196 ( 0.01%)      while offset <= len - 2 * USIZE_BYTES {
      .                   // SAFETY: the while's predicate guarantees a distance of at least 2 * usize_bytes
      .                   // between the offset and the end of the slice.
      .                   unsafe {
      .                       let u = *(ptr.add(offset) as *const usize);
 77,436 ( 0.02%)              let v = *(ptr.add(offset + USIZE_BYTES) as *const usize);
      .           
      .                       // break if there is a matching byte
 77,436 ( 0.02%)              let zu = contains_zero_byte(u ^ repeated_x);
 77,436 ( 0.02%)              let zv = contains_zero_byte(v ^ repeated_x);
 51,624 ( 0.01%)              if zu || zv {
      .                           break;
      .                       }
      .                   }
 51,454 ( 0.01%)          offset += USIZE_BYTES * 2;
      .               }
      .           
      .               // Find the byte after the point the body loop stopped.
 28,310 ( 0.01%)      text[offset..].iter().position(|elt| *elt == x).map(|i| offset + i)
 19,595 ( 0.00%)  }
      .           
      .           /// Returns the last index matching the byte `x` in `text`.
      .           #[must_use]
  1,869 ( 0.00%)  pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {
      .               // Scan for a single byte value by reading two `usize` words at a time.
      .               //
      .               // Split `text` in three parts:
      .               // - unaligned tail, after the last word aligned address in text,
      .               // - body, scanned by 2 words at a time,
      .               // - the first remaining bytes, < 2 word size.
      .               let len = text.len();
      .               let ptr = text.as_ptr();
-- line 104 ----------------------------------------
-- line 105 ----------------------------------------
      .               type Chunk = usize;
      .           
      .               let (min_aligned_offset, max_aligned_offset) = {
      .                   // We call this just to obtain the length of the prefix and suffix.
      .                   // In the middle we always process two chunks at once.
      .                   // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size differences
      .                   // which are handled by `align_to`.
      .                   let (prefix, _, suffix) = unsafe { text.align_to::<(Chunk, Chunk)>() };
  1,869 ( 0.00%)          (prefix.len(), len - suffix.len())
      .               };
      .           
      .               let mut offset = max_aligned_offset;
  6,848 ( 0.00%)      if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {
     10 ( 0.00%)          return Some(offset + index);
      .               }
      .           
      .               // Search the body of the text, make sure we don't cross min_aligned_offset.
      .               // offset is always aligned, so just testing `>` is sufficient and avoids possible
      .               // overflow.
      .               let repeated_x = repeat_byte(x);
      .               let chunk_bytes = mem::size_of::<Chunk>();
      .           
  1,722 ( 0.00%)      while offset > min_aligned_offset {
      .                   // SAFETY: offset starts at len - suffix.len(), as long as it is greater than
      .                   // min_aligned_offset (prefix.len()) the remaining distance is at least 2 * chunk_bytes.
      .                   unsafe {
  2,958 ( 0.00%)              let u = *(ptr.offset(offset as isize - 2 * chunk_bytes as isize) as *const Chunk);
      .                       let v = *(ptr.offset(offset as isize - chunk_bytes as isize) as *const Chunk);
      .           
      .                       // Break if there is a matching byte.
  2,583 ( 0.00%)              let zu = contains_zero_byte(u ^ repeated_x);
  2,583 ( 0.00%)              let zv = contains_zero_byte(v ^ repeated_x);
  1,722 ( 0.00%)              if zu || zv {
      .                           break;
      .                       }
      .                   }
    729 ( 0.00%)          offset -= 2 * chunk_bytes;
      .               }
      .           
      .               // Find the byte before the point the body loop stopped.
  6,920 ( 0.00%)      text[..offset].iter().rposition(|elt| *elt == x)
  2,492 ( 0.00%)  }

 55,275 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/memchr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 294 ----------------------------------------
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
        .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   49,067 ( 0.01%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
        .           }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   14,172 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    6,616 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
   95,834 ( 0.02%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
    1,470 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
       12 ( 0.00%)          assert!(len <= A::size());
       36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
        6 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
   11,621 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   33,592 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
  391,459 ( 0.08%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
1,181,015 ( 0.25%)              if self.spilled() {
      432 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
  893,891 ( 0.19%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
   17,695 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
  152,098 ( 0.03%)              if *len == cap {
    1,444 ( 0.00%)                  self.reserve(1);
    1,652 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
    2,982 ( 0.00%)              ptr::write(ptr.add(*len), value);
  231,039 ( 0.05%)              *len += 1;
        .                   }
   14,156 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   95,828 ( 0.02%)              if *len_ptr == 0 {
        .                           return None;
        .                       }
   29,314 ( 0.01%)              let last_index = *len_ptr - 1;
   32,657 ( 0.01%)              *len_ptr = last_index;
    8,182 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
-- line 861 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
      452 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
        4 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    4,050 ( 0.00%)              assert!(new_cap >= len);
    4,050 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    4,050 ( 0.00%)              } else if new_cap != cap {
    3,362 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
    2,025 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
      969 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    4,050 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    4,962 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
      456 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
   50,619 ( 0.01%)      pub fn reserve(&mut self, additional: usize) {
   52,837 ( 0.01%)          infallible(self.try_reserve(additional))
   57,816 ( 0.01%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
  197,773 ( 0.04%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
      855 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
  202,183 ( 0.04%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       70 ( 0.00%)          self.try_grow(new_cap)
  220,570 ( 0.05%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
    9,379 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       21 ( 0.00%)          self.try_grow(new_cap)
       21 ( 0.00%)      }
        .           
        .               /// Shrink the capacity of the vector as much as possible.
        .               ///
        .               /// When possible, this will move data from an external heap buffer to the vector's inline
        .               /// storage.
        .               pub fn shrink_to_fit(&mut self) {
        .                   if !self.spilled() {
        .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
    6,500 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
        .               pub fn clear(&mut self) {
        .                   self.truncate(0);
        .               }
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
       20 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      263 ( 0.00%)              let len = *len_ptr;
      864 ( 0.00%)              assert!(index < len);
    2,386 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
      576 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
       25 ( 0.00%)      }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
    3,089 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      447 ( 0.00%)              let len = *len_ptr;
      728 ( 0.00%)              assert!(index <= len);
    1,456 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
      728 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
    1,968 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
   13,203 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
    7,004 ( 0.00%)              if !f(&mut self[i]) {
       18 ( 0.00%)                  del += 1;
    2,000 ( 0.00%)              } else if del > 0 {
        .                           self.swap(i - del, i);
        .                       }
        .                   }
    2,934 ( 0.00%)          self.truncate(len - del);
   11,736 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        7 ( 0.00%)      pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        8 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements using the given equality relation.
        .               pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut A::Item, &mut A::Item) -> bool,
        .               {
        .                   // See the implementation of Vec::dedup_by in the
        .                   // standard library for an explanation of this algorithm.
        .                   let len = self.len();
        2 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   let ptr = self.as_mut_ptr();
        .                   let mut w: usize = 1;
        .           
        .                   unsafe {
        .                       for r in 1..len {
-- line 1246 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
      314 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
   35,312 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
   11,367 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    7,578 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
   30,312 ( 0.01%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
   10,187 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
   11,116 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
   67,136 ( 0.01%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
  273,244 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   46,925 ( 0.01%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
   12,340 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
  158,640 ( 0.03%)              while len.get() < cap {
   77,093 ( 0.02%)                  if let Some(out) = iter.next() {
        .                               ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
   27,182 ( 0.01%)          for elem in iter {
      344 ( 0.00%)              self.push(elem);
        .                   }
  238,771 ( 0.05%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
  283,050 ( 0.06%)      fn drop(&mut self) {
        .                   unsafe {
  195,231 ( 0.04%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
  287,161 ( 0.06%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
    1,179 ( 0.00%)      fn drop(&mut self) {
    8,025 ( 0.00%)          for _ in self {}
    1,128 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
   51,944 ( 0.01%)          if self.current == self.end {
       57 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
   26,152 ( 0.01%)                  self.current += 1;
    1,198 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    1,686 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
    3,988 ( 0.00%)              IntoIter {
   32,734 ( 0.01%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
   35,144 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
   25,844 ( 0.01%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
   47,088 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

  568,954 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 76,499 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
  1,079 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    100 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
      .               ///     assert_eq!(first, &0);
      .               ///     assert_eq!(elements, &[1, 2]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
     42 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  4,175 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 90,241 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 88,528 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 82,652 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
     10 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    332 ( 0.00%)          let _ = &self[a];
  2,505 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
  2,068 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     66 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  9,762 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
  1,375 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
     68 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
 38,830 ( 0.01%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  4,046 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
378,796 ( 0.08%)          while left < right {
564,283 ( 0.12%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 72,523 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
152,705 ( 0.03%)              if cmp == Less {
283,036 ( 0.06%)                  left = mid + 1;
 81,587 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
423,304 ( 0.09%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  9,086 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3380 ----------------------------------------
      .                       }
      .                       a << k
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      2 ( 0.00%)          let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  1,250 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  1,250 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  1,252 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
      .               /// let v = [1, 2, 3, 3, 5, 6, 7];
      .               /// let i = v.partition_point(|&x| x < 5);
      .               ///
      .               /// assert_eq!(i, 4);
      .               /// assert!(v[..i].iter().all(|&x| x < 5));
      .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
      .               /// ```
      .               #[stable(feature = "partition_point", since = "1.52.0")]
      2 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
      .               where
      .                   P: FnMut(&T) -> bool,
      .               {
      .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
      4 ( 0.00%)      }
      .           
      .               /// Removes the subslice corresponding to the given range
      .               /// and returns a reference to it.
      .               ///
      .               /// Returns `None` and does not modify the slice if the given
      .               /// range is out of bounds.
      .               ///
      .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

338,963 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
1,780,924 ( 0.37%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  545,177 ( 0.11%)      Token(Token),
        .               /// A delimited sequence of token trees.
   48,104 ( 0.01%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
    1,156 ( 0.00%)          match self {
    3,188 ( 0.00%)              TokenTree::Token(token) => token.span,
      712 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
      463 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
    1,156 ( 0.00%)          match self {
      463 ( 0.00%)              TokenTree::Token(token) => token.span = span,
      230 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
      578 ( 0.00%)      }
        .           
      593 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
   84,704 ( 0.02%)          TokenTree::Token(Token::new(kind, span))
      593 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
   10,322 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   30,966 ( 0.01%)          TokenTree::token(token::OpenDelim(delim), span.open)
   10,322 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   10,261 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   30,783 ( 0.01%)          TokenTree::token(token::CloseDelim(delim), span.close)
   10,261 ( 0.00%)      }
        .           
    9,876 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    6,584 ( 0.00%)          match self {
   29,628 ( 0.01%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
   13,168 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
   39,942 ( 0.01%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  331,348 ( 0.07%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
   35,504 ( 0.01%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
        .           
        .           /// A lazy version of [`TokenStream`], which defers creation
        .           /// of an actual `TokenStream` until it is needed.
        .           /// `Box` is here only to reduce the structure size.
        .           #[derive(Clone)]
        .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
        .           
        .           impl LazyTokenStream {
       72 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
        .                   LazyTokenStream(Lrc::new(Box::new(inner)))
       72 ( 0.00%)      }
        .           
        .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
       76 ( 0.00%)          self.0.create_token_stream()
        .               }
        .           }
        .           
        .           impl fmt::Debug for LazyTokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
        .               }
        .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
    8,738 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
    8,738 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
       19 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
       19 ( 0.00%)          let trees: Vec<_> = self
        .                       .0
        .                       .iter()
       57 ( 0.00%)              .flat_map(|tree| match &tree.0 {
       38 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
       95 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
        .                           }
        .                           AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
        .                               TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
        .                               tree.1,
        .                           )]
        .                           .into_iter(),
        .                           AttrAnnotatedTokenTree::Attributes(data) => {
        .                               let mut outer_attrs = Vec::new();
-- line 219 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
        .                               }
        .                               flat.extend(target_tokens);
        .                               flat.into_iter()
        .                           }
        .                       })
        .                       .collect();
        .                   TokenStream::new(trees)
       38 ( 0.00%)      }
        .           }
        .           
        .           /// Stores the tokens for an attribute target, along
        .           /// with its attributes.
        .           ///
        .           /// This is constructed during parsing when we need to capture
        .           /// tokens.
        .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  120,358 ( 0.03%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
    3,410 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
   28,460 ( 0.01%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
       28 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
        .           
        .           impl Eq for TokenStream {}
        .           
        .           impl PartialEq<TokenStream> for TokenStream {
        .               fn eq(&self, other: &TokenStream) -> bool {
        .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
    3,481 ( 0.00%)          self.0.is_empty()
    3,481 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  197,251 ( 0.04%)          self.0.len()
      138 ( 0.00%)      }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
   10,917 ( 0.00%)          self.clone().into_trees()
   21,834 ( 0.00%)      }
        .           
   13,416 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
   26,832 ( 0.01%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
       89 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
    3,468 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
  293,739 ( 0.06%)      fn next(&mut self) -> Option<TokenTree> {
  581,386 ( 0.12%)          self.next_with_spacing().map(|(tree, _)| tree)
  391,652 ( 0.08%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
  495,310 ( 0.10%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
  590,925 ( 0.12%)          if self.index < self.stream.len() {
  316,070 ( 0.07%)              self.index += 1;
  515,760 ( 0.11%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
   50,764 ( 0.01%)              None
        .                   }
  594,372 ( 0.12%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
    5,181 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   10,362 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   10,362 ( 0.00%)      }
        .           }
        .           
  109,565 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
       33 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
       66 ( 0.00%)      }
        .           
    6,930 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
    3,465 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
    1,680 ( 0.00%)      }
        .           
   22,432 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
   16,824 ( 0.00%)      }
        .           }

   78,343 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,508 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,836 ( 0.00%)          let tcx = self.tcx();
272,736 ( 0.06%)          DecodeContext {
 28,446 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,836 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 11,866 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 25,100 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,508 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 46,972 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 25,188 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 77,913 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 23,202 ( 0.00%)          T::decode(&mut dcx)
 59,905 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     42 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     12 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 11,840 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 89,496 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 36,148 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 34,820 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  5,830 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 11,660 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 10,398 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 18,592 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 36,148 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 63,095 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 61,075 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  8,725 ( 0.00%)          let tcx = self.tcx();
      .           
  8,725 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 25,232 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  2,417 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 78,525 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 12,425 ( 0.00%)          self.opaque = old_opaque;
  2,485 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 48,892 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    369 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 86,596 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    738 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 62,280 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 15,570 ( 0.00%)          let cdata = decoder.cdata();
 15,570 ( 0.00%)          let sess = decoder.sess.unwrap();
 31,140 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    156 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 77,850 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,556 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    508 ( 0.00%)          let local_cdata = decoder.cdata();
    508 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     63 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    315 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    315 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    630 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  4,064 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
123,624 ( 0.03%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 15,453 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 30,906 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 46,359 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 33,950 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     56 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
    112 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     56 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 46,359 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 61,705 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  6,086 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  3,044 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,998 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  6,088 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 61,812 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
139,077 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 10,671 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,824 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,506 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    222 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     74 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    370 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    148 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    296 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    222 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    370 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     47 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     10 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     24 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     51 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     46 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      7 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      2 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      4 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
      9 ( 0.00%)      }
      .           
 25,498 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 19,184 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 10,038 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    108 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 32,708 ( 0.01%)      }
      .           
    314 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  2,673 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    628 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 10,864 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 43,456 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 32,592 ( 0.01%)      }
      .           
 11,200 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  7,625 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  6,400 ( 0.00%)      }
      .           
  2,826 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  4,559 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  1,570 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    377 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    116 ( 0.00%)          match self.kind(item_id) {
     29 ( 0.00%)              EntryKind::Trait(data) => {
    174 ( 0.00%)                  let data = data.decode((self, sess));
    464 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     58 ( 0.00%)                      data.unsafety,
     58 ( 0.00%)                      data.paren_sugar,
     58 ( 0.00%)                      data.has_auto_impl,
     58 ( 0.00%)                      data.is_marker,
     29 ( 0.00%)                      data.skip_array_during_method_dispatch,
     29 ( 0.00%)                      data.specialization_kind,
    116 ( 0.00%)                      self.def_path_hash(item_id),
     29 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    261 ( 0.00%)      }
      .           
    450 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    200 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    250 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    150 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    100 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  1,100 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    200 ( 0.00%)              data.discr,
    300 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     41 ( 0.00%)                      did: self.local_def_id(index),
     82 ( 0.00%)                      name: self.item_ident(index, sess).name,
     82 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     50 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    450 ( 0.00%)      }
      .           
    495 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    132 ( 0.00%)          let kind = self.kind(item_id);
     66 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    149 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     40 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    425 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    200 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    502 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    231 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  1,115 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  1,115 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     20 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    110 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      4 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  2,390 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,535 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    375 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     15 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    640 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    330 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  4,186 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    220 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 24,498 ( 0.01%)          match self.kind(id) {
 20,415 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 12,024 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     65 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      8 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      2 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  1,735 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 49,229 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,030 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     72 ( 0.00%)          tcx.arena.alloc_from_iter(
     48 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     48 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    216 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    268 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      1 ( 0.00%)              if id == CRATE_DEF_INDEX {
     15 ( 0.00%)                  for def_index in data.macros.decode(self) {
      3 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
      .                               );
      .                               let ident = self.item_ident(def_index, sess);
      .                               callback(ModChild {
      .                                   ident,
      .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    528 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
  1,056 ( 0.00%)              for child_index in children.decode((self, sess)) {
  9,456 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,848 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,232 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,350 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     60 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     21 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      7 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    660 ( 0.00%)          match self.kind(id) {
     58 ( 0.00%)              EntryKind::Mod(exports) => {
  1,462 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     28 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,653 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     35 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    765 ( 0.00%)          match self.kind(id) {
    612 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    427 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    183 ( 0.00%)              tcx.arena.alloc_from_iter(
     61 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  3,948 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  2,303 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  2,365 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     48 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    310 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  2,170 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     14 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  5,922 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  2,961 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    165 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  1,870 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    808 ( 0.00%)                  let vdata = data.decode(self);
    611 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    942 ( 0.00%)      }
      .           
    372 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    765 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    279 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    905 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  3,140 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    305 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    110 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     64 ( 0.00%)          tcx.arena.alloc_from_iter(
     80 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    358 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  6,264 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    696 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    922 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    588 ( 0.00%)              tcx.arena.alloc_from_iter(
    294 ( 0.00%)                  impls
      .                               .decode(self)
  5,716 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  5,568 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    232 ( 0.00%)          let def_key = self.def_key(id);
    290 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    522 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     48 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    120 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     42 ( 0.00%)          match self.kind(id) {
      7 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
    144 ( 0.00%)          let constness = match self.kind(id) {
     32 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     77 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    355 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 27,363 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  7,818 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 10,660 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 31,272 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  3,148 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    605 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 11,018 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 12,592 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 30,906 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 30,906 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,705 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 30,850 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     33 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 11,361 ( 0.00%)                          mut name,
  3,246 ( 0.00%)                          src_hash,
    541 ( 0.00%)                          start_pos,
  1,082 ( 0.00%)                          end_pos,
  2,705 ( 0.00%)                          mut lines,
  2,705 ( 0.00%)                          mut multibyte_chars,
  3,246 ( 0.00%)                          mut non_narrow_chars,
  2,705 ( 0.00%)                          mut normalized_pos,
  3,246 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,082 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
722,674 ( 0.15%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,608 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  9,738 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,033 ( 0.00%)                          name,
  3,787 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,082 ( 0.00%)                          self.cnum,
  2,705 ( 0.00%)                          lines,
  3,246 ( 0.00%)                          multibyte_chars,
  2,705 ( 0.00%)                          non_narrow_chars,
  2,164 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,623 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    288 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     72 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     72 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     24 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    552 ( 0.00%)          CrateMetadata {
     24 ( 0.00%)              blob,
     72 ( 0.00%)              root,
     96 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     96 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    168 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     96 ( 0.00%)              cnum_map,
    120 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    288 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    216 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    120 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    360 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    201 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
  1,888 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 10,683 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  2,622 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
      .           // Cannot be implemented on 'ProcMacro', as libproc_macro
      .           // does not depend on librustc_ast
      .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      3 ( 0.00%)      match raw {
      .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
      .                   ProcMacro::Attr { .. } => MacroKind::Attr,
      .                   ProcMacro::Bang { .. } => MacroKind::Bang,
      .               }
      .           }

351,960 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
631,421 ( 0.13%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    246 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 55,407 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 52,492 ( 0.01%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
139,639 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 23,745 ( 0.00%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
478,823 ( 0.10%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,505 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,695 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 18,818 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  1,604 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  3,673 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

140,058 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
       60 ( 0.00%)      pub ty: Ty<'tcx>,
      300 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    5,571 ( 0.00%)      pub scope: DefId,
   11,084 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   51,224 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    2,134 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      116 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      368 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    9,797 ( 0.00%)      pub var: BoundVar,
    7,453 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
1,281,423 ( 0.27%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  133,671 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
      504 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  154,801 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    7,765 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      190 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       11 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       22 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       44 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       22 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      214 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,650 ( 0.00%)              [
      476 ( 0.00%)                  ref parent_substs @ ..,
      472 ( 0.00%)                  closure_kind_ty,
      222 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      347 ( 0.00%)                  tupled_upvars_ty,
      856 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      642 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        2 ( 0.00%)      pub fn is_valid(self) -> bool {
        4 ( 0.00%)          self.substs.len() >= 3
        4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        4 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       66 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       93 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       64 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       44 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      944 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       98 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      196 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        7 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        7 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       14 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       91 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      182 ( 0.00%)          match ty.kind() {
      364 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      273 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       36 ( 0.00%)          let tupled_tys = match self {
       47 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       76 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       65 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       58 ( 0.00%)          match self {
       69 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
    7,392 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    6,070 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
       42 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
      200 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
      268 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
      240 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      801 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      445 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
      712 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
        2 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      282 ( 0.00%)          self[0]
      276 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
        8 ( 0.00%)              })
        .                       .transpose()
        6 ( 0.00%)      }
        .           
       88 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      176 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
        .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   12,534 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   82,516 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
       56 ( 0.00%)      pub def_id: DefId,
   53,269 ( 0.01%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      267 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    1,068 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      405 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      180 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      270 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      360 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      168 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       21 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      231 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
      339 ( 0.00%)          self.skip_binder().def_id
      113 ( 0.00%)      }
        .           
      140 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
      280 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
      140 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      220 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,944 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
      546 ( 0.00%)      pub def_id: DefId,
    3,740 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
       20 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        2 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
        .           
        1 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
        5 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        3 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        3 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        4 ( 0.00%)      }
        .           }
        .           
    7,700 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    8,100 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   46,185 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    4,610 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   13,146 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   29,395 ( 0.01%)          Binder(value, ty::List::empty())
    4,566 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    3,478 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  120,778 ( 0.03%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      123 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      890 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       97 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    5,003 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   26,828 ( 0.01%)          Binder(value, self.1)
       97 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    1,231 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    1,215 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   20,382 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       60 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
       72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    2,920 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
      706 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
      893 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    1,050 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      300 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    1,200 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      252 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      108 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
      180 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      324 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    1,251 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      139 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      139 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    1,529 ( 0.00%)      }
        .           
      263 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
      789 ( 0.00%)          self.substs.type_at(0)
      526 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    5,877 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,289 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      241 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    2,528 ( 0.00%)      pub c_variadic: bool,
      369 ( 0.00%)      pub unsafety: hir::Unsafety,
    3,441 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    2,963 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   13,382 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    5,926 ( 0.00%)      }
        .           
    2,018 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   14,972 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    4,036 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      431 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
      905 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      106 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      703 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      212 ( 0.00%)          self.skip_binder().c_variadic
      106 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      400 ( 0.00%)          self.skip_binder().unsafety
      200 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    1,084 ( 0.00%)          self.skip_binder().abi
      271 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       48 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
       46 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
       94 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       47 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       36 ( 0.00%)          ParamTy::new(def.index, def.name)
       18 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       70 ( 0.00%)      pub index: u32,
       70 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  551,024 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       44 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   14,922 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    9,744 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
      666 ( 0.00%)      pub def_id: DefId,
    5,030 ( 0.00%)      pub index: u32,
    5,689 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      119 ( 0.00%)      pub index: u32,
        .               pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      190 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    3,272 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      698 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   14,306 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   24,573 ( 0.01%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    1,055 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      394 ( 0.00%)          match self.kind() {
       85 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    3,523 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    5,759 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    3,508 ( 0.00%)          match self.kind() {
      446 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       33 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        6 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
        .                   *self.kind() == Bool
        .               }
        .           
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       10 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       11 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
        2 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        4 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
        2 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      429 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    4,226 ( 0.00%)          match self.kind() {
      949 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       16 ( 0.00%)          matches!(
       37 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
        1 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        .                   matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      817 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      240 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      345 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      234 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      574 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
       21 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    1,323 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    7,993 ( 0.00%)          match self.kind() {
      172 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    4,890 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    2,646 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        .               }
        .           
    4,824 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    2,412 ( 0.00%)          match self.kind() {
    1,809 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    5,427 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
       57 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    1,484 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       50 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      182 ( 0.00%)          match self.kind() {
      180 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      100 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       33 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       66 ( 0.00%)          match self.kind() {
       66 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       66 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
       10 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
        5 ( 0.00%)          match self.kind() {
        2 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
        1 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
      520 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      260 ( 0.00%)          match self.kind() {
      416 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      416 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      254 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      508 ( 0.00%)          match self.kind() {
      508 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      254 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   13,203 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    8,802 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      122 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
      741 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   13,203 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
        .           /// When in doubt, use `VarianceDiagInfo::default()`
      117 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum VarianceDiagInfo<'tcx> {
        .               /// No additional information - this is the default.
        .               /// We will not add any additional information to error messages.
        .               #[default]
        .               None,
        .               /// We switched our variance because a generic argument occurs inside
        .               /// the invariant generic argument of another type.
        .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    6,652 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    9,978 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    3,326 ( 0.00%)      }
        .           }

1,811,696 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
183,965,210 (38.24%)  events annotated

