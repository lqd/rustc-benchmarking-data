--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name bitmaps --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=667d4043df499dfb -C extra-filename=-667d4043df499dfb --out-dir /usr/home/liquid/tmp/.tmpFGeErp/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpFGeErp/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-bitmaps-3.1.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
10,032,203,879 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
320,109,630 ( 3.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_consts::<rustc_infer::infer::equate::Equate>
225,890,750 ( 2.25%)  ./malloc/malloc.c:_int_free
218,721,889 ( 2.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
171,500,344 ( 1.71%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::equate::Equate>
154,002,801 ( 1.54%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
150,578,940 ( 1.50%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
147,859,410 ( 1.47%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
141,961,540 ( 1.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
136,976,614 ( 1.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_consts::<rustc_infer::infer::equate::Equate>
134,600,783 ( 1.34%)  ./malloc/malloc.c:malloc
122,929,898 ( 1.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::TraitPredicate, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#2}>
117,845,624 ( 1.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::eq<rustc_middle::ty::sty::TraitRef>::{closure#0}>
105,634,980 ( 1.05%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
105,402,173 ( 1.05%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<rustc_middle::ty::consts::kind::ConstKind>::try_eval
100,866,110 ( 1.01%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
100,353,231 ( 1.00%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
 99,847,280 ( 1.00%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs:rustc_middle::ty::relate::super_relate_consts::<rustc_infer::infer::equate::Equate>
 95,183,010 ( 0.95%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 94,708,760 ( 0.94%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 93,913,887 ( 0.94%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 93,253,380 ( 0.93%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs:<rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders::<rustc_middle::ty::TraitPredicate>
 93,251,972 ( 0.93%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 92,617,710 ( 0.92%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 92,466,183 ( 0.92%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_tys::<rustc_infer::infer::equate::Equate>
 89,081,706 ( 0.89%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::sty::TraitRef>
 82,773,988 ( 0.83%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::normalize::<rustc_middle::ty::ImplHeader>
 80,249,160 ( 0.80%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 79,060,335 ( 0.79%)  ./malloc/malloc.c:free
 76,041,216 ( 0.76%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::for_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 73,420,228 ( 0.73%)  ./malloc/malloc.c:_int_malloc
 73,344,040 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 72,920,912 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::fill_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 72,213,332 ( 0.72%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 72,000,592 ( 0.72%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::eq<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 66,054,614 ( 0.66%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 61,637,642 ( 0.61%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 61,296,401 ( 0.61%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::probe::<(), <rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates_from_impls::{closure#0}::{closure#0}>
 57,416,150 ( 0.57%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
 55,001,258 ( 0.55%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 54,443,624 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 53,907,274 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
 53,176,445 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::sty::TraitRef>
 52,817,490 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
 52,684,500 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
 48,354,995 ( 0.48%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 44,548,981 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 44,497,818 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 43,111,062 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 42,481,861 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 41,910,880 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::ImplHeader>
 40,471,743 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::sty::TraitRef>
 39,075,561 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 38,773,370 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs:rustc_trait_selection::traits::coherence::overlapping_impls::<<rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#2}, <rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#3}, core::result::Result<(bool, bool), rustc_trait_selection::traits::specialize::OverlapError>>
 38,185,691 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 38,148,534 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/stack.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_infer::traits::project::Normalized<rustc_middle::ty::sty::TraitRef>, <rustc_trait_selection::traits::select::SelectionContext>::match_impl::{closure#0}>
 38,020,608 ( 0.38%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::for_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 37,195,766 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs:<rustc_infer::infer::at::At>::eq_impl_headers
 37,069,588 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 36,967,393 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
 36,267,550 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs:<alloc::collections::btree::map::BTreeMap<rustc_middle::ty::sty::BoundRegion, &rustc_middle::ty::sty::RegionKind> as core::ops::drop::Drop>::drop
 36,029,171 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_infer::traits::project::Normalized<rustc_middle::ty::sty::TraitRef>, <rustc_trait_selection::traits::select::SelectionContext>::match_impl::{closure#0}>
 34,852,224 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::fresh_substs_for_item
 34,244,925 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
 34,222,368 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::combine_fields
 34,061,950 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<&rustc_middle::ty::consts::Const as core::cmp::PartialEq>::eq
 34,051,940 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxtBuilder>::enter::<bool, rustc_trait_selection::traits::coherence::overlapping_impls<<rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#1}::{closure#0}, <rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#1}::{closure#1}, bool>::{closure#3}>
 31,935,767 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::sty::TraitRef>
 31,826,704 ( 0.32%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::fill_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 31,802,670 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs:<rustc_middle::ty::sty::TraitRef as rustc_infer::infer::at::ToTrace>::to_trace
 31,745,661 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 31,683,840 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::for_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 31,264,224 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 30,909,612 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs:rustc_trait_selection::traits::coherence::overlap_within_probe
 29,337,616 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::resolve_vars_if_possible::<rustc_middle::ty::ImplHeader>
 29,103,577 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 28,873,529 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<&rustc_middle::ty::consts::Const as core::cmp::PartialEq>::eq
 28,290,304 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/query.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 28,072,138 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<rustc_middle::traits::ObligationCauseCode>
 28,017,110 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:stacker::remaining_stack
 27,669,317 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::sty::TraitRef>
 26,872,752 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxtInner>::new
 26,749,720 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 26,718,186 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::probe_maybe_skip_leak_check::<core::option::Option<rustc_trait_selection::traits::coherence::OverlapResult>, rustc_trait_selection::traits::coherence::overlap::{closure#0}>
 26,594,478 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::get_attrs
 26,427,304 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::eq<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 26,381,838 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 26,340,318 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 25,640,927 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 25,552,795 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 25,372,809 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/generics.rs:<rustc_middle::ty::generics::GenericPredicates>::instantiate_into
 24,584,544 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (rustc_middle::ty::generics::GenericPredicates, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 24,098,756 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/map.rs:<core::iter::adapters::map::Map<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>, rustc_trait_selection::traits::coherence::with_fresh_ty_vars::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_middle::ty::Predicate, <alloc::vec::Vec<rustc_middle::ty::Predicate> as alloc::vec::spec_extend::SpecExtend<rustc_middle::ty::Predicate, core::iter::adapters::map::Map<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>, rustc_trait_selection::traits::coherence::with_fresh_ty_vars::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 23,879,651 ( 0.24%)  ./malloc/malloc.c:calloc
 23,717,070 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 23,395,918 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 23,325,933 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs:<rustc_middle::traits::ObligationCauseCode as core::cmp::PartialEq>::eq
 23,312,993 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 22,889,379 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 22,525,307 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 21,399,776 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 21,383,938 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 21,177,143 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 21,085,692 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_infer::infer::InferCtxt>::super_combine_consts::<rustc_infer::infer::equate::Equate>
 21,084,720 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<&rustc_middle::ty::consts::Const as core::cmp::PartialEq>::eq
 19,993,684 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs:<rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert
 19,790,820 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
 19,222,992 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 19,096,626 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 18,337,871 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:rustc_trait_selection::traits::coherence::overlapping_impls::<<rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#2}, <rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#3}, core::result::Result<(bool, bool), rustc_trait_selection::traits::specialize::OverlapError>>
 17,979,712 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/spec_extend.rs:<alloc::vec::Vec<rustc_middle::ty::Predicate> as alloc::vec::spec_extend::SpecExtend<rustc_middle::ty::Predicate, core::iter::adapters::map::Map<core::slice::iter::Iter<(rustc_middle::ty::Predicate, rustc_span::span_encoding::Span)>, <rustc_middle::ty::generics::GenericPredicates>::instantiate_into::{closure#0}>>>::spec_extend
 17,483,508 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::try_get_cached::<rustc_middle::ty::context::TyCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, rustc_middle::ty::generics::GenericPredicates>, rustc_middle::ty::generics::GenericPredicates, <rustc_middle::ty::generics::GenericPredicates as core::clone::Clone>::clone>
 17,082,679 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 16,972,548 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::TraitPredicate, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#2}>
 16,909,352 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_middle::ty::context::TyCtxt>::for_each_relevant_impl::<<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates_from_impls::{closure#0}>
 16,454,647 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 16,112,134 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
 15,850,647 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 15,841,920 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/def_id.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::for_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 15,720,900 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs:<&rustc_middle::ty::consts::Const as core::cmp::PartialEq>::eq
 15,716,580 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 15,115,923 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<core::cell::RefCell<rustc_infer::infer::InferCtxtInner>>
 14,841,246 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/error.rs:<rustc_middle::ty::sty::TraitRef as rustc_infer::infer::at::ToTrace>::to_trace
 14,669,608 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::ImplHeader>
 14,668,808 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 13,715,650 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/generics.rs:<rustc_middle::ty::generics::GenericPredicates>::instantiate
 13,713,658 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 13,621,744 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::ImplHeader>
 13,621,672 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::ImplHeader>
 13,621,036 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 13,436,439 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<rustc_infer::infer::region_constraints::RegionConstraintData>
 13,241,749 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 13,207,033 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::eq<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 13,170,346 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_infer::infer::InferCtxt>::super_combine_consts::<rustc_infer::infer::equate::Equate>
 13,167,655 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 13,139,734 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 13,137,684 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:rustc_middle::ty::relate::super_relate_consts::<rustc_infer::infer::equate::Equate>
 13,137,510 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/error.rs:rustc_middle::ty::relate::super_relate_consts::<rustc_infer::infer::equate::Equate>
 13,121,328 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:rustc_middle::ty::relate::super_relate_consts::<rustc_infer::infer::equate::Equate>
 13,096,900 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs:<rustc_infer::infer::InferCtxtBuilder>::enter::<bool, rustc_trait_selection::traits::coherence::overlapping_impls<<rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#1}::{closure#0}, <rustc_middle::traits::specialization_graph::Children as rustc_trait_selection::traits::specialize::specialization_graph::ChildrenExt>::insert::{closure#1}::{closure#1}, bool>::{closure#3}>
 12,787,222 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
 12,772,563 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer>::fold::<rustc_middle::ty::sty::TraitRef>
 12,725,958 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.21/src/metadata.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::sty::TraitRef>
 12,725,958 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::sty::TraitRef>
 12,725,544 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/def_id.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 12,717,894 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_infer::infer::InferCtxt>::probe::<(), <rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates_from_impls::{closure#0}::{closure#0}>
 12,716,178 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_infer::traits::project::Normalized<rustc_middle::ty::sty::TraitRef>, <rustc_trait_selection::traits::select::SelectionContext>::match_impl::{closure#0}>
 12,716,178 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_infer::traits::project::Normalized<rustc_middle::ty::sty::TraitRef>, <rustc_trait_selection::traits::select::SelectionContext>::match_impl::{closure#0}>
 12,670,256 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs:<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>::for_item::<<rustc_infer::infer::InferCtxt>::fresh_substs_for_item::{closure#0}>
 11,525,652 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:rustc_trait_selection::traits::coherence::with_fresh_ty_vars
 11,515,254 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 11,206,847 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:stacker::remaining_stack
 11,206,844 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/psm-0.1.16/src/arch/x86_64.s:rust_psm_stack_pointer
 11,177,756 ( 0.11%)  ./malloc/malloc.c:malloc_consolidate
 11,156,761 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs:<alloc::collections::btree::map::BTreeMap<rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin> as core::ops::drop::Drop>::drop
 10,935,280 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:rustc_query_system::query::plumbing::try_get_cached::<rustc_middle::ty::context::TyCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, rustc_middle::ty::generics::GenericPredicates>, rustc_middle::ty::generics::GenericPredicates, <rustc_middle::ty::generics::GenericPredicates as core::clone::Clone>::clone>
 10,883,520 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs:rustc_query_system::query::plumbing::try_get_cached::<rustc_middle::ty::context::TyCtxt, rustc_query_system::query::caches::DefaultCache<rustc_span::def_id::DefId, rustc_middle::ty::generics::GenericPredicates>, rustc_middle::ty::generics::GenericPredicates, <rustc_middle::ty::generics::GenericPredicates as core::clone::Clone>::clone>
 10,812,933 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
 10,637,131 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<rustc_infer::infer::region_constraints::RegionConstraintStorage>::new
 10,634,898 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 10,609,930 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::TraitPredicate, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#2}>
 10,608,520 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/infer/unify_key.rs:<rustc_infer::infer::InferCtxt>::super_combine_consts::<rustc_infer::infer::equate::Equate>
 10,596,815 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<rustc_infer::infer::InferCtxt>::commit_if_ok::<rustc_infer::infer::InferOk<()>, rustc_middle::ty::error::TypeError, <rustc_infer::infer::at::Trace>::eq<rustc_middle::ty::sty::TraitRef>::{closure#0}>
 10,596,815 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_infer::traits::project::Normalized<rustc_middle::ty::sty::TraitRef>, <rustc_trait_selection::traits::select::SelectionContext>::match_impl::{closure#0}>
 10,581,966 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
 10,576,216 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 10,576,216 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::ty::sty::TraitRef as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
 10,575,890 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_infer::infer::InferCtxt>::rollback_to
 10,542,360 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs:<&rustc_middle::ty::consts::Const as core::cmp::PartialEq>::eq
 10,536,900 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
 10,477,720 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/stack.rs:rustc_trait_selection::traits::project::normalize::<rustc_middle::ty::ImplHeader>
 10,305,124 ( 0.10%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,119,512 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::ParamEnvAnd<rustc_middle::ty::TraitPredicate>, rustc_query_system::cache::WithDepNode<core::result::Result<core::option::Option<rustc_middle::traits::select::SelectionCandidate>, rustc_middle::traits::SelectionError>>)> as core::ops::drop::Drop>::drop
 10,114,688 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::project::ProjectionCacheKey, rustc_infer::traits::project::ProjectionCacheEntry)> as core::ops::drop::Drop>::drop
 10,094,246 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:core::ptr::drop_in_place::<core::cell::RefCell<rustc_infer::infer::InferCtxtInner>>
 10,077,282 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::span_encoding::Span, alloc::vec::Vec<rustc_middle::ty::Predicate>)> as core::ops::drop::Drop>::drop

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
48,462,091 ( 0.48%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       185 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 496 ----------------------------------------
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
         .               pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
       262 ( 0.00%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
         .               }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
-- line 512 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
     2,136 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    84,107 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

    97,912 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
     3,289 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
     3,289 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
     6,578 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
 2,799,245 ( 0.03%)      fn new() -> InferCtxtInner<'tcx> {
19,034,866 ( 0.19%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
 1,679,547 ( 0.02%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
 3,359,094 ( 0.03%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    12,109 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 5,431,245 ( 0.05%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    15,141 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
 5,284,670 ( 0.05%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
    43,005 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
    47,713 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
    46,960 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
    40,642 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
     2,444 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
       170 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
       302 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
       180 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   559,849 ( 0.01%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 1,679,547 ( 0.02%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   559,849 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
    59,796 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    73,084 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    33,220 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    46,508 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
     6,592 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     3,296 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    19,880 ( 0.00%)          self
     9,888 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
    14,577 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
    22,202 ( 0.00%)              let (value, subst) =
     3,598 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
    31,120 ( 0.00%)              f(infcx, value, subst)
         .                   })
    16,043 ( 0.00%)      }
         .           
 3,941,392 ( 0.04%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 1,147,966 ( 0.01%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
25,151,717 ( 0.25%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
   559,849 ( 0.01%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
   559,849 ( 0.01%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
 5,007,328 ( 0.05%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
       109 ( 0.00%)          let InferOk { value, obligations } = self;
       438 ( 0.00%)          for obligation in obligations {
         .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
     9,130 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
    36,520 ( 0.00%)          self.obligations
     9,130 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
    20,554 ( 0.00%)      }
         .           
    90,248 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
   101,529 ( 0.00%)          t.fold_with(&mut self.freshener())
   101,529 ( 0.00%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
       114 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
       228 ( 0.00%)          match *ty.kind() {
        57 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
       228 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         .                       _ => None,
         .                   }
       228 ( 0.00%)      }
         .           
    11,281 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
    11,281 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   628,399 ( 0.01%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   628,399 ( 0.01%)      }
         .           
    13,356 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     6,678 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     6,678 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
       114 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
       438 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
    23,373 ( 0.00%)      }
         .           
 2,138,898 ( 0.02%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
10,651,156 ( 0.11%)          CombineFields {
         .                       infcx: self,
26,627,890 ( 0.27%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
 2,138,898 ( 0.02%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
         .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
     2,202 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
         .               }
         .           
10,699,888 ( 0.11%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
32,099,664 ( 0.32%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
 5,349,944 ( 0.05%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
21,399,776 ( 0.21%)      }
         .           
58,167,395 ( 0.58%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
 5,287,945 ( 0.05%)              undo_snapshot,
 5,287,945 ( 0.05%)              region_constraints_snapshot,
 5,287,945 ( 0.05%)              universe,
 5,287,945 ( 0.05%)              was_in_snapshot,
10,575,890 ( 0.11%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
 5,287,945 ( 0.05%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
   929,985 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
    61,999 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
    61,999 ( 0.00%)              was_in_snapshot,
   123,998 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
    67,495 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    82,830 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
     7,530 ( 0.00%)          let snapshot = self.start_snapshot();
    23,707 ( 0.00%)          let r = f(&snapshot);
    52,710 ( 0.00%)          self.commit_from(snapshot);
    45,593 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
22,974,690 ( 0.23%)      #[instrument(skip(self, f), level = "debug")]
28,316,995 ( 0.28%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
 2,699,553 ( 0.03%)          let snapshot = self.start_snapshot();
13,351,675 ( 0.13%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 2,703,427 ( 0.03%)          match r {
         .                       Ok(_) => {
   384,255 ( 0.00%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
25,332,349 ( 0.25%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
16,167,577 ( 0.16%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
12,772,125 ( 0.13%)      #[instrument(skip(self, f), level = "debug")]
17,008,263 ( 0.17%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
 4,252,626 ( 0.04%)          let snapshot = self.start_snapshot();
 8,488,534 ( 0.08%)          let r = f(&snapshot);
19,134,374 ( 0.19%)          self.rollback_to("probe", snapshot);
     7,909 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
 4,714,974 ( 0.05%)      #[instrument(skip(self, f), level = "debug")]
 6,286,632 ( 0.06%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
 1,047,772 ( 0.01%)          let snapshot = self.start_snapshot();
   523,886 ( 0.01%)          let was_skip_leak_check = self.skip_leak_check.get();
 1,047,772 ( 0.01%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
 2,095,544 ( 0.02%)          let r = f(&snapshot);
 4,714,974 ( 0.05%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
 6,286,632 ( 0.06%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    13,032 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
    26,064 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    19,548 ( 0.00%)      }
         .           
         .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         .               }
         .           
       960 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
       720 ( 0.00%)      }
         .           
       720 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
       540 ( 0.00%)      }
         .           
     9,080 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
     8,172 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
        15 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
        10 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
        25 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
        20 ( 0.00%)      }
         .           
     1,656 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
       138 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       138 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     1,084 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
       266 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
       266 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
         5 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
        10 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
     1,242 ( 0.00%)      }
         .           
     1,860 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
     1,550 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
     1,240 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
        50 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
       100 ( 0.00%)      }
         .           
    12,588 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
    62,940 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
    18,882 ( 0.00%)      }
         .           
    11,868 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
    43,698 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    17,802 ( 0.00%)      }
         .           
       242 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
     1,331 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
       121 ( 0.00%)          self.tcx.mk_ty_var(vid)
       363 ( 0.00%)      }
         .           
        64 ( 0.00%)      pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
       112 ( 0.00%)          self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        64 ( 0.00%)      }
         .           
         6 ( 0.00%)      pub fn next_const_var_in_universe(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> &'tcx ty::Const<'tcx> {
         6 ( 0.00%)          let vid = self
         .                       .inner
         .                       .borrow_mut()
         .                       .const_unification_table()
        16 ( 0.00%)              .new_key(ConstVarValue { origin, val: ConstVariableValue::Unknown { universe } });
         2 ( 0.00%)          self.tcx.mk_const_var(vid, ty)
         8 ( 0.00%)      }
         .           
        32 ( 0.00%)      pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
       112 ( 0.00%)          self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        64 ( 0.00%)              origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
        48 ( 0.00%)      }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
       750 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
       450 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
       600 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
     1,449 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   114,620 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
     2,898 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
    42,194 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
   274,261 ( 0.00%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   105,485 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
    63,291 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
     3,936 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
     5,904 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
    26,382 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    39,573 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    13,109 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    26,218 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       151 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
     1,105 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       302 ( 0.00%)      }
         .           
    67,808 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    32,556 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
     4,912 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
    12,420 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
    15,525 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
     3,105 ( 0.00%)                              param.name,
     3,105 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
     3,105 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
     5,049 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
       459 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
     3,672 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
 9,505,152 ( 0.09%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
19,051,664 ( 0.19%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 6,336,768 ( 0.06%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
     6,692 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
   149,710 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    10,038 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   147,336 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   399,912 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    21,048 ( 0.00%)              assert!(
    63,144 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    21,048 ( 0.00%)          };
         .           
         .                   let region_rels =
    21,048 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
   189,432 ( 0.00%)          let (lexical_region_resolutions, errors) =
   505,152 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
    84,192 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    21,048 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
   189,432 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   210,480 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    42,096 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
    63,144 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    42,096 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
   105,240 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
         .               }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
     6,544 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
    16,480 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
    62,624 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
     3,296 ( 0.00%)              .into_infos_and_data();
     3,296 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
    26,368 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
     1,564 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
     4,692 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
     5,474 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   122,268 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
     3,004 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
     4,506 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
10,480,980 ( 0.10%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    92,578 ( 0.00%)          if !value.needs_infer() {
 9,641,293 ( 0.10%)              return value; // Avoid duplicated subst-folding.
         .                   }
    58,726 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
    58,256 ( 0.00%)          value.fold_with(&mut r)
 9,434,023 ( 0.09%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
         .               }
         .           
        16 ( 0.00%)      pub fn probe_const_var(
         .                   &self,
         .                   vid: ty::ConstVid<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
        56 ( 0.00%)          match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
         .                       ConstVariableValue::Known { value } => Ok(value),
         .                       ConstVariableValue::Unknown { universe } => Err(universe),
         .                   }
        56 ( 0.00%)      }
         .           
         .               pub fn fully_resolve<T: TypeFoldable<'tcx>>(&self, value: T) -> FixupResult<'tcx, T> {
         .                   /*!
         .                    * Attempts to resolve all type/region/const variables in
         .                    * `value`. Region inference must have been run already (e.g.,
         .                    * by calling `resolve_regions_and_report_errors`). If some
         .                    * variable was never unified, an `Err` results.
         .                    *
-- line 1437 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
     5,508 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
    17,179 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
    68,119 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
     3,672 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
       784 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
       294 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
     1,666 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
       686 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
       126 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
       252 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
       189 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 7,572,288 ( 0.08%)          self.universe.get()
 2,166,445 ( 0.02%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
        96 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       172 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
        96 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
         .                   // variables, thus we don't need to substitute back the original values.
         .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
         .               }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
   818,520 ( 0.01%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
   381,966 ( 0.00%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
   149,276 ( 0.00%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
    23,496 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
     5,628 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
   920,835 ( 0.01%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
    81,638 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
     3,084 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::Const(v) => {
         .                           // If `probe_value` returns a `Known` value, it never equals
         .                           // `ty::ConstKind::Infer(ty::InferConst::Var(v))`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
        98 ( 0.00%)                  match self.inner.borrow_mut().const_unification_table().probe_value(v).val {
         .                               ConstVariableValue::Unknown { .. } => false,
         .                               ConstVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .                   }
         .               }
         .           }
         .           
-- line 1704 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     2,457 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
     2,457 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
       266 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
    23,655 ( 0.00%)          match *ty.kind() {
     4,818 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       544 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
       266 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        28 ( 0.00%)          match ct.val {
        14 ( 0.00%)              ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
         .               }
         .           }
         .           
         .           struct ShallowResolver<'a, 'tcx> {
         .               infcx: &'a InferCtxt<'a, 'tcx>,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
   167,251 ( 0.00%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
     4,704 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     4,452 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     5,250 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
     3,150 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
     5,880 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
         .                   self.cause.span
         .               }
         .           
         .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
     6,097 ( 0.00%)          match *cause.code() {
       931 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
     4,655 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

 5,997,734 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 42 ----------------------------------------
         .           /// `stack_size` bytes.
         .           ///
         .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
         .           /// run on the current stack if there's space available.
         .           #[inline(always)]
         .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
         .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
         .               // the stack and then cache the new stack size (which we do know now because we allocated it.
11,306,496 ( 0.11%)      let enough_space = match remaining_stack() {
         .                   Some(remaining) => remaining >= red_zone,
         .                   None => false,
         .               };
16,810,266 ( 0.17%)      if enough_space {
    82,483 ( 0.00%)          callback()
         .               } else {
         .                   grow(stack_size, callback)
         .               }
         .           }
         .           
         .           /// Always creates a new stack for the passed closure to run on.
         .           /// The closure will still be on the same thread as the caller of `grow`.
         .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
         .               _grow(stack_size, dyn_callback);
         .               ret.unwrap()
         .           }
         .           
         .           /// Queries the amount of remaining stack as interpreted by this library.
         .           ///
         .           /// This function will return the amount of stack space left which will be used
         .           /// to determine whether a stack switch should be made or not.
11,206,844 ( 0.11%)  pub fn remaining_stack() -> Option<usize> {
         .               let current_ptr = current_stack_ptr();
11,206,844 ( 0.11%)      get_stack_limit().map(|limit| current_ptr - limit)
22,413,688 ( 0.22%)  }
         .           
         .           psm_stack_information! (
         .               yes {
         .                   fn current_stack_ptr() -> usize {
11,206,844 ( 0.11%)              psm::stack_pointer() as usize
         .                   }
         .               }
         .               no {
         .                   #[inline(always)]
         .                   fn current_stack_ptr() -> usize {
         .                       unsafe {
         .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
         .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
         .                           x.as_ptr() as usize
         .                       }
         .                   }
         .               }
         .           );
         .           
         .           thread_local! {
         .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
         1 ( 0.00%)          guess_os_stack_limit()
         .               })
         .           }
         .           
         .           #[inline(always)]
         .           fn get_stack_limit() -> Option<usize> {
         .               STACK_LIMIT.with(|s| s.get())
         .           }
         .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
         .                       VirtualQuery(
         .                           psm::stack_pointer() as *const _,
         .                           mi.as_mut_ptr(),
         .                           std::mem::size_of::<QueryT>() as SIZE_T,
         .                       );
         .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
         .                   }
         .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
         2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
         .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
         7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
         .                                                           attr.as_mut_ptr()), 0);
         1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
         4 ( 0.00%)              let mut stacksize = 0;
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
         .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
         .                       ), 0);
         4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
         1 ( 0.00%)              Some(stackaddr as usize)
         3 ( 0.00%)          }
         .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
         .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
         .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
         .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
         .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
         .                       let mut stackaddr = std::ptr::null_mut();
         .                       let mut stacksize = 0;
         .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 7,787,443 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/generics.rs
--------------------------------------------------------------------------------
Ir                  

-- line 4 ----------------------------------------
         .           use rustc_ast as ast;
         .           use rustc_data_structures::fx::FxHashMap;
         .           use rustc_hir::def_id::DefId;
         .           use rustc_span::symbol::Symbol;
         .           use rustc_span::Span;
         .           
         .           use super::{EarlyBoundRegion, InstantiatedPredicates, ParamConst, ParamTy, Predicate, TyCtxt};
         .           
     5,735 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub enum GenericParamDefKind {
         .               Lifetime,
         .               Type { has_default: bool, object_lifetime_default: ObjectLifetimeDefault, synthetic: bool },
         .               Const { has_default: bool },
         .           }
         .           
         .           impl GenericParamDefKind {
         .               pub fn descr(&self) -> &'static str {
-- line 20 ----------------------------------------
-- line 28 ----------------------------------------
         .                   match self {
         .                       GenericParamDefKind::Lifetime => ast::ParamKindOrd::Lifetime,
         .                       GenericParamDefKind::Type { .. } => ast::ParamKindOrd::Type,
         .                       GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,
         .                   }
         .               }
         .           
         .               pub fn is_ty_or_const(&self) -> bool {
     2,262 ( 0.00%)          match self {
         .                       GenericParamDefKind::Lifetime => false,
         .                       GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => true,
         .                   }
     1,131 ( 0.00%)      }
         .           }
         .           
    62,759 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct GenericParamDef {
         .               pub name: Symbol,
         .               pub def_id: DefId,
         .               pub index: u32,
         .           
         .               /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute
         .               /// on generic parameter `'a`/`T`, asserts data behind the parameter
         .               /// `'a`/`T` won't be accessed during the parent type's `Drop` impl.
         .               pub pure_wrt_drop: bool,
         .           
         .               pub kind: GenericParamDefKind,
         .           }
         .           
         .           impl GenericParamDef {
         4 ( 0.00%)      pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {
        70 ( 0.00%)          if let GenericParamDefKind::Lifetime = self.kind {
        35 ( 0.00%)              ty::EarlyBoundRegion { def_id: self.def_id, index: self.index, name: self.name }
         .                   } else {
         .                       bug!("cannot convert a non-lifetime parameter def to an early bound region")
         .                   }
       148 ( 0.00%)      }
         .           }
         .           
    61,749 ( 0.00%)  #[derive(Default)]
         .           pub struct GenericParamCount {
         .               pub lifetimes: usize,
         .               pub types: usize,
         .               pub consts: usize,
         .           }
         .           
         .           /// Information about the formal type/lifetime parameters associated
         .           /// with an item or method. Analogous to `hir::Generics`.
         .           ///
         .           /// The ordering of parameters is the same as in `Subst` (excluding child generics):
         .           /// `Self` (optionally), `Lifetime` params..., `Type` params...
    74,574 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct Generics {
         .               pub parent: Option<DefId>,
         .               pub parent_count: usize,
         .               pub params: Vec<GenericParamDef>,
         .           
         .               /// Reverse map to the `index` field of each `GenericParamDef`.
         .               #[stable_hasher(ignore)]
         .               pub param_def_id_to_index: FxHashMap<DefId, u32>,
-- line 87 ----------------------------------------
-- line 88 ----------------------------------------
         .           
         .               pub has_self: bool,
         .               pub has_late_bound_regions: Option<Span>,
         .           }
         .           
         .           impl<'tcx> Generics {
         .               #[inline]
         .               pub fn count(&self) -> usize {
 9,581,832 ( 0.10%)          self.parent_count + self.params.len()
         .               }
         .           
    15,389 ( 0.00%)      pub fn own_counts(&self) -> GenericParamCount {
         .                   // We could cache this as a property of `GenericParamCount`, but
         .                   // the aim is to refactor this away entirely eventually and the
         .                   // presence of this method will be a constant reminder.
         .                   let mut own_counts = GenericParamCount::default();
         .           
         .                   for param in &self.params {
   106,021 ( 0.00%)              match param.kind {
       564 ( 0.00%)                  GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,
    20,384 ( 0.00%)                  GenericParamDefKind::Type { .. } => own_counts.types += 1,
    18,144 ( 0.00%)                  GenericParamDefKind::Const { .. } => own_counts.consts += 1,
         .                       }
         .                   }
         .           
         .                   own_counts
    46,167 ( 0.00%)      }
         .           
     5,194 ( 0.00%)      pub fn own_defaults(&self) -> GenericParamCount {
         .                   let mut own_defaults = GenericParamCount::default();
         .           
         .                   for param in &self.params {
    47,604 ( 0.00%)              match param.kind {
         .                           GenericParamDefKind::Lifetime => (),
     2,492 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
     9,968 ( 0.00%)                      own_defaults.types += has_default as usize;
         .                           }
     2,268 ( 0.00%)                  GenericParamDefKind::Const { has_default } => {
     9,072 ( 0.00%)                      own_defaults.consts += has_default as usize;
         .                           }
         .                       }
         .                   }
         .           
         .                   own_defaults
    15,582 ( 0.00%)      }
         .           
     3,264 ( 0.00%)      pub fn requires_monomorphization(&self, tcx: TyCtxt<'tcx>) -> bool {
         .                   if self.own_requires_monomorphization() {
         .                       return true;
         .                   }
         .           
     1,680 ( 0.00%)          if let Some(parent_def_id) = self.parent {
         .                       let parent = tcx.generics_of(parent_def_id);
       600 ( 0.00%)              parent.requires_monomorphization(tcx)
         .                   } else {
         .                       false
         .                   }
     3,264 ( 0.00%)      }
         .           
         .               pub fn own_requires_monomorphization(&self) -> bool {
       816 ( 0.00%)          for param in &self.params {
       126 ( 0.00%)              match param.kind {
         .                           GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {
         .                               return true;
         .                           }
         .                           GenericParamDefKind::Lifetime => {}
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Returns the `GenericParamDef` with the given index.
        28 ( 0.00%)      pub fn param_at(&'tcx self, param_index: usize, tcx: TyCtxt<'tcx>) -> &'tcx GenericParamDef {
         4 ( 0.00%)          if let Some(index) = param_index.checked_sub(self.parent_count) {
         .                       &self.params[index]
         .                   } else {
         .                       tcx.generics_of(self.parent.expect("parent_count > 0 but no parent?"))
         .                           .param_at(param_index, tcx)
         .                   }
        32 ( 0.00%)      }
         .           
         .               /// Returns the `GenericParamDef` associated with this `EarlyBoundRegion`.
         .               pub fn region_param(
         .                   &'tcx self,
         .                   param: &EarlyBoundRegion,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> &'tcx GenericParamDef {
         .                   let param = self.param_at(param.index as usize, tcx);
-- line 175 ----------------------------------------
-- line 176 ----------------------------------------
         .                   match param.kind {
         .                       GenericParamDefKind::Lifetime => param,
         .                       _ => bug!("expected lifetime parameter, but found another generic parameter"),
         .                   }
         .               }
         .           
         .               /// Returns the `GenericParamDef` associated with this `ParamTy`.
         .               pub fn type_param(&'tcx self, param: &ParamTy, tcx: TyCtxt<'tcx>) -> &'tcx GenericParamDef {
         8 ( 0.00%)          let param = self.param_at(param.index as usize, tcx);
         8 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Type { .. } => param,
         .                       _ => bug!("expected type parameter, but found another generic parameter"),
         .                   }
         .               }
         .           
         .               /// Returns the `GenericParamDef` associated with this `ParamConst`.
         .               pub fn const_param(&'tcx self, param: &ParamConst, tcx: TyCtxt<'tcx>) -> &GenericParamDef {
         .                   let param = self.param_at(param.index as usize, tcx);
-- line 193 ----------------------------------------
-- line 201 ----------------------------------------
         .               pub fn has_impl_trait(&'tcx self) -> bool {
         .                   self.params.iter().any(|param| {
         .                       matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })
         .                   })
         .               }
         .           }
         .           
         .           /// Bounds on generics.
    13,738 ( 0.00%)  #[derive(Copy, Clone, Default, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct GenericPredicates<'tcx> {
         .               pub parent: Option<DefId>,
         .               pub predicates: &'tcx [(Predicate<'tcx>, Span)],
         .           }
         .           
         .           impl<'tcx> GenericPredicates<'tcx> {
 4,220,200 ( 0.04%)      pub fn instantiate(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> InstantiatedPredicates<'tcx> {
         .                   let mut instantiated = InstantiatedPredicates::empty();
 4,220,200 ( 0.04%)          self.instantiate_into(tcx, &mut instantiated, substs);
         .                   instantiated
 5,275,250 ( 0.05%)      }
         .           
    27,216 ( 0.00%)      pub fn instantiate_own(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> InstantiatedPredicates<'tcx> {
    24,192 ( 0.00%)          InstantiatedPredicates {
     6,052 ( 0.00%)              predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),
         4 ( 0.00%)              spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),
         .                   }
    27,216 ( 0.00%)      }
         .           
10,564,990 ( 0.11%)      fn instantiate_into(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   instantiated: &mut InstantiatedPredicates<'tcx>,
         .                   substs: SubstsRef<'tcx>,
         .               ) {
 4,227,445 ( 0.04%)          if let Some(def_id) = self.parent {
     7,245 ( 0.00%)              tcx.predicates_of(def_id).instantiate_into(tcx, instantiated, substs);
         .                   }
 2,118,239 ( 0.02%)          instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)));
     5,241 ( 0.00%)          instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));
 8,451,992 ( 0.08%)      }
         .           
    29,540 ( 0.00%)      pub fn instantiate_identity(&self, tcx: TyCtxt<'tcx>) -> InstantiatedPredicates<'tcx> {
         .                   let mut instantiated = InstantiatedPredicates::empty();
    29,540 ( 0.00%)          self.instantiate_identity_into(tcx, &mut instantiated);
         .                   instantiated
    36,925 ( 0.00%)      }
         .           
    89,145 ( 0.00%)      fn instantiate_identity_into(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   instantiated: &mut InstantiatedPredicates<'tcx>,
         .               ) {
    42,140 ( 0.00%)          if let Some(def_id) = self.parent {
     7,560 ( 0.00%)              tcx.predicates_of(def_id).instantiate_identity_into(tcx, instantiated);
         .                   }
    19,810 ( 0.00%)          instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p));
         .                   instantiated.spans.extend(self.predicates.iter().map(|(_, s)| s));
    79,240 ( 0.00%)      }
         .           }

    44,807 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/generics.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           use super::BuiltinImplConditions;
         .           use super::IntercrateAmbiguityCause;
         .           use super::OverflowError;
         .           use super::SelectionCandidate::{self, *};
         .           use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};
         .           
         .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
    90,248 ( 0.00%)      #[instrument(level = "debug", skip(self))]
   112,810 ( 0.00%)      pub(super) fn candidate_from_obligation<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   // Watch out for overflow. This intentionally bypasses (and does
         .                   // not update) the cache.
    22,562 ( 0.00%)          self.check_recursion_limit(&stack.obligation, &stack.obligation)?;
         .           
         .                   // Check the cache. Note that we freshen the trait-ref
         .                   // separately rather than using `stack.fresh_trait_ref` --
         .                   // this is because we want the unbound variables to be
         .                   // replaced with fresh types starting from index 0.
   101,529 ( 0.00%)          let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);
         .                   debug!(?cache_fresh_trait_pred);
         .                   debug_assert!(!stack.obligation.predicate.has_escaping_bound_vars());
         .           
   139,042 ( 0.00%)          if let Some(c) =
    33,843 ( 0.00%)              self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)
         .                   {
         .                       debug!(candidate = ?c, "CACHE HIT");
         .                       return c;
         .                   }
         .           
         .                   // If no match, compute result and insert into cache.
         .                   //
         .                   // FIXME(nikomatsakis) -- this cache is not taking into
         .                   // account cycles that may have occurred in forming the
         .                   // candidate. I don't know of any specific problems that
         .                   // result but it seems awfully suspicious.
    17,766 ( 0.00%)          let (candidate, dep_node) =
     8,883 ( 0.00%)              self.in_task(|this| this.candidate_from_obligation_no_cache(stack));
         .           
         .                   debug!(?candidate, "CACHE MISS");
         .                   self.insert_candidate_cache(
     5,922 ( 0.00%)              stack.obligation.param_env,
    11,844 ( 0.00%)              cache_fresh_trait_pred,
         .                       dep_node,
         .                       candidate.clone(),
         .                   );
    35,532 ( 0.00%)          candidate
         .               }
         .           
    29,610 ( 0.00%)      fn candidate_from_obligation_no_cache<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
        10 ( 0.00%)          if let Some(conflict) = self.is_knowable(stack) {
         .                       debug!("coherence stage: not knowable");
         .                       if self.intercrate_ambiguity_causes.is_some() {
         .                           debug!("evaluate_stack: intercrate_ambiguity_causes is some");
         .                           // Heuristics: show the diagnostics when there are no candidates in crate.
         .                           if let Ok(candidate_set) = self.assemble_candidates(stack) {
         .                               let mut no_candidates_apply = true;
         .           
         .                               for c in candidate_set.vec.iter() {
-- line 85 ----------------------------------------
-- line 109 ----------------------------------------
         .                                   debug!(?cause, "evaluate_stack: pushing cause");
         .                                   self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
         .                               }
         .                           }
         .                       }
         .                       return Ok(None);
         .                   }
         .           
     8,883 ( 0.00%)          let candidate_set = self.assemble_candidates(stack)?;
         .           
     5,922 ( 0.00%)          if candidate_set.ambiguous {
         .                       debug!("candidate set contains ambig");
        68 ( 0.00%)              return Ok(None);
         .                   }
         .           
         .                   let candidates = candidate_set.vec;
         .           
         .                   debug!(?stack, ?candidates, "assembled {} candidates", candidates.len());
         .           
         .                   // At this point, we know that each of the entries in the
         .                   // candidate set is *individually* applicable. Now we have to
         .                   // figure out if they contain mutual incompatibilities. This
         .                   // frequently arises if we have an unconstrained input type --
         .                   // for example, we are looking for `$0: Eq` where `$0` is some
         .                   // unconstrained type variable. In that case, we'll get a
         .                   // candidate which assumes $0 == int, one that assumes `$0 ==
         .                   // usize`, etc. This spells an ambiguity.
         .           
    11,708 ( 0.00%)          let mut candidates = self.filter_impls(candidates, stack.obligation);
         .           
         .                   // If there is more than one candidate, first winnow them down
         .                   // by considering extra conditions (nested obligations and so
         .                   // forth). We don't winnow if there is exactly one
         .                   // candidate. This is a relatively minor distinction but it
         .                   // can lead to better inference and error-reporting. An
         .                   // example would be if there was an impl:
         .                   //
         .                   //     impl<T:Clone> Vec<T> { fn push_clone(...) { ... } }
         .                   //
         .                   // and we were to see some code `foo.push_clone()` where `boo`
         .                   // is a `Vec<Bar>` and `Bar` does not implement `Clone`.  If
         .                   // we were to winnow, we'd wind up with zero candidates.
         .                   // Instead, we select the right impl now but report "`Bar` does
         .                   // not implement `Clone`".
     5,854 ( 0.00%)          if candidates.len() == 1 {
     8,073 ( 0.00%)              return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);
         .                   }
         .           
         .                   // Winnow, but record the exact outcome of evaluation, which
         .                   // is needed for specialization. Propagate overflow if it occurs.
     1,416 ( 0.00%)          let mut candidates = candidates
         .                       .into_iter()
         .                       .map(|c| match self.evaluate_candidate(stack, &c) {
    21,312 ( 0.00%)                  Ok(eval) if eval.may_apply() => {
    28,328 ( 0.00%)                      Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))
         .                           }
         .                           Ok(_) => Ok(None),
         .                           Err(OverflowError::Canonical) => Err(Overflow),
         .                           Err(OverflowError::ErrorReporting) => Err(ErrorReporting),
         .                       })
         .                       .flat_map(Result::transpose)
         .                       .collect::<Result<Vec<_>, _>>()?;
         .           
         .                   debug!(?stack, ?candidates, "winnowed to {} candidates", candidates.len());
         .           
       236 ( 0.00%)          let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();
         .           
       708 ( 0.00%)          let sized_predicate = self.tcx().lang_items().sized_trait()
       472 ( 0.00%)              == Some(stack.obligation.predicate.skip_binder().def_id());
         .           
         .                   // If there are STILL multiple candidates, we can further
         .                   // reduce the list by dropping duplicates -- including
         .                   // resolving specializations.
       708 ( 0.00%)          if candidates.len() > 1 {
         .                       let mut i = 0;
     4,188 ( 0.00%)              while i < candidates.len() {
     9,102 ( 0.00%)                  let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {
         .                               self.candidate_should_be_dropped_in_favor_of(
         .                                   sized_predicate,
         .                                   &candidates[i],
         .                                   &candidates[j],
         .                                   needs_infer,
         .                               )
         .                           });
         .                           if is_dup {
         .                               debug!(candidate = ?candidates[i], "Dropping candidate #{}/{}", i, candidates.len());
         .                               candidates.swap_remove(i);
         .                           } else {
         .                               debug!(candidate = ?candidates[i], "Retaining candidate #{}/{}", i, candidates.len());
       168 ( 0.00%)                      i += 1;
         .           
         .                               // If there are *STILL* multiple candidates, give up
         .                               // and report ambiguity.
       252 ( 0.00%)                      if i > 1 {
         .                                   debug!("multiple matches, ambig");
       480 ( 0.00%)                          return Err(Ambiguous(
         .                                       candidates
         .                                           .into_iter()
     1,476 ( 0.00%)                                  .filter_map(|c| match c.candidate {
         .                                               SelectionCandidate::ImplCandidate(def_id) => Some(def_id),
         .                                               _ => None,
         .                                           })
         .                                           .collect(),
         .                                   ));
         .                               }
         .                           }
         .                       }
-- line 215 ----------------------------------------
-- line 219 ----------------------------------------
         .                   // that we know of, anyway. Note that in the case where there
         .                   // are unbound type variables within the obligation, it might
         .                   // be the case that you could still satisfy the obligation
         .                   // from another crate by instantiating the type variables with
         .                   // a type from another crate that does have an impl. This case
         .                   // is checked for in `evaluate_stack` (and hence users
         .                   // who might care about this case, like coherence, should use
         .                   // that function).
       196 ( 0.00%)          if candidates.is_empty() {
         .                       // If there's an error type, 'downgrade' our result from
         .                       // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid
         .                       // emitting additional spurious errors, since we're guaranteed
         .                       // to have emitted at least one.
       362 ( 0.00%)              if stack.obligation.references_error() {
         .                           debug!("no results for error type, treating as ambiguous");
       181 ( 0.00%)                  return Ok(None);
         .                       }
         .                       return Err(Unimplemented);
         .                   }
         .           
         .                   // Just one candidate left.
        45 ( 0.00%)          self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)
    27,041 ( 0.00%)      }
         .           
    23,688 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
    29,610 ( 0.00%)      pub(super) fn assemble_candidates<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {
     2,961 ( 0.00%)          let TraitObligationStack { obligation, .. } = *stack;
    56,259 ( 0.00%)          let obligation = &Obligation {
     2,961 ( 0.00%)              param_env: obligation.param_env,
         .                       cause: obligation.cause.clone(),
     8,883 ( 0.00%)              recursion_depth: obligation.recursion_depth,
    35,532 ( 0.00%)              predicate: self.infcx().resolve_vars_if_possible(obligation.predicate),
         .                   };
         .           
     5,982 ( 0.00%)          if obligation.predicate.skip_binder().self_ty().is_ty_var() {
         .                       // Self is a type variable (e.g., `_: AsRef<str>`).
         .                       //
         .                       // This is somewhat problematic, as the current scheme can't really
         .                       // handle it turning to be a projection. This does end up as truly
         .                       // ambiguous in most cases anyway.
         .                       //
         .                       // Take the fast path out - this also improves
         .                       // performance by preventing assemble_candidates_from_impls from
         .                       // matching every impl for this trait.
        51 ( 0.00%)              return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });
         .                   }
         .           
     8,832 ( 0.00%)          let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };
         .           
         .                   // The only way to prove a NotImplemented(T: Foo) predicate is via a negative impl.
         .                   // There are no compiler built-in rules for this.
     5,888 ( 0.00%)          if obligation.polarity() == ty::ImplPolarity::Negative {
         .                       self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .                       self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                   } else {
     2,944 ( 0.00%)              self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
         .           
         .                       // Other bounds. Consider both in-scope bounds from fn decl
         .                       // and applicable impls. There is a certain set of precedence rules here.
    17,664 ( 0.00%)              let def_id = obligation.predicate.def_id();
     2,944 ( 0.00%)              let lang_items = self.tcx().lang_items();
         .           
     9,008 ( 0.00%)              if lang_items.copy_trait() == Some(def_id) {
         .                           debug!(obligation_self_ty = ?obligation.predicate.skip_binder().self_ty());
         .           
         .                           // User-defined copy impls are permitted, but only for
         .                           // structs and enums.
        88 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .           
         .                           // For other types, we'll use the builtin rules.
       352 ( 0.00%)                  let copy_conditions = self.copy_clone_conditions(obligation);
       880 ( 0.00%)                  self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);
     8,568 ( 0.00%)              } else if lang_items.discriminant_kind_trait() == Some(def_id) {
         .                           // `DiscriminantKind` is automatically implemented for every type.
         .                           candidates.vec.push(DiscriminantKindCandidate);
     8,568 ( 0.00%)              } else if lang_items.pointee_trait() == Some(def_id) {
         .                           // `Pointee` is automatically implemented for every type.
         .                           candidates.vec.push(PointeeCandidate);
     8,912 ( 0.00%)              } else if lang_items.sized_trait() == Some(def_id) {
         .                           // Sized is never implementable by end-users, it is
         .                           // always automatically computed.
       172 ( 0.00%)                  let sized_conditions = self.sized_conditions(obligation);
     1,720 ( 0.00%)                  self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);
     8,164 ( 0.00%)              } else if lang_items.unsize_trait() == Some(def_id) {
       112 ( 0.00%)                  self.assemble_candidates_for_unsizing(obligation, &mut candidates);
     7,884 ( 0.00%)              } else if lang_items.drop_trait() == Some(def_id)
         .                           && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst
         .                       {
         .                           self.assemble_const_drop_candidates(obligation, &mut candidates);
         .                       } else {
     7,922 ( 0.00%)                  if lang_items.clone_trait() == Some(def_id) {
         .                               // Same builtin conditions as `Copy`, i.e., every type which has builtin support
         .                               // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`
         .                               // types have builtin support for `Clone`.
        76 ( 0.00%)                      let clone_conditions = self.copy_clone_conditions(obligation);
       171 ( 0.00%)                      self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);
         .                           }
         .           
     2,628 ( 0.00%)                  self.assemble_generator_candidates(obligation, &mut candidates);
     2,628 ( 0.00%)                  self.assemble_closure_candidates(obligation, &mut candidates);
     2,628 ( 0.00%)                  self.assemble_fn_pointer_candidates(obligation, &mut candidates);
     7,884 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
         .                           self.assemble_candidates_from_object_ty(obligation, &mut candidates);
         .                       }
         .           
         .                       self.assemble_candidates_from_projected_tys(obligation, &mut candidates);
         .                       self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;
         .                       // Auto implementations have lower priority, so we only
         .                       // consider triggering a default if there is no other impl that can apply.
     2,944 ( 0.00%)              if candidates.vec.is_empty() {
         .                           self.assemble_candidates_from_auto_impls(obligation, &mut candidates);
         .                       }
         .                   }
         .                   debug!("candidate list size: {}", candidates.vec.len());
    38,272 ( 0.00%)          Ok(candidates)
         .               }
         .           
         .               #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_candidates_from_projected_tys(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Before we go into the whole placeholder thing, just
         .                   // quickly check if the self-type is a projection at all.
    26,458 ( 0.00%)          match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {
         .                       ty::Projection(_) | ty::Opaque(..) => {}
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           span_bug!(
         .                               obligation.cause.span,
         .                               "Self=_ should have been handled by assemble_candidates"
         .                           );
         .                       }
         .                       _ => return,
         .                   }
         .           
        64 ( 0.00%)          let result = self
         .                       .infcx
        32 ( 0.00%)              .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));
         .           
        64 ( 0.00%)          candidates.vec.extend(result.into_iter().map(ProjectionCandidate));
         .               }
         .           
         .               /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller
         .               /// supplied to find out whether it is listed among them.
         .               ///
         .               /// Never affects the inference environment.
         .               #[tracing::instrument(level = "debug", skip(self, stack, candidates))]
         .               fn assemble_candidates_from_caller_bounds<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) -> Result<(), SelectionError<'tcx>> {
         .                   debug!(?stack.obligation);
         .           
    11,776 ( 0.00%)          let all_bounds = stack
         .                       .obligation
         .                       .param_env
         .                       .caller_bounds()
         .                       .iter()
     2,864 ( 0.00%)              .filter_map(|o| o.to_opt_poly_trait_pred());
         .           
         .                   // Micro-optimization: filter out predicates relating to different traits.
         .                   let matching_bounds =
     4,716 ( 0.00%)              all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());
         .           
         .                   // Keep only those bounds which may apply, and propagate overflow if it occurs.
         .                   for bound in matching_bounds {
         .                       // FIXME(oli-obk): it is suspicious that we are dropping the constness and
         .                       // polarity here.
        76 ( 0.00%)              let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;
       152 ( 0.00%)              if wc.may_apply() {
         .                           candidates.vec.push(ParamCandidate(bound));
         .                       }
         .                   }
         .           
         .                   Ok(())
         .               }
         .           
    21,024 ( 0.00%)      fn assemble_generator_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
    31,536 ( 0.00%)          if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because the substs on generator types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters.
         .                   let self_ty = obligation.self_ty().skip_binder();
         .                   match self_ty.kind() {
-- line 414 ----------------------------------------
-- line 418 ----------------------------------------
         .                           candidates.vec.push(GeneratorCandidate);
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_generator_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
    18,396 ( 0.00%)      }
         .           
         .               /// Checks for the artificial impl that the compiler will create for an obligation like `X :
         .               /// FnMut<..>` where `X` is a closure type.
         .               ///
         .               /// Note: the type parameters on a closure candidate are modeled as *output* type
         .               /// parameters and hence do not affect whether this trait is a match or not. They will be
         .               /// unified during the confirmation step.
    18,396 ( 0.00%)      fn assemble_closure_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
    28,908 ( 0.00%)          let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {
         .                       Some(k) => k,
         .                       None => {
         .                           return;
         .                       }
         .                   };
         .           
         .                   // Okay to skip binder because the substs on closure types never
         .                   // touch bound regions, they just capture the in-scope
         .                   // type/region parameters
       147 ( 0.00%)          match *obligation.self_ty().skip_binder().kind() {
        28 ( 0.00%)              ty::Closure(_, closure_substs) => {
         .                           debug!(?kind, ?obligation, "assemble_unboxed_candidates");
       112 ( 0.00%)                  match self.infcx.closure_kind(closure_substs) {
         .                               Some(closure_kind) => {
         .                                   debug!(?closure_kind, "assemble_unboxed_candidates");
       140 ( 0.00%)                          if closure_kind.extends(kind) {
         .                                       candidates.vec.push(ClosureCandidate);
         .                                   }
         .                               }
         .                               None => {
         .                                   debug!("assemble_unboxed_candidates: closure_kind not yet known");
         .                                   candidates.vec.push(ClosureCandidate);
         .                               }
         .                           }
         .                       }
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_unboxed_closure_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true;
         .                       }
         .                       _ => {}
         .                   }
    15,768 ( 0.00%)      }
         .           
         .               /// Implements one of the `Fn()` family for a fn pointer.
    23,652 ( 0.00%)      fn assemble_fn_pointer_candidates(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We provide impl of all fn traits for fn pointers.
    26,280 ( 0.00%)          if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {
         .                       return;
         .                   }
         .           
         .                   // Okay to skip binder because what we are inspecting doesn't involve bound regions.
        58 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
       203 ( 0.00%)          match *self_ty.kind() {
         .                       ty::Infer(ty::TyVar(_)) => {
         .                           debug!("assemble_fn_pointer_candidates: ambiguous self-type");
         .                           candidates.ambiguous = true; // Could wind up being a fn() type.
         .                       }
         .                       // Provide an impl, but only for suitable `fn` pointers.
         .                       ty::FnPtr(_) => {
         .                           if let ty::FnSig {
         .                               unsafety: hir::Unsafety::Normal,
-- line 494 ----------------------------------------
-- line 513 ----------------------------------------
         .                                   candidates
         .                                       .vec
         .                                       .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });
         .                               }
         .                           }
         .                       }
         .                       _ => {}
         .                   }
    21,024 ( 0.00%)      }
         .           
         .               /// Searches for impls that might apply to `obligation`.
    27,160 ( 0.00%)      fn assemble_candidates_from_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(?obligation, "assemble_candidates_from_impls");
         .           
         .                   // Essentially any user-written impl will match with an error type,
         .                   // so creating `ImplCandidates` isn't useful. However, we might
         .                   // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)
         .                   // This helps us avoid overflow: see issue #72839
         .                   // Since compilation is already guaranteed to fail, this is just
         .                   // to try to show the 'nicest' possible errors to the user.
         .                   // We don't check for errors in the `ParamEnv` - in practice,
         .                   // it seems to cause us to be overly aggressive in deciding
         .                   // to give up searching for candidates, leading to spurious errors.
     5,432 ( 0.00%)          if obligation.predicate.references_error() {
         .                       return;
         .                   }
         .           
     8,148 ( 0.00%)          self.tcx().for_each_relevant_impl(
    21,728 ( 0.00%)              obligation.predicate.def_id(),
         .                       obligation.predicate.skip_binder().trait_ref.self_ty(),
    13,580 ( 0.00%)              |impl_def_id| {
16,909,352 ( 0.17%)                  self.infcx.probe(|_| {
12,705,934 ( 0.13%)                      if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {
    11,960 ( 0.00%)                          candidates.vec.push(ImplCandidate(impl_def_id));
         .                               }
         .                           });
         .                       },
         .                   );
    21,728 ( 0.00%)      }
         .           
         .               fn assemble_candidates_from_auto_impls(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
       198 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty, "assemble_candidates_from_auto_impls");
         .           
     1,188 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
       792 ( 0.00%)          if self.tcx().trait_is_auto(def_id) {
         .                       match self_ty.kind() {
         .                           ty::Dynamic(..) => {
         .                               // For object types, we don't know what the closed
         .                               // over types are. This means we conservatively
         .                               // say nothing; a candidate may be added by
         .                               // `assemble_candidates_from_object_ty`.
         .                           }
         .                           ty::Foreign(..) => {
-- line 576 ----------------------------------------
-- line 625 ----------------------------------------
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   debug!(
         .                       self_ty = ?obligation.self_ty().skip_binder(),
         .                       "assemble_candidates_from_object_ty",
         .                   );
         .           
    21,024 ( 0.00%)          self.infcx.probe(|_snapshot| {
         .                       // The code below doesn't care about regions, and the
         .                       // self-ty here doesn't escape this probe, so just erase
         .                       // any LBR.
     2,628 ( 0.00%)              let self_ty = self.tcx().erase_late_bound_regions(obligation.self_ty());
    13,162 ( 0.00%)              let poly_trait_ref = match self_ty.kind() {
         .                           ty::Dynamic(ref data, ..) => {
         .                               if data.auto_traits().any(|did| did == obligation.predicate.def_id()) {
         .                                   debug!(
         .                                       "assemble_candidates_from_object_ty: matched builtin bound, \
         .                                        pushing candidate"
         .                                   );
         .                                   candidates.vec.push(BuiltinObjectCandidate);
         .                                   return;
-- line 646 ----------------------------------------
-- line 739 ----------------------------------------
         .                   };
         .           
         .                   let def_id = data.principal_def_id()?;
         .           
         .                   return Some((normalized_ty, def_id));
         .               }
         .           
         .               /// Searches for unsizing that might apply to `obligation`.
       560 ( 0.00%)      fn assemble_candidates_for_unsizing(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // We currently never consider higher-ranked obligations e.g.
         .                   // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not
         .                   // because they are a priori invalid, and we could potentially add support
         .                   // for them later, it's just that there isn't really a strong need for it.
-- line 755 ----------------------------------------
-- line 758 ----------------------------------------
         .                   //
         .                   // That said, one might try to write a fn with a where clause like
         .                   //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>
         .                   // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.
         .                   // Still, you'd be more likely to write that where clause as
         .                   //     T: Trait
         .                   // so it seems ok if we (conservatively) fail to accept that `Unsize`
         .                   // obligation above. Should be possible to extend this in the future.
       280 ( 0.00%)          let source = match obligation.self_ty().no_bound_vars() {
        56 ( 0.00%)              Some(t) => t,
         .                       None => {
         .                           // Don't add any candidates if there are bound regions.
         .                           return;
         .                       }
         .                   };
       168 ( 0.00%)          let target = obligation.predicate.skip_binder().trait_ref.substs.type_at(1);
         .           
         .                   debug!(?source, ?target, "assemble_candidates_for_unsizing");
         .           
       802 ( 0.00%)          match (source.kind(), target.kind()) {
         .                       // Trait+Kx+'a -> Trait+Ky+'b (upcasts).
         .                       (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {
         .                           // Upcast coercions permit several things:
         .                           //
         .                           // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`
         .                           // 2. Tightening the region bound, e.g., `Foo + 'a` to `Foo + 'b` if `'a: 'b`
         .                           // 3. Tightening trait to its super traits, eg. `Foo` to `Bar` if `Foo: Bar`
         .                           //
-- line 785 ----------------------------------------
-- line 843 ----------------------------------------
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // Ambiguous handling is below `T` -> `Trait`, because inference
         .                       // variables can still implement `Unsize<Trait>` and nested
         .                       // obligations will have the final say (likely deferred).
         .                       (&ty::Infer(ty::TyVar(_)), _) | (_, &ty::Infer(ty::TyVar(_))) => {
         .                           debug!("assemble_candidates_for_unsizing: ambiguous");
        34 ( 0.00%)                  candidates.ambiguous = true;
         .                       }
         .           
         .                       // `[T; n]` -> `[T]`
         .                       (&ty::Array(..), &ty::Slice(_)) => {
         .                           candidates.vec.push(BuiltinUnsizeCandidate);
         .                       }
         .           
         .                       // `Struct<T>` -> `Struct<U>`
        15 ( 0.00%)              (&ty::Adt(def_id_a, _), &ty::Adt(def_id_b, _)) if def_id_a.is_struct() => {
        25 ( 0.00%)                  if def_id_a == def_id_b {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       // `(.., T)` -> `(.., U)`
         .                       (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {
         .                           if tys_a.len() == tys_b.len() {
         .                               candidates.vec.push(BuiltinUnsizeCandidate);
         .                           }
         .                       }
         .           
         .                       _ => {}
         .                   };
       448 ( 0.00%)      }
         .           
    41,216 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, obligation, candidates))]
         .               fn assemble_candidates_for_trait_alias(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
         .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
     5,888 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
         .                   debug!(?self_ty);
         .           
    23,552 ( 0.00%)          let def_id = obligation.predicate.def_id();
         .           
    11,776 ( 0.00%)          if self.tcx().is_trait_alias(def_id) {
         .                       candidates.vec.push(TraitAliasCandidate(def_id));
         .                   }
         .               }
         .           
         .               /// Assembles the trait which are built-in to the language itself:
         .               /// `Copy`, `Clone` and `Sized`.
     2,232 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, candidates))]
         .               fn assemble_builtin_bound_candidates(
         .                   &mut self,
         .                   conditions: BuiltinImplConditions<'tcx>,
         .                   candidates: &mut SelectionCandidateSet<'tcx>,
         .               ) {
     1,043 ( 0.00%)          match conditions {
         .                       BuiltinImplConditions::Where(nested) => {
         .                           candidates
         .                               .vec
         .                               .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });
         .                       }
         .                       BuiltinImplConditions::None => {}
         .                       BuiltinImplConditions::Ambiguous => {
         .                           candidates.ambiguous = true;
-- line 910 ----------------------------------------

   141,150 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs
--------------------------------------------------------------------------------
Ir                  

-- line 51 ----------------------------------------
         .                   "this behavior recently changed as a result of a bug fix; \
         .                    see rust-lang/rust#56105 for details",
         .               );
         .           }
         .           
         .           /// If there are types that satisfy both impls, invokes `on_overlap`
         .           /// with a suitably-freshened `ImplHeader` with those types
         .           /// substituted. Otherwise, invokes `no_overlap`.
 4,715,577 ( 0.05%)  #[instrument(skip(tcx, skip_leak_check, on_overlap, no_overlap), level = "debug")]
 7,335,372 ( 0.07%)  pub fn overlapping_impls<F1, F2, R>(
         .               tcx: TyCtxt<'_>,
         .               impl1_def_id: DefId,
         .               impl2_def_id: DefId,
         .               skip_leak_check: SkipLeakCheck,
         .               on_overlap: F1,
         .               no_overlap: F2,
         .           ) -> R
         .           where
         .               F1: FnOnce(OverlapResult<'_>) -> R,
         .               F2: FnOnce() -> R,
         .           {
         .               // Before doing expensive operations like entering an inference context, do
         .               // a quick check via fast_reject to tell if the impl headers could possibly
         .               // unify.
 1,047,906 ( 0.01%)      let impl1_ref = tcx.impl_trait_ref(impl1_def_id);
 3,143,718 ( 0.03%)      let impl2_ref = tcx.impl_trait_ref(impl2_def_id);
         .           
         .               // Check if any of the input types definitely do not unify.
         .               if iter::zip(
         .                   impl1_ref.iter().flat_map(|tref| tref.substs.types()),
         .                   impl2_ref.iter().flat_map(|tref| tref.substs.types()),
         .               )
         .               .any(|(ty1, ty2)| {
 5,764,770 ( 0.06%)          let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No, StripReferences::No);
 3,668,490 ( 0.04%)          let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No, StripReferences::No);
         .           
 2,096,280 ( 0.02%)          if let (Some(t1), Some(t2)) = (t1, t2) {
         .                       // Simplified successfully
         .                       t1 != t2
         .                   } else {
         .                       // Types might unify
         .                       false
         .                   }
         .               }) {
         .                   // Some types involved are definitely different, so the impls couldn't possibly overlap.
         .                   debug!("overlapping_impls: fast_reject early-exit");
         .                   return no_overlap();
         .               }
         .           
 6,286,632 ( 0.06%)      let overlaps = tcx.infer_ctxt().enter(|infcx| {
        10 ( 0.00%)          let selcx = &mut SelectionContext::intercrate(&infcx);
 6,286,612 ( 0.06%)          overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id).is_some()
 1,571,658 ( 0.02%)      });
         .           
 1,571,648 ( 0.02%)      if !overlaps {
         .                   return no_overlap();
         .               }
         .           
         .               // In the case where we detect an error, run the check again, but
         .               // this time tracking intercrate ambuiguity causes for better
         .               // diagnostics. (These take time and can lead to false errors.)
         .               tcx.infer_ctxt().enter(|infcx| {
         .                   let selcx = &mut SelectionContext::intercrate(&infcx);
         .                   selcx.enable_tracking_intercrate_ambiguity_causes();
         .                   on_overlap(overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id).unwrap())
         .               })
         .           }
         .           
12,573,264 ( 0.13%)  fn with_fresh_ty_vars<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               impl_def_id: DefId,
         .           ) -> ty::ImplHeader<'tcx> {
         .               let tcx = selcx.tcx();
 5,238,860 ( 0.05%)      let impl_substs = selcx.infcx().fresh_substs_for_item(DUMMY_SP, impl_def_id);
         .           
 6,286,632 ( 0.06%)      let header = ty::ImplHeader {
         .                   impl_def_id,
         .                   self_ty: tcx.type_of(impl_def_id).subst(tcx, impl_substs),
         .                   trait_ref: tcx.impl_trait_ref(impl_def_id).subst(tcx, impl_substs),
 8,382,176 ( 0.08%)          predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,
         .               };
         .           
12,573,264 ( 0.13%)      let Normalized { value: mut header, obligations } =
18,859,896 ( 0.19%)          traits::normalize(selcx, param_env, ObligationCause::dummy(), header);
         .           
 1,047,772 ( 0.01%)      header.predicates.extend(obligations.into_iter().map(|o| o.predicate));
         .               header
 8,382,176 ( 0.08%)  }
         .           
         .           /// What kind of overlap check are we doing -- this exists just for testing and feature-gating
         .           /// purposes.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
         .           enum OverlapMode {
         .               /// The 1.0 rules (either types fail to unify, or where clauses are not implemented for crate-local types)
         .               Stable,
         .               /// Feature-gated test: Stable, *or* there is an explicit negative impl that rules out one of the where-clauses.
-- line 147 ----------------------------------------
-- line 151 ----------------------------------------
         .           }
         .           
         .           impl OverlapMode {
         .               fn use_negative_impl(&self) -> bool {
         .                   *self == OverlapMode::Strict || *self == OverlapMode::WithNegative
         .               }
         .           
         .               fn use_implicit_negative(&self) -> bool {
         1 ( 0.00%)          *self == OverlapMode::Stable || *self == OverlapMode::WithNegative
         .               }
         .           }
         .           
         .           fn overlap_mode<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> OverlapMode {
         .               // Find the possible coherence mode override opt-in attributes for each `DefId`
         .               let find_coherence_attr = |attr: &Attribute| {
        53 ( 0.00%)          let name = attr.name_or_empty();
       265 ( 0.00%)          match name {
         .                       sym::rustc_with_negative_coherence | sym::rustc_strict_coherence => Some(name),
         .                       _ => None,
         .                   }
         .               };
 3,667,202 ( 0.04%)      let impl1_coherence_mode = tcx.get_attrs(impl1_def_id).iter().find_map(find_coherence_attr);
 3,667,202 ( 0.04%)      let impl2_coherence_mode = tcx.get_attrs(impl2_def_id).iter().find_map(find_coherence_attr);
         .           
         .               // If there are any (that currently happens in tests), they need to match. Otherwise, the
         .               // default 1.0 rules are used.
 2,095,544 ( 0.02%)      match (impl1_coherence_mode, impl2_coherence_mode) {
         .                   (None, None) => OverlapMode::Stable,
         .                   (Some(sym::rustc_with_negative_coherence), Some(sym::rustc_with_negative_coherence)) => {
         .                       OverlapMode::WithNegative
         .                   }
         .                   (Some(sym::rustc_strict_coherence), Some(sym::rustc_strict_coherence)) => {
         .                       OverlapMode::Strict
         .                   }
         .                   (Some(mode), _) | (_, Some(mode)) => {
         .                       bug!("Use the same coherence mode on both impls: {}", mode)
         .                   }
         .               }
         .           }
         .           
         .           /// Can both impl `a` and impl `b` be satisfied by a common type (including
         .           /// where-clauses)? If so, returns an `ImplHeader` that unifies the two impls.
        90 ( 0.00%)  fn overlap<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               skip_leak_check: SkipLeakCheck,
         .               impl1_def_id: DefId,
         .               impl2_def_id: DefId,
         .           ) -> Option<OverlapResult<'tcx>> {
         .               debug!("overlap(impl1_def_id={:?}, impl2_def_id={:?})", impl1_def_id, impl2_def_id);
         .           
 5,762,746 ( 0.06%)      selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {
 5,238,860 ( 0.05%)          overlap_within_probe(selcx, skip_leak_check, impl1_def_id, impl2_def_id, snapshot)
         .               })
        40 ( 0.00%)  }
         .           
 5,762,746 ( 0.06%)  fn overlap_within_probe<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               skip_leak_check: SkipLeakCheck,
         .               impl1_def_id: DefId,
         .               impl2_def_id: DefId,
         .               snapshot: &CombinedSnapshot<'_, 'tcx>,
         .           ) -> Option<OverlapResult<'tcx>> {
         .               let infcx = selcx.infcx();
   523,886 ( 0.01%)      let tcx = infcx.tcx;
         .           
         .               let overlap_mode = overlap_mode(tcx, impl1_def_id, impl2_def_id);
         .           
         .               if overlap_mode.use_negative_impl() {
         .                   if negative_impl(selcx, impl1_def_id, impl2_def_id)
         .                       || negative_impl(selcx, impl2_def_id, impl1_def_id)
         .                   {
         .                       return None;
-- line 222 ----------------------------------------
-- line 224 ----------------------------------------
         .               }
         .           
         .               // For the purposes of this check, we don't bring any placeholder
         .               // types into scope; instead, we replace the generic types with
         .               // fresh type variables, and hence we do our evaluations in an
         .               // empty environment.
         .               let param_env = ty::ParamEnv::empty();
         .           
 5,762,746 ( 0.06%)      let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);
 2,619,430 ( 0.03%)      let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);
         .           
         .               debug!("overlap: impl1_header={:?}", impl1_header);
         .               debug!("overlap: impl2_header={:?}", impl2_header);
         .           
         3 ( 0.00%)      let obligations = equate_impl_headers(selcx, &impl1_header, &impl2_header)?;
         .               debug!("overlap: unification check succeeded");
         .           
         1 ( 0.00%)      if overlap_mode.use_implicit_negative() {
         7 ( 0.00%)          if implicit_negative(selcx, param_env, &impl1_header, impl2_header, obligations) {
         2 ( 0.00%)              return None;
         .                   }
         .               }
         .           
         .               if !skip_leak_check.is_yes() {
         .                   if infcx.leak_check(true, snapshot).is_err() {
         .                       debug!("overlap: leak check failed");
         .                       return None;
         .                   }
-- line 251 ----------------------------------------
-- line 254 ----------------------------------------
         .               let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();
         .               debug!("overlap: intercrate_ambiguity_causes={:#?}", intercrate_ambiguity_causes);
         .           
         .               let involves_placeholder =
         .                   matches!(selcx.infcx().region_constraints_added_in_snapshot(snapshot), Some(true));
         .           
         .               let impl_header = selcx.infcx().resolve_vars_if_possible(impl1_header);
         .               Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })
 4,714,974 ( 0.05%)  }
         .           
         .           fn equate_impl_headers<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               impl1_header: &ty::ImplHeader<'tcx>,
         .               impl2_header: &ty::ImplHeader<'tcx>,
         .           ) -> Option<PredicateObligations<'tcx>> {
         .               // Do `a` and `b` unify? If not, no overlap.
 1,047,772 ( 0.01%)      selcx
         .                   .infcx()
         .                   .at(&ObligationCause::dummy(), ty::ParamEnv::empty())
         .                   .eq_impl_headers(impl1_header, impl2_header)
         .                   .map(|infer_ok| infer_ok.obligations)
         .                   .ok()
         .           }
         .           
         .           /// Given impl1 and impl2 check if both impls can be satisfied by a common type (including
-- line 278 ----------------------------------------
-- line 301 ----------------------------------------
         .               //
         .               // `Box<dyn Error> = Box<dyn Error>`
         .               // So, `?E = &'?a str` and then given the where clause `&'?a str: Error`.
         .               //
         .               // If the obligation `&'?a str: Error` holds, it means that there's overlap. If that doesn't
         .               // hold we need to check if `&'?a str: !Error` holds, if doesn't hold there's overlap because
         .               // at some point an impl for `&'?a str: Error` could be added.
         .               let infcx = selcx.infcx();
         2 ( 0.00%)      let tcx = infcx.tcx;
         .               let opt_failing_obligation = impl1_header
         .                   .predicates
         .                   .iter()
         .                   .copied()
         .                   .chain(impl2_header.predicates)
         6 ( 0.00%)          .map(|p| infcx.resolve_vars_if_possible(p))
         .                   .map(|p| Obligation {
         .                       cause: ObligationCause::dummy(),
         .                       param_env,
         .                       recursion_depth: 0,
         .                       predicate: p,
         .                   })
         .                   .chain(obligations)
         .                   .find(|o| {
        11 ( 0.00%)              loose_check(selcx, o) || tcx.features().negative_impls && negative_impl_exists(selcx, o)
         .                   });
         .               // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported
         .               // to the canonical trait query form, `infcx.predicate_may_hold`, once
         .               // the new system supports intercrate mode (which coherence needs).
         .           
         3 ( 0.00%)      if let Some(failing_obligation) = opt_failing_obligation {
         .                   debug!("overlap: obligation unsatisfiable {:?}", failing_obligation);
         .                   true
         .               } else {
         .                   false
         .               }
         .           }
         .           
         .           /// Given impl1 and impl2 check if both impls are never satisfied by a common type (including
-- line 338 ----------------------------------------
-- line 417 ----------------------------------------
         .                   .as_ref()
         .                   .map(|o| {
         .                       // FIXME This isn't quite correct, regions should be included
         .                       selcx.infcx().predicate_must_hold_modulo_regions(o)
         .                   })
         .                   .unwrap_or(false)
         .           }
         .           
        20 ( 0.00%)  pub fn trait_ref_is_knowable<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               trait_ref: ty::TraitRef<'tcx>,
         .           ) -> Option<Conflict> {
         .               debug!("trait_ref_is_knowable(trait_ref={:?})", trait_ref);
        14 ( 0.00%)      if orphan_check_trait_ref(tcx, trait_ref, InCrate::Remote).is_ok() {
         .                   // A downstream or cousin crate is allowed to implement some
         .                   // substitution of this trait-ref.
         .                   return Some(Conflict::Downstream);
         .               }
         .           
         4 ( 0.00%)      if trait_ref_is_local_or_fundamental(tcx, trait_ref) {
         .                   // This is a local or fundamental trait, so future-compatibility
         .                   // is no concern. We know that downstream/cousin crates are not
         .                   // allowed to implement a substitution of this trait ref, which
         .                   // means impls could only come from dependencies of this crate,
         .                   // which we already know about.
         .                   return None;
         .               }
         .           
-- line 444 ----------------------------------------
-- line 445 ----------------------------------------
         .               // This is a remote non-fundamental trait, so if another crate
         .               // can be the "final owner" of a substitution of this trait-ref,
         .               // they are allowed to implement it future-compatibly.
         .               //
         .               // However, if we are a final owner, then nobody else can be,
         .               // and if we are an intermediate owner, then we don't care
         .               // about future-compatibility, which means that we're OK if
         .               // we are an owner.
         7 ( 0.00%)      if orphan_check_trait_ref(tcx, trait_ref, InCrate::Local).is_ok() {
         .                   debug!("trait_ref_is_knowable: orphan check passed");
         .                   None
         .               } else {
         .                   debug!("trait_ref_is_knowable: nonlocal, nonfundamental, unowned");
         .                   Some(Conflict::Upstream)
         .               }
        16 ( 0.00%)  }
         .           
         .           pub fn trait_ref_is_local_or_fundamental<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               trait_ref: ty::TraitRef<'tcx>,
         .           ) -> bool {
        10 ( 0.00%)      trait_ref.def_id.krate == LOCAL_CRATE || tcx.has_attr(trait_ref.def_id, sym::fundamental)
         .           }
         .           
         .           pub enum OrphanCheckErr<'tcx> {
         .               NonLocalInputType(Vec<(Ty<'tcx>, bool /* Is this the first input type? */)>),
         .               UncoveredTy(Ty<'tcx>, Option<Ty<'tcx>>),
         .           }
         .           
         .           /// Checks the coherence orphan rules. `impl_def_id` should be the
         .           /// `DefId` of a trait impl. To pass, either the trait must be local, or else
         .           /// two conditions must be satisfied:
         .           ///
         .           /// 1. All type parameters in `Self` must be "covered" by some local type constructor.
         .           /// 2. Some local type must appear in `Self`.
     7,525 ( 0.00%)  pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanCheckErr<'_>> {
         .               debug!("orphan_check({:?})", impl_def_id);
         .           
         .               // We only except this routine to be invoked on implementations
         .               // of a trait, not inherent implementations.
         .               let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();
         .               debug!("orphan_check: trait_ref={:?}", trait_ref);
         .           
         .               // If the *trait* is local to the crate, ok.
     1,075 ( 0.00%)      if trait_ref.def_id.is_local() {
         .                   debug!("trait {:?} is local to current crate", trait_ref.def_id);
     2,074 ( 0.00%)          return Ok(());
         .               }
         .           
       190 ( 0.00%)      orphan_check_trait_ref(tcx, trait_ref, InCrate::Local)
     9,675 ( 0.00%)  }
         .           
         .           /// Checks whether a trait-ref is potentially implementable by a crate.
         .           ///
         .           /// The current rule is that a trait-ref orphan checks in a crate C:
         .           ///
         .           /// 1. Order the parameters in the trait-ref in subst order - Self first,
         .           ///    others linearly (e.g., `<U as Foo<V, W>>` is U < V < W).
         .           /// 2. Of these type parameters, there is at least one type parameter
-- line 503 ----------------------------------------
-- line 575 ----------------------------------------
         .           ///    must appear behind a non-fundamental type (because this is not a
         .           ///    type-system requirement, crate owners might also go for "semantic
         .           ///    future-compatibility" involving things such as sealed traits, but
         .           ///    the above requirement is sufficient, and is necessary in "open world"
         .           ///    cases).
         .           ///
         .           /// Note that this function is never called for types that have both type
         .           /// parameters and inference variables.
       533 ( 0.00%)  fn orphan_check_trait_ref<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               trait_ref: ty::TraitRef<'tcx>,
         .               in_crate: InCrate,
         .           ) -> Result<(), OrphanCheckErr<'tcx>> {
         .               debug!("orphan_check_trait_ref(trait_ref={:?}, in_crate={:?})", trait_ref, in_crate);
         .           
         .               if trait_ref.needs_infer() && trait_ref.needs_subst() {
         .                   bug!(
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
         .               //
         .               // - Trait is a local trait
         .               // (already checked in orphan_check prior to calling this function)
         .               // - All of
         .               //     - At least one of the types T0..=Tn must be a local type.
         .               //      Let Ti be the first such type.
         .               //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)
         .               //
        22 ( 0.00%)      fn uncover_fundamental_ty<'tcx>(
         .                   tcx: TyCtxt<'tcx>,
         .                   ty: Ty<'tcx>,
         .                   in_crate: InCrate,
         .               ) -> Vec<Ty<'tcx>> {
         .                   // FIXME: this is currently somewhat overly complicated,
         .                   // but fixing this requires a more complicated refactor.
        93 ( 0.00%)          if !contained_non_local_types(tcx, ty, in_crate).is_empty() {
        76 ( 0.00%)              if let Some(inner_tys) = fundamental_ty_inner_tys(tcx, ty) {
         .                           return inner_tys
         8 ( 0.00%)                      .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))
         .                               .collect();
         .                       }
         .                   }
         .           
       146 ( 0.00%)          vec![ty]
        14 ( 0.00%)      }
         .           
         .               let mut non_local_spans = vec![];
       542 ( 0.00%)      for (i, input_ty) in trait_ref
         .                   .substs
         .                   .types()
       489 ( 0.00%)          .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))
         .                   .enumerate()
         .               {
         .                   debug!("orphan_check_trait_ref: check ty `{:?}`", input_ty);
       250 ( 0.00%)          let non_local_tys = contained_non_local_types(tcx, input_ty, in_crate);
        50 ( 0.00%)          if non_local_tys.is_empty() {
         .                       debug!("orphan_check_trait_ref: ty_is_local `{:?}`", input_ty);
        39 ( 0.00%)              return Ok(());
        22 ( 0.00%)          } else if let ty::Param(_) = input_ty.kind() {
         .                       debug!("orphan_check_trait_ref: uncovered ty: `{:?}`", input_ty);
         .                       let local_type = trait_ref
         .                           .substs
         .                           .types()
         .                           .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))
         .                           .find(|ty| ty_is_local_constructor(ty, in_crate));
         .           
         .                       debug!("orphan_check_trait_ref: uncovered ty local_type: `{:?}`", local_type);
         .           
         .                       return Err(OrphanCheckErr::UncoveredTy(input_ty, local_type));
         .                   }
         .           
        11 ( 0.00%)          non_local_spans.extend(non_local_tys.into_iter().map(|input_ty| (input_ty, i == 0)));
         .               }
         .               // If we exit above loop, never found a local type.
         .               debug!("orphan_check_trait_ref: no local type");
        14 ( 0.00%)      Err(OrphanCheckErr::NonLocalInputType(non_local_spans))
       328 ( 0.00%)  }
         .           
         .           /// Returns a list of relevant non-local types for `ty`.
         .           ///
         .           /// This is just `ty` itself unless `ty` is `#[fundamental]`,
         .           /// in which case we recursively look into this type.
         .           ///
         .           /// If `ty` is local itself, this method returns an empty `Vec`.
         .           ///
         .           /// # Examples
         .           ///
         .           /// - `u32` is not local, so this returns `[u32]`.
         .           /// - for `Foo<u32>`, where `Foo` is a local type, this returns `[]`.
         .           /// - `&mut u32` returns `[u32]`, as `&mut` is a fundamental type, similar to `Box`.
         .           /// - `Box<Foo<u32>>` returns `[]`, as `Box` is a fundamental type and `Foo` is local.
       522 ( 0.00%)  fn contained_non_local_types<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               ty: Ty<'tcx>,
         .               in_crate: InCrate,
         .           ) -> Vec<Ty<'tcx>> {
       407 ( 0.00%)      if ty_is_local_constructor(ty, in_crate) {
         .                   Vec::new()
         .               } else {
       163 ( 0.00%)          match fundamental_ty_inner_tys(tcx, ty) {
         .                       Some(inner_tys) => {
        24 ( 0.00%)                  inner_tys.flat_map(|ty| contained_non_local_types(tcx, ty, in_crate)).collect()
         .                       }
        42 ( 0.00%)              None => vec![ty],
         .                   }
         .               }
       290 ( 0.00%)  }
         .           
         .           /// For `#[fundamental]` ADTs and `&T` / `&mut T`, returns `Some` with the
         .           /// type parameters of the ADT, or `T`, respectively. For non-fundamental
         .           /// types, returns `None`.
       344 ( 0.00%)  fn fundamental_ty_inner_tys<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               ty: Ty<'tcx>,
         .           ) -> Option<impl Iterator<Item = Ty<'tcx>>> {
       187 ( 0.00%)      let (first_ty, rest_tys) = match *ty.kind() {
         8 ( 0.00%)          ty::Ref(_, ty, _) => (ty, ty::subst::InternalSubsts::empty().types()),
        28 ( 0.00%)          ty::Adt(def, substs) if def.is_fundamental() => {
         .                       let mut types = substs.types();
         .           
         .                       // FIXME(eddyb) actually validate `#[fundamental]` up-front.
         .                       match types.next() {
         .                           None => {
         .                               tcx.sess.span_err(
         .                                   tcx.def_span(def.did),
         .                                   "`#[fundamental]` requires at least one type parameter",
-- line 704 ----------------------------------------
-- line 708 ----------------------------------------
         .                           }
         .           
         .                           Some(first_ty) => (first_ty, types),
         .                       }
         .                   }
         .                   _ => return None,
         .               };
         .           
        40 ( 0.00%)      Some(iter::once(first_ty).chain(rest_tys))
       344 ( 0.00%)  }
         .           
         .           fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {
         .               match in_crate {
         .                   // The type is local to *this* crate - it will not be
         .                   // local in any other crate.
         .                   InCrate::Remote => false,
         .                   InCrate::Local => def_id.is_local(),
         .               }
         .           }
         .           
       232 ( 0.00%)  fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {
         .               debug!("ty_is_local_constructor({:?})", ty);
         .           
       548 ( 0.00%)      match *ty.kind() {
         .                   ty::Bool
         .                   | ty::Char
         .                   | ty::Int(..)
         .                   | ty::Uint(..)
         .                   | ty::Float(..)
         .                   | ty::Str
         .                   | ty::FnDef(..)
         .                   | ty::FnPtr(_)
-- line 739 ----------------------------------------
-- line 748 ----------------------------------------
         .           
         .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {
         .                       InCrate::Local => false,
         .                       // The inference variable might be unified with a local
         .                       // type in that remote crate.
         .                       InCrate::Remote => true,
         .                   },
         .           
       147 ( 0.00%)          ty::Adt(def, _) => def_id_is_local(def.did, in_crate),
         .                   ty::Foreign(did) => def_id_is_local(did, in_crate),
         .                   ty::Opaque(..) => {
         .                       // This merits some explanation.
         .                       // Normally, opaque types are not involed when performing
         .                       // coherence checking, since it is illegal to directly
         .                       // implement a trait on an opaque type. However, we might
         .                       // end up looking at an opaque type during coherence checking
         .                       // if an opaque type gets used within another type (e.g. as
-- line 764 ----------------------------------------
-- line 798 ----------------------------------------
         .                   }
         .           
         .                   ty::Error(_) => true,
         .           
         .                   ty::Generator(..) | ty::GeneratorWitness(..) => {
         .                       bug!("ty_is_local invoked on unexpected type: {:?}", ty)
         .                   }
         .               }
       174 ( 0.00%)  }

 3,667,895 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/coherence.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     4,394 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     2,197 ( 0.00%)              from_str_radix(src, radix)
     6,591 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   784,110 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,014,904 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   780,707 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
14,055,833 ( 0.14%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,037,424 ( 0.01%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
    60,011 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   258,397 ( 0.00%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     8,112 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 8,009,472 ( 0.08%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 5,798,754 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
17,313,001 ( 0.17%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 3,303,387 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       528 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   169,890 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,056 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,785,804 ( 0.03%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       174 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
     5,368 ( 0.00%)              if self <= 1 { return 0; }
         .           
    33,376 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   100,008 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    33,336 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    61,306 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   190,210 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       400 ( 0.00%)      fn clone(&self) -> Self {
     9,986 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     2,178 ( 0.00%)              table: self.table.clone(),
         .                   }
       450 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   149,035 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   241,638 ( 0.00%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 3,442,659 ( 0.03%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
   258,891 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
        61 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    31,750 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
    86,850 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
        92 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
         5 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
       110 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
       115 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   497,311 ( 0.00%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
   698,095 ( 0.01%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   274,534 ( 0.00%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
   381,792 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       243 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       729 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
       486 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
       243 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 3,796,826 ( 0.04%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
       216 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        14 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 2,115,448 ( 0.02%)              self.table
 1,766,030 ( 0.02%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   215,931 ( 0.00%)              None
         .                   }
 3,606,478 ( 0.04%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    51,202 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,464,363 ( 0.01%)          match self.remove_entry(k) {
    22,594 ( 0.00%)              Some((_, v)) => Some(v),
    49,599 ( 0.00%)              None => None,
         .                   }
   123,516 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   369,237 ( 0.00%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 1,117,534 ( 0.01%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 2,692,363 ( 0.03%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
 2,960,110 ( 0.03%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
   345,438 ( 0.00%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 1,744,107 ( 0.02%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
   160,286 ( 0.00%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
12,632,297 ( 0.13%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
22,448,700 ( 0.22%)          self.from_hash(hash, equivalent(k))
24,838,120 ( 0.25%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
16,565,065 ( 0.17%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
   269,799 ( 0.00%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,998 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   162,669 ( 0.00%)          IntoIter {
    84,460 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    17,994 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   147,010 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
       350 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     6,342 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
        64 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       128 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
         6 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   118,268 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   101,788 ( 0.00%)          let iter = iter.into_iter();
    28,294 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
    13,215 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
    83,294 ( 0.00%)              self.insert(k, v);
         .                   });
    88,150 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 1,338,204 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
         .           
         .           /// See `simplify_type`
         .           ///
         .           /// Note that we keep this type generic over the type of identifier it uses
         .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
         .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
         .           /// the non-stable but fast to construct DefId-version is the better choice.
13,572,596 ( 0.14%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
         .           pub enum SimplifiedTypeGen<D>
         .           where
         .               D: Copy + Debug + Eq,
         .           {
         .               BoolSimplifiedType,
         .               CharSimplifiedType,
         .               IntSimplifiedType(ty::IntTy),
         .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
         .           ///
         .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
         .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
         .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
         .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
         .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
         .           ///   this way so I am not going to change this until we actually find an issue as I am really
         .           ///   interesting in getting an actual test for this.
21,262,392 ( 0.21%)  pub fn simplify_type(
         .               tcx: TyCtxt<'_>,
         .               ty: Ty<'_>,
         .               can_simplify_params: SimplifyParams,
         .               strip_references: StripReferences,
         .           ) -> Option<SimplifiedType> {
31,893,588 ( 0.32%)      match *ty.kind() {
         .                   ty::Bool => Some(BoolSimplifiedType),
         .                   ty::Char => Some(CharSimplifiedType),
     5,564 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
    19,984 ( 0.00%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
       220 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
52,904,400 ( 0.53%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
         .                   ty::Str => Some(StrSimplifiedType),
         .                   ty::Array(..) => Some(ArraySimplifiedType),
         .                   ty::Slice(..) => Some(SliceSimplifiedType),
     1,544 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
        12 ( 0.00%)          ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
        15 ( 0.00%)              Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
        27 ( 0.00%)                  Some(TraitSimplifiedType(principal_def_id))
         .                       }
         .                       _ => Some(MarkerTraitObjectSimplifiedType),
         .                   },
    35,416 ( 0.00%)          ty::Ref(_, ty, mutbl) => {
    17,708 ( 0.00%)              if strip_references == StripReferences::Yes {
         .                           // For diagnostics, when recommending similar impls we want to
         .                           // recommend impls even when there is a reference mismatch,
         .                           // so we treat &T and T equivalently in that case.
         .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
         .                       } else {
         .                           Some(RefSimplifiedType(mutbl))
         .                       }
         .                   }
       287 ( 0.00%)          ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
         .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
         .                   ty::GeneratorWitness(ref tys) => {
         .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
         .                   }
         .                   ty::Never => Some(NeverSimplifiedType),
       642 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
     2,736 ( 0.00%)          ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
         .                   ty::Projection(_) | ty::Param(_) => {
     1,377 ( 0.00%)              if can_simplify_params == SimplifyParams::Yes {
         .                           // In normalized types, projections don't unify with
         .                           // anything. when lazy normalization happens, this
         .                           // will change. It would still be nice to have a way
         .                           // to deal with known-not-to-unify-with-anything
         .                           // projections (e.g., the likes of <__S as Encoder>::Error).
         .                           Some(ParameterSimplifiedType)
         .                       } else {
         .                           None
         .                       }
         .                   }
         .                   ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
         .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
         .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
         .               }
47,840,382 ( 0.48%)  }
         .           
         .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
         .               pub fn def(self) -> Option<D> {
         .                   match self {
         .                       AdtSimplifiedType(d)
         .                       | ForeignSimplifiedType(d)
         .                       | TraitSimplifiedType(d)
         .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

41,097,024 ( 0.41%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs
--------------------------------------------------------------------------------
Ir                  

-- line 20 ----------------------------------------
         .               // the value lives here, at offset 0, and that allocation definitely is an `AllocKind::Memory`
         .               // (so you can use `AllocMap::unwrap_memory`).
         .               pub alloc_id: AllocId,
         .               pub ty: Ty<'tcx>,
         .           }
         .           
         .           /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for
         .           /// array length computations, enum discriminants and the pattern matching logic.
13,484,877 ( 0.13%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]
         .           #[derive(HashStable)]
         .           pub enum ConstValue<'tcx> {
         .               /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.
         .               ///
         .               /// Not using the enum `Value` to encode that this must not be `Uninit`.
         .               Scalar(Scalar),
         .           
         .               /// Used only for `&[u8]` and `&str`
       140 ( 0.00%)      Slice { data: &'tcx Allocation, start: usize, end: usize },
         .           
         .               /// A value not represented/representable by `Scalar` or `Slice`
         .               ByRef {
         .                   /// The backing memory of the value, may contain more memory than needed for just the value
         .                   /// in order to share `Allocation`s between values
         .                   alloc: &'tcx Allocation,
         .                   /// Offset into `alloc`
         .                   offset: Size,
-- line 45 ----------------------------------------
-- line 62 ----------------------------------------
         .                       }
         .                   })
         .               }
         .           }
         .           
         .           impl<'tcx> ConstValue<'tcx> {
         .               #[inline]
         .               pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {
     1,596 ( 0.00%)          match *self {
         .                       ConstValue::ByRef { .. } | ConstValue::Slice { .. } => None,
       772 ( 0.00%)              ConstValue::Scalar(val) => Some(val),
         .                   }
         .               }
         .           
         .               pub fn try_to_scalar_int(&self) -> Option<ScalarInt> {
         .                   Some(self.try_to_scalar()?.assert_int())
         .               }
         .           
         .               pub fn try_to_bits(&self, size: Size) -> Option<u128> {
         .                   self.try_to_scalar_int()?.to_bits(size).ok()
         .               }
         .           
         .               pub fn try_to_bool(&self) -> Option<bool> {
         .                   self.try_to_scalar_int()?.try_into().ok()
         .               }
         .           
     1,544 ( 0.00%)      pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {
    11,580 ( 0.00%)          self.try_to_scalar_int()?.try_to_machine_usize(tcx).ok()
     2,316 ( 0.00%)      }
         .           
         .               pub fn try_to_bits_for_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ParamEnv<'tcx>,
         .                   ty: Ty<'tcx>,
         .               ) -> Option<u128> {
         .                   let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;
-- line 98 ----------------------------------------
-- line 114 ----------------------------------------
         .           
         .           /// A `Scalar` represents an immediate, primitive value existing outside of a
         .           /// `memory::Allocation`. It is in many ways like a small chunk of an `Allocation`, up to 16 bytes in
         .           /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes
         .           /// of a simple value or a pointer into another `Allocation`
         .           ///
         .           /// These variants would be private if there was a convenient way to achieve that in Rust.
         .           /// Do *not* match on a `Scalar`! Use the various `to_*` methods instead.
13,304,532 ( 0.13%)  #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]
         .           #[derive(HashStable)]
         .           pub enum Scalar<Tag = AllocId> {
         .               /// The raw bytes of a simple value.
 7,907,268 ( 0.08%)      Int(ScalarInt),
         .           
         .               /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of
         .               /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the
         .               /// relocation and its associated offset together as a `Pointer` here.
         .               ///
         .               /// We also store the size of the pointer, such that a `Scalar` always knows how big it is.
         .               /// The size is always the pointer size of the current target, but this is not information
         .               /// that we always have readily available.
-- line 134 ----------------------------------------
-- line 214 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {
         .                   ScalarInt::try_from_uint(i, size).map(Scalar::Int)
         .               }
         .           
         .               #[inline]
         .               pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {
     7,600 ( 0.00%)          let i = i.into();
         .                   Self::try_from_uint(i, size)
         .                       .unwrap_or_else(|| bug!("Unsigned value {:#x} does not fit in {} bits", i, size.bits()))
         .               }
         .           
         .               #[inline]
         .               pub fn from_u8(i: u8) -> Self {
         .                   Scalar::Int(i.into())
         .               }
-- line 230 ----------------------------------------
-- line 288 ----------------------------------------
         .           
         .               /// This is almost certainly not the method you want!  You should dispatch on the type
         .               /// and use `to_{u8,u16,...}`/`scalar_to_ptr` to perform ptr-to-int / int-to-ptr casts as needed.
         .               ///
         .               /// This method only exists for the benefit of low-level operations that truly need to treat the
         .               /// scalar in whatever form it is.
         .               #[inline]
         .               pub fn to_bits_or_ptr_internal(self, target_size: Size) -> Result<u128, Pointer<Tag>> {
        96 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
        64 ( 0.00%)          match self {
       160 ( 0.00%)              Scalar::Int(int) => Ok(int.assert_bits(target_size)),
         .                       Scalar::Ptr(ptr, sz) => {
         .                           assert_eq!(target_size.bytes(), u64::from(sz));
         .                           Err(ptr)
         .                       }
         .                   }
         .               }
         .           }
         .           
-- line 306 ----------------------------------------
-- line 308 ----------------------------------------
         .               /// Fundamental scalar-to-int (cast) operation. Many convenience wrappers exist below, that you
         .               /// likely want to use instead.
         .               ///
         .               /// Will perform ptr-to-int casts if needed and possible.
         .               /// If that fails, we know the offset is relative, so we return an "erased" Scalar
         .               /// (which is useful for error messages but not much else).
         .               #[inline]
         .               pub fn try_to_int(self) -> Result<ScalarInt, Scalar<AllocId>> {
     6,850 ( 0.00%)          match self {
         .                       Scalar::Int(int) => Ok(int),
         .                       Scalar::Ptr(ptr, sz) => {
         .                           if Tag::OFFSET_IS_ADDR {
         .                               Ok(ScalarInt::try_from_uint(ptr.offset.bytes(), Size::from_bytes(sz)).unwrap())
         .                           } else {
         .                               // We know `offset` is relative, since `OFFSET_IS_ADDR == false`.
         .                               let (tag, offset) = ptr.into_parts();
         .                               Err(Scalar::Ptr(Pointer::new(tag.get_alloc_id(), offset), sz))
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               #[inline(always)]
         .               pub fn assert_int(self) -> ScalarInt {
     1,557 ( 0.00%)          self.try_to_int().unwrap()
         .               }
         .           
         .               /// This throws UB (instead of ICEing) on a size mismatch since size mismatches can arise in
         .               /// Miri when someone declares a function that we shim (such as `malloc`) with a wrong type.
         .               #[inline]
         .               pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {
     3,168 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
    24,288 ( 0.00%)          self.try_to_int().map_err(|_| err_unsup!(ReadPointerAsBytes))?.to_bits(target_size).map_err(
         .                       |size| {
         .                           err_ub!(ScalarSizeMismatch {
         .                               target_size: target_size.bytes(),
         .                               data_size: size.bytes(),
         .                           })
         .                           .into()
         .                       },
         .                   )
         .               }
         .           
         .               #[inline(always)]
         .               pub fn assert_bits(self, target_size: Size) -> u128 {
         .                   self.to_bits(target_size).unwrap()
         .               }
         .           
       528 ( 0.00%)      pub fn to_bool(self) -> InterpResult<'tcx, bool> {
     3,696 ( 0.00%)          let val = self.to_u8()?;
     1,056 ( 0.00%)          match val {
         .                       0 => Ok(false),
         .                       1 => Ok(true),
         .                       _ => throw_ub!(InvalidBool(val)),
         .                   }
     5,280 ( 0.00%)      }
         .           
         .               pub fn to_char(self) -> InterpResult<'tcx, char> {
         .                   let val = self.to_u32()?;
         .                   match std::char::from_u32(val) {
         .                       Some(c) => Ok(c),
         .                       None => throw_ub!(InvalidChar(val)),
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {
         .                   let sz = Size::from_bits(bits);
     2,640 ( 0.00%)          self.to_bits(sz)
         .               }
         .           
         .               /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.
     2,112 ( 0.00%)      pub fn to_u8(self) -> InterpResult<'static, u8> {
         .                   self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())
     2,640 ( 0.00%)      }
         .           
         .               /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.
         .               pub fn to_u16(self) -> InterpResult<'static, u16> {
         .                   self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())
         .               }
         .           
         .               /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.
         .               pub fn to_u32(self) -> InterpResult<'static, u32> {
-- line 390 ----------------------------------------
-- line 502 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn from_maybe_pointer(ptr: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
         .                   ScalarMaybeUninit::Scalar(Scalar::from_maybe_pointer(ptr, cx))
         .               }
         .           
         .               #[inline]
         .               pub fn check_init(self) -> InterpResult<'static, Scalar<Tag>> {
     3,232 ( 0.00%)          match self {
     2,272 ( 0.00%)              ScalarMaybeUninit::Scalar(scalar) => Ok(scalar),
         .                       ScalarMaybeUninit::Uninit => throw_ub!(InvalidUninitBytes(None)),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, Tag: Provenance> ScalarMaybeUninit<Tag> {
         .               #[inline(always)]
         .               pub fn to_bool(self) -> InterpResult<'tcx, bool> {
-- line 519 ----------------------------------------

    35,797 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/psm-0.1.16/src/arch/x86_64.s
--------------------------------------------------------------------------------
Ir                 

-- line 34 ----------------------------------------
        .           
        .           
        .           GLOBL(rust_psm_stack_pointer)
        .           .p2align 4
        .           TYPE(rust_psm_stack_pointer)
        .           FUNCTION(rust_psm_stack_pointer):
        .           /* extern "sysv64" fn() -> *mut u8 (%rax) */
        .           .cfi_startproc
5,603,422 ( 0.06%)      leaq 8(%rsp), %rax
5,603,422 ( 0.06%)      retq
        .           .rust_psm_stack_pointer_end:
        .           SIZE(rust_psm_stack_pointer,.rust_psm_stack_pointer_end)
        .           .cfi_endproc
        .           
        .           
        .           GLOBL(rust_psm_replace_stack)
        .           .p2align 4
        .           TYPE(rust_psm_replace_stack)
-- line 51 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   464,773 ( 0.00%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
     6,364 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   191,596 ( 0.00%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
76,262,462 ( 0.76%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           mod kind;
         .           mod valtree;
         .           
         .           pub use int::*;
         .           pub use kind::*;
         .           pub use valtree::*;
         .           
         .           /// Typed constant value.
   138,859 ( 0.00%)  #[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct Const<'tcx> {
 2,646,492 ( 0.03%)      pub ty: Ty<'tcx>,
         .           
 2,646,492 ( 0.03%)      pub val: ConstKind<'tcx>,
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(Const<'_>, 48);
         .           
         .           impl<'tcx> Const<'tcx> {
         .               /// Literals and const generic parameters are eagerly converted to a constant, everything else
         .               /// becomes `Unevaluated`.
         .               pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {
     3,752 ( 0.00%)          Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))
         .               }
         .           
    33,048 ( 0.00%)      #[instrument(skip(tcx), level = "debug")]
    33,048 ( 0.00%)      pub fn from_opt_const_arg_anon_const(
         .                   tcx: TyCtxt<'tcx>,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx Self {
         .                   debug!("Const::from_anon_const(def={:?})", def);
         .           
    16,524 ( 0.00%)          let body_id = match tcx.hir().get_by_def_id(def.did) {
     8,262 ( 0.00%)              hir::Node::AnonConst(ac) => ac.body,
         .                       _ => span_bug!(
         .                           tcx.def_span(def.did.to_def_id()),
         .                           "from_anon_const can only process anonymous constants"
         .                       ),
         .                   };
         .           
    24,786 ( 0.00%)          let expr = &tcx.hir().body(body_id).value;
         .                   debug!(?expr);
         .           
         .                   let ty = tcx.type_of(def.def_id_for_type_of());
         .           
    24,786 ( 0.00%)          match Self::try_eval_lit_or_param(tcx, ty, expr) {
         .                       Some(v) => v,
         .                       None => tcx.mk_const(ty::Const {
         .                           val: ty::ConstKind::Unevaluated(ty::Unevaluated {
         .                               def: def.to_global(),
         .                               substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),
         .                               promoted: None,
         .                           }),
         .                           ty,
         .                       }),
         .                   }
         .               }
         .           
    74,358 ( 0.00%)      #[instrument(skip(tcx), level = "debug")]
         .               fn try_eval_lit_or_param(
         .                   tcx: TyCtxt<'tcx>,
         .                   ty: Ty<'tcx>,
         .                   expr: &'tcx hir::Expr<'tcx>,
         .               ) -> Option<&'tcx Self> {
         .                   // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments
         .                   // currently have to be wrapped in curly brackets, so it's necessary to special-case.
    12,393 ( 0.00%)          let expr = match &expr.kind {
       184 ( 0.00%)              hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {
         .                           block.expr.as_ref().unwrap()
         .                       }
         .                       _ => expr,
         .                   };
         .           
     8,622 ( 0.00%)          let lit_input = match expr.kind {
     7,994 ( 0.00%)              hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),
         .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {
         .                           hir::ExprKind::Lit(ref lit) => {
         .                               Some(LitToConstInput { lit: &lit.node, ty, neg: true })
         .                           }
         .                           _ => None,
         .                       },
         .                       _ => None,
         .                   };
         .           
         .                   if let Some(lit_input) = lit_input {
         .                       // If an error occurred, ignore that it's a literal and leave reporting the error up to
         .                       // mir.
    13,015 ( 0.00%)              match tcx.at(expr.span).lit_to_const(lit_input) {
         .                           Ok(c) => return Some(c),
         .                           Err(e) => {
         .                               tcx.sess.delay_span_bug(
         .                                   expr.span,
         .                                   &format!("Const::from_anon_const: couldn't lit_to_const {:?}", e),
         .                               );
         .                           }
         .                       }
         .                   }
         .           
         .                   use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};
     1,206 ( 0.00%)          match expr.kind {
       536 ( 0.00%)              ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {
         .                           // Find the name and index of the const parameter by indexing the generics of
         .                           // the parent item and construct a `ParamConst`.
         .                           let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
       670 ( 0.00%)                  let item_id = tcx.hir().get_parent_node(hir_id);
       536 ( 0.00%)                  let item_def_id = tcx.hir().local_def_id(item_id);
         .                           let generics = tcx.generics_of(item_def_id.to_def_id());
       268 ( 0.00%)                  let index = generics.param_def_id_to_index[&def_id];
       670 ( 0.00%)                  let name = tcx.hir().name(hir_id);
     1,072 ( 0.00%)                  Some(tcx.mk_const(ty::Const {
         .                               val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),
         .                               ty,
         .                           }))
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 131 ----------------------------------------
-- line 167 ----------------------------------------
         .                   };
         .                   debug_assert!(!ret.has_free_regions());
         .                   ret
         .               }
         .           
         .               /// Interns the given value as a constant.
         .               #[inline]
         .               pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {
    53,677 ( 0.00%)          tcx.mk_const(Self { val: ConstKind::Value(val), ty })
         .               }
         .           
         .               #[inline]
         .               /// Interns the given scalar as a constant.
         .               pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {
         .                   Self::from_value(tcx, ConstValue::Scalar(val), ty)
         .               }
         .           
         .               #[inline]
         .               /// Creates a constant with the given integer value and interns it.
       231 ( 0.00%)      pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> &'tcx Self {
     3,208 ( 0.00%)          let size = tcx
         .                       .layout_of(ty)
         .                       .unwrap_or_else(|e| panic!("could not compute layout for {:?}: {:?}", ty, e))
         .                       .size;
         .                   Self::from_scalar(tcx, Scalar::from_uint(bits, size), ty.value)
       168 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Creates an interned zst constant.
         .               pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {
         .                   Self::from_scalar(tcx, Scalar::ZST, ty)
         .               }
         .           
         .               #[inline]
         .               /// Creates an interned bool constant.
    24,704 ( 0.00%)      pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> &'tcx Self {
    18,528 ( 0.00%)          Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))
    24,704 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Creates an interned usize constant.
         .               pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> &'tcx Self {
       495 ( 0.00%)          Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))
         .               }
         .           
         .               #[inline]
         .               /// Attempts to evaluate the given constant to bits. Can fail to evaluate in the presence of
         .               /// generics (or erroneous code) or if the value can't be represented as bits (e.g. because it
         .               /// contains const generic parameters or pointers).
         .               pub fn try_eval_bits(
         .                   &self,
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {
         .                   self.val.eval(tcx, param_env).try_to_bool()
         .               }
         .           
         .               #[inline]
     5,608 ( 0.00%)      pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {
     2,805 ( 0.00%)          self.val.eval(tcx, param_env).try_to_machine_usize(tcx)
     4,208 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the
         .               /// unevaluated constant.
         .               pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {
81,692,538 ( 0.81%)          if let Some(val) = self.val.try_eval(tcx, param_env) {
         .                       match val {
       231 ( 0.00%)                  Ok(val) => Const::from_value(tcx, val, self.ty),
         .                           Err(ErrorReported) => tcx.const_error(self.ty),
         .                       }
         .                   } else {
         .                       self
         .                   }
         .               }
         .           
         .               #[inline]
-- line 252 ----------------------------------------

23,737,195 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs
--------------------------------------------------------------------------------
Ir                  

-- line 117 ----------------------------------------
         .           ///
         .           /// This is a packed struct in order to allow this type to be optimally embedded in enums
         .           /// (like Scalar).
         .           #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]
         .           #[repr(packed)]
         .           pub struct ScalarInt {
         .               /// The first `size` bytes of `data` are the value.
         .               /// Do not try to read less or more bytes than that. The remaining bytes must be 0.
18,433,477 ( 0.18%)      data: u128,
 5,283,039 ( 0.05%)      size: u8,
         .           }
         .           
         .           // Cannot derive these, as the derives take references to the fields, and we
         .           // can't take references to fields of packed structs.
         .           impl<CTX> crate::ty::HashStable<CTX> for ScalarInt {
         .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut crate::ty::StableHasher) {
         .                   // Using a block `{self.data}` here to force a copy instead of using `self.data`
         .                   // directly, because `hash_stable` takes `&self` and would thus borrow `self.data`.
-- line 134 ----------------------------------------
-- line 135 ----------------------------------------
         .                   // Since `Self` is a packed struct, that would create a possibly unaligned reference,
         .                   // which is UB.
         .                   { self.data }.hash_stable(hcx, hasher);
         .                   self.size.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           impl<S: Encoder> Encodable<S> for ScalarInt {
    20,320 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_u128(self.data)?;
     4,064 ( 0.00%)          s.emit_u8(self.size)
    24,384 ( 0.00%)      }
         .           }
         .           
         .           impl<D: Decoder> Decodable<D> for ScalarInt {
     4,640 ( 0.00%)      fn decode(d: &mut D) -> ScalarInt {
     3,480 ( 0.00%)          ScalarInt { data: d.read_u128(), size: d.read_u8() }
     5,800 ( 0.00%)      }
         .           }
         .           
         .           impl ScalarInt {
         .               pub const TRUE: ScalarInt = ScalarInt { data: 1_u128, size: 1 };
         .           
         .               pub const FALSE: ScalarInt = ScalarInt { data: 0_u128, size: 1 };
         .           
         .               pub const ZST: ScalarInt = ScalarInt { data: 0_u128, size: 0 };
-- line 160 ----------------------------------------
-- line 191 ----------------------------------------
         .               #[inline]
         .               pub fn is_null(self) -> bool {
         .                   self.data == 0
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {
         .                   let data = i.into();
     2,037 ( 0.00%)          if size.truncate(data) == data {
         .                       Some(Self { data, size: size.bytes() as u8 })
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {
-- line 207 ----------------------------------------
-- line 219 ----------------------------------------
         .               pub fn assert_bits(self, target_size: Size) -> u128 {
         .                   self.to_bits(target_size).unwrap_or_else(|size| {
         .                       bug!("expected int of size {}, but got size {}", target_size.bytes(), size.bytes())
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn to_bits(self, target_size: Size) -> Result<u128, Size> {
     2,355 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
     6,861 ( 0.00%)          if target_size.bytes() == u64::from(self.size) {
         .                       self.check_data();
         .                       Ok(self.data)
         .                   } else {
         .                       Err(self.size())
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_machine_usize<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {
       772 ( 0.00%)          Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)
         .               }
         .           }
         .           
         .           macro_rules! from {
         .               ($($ty:ty),*) => {
         .                   $(
         .                       impl From<$ty> for ScalarInt {
         .                           #[inline]
         .                           fn from(u: $ty) -> Self {
         2 ( 0.00%)                      Self {
         .                                   data: u128::from(u),
         .                                   size: std::mem::size_of::<$ty>() as u8,
         .                               }
         .                           }
         .                       }
         .                   )*
         .               }
         .           }
-- line 256 ----------------------------------------

     3,696 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/stack.rs
--------------------------------------------------------------------------------
Ir                  

-- line 7 ----------------------------------------
         .           // on. This flag has performance relevant characteristics. Don't set it too high.
         .           const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB
         .           
         .           /// Grows the stack on demand to prevent stack overflow. Call this in strategic locations
         .           /// to "break up" recursive calls. E.g. almost any call to `visit_expr` or equivalent can benefit
         .           /// from this.
         .           ///
         .           /// Should not be sprinkled around carelessly, as it causes a little bit of overhead.
15,113,755 ( 0.15%)  pub fn ensure_sufficient_stack<R>(f: impl FnOnce() -> R) -> R {
16,043,829 ( 0.16%)      stacker::maybe_grow(RED_ZONE, STACK_PER_RECURSION, f)
17,232,761 ( 0.17%)  }

 1,063,506 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/stack.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
 1,893,124 ( 0.02%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,011 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               pub const fn is_some(&self) -> bool {
16,891,332 ( 0.17%)          matches!(*self, Some(_))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Option<&T> {
26,089,435 ( 0.26%)          match *self {
         .                       Some(ref x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn as_mut(&mut self) -> Option<&mut T> {
16,540,839 ( 0.16%)          match *self {
         .                       Some(ref mut x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
11,447,699 ( 0.11%)          match self {
   621,742 ( 0.01%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn unwrap(self) -> T {
26,364,291 ( 0.26%)          match self {
21,626,318 ( 0.22%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 4,940,379 ( 0.05%)          match self {
         .                       Some(x) => x,
    17,452 ( 0.00%)              None => default,
         .                   }
    12,845 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        35 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 1,241,126 ( 0.01%)          match self {
    85,803 ( 0.00%)              Some(x) => x,
     8,350 ( 0.00%)              None => f(),
         .                   }
        73 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
     9,295 ( 0.00%)          match self {
     4,843 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    15,974 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
26,319,225 ( 0.26%)          match self {
70,951,597 ( 0.71%)              Some(x) => Some(f(x)),
    75,450 ( 0.00%)              None => None,
         .                   }
   179,733 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
   582,236 ( 0.01%)          match self {
    34,790 ( 0.00%)              Some(t) => f(t),
     6,556 ( 0.00%)              None => default,
         .                   }
         .               }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
    33,492 ( 0.00%)          match self {
     9,296 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
   382,476 ( 0.00%)          match self {
     5,276 ( 0.00%)              Some(v) => Ok(v),
     2,638 ( 0.00%)              None => Err(err),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
    44,504 ( 0.00%)          match self {
    36,703 ( 0.00%)              Some(v) => Ok(v),
    12,174 ( 0.00%)              None => Err(err()),
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
    19,412 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       160 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   176,031 ( 0.00%)          match self {
    34,674 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
    25,247 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
     5,650 ( 0.00%)          if let Some(x) = self {
     2,608 ( 0.00%)              if predicate(&x) {
         .                           return Some(x);
         .                       }
         .                   }
         .                   None
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
-- line 1274 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
     6,961 ( 0.00%)          match self {
       126 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
    24,889 ( 0.00%)          match self {
     4,441 ( 0.00%)              Some(x) => Some(x),
         .                       None => f(),
         .                   }
         .               }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
    40,692 ( 0.00%)          if let None = *self {
    94,948 ( 0.00%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
   187,033 ( 0.00%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
         .                       mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
-- line 1515 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
     1,224 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
    33,709 ( 0.00%)          match self {
   265,314 ( 0.00%)              Some(&v) => Some(v),
       968 ( 0.00%)              None => None,
         .                   }
         9 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
     5,884 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   164,291 ( 0.00%)          match self {
 1,855,040 ( 0.02%)              Some(t) => Some(t.clone()),
    13,842 ( 0.00%)              None => None,
         .                   }
    17,356 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
         .               fn clone(&self) -> Self {
47,592,719 ( 0.47%)          match self {
    20,737 ( 0.00%)              Some(x) => Some(x.clone()),
       279 ( 0.00%)              None => None,
         .                   }
 7,316,500 ( 0.07%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    13,363 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
         .                       None => (0, Some(0)),
         .                   }
         .               }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.inner.next()
         .               }
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         7 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
     1,530 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 7,012,225 ( 0.07%)          match self {
     7,387 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
         .                       None => ControlFlow::Break(None),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
         .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   620,127 ( 0.01%)              None => None,
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
-- line 2274 ----------------------------------------

13,899,533 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs
--------------------------------------------------------------------------------
Ir                  

-- line 43 ----------------------------------------
         .               pub(super) key_hash: u64,
         .               shard: usize,
         .           }
         .           
         .           // We compute the key's hash once and then use it for both the
         .           // shard lookup and the hashmap lookup. This relies on the fact
         .           // that both of them use `FxHasher`.
         .           fn hash_for_shard<K: Hash>(key: &K) -> u64 {
    27,886 ( 0.00%)      let mut hasher = FxHasher::default();
    12,352 ( 0.00%)      key.hash(&mut hasher);
         .               hasher.finish()
         .           }
         .           
         .           impl<C: QueryCache> QueryCacheStore<C> {
     7,844 ( 0.00%)      pub(super) fn get_lookup<'tcx>(
         .                   &'tcx self,
         .                   key: &C::Key,
         .               ) -> (QueryLookup, LockGuard<'tcx, C::Sharded>) {
         .                   let key_hash = hash_for_shard(key);
         .                   let shard = get_shard_index_by_hash(key_hash);
         .                   let lock = self.shards.get_shard_by_index(shard).lock();
    30,652 ( 0.00%)          (QueryLookup { key_hash, shard }, lock)
    22,989 ( 0.00%)      }
         .           
         .               pub fn iter_results(&self, f: &mut dyn FnMut(&C::Key, &C::Value, DepNodeIndex)) {
         .                   self.cache.iter(&self.shards, f)
         .               }
         .           }
         .           
         .           struct QueryStateShard<D, K> {
         .               active: FxHashMap<K, QueryResult<D>>,
-- line 73 ----------------------------------------
-- line 190 ----------------------------------------
         .               ) -> TryGetJob<'b, CTX::DepKind, K>
         .               where
         .                   CTX: QueryContext,
         .               {
         .                   let shard = lookup.shard;
         .                   let mut state_lock = state.shards.get_shard_by_index(shard).lock();
         .                   let lock = &mut *state_lock;
         .           
   505,152 ( 0.01%)          match lock.active.entry(key) {
         .                       Entry::Vacant(entry) => {
         .                           // Generate an id unique within this shard.
   221,533 ( 0.00%)                  let id = lock.jobs.checked_add(1).unwrap();
   221,533 ( 0.00%)                  lock.jobs = id;
         .                           let id = QueryShardJobId(NonZeroU32::new(id).unwrap());
         .           
         .                           let job = tcx.current_query_job();
         .                           let job = QueryJob::new(id, span, job);
         .           
         .                           let key = entry.key().clone();
         .                           entry.insert(QueryResult::Started(job));
         .           
         .                           let global_id = QueryJobId::new(id, shard, dep_kind);
         .                           let owner = JobOwner { state, id: global_id, key };
    13,212 ( 0.00%)                  return TryGetJob::NotYetStarted(owner);
         .                       }
         .                       Entry::Occupied(mut entry) => {
         .                           match entry.get_mut() {
         .                               #[cfg(not(parallel_compiler))]
         .                               QueryResult::Started(job) => {
         .                                   let id = QueryJobId::new(job.id, shard, dep_kind);
         .           
         .                                   drop(state_lock);
-- line 221 ----------------------------------------
-- line 262 ----------------------------------------
         .                   cache: &QueryCacheStore<C>,
         .                   result: C::Value,
         .                   dep_node_index: DepNodeIndex,
         .               ) -> C::Stored
         .               where
         .                   C: QueryCache<Key = K>,
         .               {
         .                   // We can move out of `self` here because we `mem::forget` it below
   278,614 ( 0.00%)          let key = unsafe { ptr::read(&self.key) };
         .                   let state = self.state;
         .           
         .                   // Forget ourself so our destructor won't poison the query
         .                   mem::forget(self);
         .           
    14,094 ( 0.00%)          let (job, result) = {
         .                       let key_hash = hash_for_shard(&key);
         .                       let shard = get_shard_index_by_hash(key_hash);
         .                       let job = {
         .                           let mut lock = state.shards.get_shard_by_index(shard).lock();
         6 ( 0.00%)                  match lock.active.remove(&key).unwrap() {
         .                               QueryResult::Started(job) => job,
         .                               QueryResult::Poisoned => panic!(),
         .                           }
         .                       };
         .                       let result = {
         .                           let mut lock = cache.shards.get_shard_by_index(shard).lock();
   396,955 ( 0.00%)                  cache.cache.complete(&mut lock, key, result, dep_node_index)
         .                       };
       594 ( 0.00%)              (job, result)
         .                   };
         .           
         .                   job.signal_complete();
         .                   result
         .               }
         .           }
         .           
         .           impl<'tcx, D, K> Drop for JobOwner<'tcx, D, K>
-- line 298 ----------------------------------------
-- line 347 ----------------------------------------
         .               Cycle(CycleError),
         .           }
         .           
         .           /// Checks if the query is already computed and in the cache.
         .           /// It returns the shard index and a lock guard to the shard,
         .           /// which will be used if the query is not in the cache and we need
         .           /// to compute it.
         .           #[inline]
 8,962,565 ( 0.09%)  pub fn try_get_cached<'a, CTX, C, R, OnHit>(
         .               tcx: CTX,
         .               cache: &'a QueryCacheStore<C>,
         .               key: &C::Key,
         .               // `on_hit` can be called while holding a lock to the query cache
         .               on_hit: OnHit,
         .           ) -> Result<R, QueryLookup>
         .           where
         .               C: QueryCache,
         .               CTX: DepContext,
         .               OnHit: FnOnce(&C::Stored) -> R,
         .           {
         .               cache.cache.lookup(cache, &key, |value, index| {
12,257,244 ( 0.12%)          if unlikely!(tcx.profiler().enabled()) {
         .                       tcx.profiler().query_cache_hit(index.into());
         .                   }
         .                   tcx.dep_graph().read_index(index);
 3,124,879 ( 0.03%)          on_hit(value)
         .               })
10,179,416 ( 0.10%)  }
         .           
 1,912,933 ( 0.02%)  fn try_execute_query<CTX, C>(
         .               tcx: CTX,
         .               state: &QueryState<CTX::DepKind, C::Key>,
         .               cache: &QueryCacheStore<C>,
         .               span: Span,
         .               key: C::Key,
         .               lookup: QueryLookup,
         .               dep_node: Option<DepNode<CTX::DepKind>>,
         .               query: &QueryVtable<CTX, C::Key, C::Value>,
-- line 384 ----------------------------------------
-- line 391 ----------------------------------------
         .               match JobOwner::<'_, CTX::DepKind, C::Key>::try_start(
         .                   &tcx,
         .                   state,
         .                   span,
         .                   key.clone(),
         .                   lookup,
         .                   query.dep_kind,
         .               ) {
   954,665 ( 0.01%)          TryGetJob::NotYetStarted(job) => {
 2,579,349 ( 0.03%)              let (result, dep_node_index) = execute_job(tcx, key, dep_node, query, job.id);
   204,594 ( 0.00%)              let result = job.complete(cache, result, dep_node_index);
   270,191 ( 0.00%)              (result, Some(dep_node_index))
     2,252 ( 0.00%)          }
         .                   TryGetJob::Cycle(error) => {
         .                       let result = mk_cycle(tcx, error, query.handle_cycle_error, &cache.cache);
         .                       (result, None)
         .                   }
         .                   #[cfg(parallel_compiler)]
         .                   TryGetJob::JobCompleted(query_blocked_prof_timer) => {
         .                       let (v, index) = cache
         .                           .cache
-- line 411 ----------------------------------------
-- line 415 ----------------------------------------
         .                       if unlikely!(tcx.dep_context().profiler().enabled()) {
         .                           tcx.dep_context().profiler().query_cache_hit(index.into());
         .                       }
         .                       query_blocked_prof_timer.finish_with_query_invocation_id(index.into());
         .           
         .                       (v, Some(index))
         .                   }
         .               }
 1,997,024 ( 0.02%)  }
         .           
         .           fn execute_job<CTX, K, V>(
         .               tcx: CTX,
         .               key: K,
         .               mut dep_node_opt: Option<DepNode<CTX::DepKind>>,
         .               query: &QueryVtable<CTX, K, V>,
         .               job_id: QueryJobId<CTX::DepKind>,
         .           ) -> (V, DepNodeIndex)
-- line 431 ----------------------------------------
-- line 432 ----------------------------------------
         .           where
         .               K: Clone + DepNodeParams<CTX::DepContext>,
         .               V: Debug,
         .               CTX: QueryContext,
         .           {
         .               let dep_graph = tcx.dep_context().dep_graph();
         .           
         .               // Fast path for when incr. comp. is off.
   221,533 ( 0.00%)      if !dep_graph.is_fully_enabled() {
         .                   let prof_timer = tcx.dep_context().profiler().query_provider();
   251,850 ( 0.00%)          let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));
         .                   let dep_node_index = dep_graph.next_virtual_depnode_index();
         .                   prof_timer.finish_with_query_invocation_id(dep_node_index.into());
   361,567 ( 0.00%)          return (result, dep_node_index);
         .               }
         .           
         .               if !query.anon && !query.eval_always {
         .                   // `to_dep_node` is expensive for some `DepKind`s.
         .                   let dep_node =
         .                       dep_node_opt.get_or_insert_with(|| query.to_dep_node(*tcx.dep_context(), &key));
         .           
         .                   // The diagnostics for this query will be promoted to the current session during
-- line 453 ----------------------------------------
-- line 691 ----------------------------------------
         .           /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.
         .           /// Returns true if the query should still run.
         .           ///
         .           /// This function is particularly useful when executing passes for their
         .           /// side-effects -- e.g., in order to report errors for erroneous programs.
         .           ///
         .           /// Note: The optimization is only available during incr. comp.
         .           #[inline(never)]
   286,152 ( 0.00%)  fn ensure_must_run<CTX, K, V>(
         .               tcx: CTX,
         .               key: &K,
         .               query: &QueryVtable<CTX, K, V>,
         .           ) -> (bool, Option<DepNode<CTX::DepKind>>)
         .           where
         .               K: crate::dep_graph::DepNodeParams<CTX::DepContext>,
         .               CTX: QueryContext,
         .           {
    71,538 ( 0.00%)      if query.eval_always {
         4 ( 0.00%)          return (true, None);
         .               }
         .           
         .               // Ensuring an anonymous query makes no sense
    71,534 ( 0.00%)      assert!(!query.anon);
         .           
         .               let dep_node = query.to_dep_node(*tcx.dep_context(), key);
         .           
         .               let dep_graph = tcx.dep_context().dep_graph();
   204,443 ( 0.00%)      match dep_graph.try_mark_green(tcx, &dep_node) {
         .                   None => {
         .                       // A None return from `try_mark_green` means that this is either
         .                       // a new dep node or that the dep node has already been marked red.
         .                       // Either way, we can't call `dep_graph.read()` as we don't have the
         .                       // DepNodeIndex. We must invoke the query itself. The performance cost
         .                       // this introduces should be negligible as we'll immediately hit the
         .                       // in-memory cache, or another query down the line will.
   214,602 ( 0.00%)              (true, Some(dep_node))
         .                   }
         .                   Some((_, dep_node_index)) => {
         .                       dep_graph.read_index(dep_node_index);
         .                       tcx.dep_context().profiler().query_cache_hit(dep_node_index.into());
         .                       (false, None)
         .                   }
         .               }
   286,152 ( 0.00%)  }
         .           
         .           pub enum QueryMode {
         .               Get,
         .               Ensure,
         .           }
         .           
 2,657,032 ( 0.03%)  pub fn get_query<Q, CTX>(
         .               tcx: CTX,
         .               span: Span,
         .               key: Q::Key,
         .               lookup: QueryLookup,
         .               mode: QueryMode,
         .           ) -> Option<Q::Stored>
         .           where
         .               Q: QueryDescription<CTX>,
         .               Q::Key: DepNodeParams<CTX::DepContext>,
         .               CTX: QueryContext,
         .           {
         .               let query = Q::make_vtable(tcx, &key);
   449,315 ( 0.00%)      let dep_node = if let QueryMode::Ensure = mode {
   318,618 ( 0.00%)          let (must_run, dep_node) = ensure_must_run(tcx, &key, &query);
    35,769 ( 0.00%)          if !must_run {
         .                       return None;
         .                   }
    71,741 ( 0.00%)          dep_node
         .               } else {
         .                   None
         .               };
         .           
         .               debug!("ty::query::get_query<{}>(key={:?}, span={:?})", Q::NAME, key, span);
 2,730,310 ( 0.03%)      let (result, dep_node_index) = try_execute_query(
         .                   tcx,
         .                   Q::query_state(tcx),
         .                   Q::query_cache(tcx),
         .                   span,
    40,198 ( 0.00%)          key,
         .                   lookup,
   879,378 ( 0.01%)          dep_node,
         .                   &query,
         .               );
   443,066 ( 0.00%)      if let Some(dep_node_index) = dep_node_index {
         .                   tcx.dep_context().dep_graph().read_index(dep_node_index)
         .               }
   168,573 ( 0.00%)      Some(result)
 1,947,805 ( 0.02%)  }
         .           
         .           pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind>)
         .           where
         .               Q: QueryDescription<CTX>,
         .               Q::Key: DepNodeParams<CTX::DepContext>,
         .               CTX: QueryContext,
         .           {
         .               // We may be concurrently trying both execute and force a query.
-- line 787 ----------------------------------------

 2,067,187 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/def_id.rs
--------------------------------------------------------------------------------
Ir                  

-- line 89 ----------------------------------------
         .           ///
         .           /// That being said, given a high quality hash function, the collision
         .           /// probabilities in question are very small. For example, for a big crate like
         .           /// `rustc_middle` (with ~50000 `LocalDefId`s as of the time of writing) there
         .           /// is a probability of roughly 1 in 14,750,000,000 of a crate-internal
         .           /// collision occurring. For a big crate graph with 1000 crates in it, there is
         .           /// a probability of 1 in 36,890,000,000,000 of a `StableCrateId` collision.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]
     5,868 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
         .           pub struct DefPathHash(pub Fingerprint);
         .           
         .           impl DefPathHash {
         .               /// Returns the [StableCrateId] identifying the crate this [DefPathHash]
         .               /// originates from.
         .               #[inline]
         .               pub fn stable_crate_id(&self) -> StableCrateId {
         .                   StableCrateId(self.0.as_value().0)
-- line 105 ----------------------------------------
-- line 110 ----------------------------------------
         .               /// Used for tests.
         .               #[inline]
         .               pub fn local_hash(&self) -> u64 {
         .                   self.0.as_value().1
         .               }
         .           
         .               /// Builds a new [DefPathHash] with the given [StableCrateId] and
         .               /// `local_hash`, where `local_hash` must be unique within its crate.
    11,042 ( 0.00%)      pub fn new(stable_crate_id: StableCrateId, local_hash: u64) -> DefPathHash {
         .                   DefPathHash(Fingerprint::new(stable_crate_id.0, local_hash))
     5,521 ( 0.00%)      }
         .           }
         .           
         .           impl Borrow<Fingerprint> for DefPathHash {
         .               #[inline]
         .               fn borrow(&self) -> &Fingerprint {
         .                   &self.0
         .               }
         .           }
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .           /// Since the ID is a hash value, there is a small chance that two crates
         .           /// end up with the same [`StableCrateId`]. The compiler will check for such
         .           /// collisions when loading crates and abort compilation in order to avoid
         .           /// further trouble.
         .           ///
         .           /// For more information on the possibility of hash collisions in rustc,
         .           /// see the discussion in [`DefId`].
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]
         4 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
       194 ( 0.00%)  pub struct StableCrateId(pub(crate) u64);
         .           
         .           impl StableCrateId {
         1 ( 0.00%)      pub fn to_u64(self) -> u64 {
         .                   self.0
         1 ( 0.00%)      }
         .           
         .               /// Computes the stable ID for a crate with the given name and
         .               /// `-Cmetadata` arguments.
        11 ( 0.00%)      pub fn new(crate_name: &str, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {
         .                   let mut hasher = StableHasher::new();
         .                   crate_name.hash(&mut hasher);
         .           
         .                   // We don't want the stable crate ID to depend on the order of
         .                   // -C metadata arguments, so sort them:
         .                   metadata.sort();
         .                   // Every distinct -C metadata value is only incorporated once:
         .                   metadata.dedup();
-- line 160 ----------------------------------------
-- line 165 ----------------------------------------
         .                       // different values for `-Cmetadata=ab -Cmetadata=c` and
         .                       // `-Cmetadata=a -Cmetadata=bc`
         .                       hasher.write_usize(s.len());
         .                       hasher.write(s.as_bytes());
         .                   }
         .           
         .                   // Also incorporate crate type, so that we don't get symbol conflicts when
         .                   // linking against a library of the same name, if this is an executable.
         5 ( 0.00%)          hasher.write(if is_exe { b"exe" } else { b"lib" });
         .           
         .                   // Also incorporate the rustc version. Otherwise, with -Zsymbol-mangling-version=v0
         .                   // and no -Cmetadata, symbols from the same crate compiled with different versions of
         .                   // rustc are named the same.
         .                   //
         .                   // RUSTC_FORCE_RUSTC_VERSION is used to inject rustc version information
         .                   // during testing.
         7 ( 0.00%)          if let Some(val) = std::env::var_os("RUSTC_FORCE_RUSTC_VERSION") {
         .                       hasher.write(val.to_string_lossy().into_owned().as_bytes())
         .                   } else {
         .                       hasher.write(option_env!("CFG_VERSION").unwrap_or("unknown version").as_bytes());
         .                   }
         .           
         .                   StableCrateId(hasher.finish())
         9 ( 0.00%)      }
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A DefIndex is an index into the hir-map for a crate, identifying a
         .               /// particular definition. It should really be considered an interned
         .               /// shorthand for a particular DefPath.
         .               pub struct DefIndex {
         .                   ENCODABLE = custom // (only encodable in metadata)
-- line 196 ----------------------------------------
-- line 223 ----------------------------------------
         .           #[cfg_attr(not(target_pointer_width = "64"), derive(Hash))]
         .           #[repr(C)]
         .           // We guarantee field order. Note that the order is essential here, see below why.
         .           pub struct DefId {
         .               // cfg-ing the order of fields so that the `DefIndex` which is high entropy always ends up in
         .               // the lower bits no matter the endianness. This allows the compiler to turn that `Hash` impl
         .               // into a direct call to 'u64::hash(_)`.
         .               #[cfg(not(all(target_pointer_width = "64", target_endian = "big")))]
 6,631,954 ( 0.07%)      pub index: DefIndex,
    49,989 ( 0.00%)      pub krate: CrateNum,
         .               #[cfg(all(target_pointer_width = "64", target_endian = "big"))]
         .               pub index: DefIndex,
         .           }
         .           
         .           // On 64-bit systems, we can hash the whole `DefId` as one `u64` instead of two `u32`s. This
         .           // improves performance without impairing `FxHash` quality. So the below code gets compiled to a
         .           // noop on little endian systems because the memory layout of `DefId` is as follows:
         .           //
-- line 240 ----------------------------------------
-- line 250 ----------------------------------------
         .           // is used throughout rustc, has problems distributing the entropy from the high bits, so reversing
         .           // the order would lead to a large number of collisions and thus far worse performance.
         .           //
         .           // On 64-bit big-endian systems, this compiles to a 64-bit rotation by 32 bits, which is still
         .           // faster than another `FxHash` round.
         .           #[cfg(target_pointer_width = "64")]
         .           impl Hash for DefId {
         .               fn hash<H: Hasher>(&self, h: &mut H) {
41,533,526 ( 0.41%)          (((self.krate.as_u32() as u64) << 32) | (self.index.as_u32() as u64)).hash(h)
         .               }
         .           }
         .           
         .           impl DefId {
         .               /// Makes a local `DefId` from the given `DefIndex`.
         .               #[inline]
         .               pub fn local(index: DefIndex) -> DefId {
         .                   DefId { krate: LOCAL_CRATE, index }
-- line 266 ----------------------------------------
-- line 269 ----------------------------------------
         .               /// Returns whether the item is defined in the crate currently being compiled.
         .               #[inline]
         .               pub fn is_local(self) -> bool {
         .                   self.krate == LOCAL_CRATE
         .               }
         .           
         .               #[inline]
         .               pub fn as_local(self) -> Option<LocalDefId> {
     6,656 ( 0.00%)          if self.is_local() { Some(LocalDefId { local_def_index: self.index }) } else { None }
         .               }
         .           
         .               #[inline]
         .               pub fn expect_local(self) -> LocalDefId {
         .                   self.as_local().unwrap_or_else(|| panic!("DefId::expect_local: `{:?}` isn't local", self))
         .               }
         .           
         .               pub fn is_top_level_module(self) -> bool {
         .                   self.is_local() && self.index == CRATE_DEF_INDEX
         .               }
         .           }
         .           
         .           impl<E: Encoder> Encodable<E> for DefId {
   189,424 ( 0.00%)      default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
         .                   s.emit_struct(false, |s| {
    55,724 ( 0.00%)              s.emit_struct_field("krate", true, |s| self.krate.encode(s))?;
         .           
         .                       s.emit_struct_field("index", false, |s| self.index.encode(s))
         .                   })
   165,746 ( 0.00%)      }
         .           }
         .           
         .           impl<D: Decoder> Decodable<D> for DefId {
   117,140 ( 0.00%)      default fn decode(d: &mut D) -> DefId {
         .                   d.read_struct(|d| DefId {
         .                       krate: d.read_struct_field("krate", Decodable::decode),
         .                       index: d.read_struct_field("index", Decodable::decode),
         .                   })
   146,425 ( 0.00%)      }
         .           }
         .           
         .           pub fn default_def_id_debug(def_id: DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .               f.debug_struct("DefId").field("krate", &def_id.krate).field("index", &def_id.index).finish()
         .           }
         .           
         .           pub static DEF_ID_DEBUG: AtomicRef<fn(DefId, &mut fmt::Formatter<'_>) -> fmt::Result> =
         .               AtomicRef::new(&(default_def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));
-- line 314 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// A `LocalDefId` is equivalent to a `DefId` with `krate == LOCAL_CRATE`. Since
         .           /// we encode this information in the type, we can ensure at compile time that
         .           /// no `DefId`s from upstream crates get thrown into the mix. There are quite a
         .           /// few cases where we know that only `DefId`s from the local crate are expected;
         .           /// a `DefId` from a different crate would signify a bug somewhere. This
         .           /// is when `LocalDefId` comes in handy.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
         .           pub struct LocalDefId {
   214,347 ( 0.00%)      pub local_def_index: DefIndex,
         .           }
         .           
         .           // To ensure correctness of incremental compilation,
         .           // `LocalDefId` must not implement `Ord` or `PartialOrd`.
         .           // See https://github.com/rust-lang/rust/issues/90317.
         .           impl !Ord for LocalDefId {}
         .           impl !PartialOrd for LocalDefId {}
         .           
-- line 340 ----------------------------------------
-- line 380 ----------------------------------------
         .                   DefId::decode(d).expect_local()
         .               }
         .           }
         .           
         .           rustc_data_structures::define_id_collections!(LocalDefIdMap, LocalDefIdSet, LocalDefId);
         .           
         .           impl<CTX: HashStableContext> HashStable<CTX> for DefId {
         .               #[inline]
    98,010 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
         .                   self.to_stable_hash_key(hcx).hash_stable(hcx, hasher);
    55,556 ( 0.00%)      }
         .           }
         .           
         .           impl<CTX: HashStableContext> HashStable<CTX> for LocalDefId {
         .               #[inline]
     9,008 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
         .                   self.to_stable_hash_key(hcx).hash_stable(hcx, hasher);
     9,008 ( 0.00%)      }
         .           }
         .           
         .           impl<CTX: HashStableContext> HashStable<CTX> for CrateNum {
         .               #[inline]
         .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
         .                   self.to_stable_hash_key(hcx).hash_stable(hcx, hasher);
         .               }
         .           }
-- line 405 ----------------------------------------

    29,659 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/def_id.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 38 ----------------------------------------
         .               /// debug assertions are enabled, a panic is guaranteed.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Might panic if the index of the element overflows a `usize`.
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
   129,400 ( 0.00%)          let a = self.iter.next()?;
 5,348,426 ( 0.05%)          let i = self.count;
22,133,271 ( 0.22%)          self.count += 1;
   250,704 ( 0.00%)          Some((i, a))
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
10,571,131 ( 0.11%)          self.iter.size_hint()
         .               }
         .           
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {
         .                   let a = self.iter.nth(n)?;
       160 ( 0.00%)          let i = self.count + n;
       172 ( 0.00%)          self.count = i + 1;
         .                   Some((i, a))
         .               }
         .           
         .               #[inline]
         .               fn count(self) -> usize {
         .                   self.iter.count()
         .               }
         .           
-- line 70 ----------------------------------------
-- line 76 ----------------------------------------
         .                   R: Try<Output = Acc>,
         .               {
         .                   #[inline]
         .                   fn enumerate<'a, T, Acc, R>(
         .                       count: &'a mut usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> R + 'a,
         .                   ) -> impl FnMut(Acc, T) -> R + 'a {
         .                       #[rustc_inherit_overflow_checks]
       504 ( 0.00%)              move |acc, item| {
     3,061 ( 0.00%)                  let acc = fold(acc, (*count, item));
    23,446 ( 0.00%)                  *count += 1;
         .                           acc
         .                       }
         .                   }
         .           
         .                   self.iter.try_fold(init, enumerate(&mut self.count, fold))
         .               }
         .           
         .               #[inline]
-- line 94 ----------------------------------------
-- line 97 ----------------------------------------
         .                   Fold: FnMut(Acc, Self::Item) -> Acc,
         .               {
         .                   #[inline]
         .                   fn enumerate<T, Acc>(
         .                       mut count: usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> Acc,
         .                   ) -> impl FnMut(Acc, T) -> Acc {
         .                       #[rustc_inherit_overflow_checks]
    27,500 ( 0.00%)              move |acc, item| {
       142 ( 0.00%)                  let acc = fold(acc, (count, item));
    34,183 ( 0.00%)                  count += 1;
         .                           acc
         .                       }
         .                   }
         .           
   123,750 ( 0.00%)          self.iter.fold(init, enumerate(self.count, fold))
         .               }
         .           
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   match self.iter.advance_by(n) {
         .                       ret @ Ok(_) => {
         .                           self.count += n;
-- line 120 ----------------------------------------
-- line 172 ----------------------------------------
         .               {
         .                   // Can safely add and subtract the count, as `ExactSizeIterator` promises
         .                   // that the number of elements fits into a `usize`.
         .                   fn enumerate<T, Acc, R>(
         .                       mut count: usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> R,
         .                   ) -> impl FnMut(Acc, T) -> R {
         .                       move |acc, item| {
     7,710 ( 0.00%)                  count -= 1;
         .                           fold(acc, (count, item))
         .                       }
         .                   }
         .           
     1,604 ( 0.00%)          let count = self.count + self.iter.len();
         .                   self.iter.try_rfold(init, enumerate(count, fold))
         .               }
         .           
         .               #[inline]
         .               fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
         .               where
         .                   Fold: FnMut(Acc, Self::Item) -> Acc,
         .               {
-- line 193 ----------------------------------------

   186,180 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
       330 ( 0.00%)          let old = self.replace(val);
    13,192 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   737,510 ( 0.01%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
   321,534 ( 0.00%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
 2,816,178 ( 0.03%)          RefCell {
 1,225,935 ( 0.01%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
     1,668 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
     4,698 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    14,094 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    13,476 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
    40,428 ( 0.00%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
        22 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
   457,482 ( 0.00%)          let b = borrow.get().wrapping_add(1);
   285,058 ( 0.00%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
   203,698 ( 0.00%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
   416,199 ( 0.00%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
25,144,385 ( 0.25%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
71,240,083 ( 0.71%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
72,949,763 ( 0.73%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
     3,558 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
30,399,114 ( 0.30%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

64,874,525 ( 0.65%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 51 ----------------------------------------
        .               /// let vec = vec!['a', 'b', 'c'];
        .               /// let mut into_iter = vec.into_iter();
        .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
        .               /// let _ = into_iter.next().unwrap();
        .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
        .               /// ```
        .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
        .               pub fn as_slice(&self) -> &[T] {
   19,726 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
        .               }
        .           
        .               /// Returns the remaining items of this iterator as a mutable slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec = vec!['a', 'b', 'c'];
-- line 67 ----------------------------------------
-- line 80 ----------------------------------------
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   &self.alloc
        .               }
        .           
        .               fn as_raw_mut_slice(&mut self) -> *mut [T] {
2,887,079 ( 0.03%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
        .               }
        .           
        .               /// Drops remaining elements and relinquishes the backing allocation.
        .               ///
        .               /// This is roughly equivalent to the following, but more efficient
        .               ///
        .               /// ```
        .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
-- line 96 ----------------------------------------
-- line 99 ----------------------------------------
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
        .                   let remaining = self.as_raw_mut_slice();
        .           
        .                   // overwrite the individual fields instead of creating a new
        .                   // struct and then overwriting &mut self.
        .                   // this creates less assembly
    3,454 ( 0.00%)          self.cap = 0;
    6,908 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
    3,542 ( 0.00%)          self.ptr = self.buf.as_ptr();
    6,750 ( 0.00%)          self.end = self.buf.as_ptr();
        .           
        .                   unsafe {
        .                       ptr::drop_in_place(remaining);
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 128 ----------------------------------------
        .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<T> {
3,545,754 ( 0.04%)          if self.ptr as *const _ == self.end {
  218,477 ( 0.00%)              None
       84 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
        .                       // purposefully don't use 'ptr.offset' because for
        .                       // vectors with 0-size elements this would return the
        .                       // same pointer.
        .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
        .                       let old = self.ptr;
  102,729 ( 0.00%)              self.ptr = unsafe { self.ptr.offset(1) };
        .           
   68,005 ( 0.00%)              Some(unsafe { ptr::read(old) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   let exact = if mem::size_of::<T>() == 0 {
        .                       (self.end as usize).wrapping_sub(self.ptr as usize)
        .                   } else {
        .                       unsafe { self.end.offset_from(self.ptr) as usize }
        .                   };
        3 ( 0.00%)          (exact, Some(exact))
        .               }
        .           
        .               #[inline]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
-- line 169 ----------------------------------------
-- line 181 ----------------------------------------
        .                   if step_size < n {
        .                       return Err(step_size);
        .                   }
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        2 ( 0.00%)          self.len()
        .               }
        .           
        .               #[doc(hidden)]
        .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
        .               where
        .                   Self: TrustedRandomAccessNoCoerce,
        .               {
        .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<T> {
   36,866 ( 0.00%)          if self.end == self.ptr {
        .                       None
        .                   } else if mem::size_of::<T>() == 0 {
        .                       // See above for why 'ptr.offset' isn't used
        .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
    4,443 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
        .           
    1,198 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
9,762,704 ( 0.10%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
        .           
        .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               // `IntoIter::alloc` is not used anymore after this
        .                               let alloc = ptr::read(&self.0.alloc);
        .                               // RawVec handles deallocation
1,487,639 ( 0.01%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
        .                           }
        .                       }
        .                   }
        .           
        .                   let guard = DropGuard(self);
        .                   // destroy the remaining elements
        .                   unsafe {
       12 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
        .                   }
        .                   // now `guard` will be dropped and do the rest
9,582,652 ( 0.10%)      }
        .           }
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
        .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
-- line 331 ----------------------------------------

1,801,605 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs
--------------------------------------------------------------------------------
Ir                  

-- line 44 ----------------------------------------
         .           
         .           impl<'a, 'tcx> InferCtxt<'a, 'tcx> {
         .               #[inline]
         .               pub fn at(
         .                   &'a self,
         .                   cause: &'a ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> At<'a, 'tcx> {
 4,224,327 ( 0.04%)          At { infcx: self, cause, param_env }
         .               }
         .           }
         .           
         .           pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {
         .               fn to_trace(
         .                   tcx: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx>;
         .           }
         .           
         .           impl<'a, 'tcx> At<'a, 'tcx> {
         .               /// Hacky routine for equating two impl headers in coherence.
 4,191,088 ( 0.04%)      pub fn eq_impl_headers(
         .                   self,
         .                   expected: &ty::ImplHeader<'tcx>,
         .                   actual: &ty::ImplHeader<'tcx>,
         .               ) -> InferResult<'tcx, ()> {
         .                   debug!("eq_impl_header({:?} = {:?})", expected, actual);
 5,238,860 ( 0.05%)          match (expected.trait_ref, actual.trait_ref) {
         .                       (Some(a_ref), Some(b_ref)) => self.eq(a_ref, b_ref),
        20 ( 0.00%)              (None, None) => self.eq(expected.self_ty, actual.self_ty),
         .                       _ => bug!("mk_eq_impl_headers given mismatched impl kinds"),
         .                   }
 4,714,974 ( 0.05%)      }
         .           
         .               /// Makes `a <: b`, where `a` may or may not be expected.
         .               pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: ToTrace<'tcx>,
         .               {
     3,868 ( 0.00%)          self.trace_exp(a_is_expected, a, b).sub(a, b)
         .               }
         .           
         .               /// Makes `actual <: expected`. For example, if type-checking a
         .               /// call like `foo(x)`, where `foo: fn(i32)`, you might have
         .               /// `sup(i32, x)`, since the "expected" type is the type that
         .               /// appears in the signature.
         .               pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>
         .               where
-- line 94 ----------------------------------------
-- line 109 ----------------------------------------
         .               pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: ToTrace<'tcx>,
         .               {
         .                   self.trace_exp(a_is_expected, a, b).eq(a, b)
         .               }
         .           
         .               /// Makes `expected <: actual`.
       390 ( 0.00%)      pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: ToTrace<'tcx>,
         .               {
       117 ( 0.00%)          self.trace(expected, actual).eq(expected, actual)
       351 ( 0.00%)      }
         .           
       390 ( 0.00%)      pub fn relate<T>(self, expected: T, variance: ty::Variance, actual: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: ToTrace<'tcx>,
         .               {
       195 ( 0.00%)          match variance {
         .                       ty::Variance::Covariant => self.sub(expected, actual),
       117 ( 0.00%)              ty::Variance::Invariant => self.eq(expected, actual),
         .                       ty::Variance::Contravariant => self.sup(expected, actual),
         .           
         .                       // We could make this make sense but it's not readily
         .                       // exposed and I don't feel like dealing with it. Note
         .                       // that bivariance in general does a bit more than just
         .                       // *nothing*, it checks that the types are the same
         .                       // "modulo variance" basically.
         .                       ty::Variance::Bivariant => panic!("Bivariant given to `relate()`"),
         .                   }
       351 ( 0.00%)      }
         .           
         .               /// Computes the least-upper-bound, or mutual supertype, of two
         .               /// values. The order of the arguments doesn't matter, but since
         .               /// this can result in an error (e.g., if asked to compute LUB of
         .               /// u32 and i32), it is meaningful to call one of them the
         .               /// "expected type".
         .               pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>
         .               where
-- line 148 ----------------------------------------
-- line 174 ----------------------------------------
         .           
         .               /// Like `trace`, but the expected value is determined by the
         .               /// boolean argument (if true, then the first argument `a` is the
         .               /// "expected" value).
         .               pub fn trace_exp<T>(self, a_is_expected: bool, a: T, b: T) -> Trace<'a, 'tcx>
         .               where
         .                   T: ToTrace<'tcx>,
         .               {
25,589,574 ( 0.26%)          let trace = ToTrace::to_trace(self.infcx.tcx, self.cause, a_is_expected, a, b);
         .                   Trace { at: self, trace, a_is_expected }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> Trace<'a, 'tcx> {
         .               /// Makes `a <: b` where `a` may or may not be expected (if
         .               /// `a_is_expected` is true, then `a` is expected).
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn sub<T>(self, a: T, b: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: Relate<'tcx>,
         .               {
    74,001 ( 0.00%)          let Trace { at, trace, a_is_expected } = self;
   319,485 ( 0.00%)          at.infcx.commit_if_ok(|_| {
   202,809 ( 0.00%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
    42,502 ( 0.00%)              fields
    43,468 ( 0.00%)                  .sub(a_is_expected)
    61,963 ( 0.00%)                  .relate(a, b)
    57,964 ( 0.00%)                  .map(move |_| InferOk { value: (), obligations: fields.obligations })
         .                   })
         .               }
         .           
         .               /// Makes `a == b`; the expectation is set by the call to
         .               /// `trace()`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn eq<T>(self, a: T, b: T) -> InferResult<'tcx, ()>
         .               where
         .                   T: Relate<'tcx>,
         .               {
15,364,317 ( 0.15%)          let Trace { at, trace, a_is_expected } = self;
57,216,365 ( 0.57%)          at.infcx.commit_if_ok(|_| {
30,264,870 ( 0.30%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
 7,420,840 ( 0.07%)              fields
 7,420,840 ( 0.07%)                  .equate(a_is_expected)
16,407,052 ( 0.16%)                  .relate(a, b)
10,592,968 ( 0.11%)                  .map(move |_| InferOk { value: (), obligations: fields.obligations })
         .                   })
         .               }
         .           
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn lub<T>(self, a: T, b: T) -> InferResult<'tcx, T>
         .               where
         .                   T: Relate<'tcx>,
         .               {
       280 ( 0.00%)          let Trace { at, trace, a_is_expected } = self;
     1,232 ( 0.00%)          at.infcx.commit_if_ok(|_| {
       784 ( 0.00%)              let mut fields = at.infcx.combine_fields(trace, at.param_env);
       168 ( 0.00%)              fields
       168 ( 0.00%)                  .lub(a_is_expected)
       224 ( 0.00%)                  .relate(a, b)
       224 ( 0.00%)                  .map(move |t| InferOk { value: t, obligations: fields.obligations })
         .                   })
         .               }
         .           
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn glb<T>(self, a: T, b: T) -> InferResult<'tcx, T>
         .               where
         .                   T: Relate<'tcx>,
         .               {
-- line 241 ----------------------------------------
-- line 253 ----------------------------------------
         .           impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {
         .               fn to_trace(
         .                   _: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
   101,297 ( 0.00%)          TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }
    28,942 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {
         .               fn to_trace(
         .                   _: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
    11,823 ( 0.00%)          TypeTrace { cause: cause.clone(), values: Regions(ExpectedFound::new(a_is_expected, a, b)) }
     3,378 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {
         .               fn to_trace(
         .                   _: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
         7 ( 0.00%)          TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         2 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {
 4,240,356 ( 0.04%)      fn to_trace(
         .                   _: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
10,600,890 ( 0.11%)          TypeTrace {
         .                       cause: cause.clone(),
 8,480,712 ( 0.08%)              values: TraitRefs(ExpectedFound::new(a_is_expected, a, b)),
         .                   }
 8,480,712 ( 0.08%)      }
         .           }
         .           
         .           impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {
       966 ( 0.00%)      fn to_trace(
         .                   _: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
     2,415 ( 0.00%)          TypeTrace {
         .                       cause: cause.clone(),
     8,694 ( 0.00%)              values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a, b)),
         .                   }
     1,932 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {
    24,912 ( 0.00%)      fn to_trace(
         .                   tcx: TyCtxt<'tcx>,
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Self,
         .                   b: Self,
         .               ) -> TypeTrace<'tcx> {
         .                   let a_ty = tcx.mk_projection(a.item_def_id, a.substs);
         .                   let b_ty = tcx.mk_projection(b.item_def_id, b.substs);
    14,532 ( 0.00%)          TypeTrace {
         .                       cause: cause.clone(),
         .                       values: Types(ExpectedFound::new(a_is_expected, a_ty, b_ty)),
         .                   }
    18,684 ( 0.00%)      }
         .           }

18,508,380 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/at.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 3,559,164 ( 0.04%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
     4,229 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
       448 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    24,176 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
   226,950 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
   457,118 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
23,513,630 ( 0.23%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
         3 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
     1,078 ( 0.00%)          let _ = &self[a];
    10,489 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     2,391 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
        42 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    54,062 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
     7,755 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
        62 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     6,403 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
     2,212 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
 4,152,880 ( 0.04%)          while left < right {
 2,922,586 ( 0.03%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
   492,895 ( 0.00%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
   808,557 ( 0.01%)              if cmp == Less {
 1,049,527 ( 0.01%)                  left = mid + 1;
   524,043 ( 0.01%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
 1,951,956 ( 0.02%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
    99,688 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    94,720 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    94,720 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    94,720 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------

 4,225,450 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs
--------------------------------------------------------------------------------
Ir                  

-- line 47 ----------------------------------------
         .           pub enum ProjectionTyError<'tcx> {
         .               /// ...we found multiple sources of information and couldn't resolve the ambiguity.
         .               TooManyCandidates,
         .           
         .               /// ...an error occurred matching `T : TraitRef`
         .               TraitSelectionError(SelectionError<'tcx>),
         .           }
         .           
     3,093 ( 0.00%)  #[derive(PartialEq, Eq, Debug)]
         .           enum ProjectionTyCandidate<'tcx> {
         .               /// From a where-clause in the env or object type
     1,031 ( 0.00%)      ParamEnv(ty::PolyProjectionPredicate<'tcx>),
         .           
         .               /// From the definition of `Trait` when you have something like <<A as Trait>::B as Trait2>::C
         .               TraitDef(ty::PolyProjectionPredicate<'tcx>),
         .           
         .               /// Bounds specified on an object type
         .               Object(ty::PolyProjectionPredicate<'tcx>),
         .           
         .               /// From an "impl" (or a "pseudo-impl" returned by select)
-- line 66 ----------------------------------------
-- line 71 ----------------------------------------
         .               None,
         .               Single(ProjectionTyCandidate<'tcx>),
         .               Ambiguous,
         .               Error(SelectionError<'tcx>),
         .           }
         .           
         .           impl<'tcx> ProjectionTyCandidateSet<'tcx> {
         .               fn mark_ambiguous(&mut self) {
       709 ( 0.00%)          *self = ProjectionTyCandidateSet::Ambiguous;
         .               }
         .           
         .               fn mark_error(&mut self, err: SelectionError<'tcx>) {
         .                   *self = ProjectionTyCandidateSet::Error(err);
         .               }
         .           
         .               // Returns true if the push was successful, or false if the candidate
         .               // was discarded -- this could be because of ambiguity, or because
         .               // a higher-priority candidate is already there.
    15,480 ( 0.00%)      fn push_candidate(&mut self, candidate: ProjectionTyCandidate<'tcx>) -> bool {
         .                   use self::ProjectionTyCandidate::*;
         .                   use self::ProjectionTyCandidateSet::*;
         .           
         .                   // This wacky variable is just used to try and
         .                   // make code readable and avoid confusing paths.
         .                   // It is assigned a "value" of `()` only on those
         .                   // paths in which we wish to convert `*self` to
         .                   // ambiguous (and return false, because the candidate
         .                   // was not used). On other paths, it is not assigned,
         .                   // and hence if those paths *could* reach the code that
         .                   // comes after the match, this fn would not compile.
         .                   let convert_to_ambiguous;
         .           
    15,480 ( 0.00%)          match self {
         .                       None => {
    20,137 ( 0.00%)                  *self = Single(candidate);
         .                           return true;
         .                       }
         .           
         .                       Single(current) => {
         .                           // Duplicates can happen inside ParamEnv. In the case, we
         .                           // perform a lazy deduplication.
         .                           if current == &candidate {
         .                               return false;
-- line 113 ----------------------------------------
-- line 115 ----------------------------------------
         .           
         .                           // Prefer where-clauses. As in select, if there are multiple
         .                           // candidates, we prefer where-clause candidates over impls.  This
         .                           // may seem a bit surprising, since impls are the source of
         .                           // "truth" in some sense, but in fact some of the impls that SEEM
         .                           // applicable are not, because of nested obligations. Where
         .                           // clauses are the safer choice. See the comment on
         .                           // `select::SelectionCandidate` and #21974 for more details.
    16,496 ( 0.00%)                  match (current, candidate) {
         .                               (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),
         .                               (ParamEnv(..), _) => return false,
         .                               (_, ParamEnv(..)) => unreachable!(),
         .                               (_, _) => convert_to_ambiguous = (),
         .                           }
         .                       }
         .           
         .                       Ambiguous | Error(..) => {
-- line 131 ----------------------------------------
-- line 133 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   // We only ever get here when we moved from a single candidate
         .                   // to ambiguous.
         .                   let () = convert_to_ambiguous;
         .                   *self = Ambiguous;
         .                   false
    18,060 ( 0.00%)      }
         .           }
         .           
         .           /// Evaluates constraints of the form:
         .           ///
         .           ///     for<...> <T as Trait>::U == V
         .           ///
         .           /// If successful, this may result in additional obligations. Also returns
         .           /// the projection cache key used to track these additional obligations.
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
         .           pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &PolyProjectionObligation<'tcx>,
         .           ) -> Result<
         .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
         .               MismatchedProjectionTypes<'tcx>,
         .           > {
         .               let infcx = selcx.infcx();
     3,745 ( 0.00%)      infcx.commit_if_ok(|_snapshot| {
         .                   let placeholder_predicate =
     3,732 ( 0.00%)              infcx.replace_bound_vars_with_placeholders(obligation.predicate);
         .           
         .                   let placeholder_obligation = obligation.with(placeholder_predicate);
     1,244 ( 0.00%)          let result = project_and_unify_type(selcx, &placeholder_obligation)?;
       622 ( 0.00%)          Ok(result)
         .               })
         .           }
         .           
         .           /// Evaluates constraints of the form:
         .           ///
         .           ///     <T as Trait>::U == V
         .           ///
         .           /// If successful, this may result in additional obligations.
         .           ///
         .           /// See [poly_project_and_unify_type] for an explanation of the return value.
     6,220 ( 0.00%)  fn project_and_unify_type<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionObligation<'tcx>,
         .           ) -> Result<
         .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
         .               MismatchedProjectionTypes<'tcx>,
         .           > {
         .               debug!(?obligation, "project_and_unify_type");
         .           
         .               let mut obligations = vec![];
     4,976 ( 0.00%)      let normalized_ty = match opt_normalize_projection_type(
         .                   selcx,
       622 ( 0.00%)          obligation.param_env,
     1,244 ( 0.00%)          obligation.predicate.projection_ty,
         .                   obligation.cause.clone(),
     1,244 ( 0.00%)          obligation.recursion_depth,
         .                   &mut obligations,
         .               ) {
         .                   Ok(Some(n)) => n,
     1,492 ( 0.00%)          Ok(None) => return Ok(Ok(None)),
         .                   Err(InProgress) => return Ok(Err(InProgress)),
         .               };
         .           
         .               debug!(?normalized_ty, ?obligations, "project_and_unify_type result");
         .           
         .               let infcx = selcx.infcx();
         .               // FIXME(associated_const_equality): Handle consts here as well as types.
       498 ( 0.00%)      let obligation_pred_ty = obligation.predicate.term.ty().unwrap();
       747 ( 0.00%)      match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {
         .                   Ok(InferOk { obligations: inferred_obligations, value: () }) => {
         .                       obligations.extend(inferred_obligations);
     1,743 ( 0.00%)              Ok(Ok(Some(obligations)))
         .                   }
         .                   Err(err) => {
         .                       debug!("project_and_unify_type: equating types encountered error {:?}", err);
         .                       Err(MismatchedProjectionTypes { err })
         .                   }
         .               }
     5,598 ( 0.00%)  }
         .           
         .           /// Normalizes any associated type projections in `value`, replacing
         .           /// them with a fully resolved type where possible. The return value
         .           /// combines the normalized result and any additional obligations that
         .           /// were incurred as result.
10,890,770 ( 0.11%)  pub fn normalize<'a, 'b, 'tcx, T>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               value: T,
         .           ) -> Normalized<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               let mut obligations = Vec::new();
         .               let value = normalize_to(selcx, param_env, cause, value, &mut obligations);
12,849,909 ( 0.13%)      Normalized { value, obligations }
 9,801,693 ( 0.10%)  }
         .           
         .           pub fn normalize_to<'a, 'b, 'tcx, T>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               value: T,
         .               obligations: &mut Vec<PredicateObligation<'tcx>>,
         .           ) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
13,952,849 ( 0.14%)      normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)
         .           }
         .           
         .           /// As `normalize`, but with a custom depth.
       420 ( 0.00%)  pub fn normalize_with_depth<'a, 'b, 'tcx, T>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               depth: usize,
         .               value: T,
         .           ) -> Normalized<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               let mut obligations = Vec::new();
23,315,543 ( 0.23%)      let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);
12,717,811 ( 0.13%)      Normalized { value, obligations }
       364 ( 0.00%)  }
         .           
21,306,686 ( 0.21%)  #[instrument(level = "info", skip(selcx, param_env, cause, obligations))]
27,711,138 ( 0.28%)  pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               depth: usize,
         .               value: T,
         .               obligations: &mut Vec<PredicateObligation<'tcx>>,
         .           ) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!(obligations.len = obligations.len());
16,361,413 ( 0.16%)      let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);
24,537,713 ( 0.24%)      let result = ensure_sufficient_stack(|| normalizer.fold(value));
         .               debug!(?result, obligations.len = normalizer.obligations.len());
         .               debug!(?normalizer.obligations,);
 8,458,108 ( 0.08%)      result
 6,441,490 ( 0.06%)  }
         .           
         .           pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {
         .               match reveal {
         .                   Reveal::UserFacing => value
         .                       .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),
         .                   Reveal::All => value.has_type_flags(
         .                       ty::TypeFlags::HAS_TY_PROJECTION
         .                           | ty::TypeFlags::HAS_TY_OPAQUE
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
         .               param_env: ty::ParamEnv<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               obligations: &'a mut Vec<PredicateObligation<'tcx>>,
         .               depth: usize,
         .               universes: Vec<Option<ty::UniverseIndex>>,
         .           }
         .           
         .           impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {
    27,296 ( 0.00%)      fn new(
         .                   selcx: &'a mut SelectionContext<'b, 'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   cause: ObligationCause<'tcx>,
         .                   depth: usize,
         .                   obligations: &'a mut Vec<PredicateObligation<'tcx>>,
         .               ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {
18,338,492 ( 0.18%)          AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }
    27,296 ( 0.00%)      }
         .           
30,961,349 ( 0.31%)      fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {
21,288,777 ( 0.21%)          let value = self.selcx.infcx().resolve_vars_if_possible(value);
         .                   debug!(?value);
         .           
    43,278 ( 0.00%)          assert!(
         .                       !value.has_escaping_bound_vars(),
         .                       "Normalizing {:?} without wrapping in a `Binder`",
         .                       value
         .                   );
         .           
 3,263,434 ( 0.03%)          if !needs_normalization(&value, self.param_env.reveal()) {
10,537,882 ( 0.11%)              value
         .                   } else {
     1,157 ( 0.00%)              value.fold_with(self)
         .                   }
27,781,539 ( 0.28%)      }
         .           }
         .           
         .           impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {
         .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
    15,883 ( 0.00%)          self.selcx.tcx()
    14,958 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
         .                   self.universes.push(None);
       183 ( 0.00%)          let t = t.super_fold_with(self);
         .                   self.universes.pop();
         .                   t
         .               }
         .           
   165,568 ( 0.00%)      fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    41,392 ( 0.00%)          if !needs_normalization(&ty, self.param_env.reveal()) {
         .                       return ty;
         .                   }
         .           
         .                   // We try to be a little clever here as a performance optimization in
         .                   // cases where there are nested projections under binders.
         .                   // For example:
         .                   // ```
         .                   // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
         .                   //
         .                   // This is possible because the inner `'a` will already be a placeholder
         .                   // when we need to normalize the inner projection
         .                   //
         .                   // On the other hand, this does add a bit of complexity, since we only
         .                   // replace bound vars if the current type is a `Projection` and we need
         .                   // to make sure we don't forget to fold the substs regardless.
         .           
    30,338 ( 0.00%)          match *ty.kind() {
         .                       // This is really important. While we *can* handle this, this has
         .                       // severe performance implications for large opaque types with
         .                       // late-bound regions. See `issue-88862` benchmark.
         .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
         .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
         .                           match self.param_env.reveal() {
         .                               Reveal::UserFacing => ty.super_fold_with(self),
         .           
-- line 397 ----------------------------------------
-- line 421 ----------------------------------------
         .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
         .                           // This branch is *mostly* just an optimization: when we don't
         .                           // have escaping bound vars, we don't need to replace them with
         .                           // placeholders (see branch below). *Also*, we know that we can
         .                           // register an obligation to *later* project, since we know
         .                           // there won't be bound vars there.
         .           
         .                           let data = data.super_fold_with(self);
    55,806 ( 0.00%)                  let normalized_ty = normalize_projection_type(
     9,301 ( 0.00%)                      self.selcx,
     9,301 ( 0.00%)                      self.param_env,
         .                               data,
         .                               self.cause.clone(),
     9,301 ( 0.00%)                      self.depth,
     9,301 ( 0.00%)                      &mut self.obligations,
         .                           );
         .                           debug!(
         .                               ?self.depth,
         .                               ?ty,
         .                               ?normalized_ty,
         .                               obligations.len = ?self.obligations.len(),
         .                               "AssocTypeNormalizer: normalized type"
         .                           );
-- line 443 ----------------------------------------
-- line 490 ----------------------------------------
         .                               obligations.len = ?self.obligations.len(),
         .                               "AssocTypeNormalizer: normalized type"
         .                           );
         .                           normalized_ty
         .                       }
         .           
         .                       _ => ty.super_fold_with(self),
         .                   }
   186,264 ( 0.00%)      }
         .           
     2,079 ( 0.00%)      fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       462 ( 0.00%)          if self.selcx.tcx().lazy_normalization() {
         .                       constant
         .                   } else {
       924 ( 0.00%)              let constant = constant.super_fold_with(self);
         .                       constant.eval(self.selcx.tcx(), self.param_env)
         .                   }
     2,079 ( 0.00%)      }
         .           }
         .           
         .           pub struct BoundVarReplacer<'me, 'tcx> {
         .               infcx: &'me InferCtxt<'me, 'tcx>,
         .               // These three maps track the bound variable that were replaced by placeholders. It might be
         .               // nice to remove these since we already have the `kind` in the placeholder; we really just need
         .               // the `var` (but we *could* bring that into scope if we were to track them as we pass them).
         .               mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,
-- line 515 ----------------------------------------
-- line 781 ----------------------------------------
         .           }
         .           
         .           /// The guts of `normalize`: normalize a specific projection like `<T
         .           /// as Trait>::Item`. The result is always a type (and possibly
         .           /// additional obligations). If ambiguity arises, which implies that
         .           /// there are unresolved type variables in the projection, we will
         .           /// substitute a fresh type variable `$X` and generate a new
         .           /// obligation `<T as Trait>::Item == $X` for later.
    93,500 ( 0.00%)  pub fn normalize_projection_type<'a, 'b, 'tcx>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               projection_ty: ty::ProjectionTy<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               depth: usize,
         .               obligations: &mut Vec<PredicateObligation<'tcx>>,
         .           ) -> Ty<'tcx> {
    74,800 ( 0.00%)      opt_normalize_projection_type(
         .                   selcx,
         .                   param_env,
         .                   projection_ty,
         .                   cause.clone(),
         .                   depth,
         .                   obligations,
         .               )
         .               .ok()
         .               .flatten()
         .               .unwrap_or_else(move || {
         .                   // if we bottom out in ambiguity, create a type variable
         .                   // and a deferred predicate to resolve this when more type
         .                   // information is available.
         .           
     4,256 ( 0.00%)          selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)
         .               })
    84,150 ( 0.00%)  }
         .           
         .           /// The guts of `normalize`: normalize a specific projection like `<T
         .           /// as Trait>::Item`. The result is always a type (and possibly
         .           /// additional obligations). Returns `None` in the case of ambiguity,
         .           /// which indicates that there are unbound type variables.
         .           ///
         .           /// This function used to return `Option<NormalizedTy<'tcx>>`, which contains a
         .           /// `Ty<'tcx>` and an obligations vector. But that obligation vector was very
         .           /// often immediately appended to another obligations vector. So now this
         .           /// function takes an obligations vector and appends to it directly, which is
         .           /// slightly uglier but avoids the need for an extra short-lived allocation.
   241,524 ( 0.00%)  #[instrument(level = "debug", skip(selcx, param_env, cause, obligations))]
         .           fn opt_normalize_projection_type<'a, 'b, 'tcx>(
         .               selcx: &'a mut SelectionContext<'b, 'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               projection_ty: ty::ProjectionTy<'tcx>,
         .               cause: ObligationCause<'tcx>,
         .               depth: usize,
         .               obligations: &mut Vec<PredicateObligation<'tcx>>,
         .           ) -> Result<Option<Ty<'tcx>>, InProgress> {
         .               let infcx = selcx.infcx();
         .               // Don't use the projection cache in intercrate mode -
         .               // the `infcx` may be re-used between intercrate in non-intercrate
         .               // mode, which could lead to using incorrect cache results.
         .               let use_cache = !selcx.is_intercrate();
         .           
         .               let projection_ty = infcx.resolve_vars_if_possible(projection_ty);
    29,916 ( 0.00%)      let cache_key = ProjectionCacheKey::new(projection_ty);
         .           
         .               // FIXME(#20304) For now, I am caching here, which is good, but it
         .               // means we don't capture the type variables that are created in
         .               // the case of ambiguity. Which means we may create a large stream
         .               // of such variables. OTOH, if we move the caching up a level, we
         .               // would not benefit from caching when proving `T: Trait<U=Foo>`
         .               // bounds. It might be the case that we want two distinct caches,
         .               // or else another kind of cache entry.
         .           
     9,972 ( 0.00%)      let cache_result = if use_cache {
    59,832 ( 0.00%)          infcx.inner.borrow_mut().projection_cache().try_start(cache_key)
         .               } else {
         .                   Ok(())
         .               };
    59,832 ( 0.00%)      match cache_result {
         .                   Ok(()) => debug!("no cache"),
         .                   Err(ProjectionCacheEntry::Ambiguous) => {
         .                       // If we found ambiguity the last time, that means we will continue
         .                       // to do so until some type in the key changes (and we know it
         .                       // hasn't, because we just fully resolved it).
         .                       debug!("found cache entry: ambiguous");
         .                       return Ok(None);
         .                   }
-- line 865 ----------------------------------------
-- line 882 ----------------------------------------
         .                           infcx.inner.borrow_mut().projection_cache().recur(cache_key);
         .                       }
         .                       return Err(InProgress);
         .                   }
         .                   Err(ProjectionCacheEntry::Recur) => {
         .                       debug!("recur cache");
         .                       return Err(InProgress);
         .                   }
    15,280 ( 0.00%)          Err(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {
         .                       // This is the hottest path in this function.
         .                       //
         .                       // If we find the value in the cache, then return it along
         .                       // with the obligations that went along with it. Note
         .                       // that, when using a fulfillment context, these
         .                       // obligations could in principle be ignored: they have
         .                       // already been registered when the cache entry was
         .                       // created (and hence the new ones will quickly be
-- line 898 ----------------------------------------
-- line 908 ----------------------------------------
         .                       let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
         .                       obligations.extend(result.obligations);
         .                       return Ok(Some(result.value));
         .                   }
         .               }
         .           
         .               let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);
         .           
    18,252 ( 0.00%)      match project_type(selcx, &obligation) {
         .                   Ok(ProjectedTy::Progress(Progress {
         .                       ty: projected_ty,
     6,196 ( 0.00%)              obligations: mut projected_obligations,
         .                   })) => {
         .                       // if projection succeeded, then what we get out of this
         .                       // is also non-normalized (consider: it was derived from
         .                       // an impl, where-clause etc) and hence we must
         .                       // re-normalize it
         .           
         .                       let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);
         .                       debug!(?projected_ty, ?depth, ?projected_obligations);
         .           
     1,549 ( 0.00%)              let mut result = if projected_ty.has_projections() {
         .                           let mut normalizer = AssocTypeNormalizer::new(
         .                               selcx,
         .                               param_env,
       388 ( 0.00%)                      cause,
       194 ( 0.00%)                      depth + 1,
         .                               &mut projected_obligations,
         .                           );
       194 ( 0.00%)                  let normalized_ty = normalizer.fold(projected_ty);
         .           
         .                           debug!(?normalized_ty, ?depth);
         .           
       485 ( 0.00%)                  Normalized { value: normalized_ty, obligations: projected_obligations }
         .                       } else {
     8,712 ( 0.00%)                  Normalized { value: projected_ty, obligations: projected_obligations }
         .                       };
         .           
         .                       let mut deduped: SsoHashSet<_> = Default::default();
     1,549 ( 0.00%)              result.obligations.drain_filter(|projected_obligation| {
         .                           if !deduped.insert(projected_obligation.clone()) {
         .                               return true;
         .                           }
         .                           false
         .                       });
         .           
     1,549 ( 0.00%)              if use_cache {
     4,647 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
         .                       }
         .                       obligations.extend(result.obligations);
     1,549 ( 0.00%)              Ok(Some(result.value))
         .                   }
         .                   Ok(ProjectedTy::NoProgress(projected_ty)) => {
         .                       debug!(?projected_ty, "opt_normalize_projection_type: no progress");
       212 ( 0.00%)              let result = Normalized { value: projected_ty, obligations: vec![] };
       106 ( 0.00%)              if use_cache {
       318 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
         .                       }
         .                       // No need to extend `obligations`.
       106 ( 0.00%)              Ok(Some(result.value))
         .                   }
         .                   Err(ProjectionTyError::TooManyCandidates) => {
         .                       debug!("opt_normalize_projection_type: too many candidates");
       373 ( 0.00%)              if use_cache {
     2,238 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);
         .                       }
         .                       Ok(None)
         .                   }
         .                   Err(ProjectionTyError::TraitSelectionError(_)) => {
         .                       debug!("opt_normalize_projection_type: ERROR");
         .                       // if we got an error processing the `T as Trait` part,
         .                       // just return `ty::err` but add the obligation `T :
         .                       // Trait`, which when processed will cause the error to be
-- line 980 ----------------------------------------
-- line 1042 ----------------------------------------
         .               obligations: Vec<PredicateObligation<'tcx>>,
         .           }
         .           
         .           impl<'tcx> Progress<'tcx> {
         .               fn error(tcx: TyCtxt<'tcx>) -> Self {
         .                   Progress { ty: tcx.ty_error(), obligations: vec![] }
         .               }
         .           
       280 ( 0.00%)      fn with_addl_obligations(mut self, mut obligations: Vec<PredicateObligation<'tcx>>) -> Self {
         .                   debug!(
         .                       self.obligations.len = ?self.obligations.len(),
         .                       obligations.len = obligations.len(),
         .                       "with_addl_obligations"
         .                   );
         .           
         .                   debug!(?self.obligations, ?obligations, "with_addl_obligations");
         .           
        28 ( 0.00%)          self.obligations.append(&mut obligations);
       168 ( 0.00%)          self
       112 ( 0.00%)      }
         .           }
         .           
         .           /// Computes the result of a projection type (if we can).
         .           ///
         .           /// IMPORTANT:
         .           /// - `obligation` must be fully normalized
    36,504 ( 0.00%)  #[tracing::instrument(level = "info", skip(selcx))]
         .           fn project_type<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .           ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {
     6,084 ( 0.00%)      if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {
         .                   debug!("project: overflow!");
         .                   // This should really be an immediate error, but some existing code
         .                   // relies on being able to recover from this.
         .                   return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));
         .               }
         .           
         .               if obligation.predicate.references_error() {
         .                   return Ok(ProjectedTy::Progress(Progress::error(selcx.tcx())));
         .               }
         .           
     2,028 ( 0.00%)      let mut candidates = ProjectionTyCandidateSet::None;
         .           
         .               // Make sure that the following procedures are kept in order. ParamEnv
         .               // needs to be first because it has highest priority, and Select checks
         .               // the return value of push_candidate which assumes it's ran at last.
     4,056 ( 0.00%)      assemble_candidates_from_param_env(selcx, obligation, &mut candidates);
         .           
     2,336 ( 0.00%)      assemble_candidates_from_trait_def(selcx, obligation, &mut candidates);
         .           
     4,056 ( 0.00%)      assemble_candidates_from_object_ty(selcx, obligation, &mut candidates);
         .           
     5,782 ( 0.00%)      if let ProjectionTyCandidateSet::Single(ProjectionTyCandidate::Object(_)) = candidates {
         .                   // Avoid normalization cycle from selection (see
         .                   // `assemble_candidates_from_object_ty`).
         .                   // FIXME(lazy_normalization): Lazy normalization should save us from
         .                   // having to special case this.
         .               } else {
     4,056 ( 0.00%)          assemble_candidates_from_impls(selcx, obligation, &mut candidates);
         .               };
         .           
    10,140 ( 0.00%)      match candidates {
         .                   ProjectionTyCandidateSet::Single(candidate) => {
    34,078 ( 0.00%)              Ok(ProjectedTy::Progress(confirm_candidate(selcx, obligation, candidate)))
         .                   }
       530 ( 0.00%)          ProjectionTyCandidateSet::None => Ok(ProjectedTy::NoProgress(
         .                       selcx
         .                           .tcx()
       212 ( 0.00%)                  .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs),
         .                   )),
         .                   // Error occurred while trying to processing impls.
         .                   ProjectionTyCandidateSet::Error(e) => Err(ProjectionTyError::TraitSelectionError(e)),
         .                   // Inherent ambiguity that prevents us from even enumerating the
         .                   // candidates.
     1,492 ( 0.00%)          ProjectionTyCandidateSet::Ambiguous => Err(ProjectionTyError::TooManyCandidates),
         .               }
     4,535 ( 0.00%)  }
         .           
         .           /// The first thing we have to do is scan through the parameter
         .           /// environment to see whether there are any projection predicates
         .           /// there that can answer this question.
         .           fn assemble_candidates_from_param_env<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
         .           ) {
         .               debug!("assemble_candidates_from_param_env(..)");
         .               assemble_candidates_from_predicates(
         .                   selcx,
         .                   obligation,
         .                   candidate_set,
         .                   ProjectionTyCandidate::ParamEnv,
     2,028 ( 0.00%)          obligation.param_env.caller_bounds().iter(),
         .                   false,
         .               );
         .           }
         .           
         .           /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find
         .           /// that the definition of `Foo` has some clues:
         .           ///
         .           /// ```
-- line 1143 ----------------------------------------
-- line 1152 ----------------------------------------
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
         .           ) {
         .               debug!("assemble_candidates_from_trait_def(..)");
         .           
         .               let tcx = selcx.tcx();
         .               // Check whether the self-type is itself a projection.
         .               // If so, extract what we know from the trait and try to come up with a good answer.
    23,766 ( 0.00%)      let bounds = match *obligation.predicate.self_ty().kind() {
         .                   ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),
         .                   ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),
         .                   ty::Infer(ty::TyVar(_)) => {
         .                       // If the self-type is an inference variable, then it MAY wind up
         .                       // being a projected type, so induce an ambiguity.
         .                       candidate_set.mark_ambiguous();
         .                       return;
         .                   }
-- line 1168 ----------------------------------------
-- line 1192 ----------------------------------------
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
         .           ) {
         .               debug!("assemble_candidates_from_object_ty(..)");
         .           
         .               let tcx = selcx.tcx();
         .           
     4,056 ( 0.00%)      let self_ty = obligation.predicate.self_ty();
         .               let object_ty = selcx.infcx().shallow_resolve(self_ty);
    10,140 ( 0.00%)      let data = match object_ty.kind() {
         .                   ty::Dynamic(data, ..) => data,
         .                   ty::Infer(ty::TyVar(_)) => {
         .                       // If the self-type is an inference variable, then it MAY wind up
         .                       // being an object type, so induce an ambiguity.
         .                       candidate_set.mark_ambiguous();
         .                       return;
         .                   }
         .                   _ => return,
-- line 1210 ----------------------------------------
-- line 1235 ----------------------------------------
         .               ctor: fn(ty::PolyProjectionPredicate<'tcx>) -> ProjectionTyCandidate<'tcx>,
         .               env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
         .               potentially_unnormalized_candidates: bool,
         .           ) {
         .               let infcx = selcx.infcx();
         .               for predicate in env_predicates {
         .                   debug!(?predicate);
         .                   let bound_predicate = predicate.kind();
     6,010 ( 0.00%)          if let ty::PredicateKind::Projection(data) = predicate.kind().skip_binder() {
     4,128 ( 0.00%)              let data = bound_predicate.rebind(data);
     2,064 ( 0.00%)              let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;
         .           
     3,094 ( 0.00%)              let is_match = same_def_id
         .                           && infcx.probe(|_| {
     3,093 ( 0.00%)                      selcx.match_projection_projections(
         .                                   obligation,
     9,279 ( 0.00%)                          data,
         .                                   potentially_unnormalized_candidates,
         .                               )
         .                           });
         .           
         .                       debug!(?data, ?is_match, ?same_def_id);
         .           
     2,062 ( 0.00%)              if is_match {
    11,341 ( 0.00%)                  candidate_set.push_candidate(ctor(data));
         .           
         .                           if potentially_unnormalized_candidates
         .                               && !obligation.predicate.has_infer_types_or_consts()
         .                           {
         .                               // HACK: Pick the first trait def candidate for a fully
         .                               // inferred predicate. This is to allow duplicates that
         .                               // differ only in normalization.
         .                               return;
-- line 1267 ----------------------------------------
-- line 1274 ----------------------------------------
         .           #[tracing::instrument(level = "debug", skip(selcx, obligation, candidate_set))]
         .           fn assemble_candidates_from_impls<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
         .           ) {
         .               // If we are resolving `<T as TraitRef<...>>::Item == Type`,
         .               // start out by selecting the predicate `T as TraitRef<...>`:
     6,084 ( 0.00%)      let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));
     4,056 ( 0.00%)      let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());
    18,252 ( 0.00%)      let _ = selcx.infcx().commit_if_ok(|_| {
    12,168 ( 0.00%)          let impl_source = match selcx.select(&trait_obligation) {
    16,550 ( 0.00%)              Ok(Some(impl_source)) => impl_source,
         .                       Ok(None) => {
         .                           candidate_set.mark_ambiguous();
         .                           return Err(());
         .                       }
         .                       Err(e) => {
         .                           debug!(error = ?e, "selection error");
         .                           candidate_set.mark_error(e);
         .                           return Err(());
         .                       }
         .                   };
         .           
     8,275 ( 0.00%)          let eligible = match &impl_source {
         .                       super::ImplSource::Closure(_)
         .                       | super::ImplSource::Generator(_)
         .                       | super::ImplSource::FnPointer(_)
         .                       | super::ImplSource::TraitAlias(_) => {
         .                           debug!(?impl_source);
         .                           true
         .                       }
         .                       super::ImplSource::UserDefined(impl_data) => {
-- line 1306 ----------------------------------------
-- line 1322 ----------------------------------------
         .                           //
         .                           // In either case, we handle this by not adding a
         .                           // candidate for an impl if it contains a `default`
         .                           // type.
         .                           //
         .                           // NOTE: This should be kept in sync with the similar code in
         .                           // `rustc_ty_utils::instance::resolve_associated_item()`.
         .                           let node_item =
    13,815 ( 0.00%)                      assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)
         .                                   .map_err(|ErrorReported| ())?;
         .           
     4,605 ( 0.00%)                  if node_item.is_final() {
         .                               // Non-specializable items are always projectable.
         .                               true
         .                           } else {
         .                               // Only reveal a specializable default if we're past type-checking
         .                               // and the obligation is monomorphic, otherwise passes such as
         .                               // transmute checking and polymorphic MIR optimizations could
         .                               // get a result which isn't correct for all monomorphizations.
         .                               if obligation.param_env.reveal() == Reveal::All {
-- line 1341 ----------------------------------------
-- line 1495 ----------------------------------------
         .                               obligation.cause.span,
         .                               &format!("Cannot project an associated type from `{:?}`", impl_source),
         .                           );
         .                           return Err(());
         .                       }
         .                   };
         .           
         .                   if eligible {
    21,686 ( 0.00%)              if candidate_set.push_candidate(ProjectionTyCandidate::Select(impl_source)) {
         .                           Ok(())
         .                       } else {
         .                           Err(())
         .                       }
         .                   } else {
         .                       Err(())
         .                   }
       212 ( 0.00%)      });
         .           }
         .           
         .           fn confirm_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               candidate: ProjectionTyCandidate<'tcx>,
         .           ) -> Progress<'tcx> {
         .               debug!(?obligation, ?candidate, "confirm_candidate");
     7,745 ( 0.00%)      let mut progress = match candidate {
         .                   ProjectionTyCandidate::ParamEnv(poly_projection)
         .                   | ProjectionTyCandidate::Object(poly_projection) => {
    14,434 ( 0.00%)              confirm_param_env_candidate(selcx, obligation, poly_projection, false)
         .                   }
         .           
         .                   ProjectionTyCandidate::TraitDef(poly_projection) => {
         .                       confirm_param_env_candidate(selcx, obligation, poly_projection, true)
         .                   }
         .           
         .                   ProjectionTyCandidate::Select(impl_source) => {
     5,180 ( 0.00%)              confirm_select_candidate(selcx, obligation, impl_source)
         .                   }
         .               };
         .               // When checking for cycle during evaluation, we compare predicates with
         .               // "syntactic" equality. Since normalization generally introduces a type
         .               // with new region variables, we need to resolve them to existing variables
         .               // when possible for this to work. See `auto-trait-projection-recursion.rs`
         .               // for a case where this matters.
     2,580 ( 0.00%)      if progress.ty.has_infer_regions() {
       648 ( 0.00%)          progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);
         .               }
         .               progress
         .           }
         .           
         .           fn confirm_select_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               impl_source: Selection<'tcx>,
         .           ) -> Progress<'tcx> {
     2,590 ( 0.00%)      match impl_source {
     2,520 ( 0.00%)          super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),
         .                   super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),
        84 ( 0.00%)          super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),
         .                   super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),
         .                   super::ImplSource::DiscriminantKind(data) => {
         .                       confirm_discriminant_kind_candidate(selcx, obligation, data)
         .                   }
         .                   super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),
         .                   super::ImplSource::Object(_)
         .                   | super::ImplSource::AutoImpl(..)
         .                   | super::ImplSource::Param(..)
-- line 1561 ----------------------------------------
-- line 1700 ----------------------------------------
         .                   .with_addl_obligations(obligations)
         .           }
         .           
         .           fn confirm_closure_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               impl_source: ImplSourceClosureData<'tcx, PredicateObligation<'tcx>>,
         .           ) -> Progress<'tcx> {
        56 ( 0.00%)      let closure_sig = impl_source.substs.as_closure().sig();
       140 ( 0.00%)      let Normalized { value: closure_sig, obligations } = normalize_with_depth(
         .                   selcx,
        14 ( 0.00%)          obligation.param_env,
         .                   obligation.cause.clone(),
        42 ( 0.00%)          obligation.recursion_depth + 1,
       112 ( 0.00%)          closure_sig,
         .               );
         .           
         .               debug!(?obligation, ?closure_sig, ?obligations, "confirm_closure_candidate");
         .           
        42 ( 0.00%)      confirm_callable_candidate(selcx, obligation, closure_sig, util::TupleArgumentsFlag::No)
        98 ( 0.00%)          .with_addl_obligations(impl_source.nested)
        98 ( 0.00%)          .with_addl_obligations(obligations)
         .           }
         .           
         .           fn confirm_callable_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               fn_sig: ty::PolyFnSig<'tcx>,
         .               flag: util::TupleArgumentsFlag,
         .           ) -> Progress<'tcx> {
         .               let tcx = selcx.tcx();
         .           
         .               debug!(?obligation, ?fn_sig, "confirm_callable_candidate");
         .           
        70 ( 0.00%)      let fn_once_def_id = tcx.require_lang_item(LangItem::FnOnce, None);
        70 ( 0.00%)      let fn_once_output_def_id = tcx.require_lang_item(LangItem::FnOnceOutput, None);
         .           
       140 ( 0.00%)      let predicate = super::util::closure_trait_ref_and_return_type(
         .                   tcx,
         .                   fn_once_def_id,
        28 ( 0.00%)          obligation.predicate.self_ty(),
        56 ( 0.00%)          fn_sig,
         .                   flag,
         .               )
         .               .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {
         .                   projection_ty: ty::ProjectionTy {
         .                       substs: trait_ref.substs,
         .                       item_def_id: fn_once_output_def_id,
         .                   },
         .                   term: ret_type.into(),
         .               });
         .           
       168 ( 0.00%)      confirm_param_env_candidate(selcx, obligation, predicate, true)
         .           }
         .           
    12,540 ( 0.00%)  fn confirm_param_env_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,
         .               potentially_unnormalized_candidate: bool,
         .           ) -> Progress<'tcx> {
         .               let infcx = selcx.infcx();
         .               let cause = &obligation.cause;
     2,090 ( 0.00%)      let param_env = obligation.param_env;
         .           
     4,180 ( 0.00%)      let (cache_entry, _) = infcx.replace_bound_vars_with_fresh_vars(
     3,135 ( 0.00%)          cause.span,
         .                   LateBoundRegionConversionTime::HigherRankedType,
         .                   poly_cache_entry,
         .               );
         .           
     2,090 ( 0.00%)      let cache_projection = cache_entry.projection_ty;
         .               let mut nested_obligations = Vec::new();
     3,135 ( 0.00%)      let obligation_projection = obligation.predicate;
     8,360 ( 0.00%)      let obligation_projection = ensure_sufficient_stack(|| {
     4,180 ( 0.00%)          normalize_with_depth_to(
         .                       selcx,
     1,045 ( 0.00%)              obligation.param_env,
         .                       obligation.cause.clone(),
     3,135 ( 0.00%)              obligation.recursion_depth + 1,
     2,090 ( 0.00%)              obligation_projection,
         .                       &mut nested_obligations,
         .                   )
         .               });
     2,090 ( 0.00%)      let cache_projection = if potentially_unnormalized_candidate {
        98 ( 0.00%)          ensure_sufficient_stack(|| {
        56 ( 0.00%)              normalize_with_depth_to(
         .                           selcx,
        14 ( 0.00%)                  obligation.param_env,
         .                           obligation.cause.clone(),
        42 ( 0.00%)                  obligation.recursion_depth + 1,
        28 ( 0.00%)                  cache_projection,
         .                           &mut nested_obligations,
         .                       )
         .                   })
         .               } else {
     2,062 ( 0.00%)          cache_projection
         .               };
         .           
         .               debug!(?cache_projection, ?obligation_projection);
         .           
     2,090 ( 0.00%)      match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {
         .                   Ok(InferOk { value: _, obligations }) => {
         .                       nested_obligations.extend(obligations);
     2,090 ( 0.00%)              assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);
         .                       // FIXME(associated_const_equality): Handle consts here as well? Maybe this progress type should just take
         .                       // a term instead.
     8,360 ( 0.00%)              Progress { ty: cache_entry.term.ty().unwrap(), obligations: nested_obligations }
         .                   }
         .                   Err(e) => {
         .                       let msg = format!(
         .                           "Failed to unify obligation `{:?}` with poly_projection `{:?}`: {:?}",
         .                           obligation, poly_cache_entry, e,
         .                       );
         .                       debug!("confirm_param_env_candidate: {}", msg);
         .                       let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);
         .                       Progress { ty: err, obligations: vec![] }
         .                   }
         .               }
     8,360 ( 0.00%)  }
         .           
         .           fn confirm_impl_candidate<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,
         .           ) -> Progress<'tcx> {
         .               let tcx = selcx.tcx();
         .           
     2,016 ( 0.00%)      let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;
     1,512 ( 0.00%)      let assoc_item_id = obligation.predicate.item_def_id;
     2,016 ( 0.00%)      let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();
         .           
     2,016 ( 0.00%)      let param_env = obligation.param_env;
     3,528 ( 0.00%)      let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {
     5,040 ( 0.00%)          Ok(assoc_ty) => assoc_ty,
         .                   Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },
         .               };
         .           
     2,016 ( 0.00%)      if !assoc_ty.item.defaultness.has_value() {
         .                   // This means that the impl is missing a definition for the
         .                   // associated type. This error will be reported by the type
         .                   // checker method `check_impl_items_against_trait`, so here we
         .                   // just return Error.
         .                   debug!(
         .                       "confirm_impl_candidate: no associated type {:?} for {:?}",
         .                       assoc_ty.item.name, obligation.predicate
         .                   );
-- line 1846 ----------------------------------------
-- line 1847 ----------------------------------------
         .                   return Progress { ty: tcx.ty_error(), obligations: nested };
         .               }
         .               // If we're trying to normalize `<Vec<u32> as X>::A<S>` using
         .               //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:
         .               //
         .               // * `obligation.predicate.substs` is `[Vec<u32>, S]`
         .               // * `substs` is `[u32]`
         .               // * `substs` ends up as `[u32, S]`
     3,024 ( 0.00%)      let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);
         .               let substs =
     5,544 ( 0.00%)          translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);
       504 ( 0.00%)      let ty = tcx.type_of(assoc_ty.item.def_id);
     1,512 ( 0.00%)      if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {
         .                   let err = tcx.ty_error_with_message(
         .                       obligation.cause.span,
         .                       "impl item and trait item have different parameter counts",
         .                   );
         .                   Progress { ty: err, obligations: nested }
         .               } else {
     1,008 ( 0.00%)          assoc_ty_own_obligations(selcx, obligation, &mut nested);
         .                   Progress { ty: ty.subst(tcx, substs), obligations: nested }
         .               }
         .           }
         .           
         .           // Get obligations corresponding to the predicates from the where-clause of the
         .           // associated type itself.
         .           // Note: `feature(generic_associated_types)` is required to write such
         .           // predicates, even for non-generic associcated types.
    13,941 ( 0.00%)  fn assoc_ty_own_obligations<'cx, 'tcx>(
         .               selcx: &mut SelectionContext<'cx, 'tcx>,
         .               obligation: &ProjectionTyObligation<'tcx>,
         .               nested: &mut Vec<PredicateObligation<'tcx>>,
         .           ) {
         .               let tcx = selcx.tcx();
    13,941 ( 0.00%)      for predicate in tcx
     3,098 ( 0.00%)          .predicates_of(obligation.predicate.item_def_id)
     4,647 ( 0.00%)          .instantiate_own(tcx, obligation.predicate.substs)
         .                   .predicates
         .               {
         .                   let normalized = normalize_with_depth_to(
         .                       selcx,
         .                       obligation.param_env,
         .                       obligation.cause.clone(),
         .                       obligation.recursion_depth + 1,
         .                       predicate,
-- line 1891 ----------------------------------------
-- line 1893 ----------------------------------------
         .                   );
         .                   nested.push(Obligation::with_depth(
         .                       obligation.cause.clone(),
         .                       obligation.recursion_depth + 1,
         .                       obligation.param_env,
         .                       normalized,
         .                   ));
         .               }
    12,392 ( 0.00%)  }
         .           
         .           /// Locate the definition of an associated type in the specialization hierarchy,
         .           /// starting from the given impl.
         .           ///
         .           /// Based on the "projection mode", this lookup may in fact only examine the
         .           /// topmost impl. See the comments for `Reveal` for more details.
    18,351 ( 0.00%)  fn assoc_ty_def(
         .               selcx: &SelectionContext<'_, '_>,
         .               impl_def_id: DefId,
         .               assoc_ty_def_id: DefId,
         .           ) -> Result<specialization_graph::LeafDef, ErrorReported> {
         .               let tcx = selcx.tcx();
     4,078 ( 0.00%)      let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;
         .               let trait_def = tcx.trait_def(trait_def_id);
         .           
         .               // This function may be called while we are still building the
         .               // specialization graph that is queried below (via TraitDef::ancestors()),
         .               // so, in order to avoid unnecessary infinite recursion, we manually look
         .               // for the associated item at the given impl.
         .               // If there is no such item in that impl, this function will fail with a
         .               // cycle error if the specialization graph is currently being built.
     4,078 ( 0.00%)      if let Some(&impl_item_id) = tcx.impl_item_implementor_ids(impl_def_id).get(&assoc_ty_def_id) {
         .                   let item = tcx.associated_item(impl_item_id);
         .                   let impl_node = specialization_graph::Node::Impl(impl_def_id);
    24,468 ( 0.00%)          return Ok(specialization_graph::LeafDef {
    12,234 ( 0.00%)              item: *item,
         .                       defining_node: impl_node,
    10,195 ( 0.00%)              finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },
         .                   });
         .               }
         .           
         .               let ancestors = trait_def.ancestors(tcx, impl_def_id)?;
         .               if let Some(assoc_item) = ancestors.leaf_def(tcx, assoc_ty_def_id) {
         .                   Ok(assoc_item)
         .               } else {
         .                   // This is saying that neither the trait nor
-- line 1937 ----------------------------------------
-- line 1941 ----------------------------------------
         .                   // if the user wrote a bad item name, it
         .                   // should have failed in astconv.
         .                   bug!(
         .                       "No associated type `{}` for {}",
         .                       tcx.item_name(assoc_ty_def_id),
         .                       tcx.def_path_str(impl_def_id)
         .                   )
         .               }
    18,351 ( 0.00%)  }
         .           
         .           crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {
         .               fn from_poly_projection_predicate(
         .                   selcx: &mut SelectionContext<'cx, 'tcx>,
         .                   predicate: ty::PolyProjectionPredicate<'tcx>,
         .               ) -> Option<Self>;
         .           }
         .           
         .           impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {
       763 ( 0.00%)      fn from_poly_projection_predicate(
         .                   selcx: &mut SelectionContext<'cx, 'tcx>,
         .                   predicate: ty::PolyProjectionPredicate<'tcx>,
         .               ) -> Option<Self> {
         .                   let infcx = selcx.infcx();
         .                   // We don't do cross-snapshot caching of obligations with escaping regions,
         .                   // so there's no cache key to use
       654 ( 0.00%)          predicate.no_bound_vars().map(|predicate| {
       218 ( 0.00%)              ProjectionCacheKey::new(
         .                           // We don't attempt to match up with a specific type-variable state
         .                           // from a specific call to `opt_normalize_projection_type` - if
         .                           // there's no precise match, the original cache entry is "stranded"
         .                           // anyway.
         .                           infcx.resolve_vars_if_possible(predicate.projection_ty),
         .                       )
         .                   })
       872 ( 0.00%)      }
         .           }

 6,626,700 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir                  

-- line 56 ----------------------------------------
         .           #[derive(Copy, Clone, Debug)]
         .           pub enum RelationDir {
         .               SubtypeOf,
         .               SupertypeOf,
         .               EqTo,
         .           }
         .           
         .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
23,801,022 ( 0.24%)      pub fn super_combine_tys<R>(
         .                   &self,
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>>
         .               where
         .                   R: TypeRelation<'tcx>,
         .               {
         .                   let a_is_expected = relation.a_is_expected();
         .           
18,533,567 ( 0.18%)          match (a.kind(), b.kind()) {
         .                       // Relate integral variables to other types
        24 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
       132 ( 0.00%)                  self.inner
         .                               .borrow_mut()
         .                               .int_unification_table()
         .                               .unify_var_var(a_id, b_id)
         .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
         .                           Ok(a)
         .                       }
       402 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
       804 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
         .                       }
         .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
         .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
         .                       }
       506 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
     1,012 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
         .                       }
        28 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
        56 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
         .                       }
         .           
         .                       // Relate floating-point variables to other types
         .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
         .                           self.inner
         .                               .borrow_mut()
         .                               .float_unification_table()
         .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
         .                           self.unify_float_variable(a_is_expected, v_id, v)
         .                       }
         .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
         .                           self.unify_float_variable(!a_is_expected, v_id, v)
         .                       }
         .           
         .                       // All other cases of inference are errors
         .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
     6,345 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
         .                       }
         .           
15,874,554 ( 0.16%)              _ => ty::relate::super_relate_tys(relation, a, b),
         .                   }
23,801,022 ( 0.24%)      }
         .           
31,609,104 ( 0.32%)      pub fn super_combine_consts<R>(
         .                   &self,
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
         .               where
         .                   R: ConstEquateRelation<'tcx>,
         .               {
         .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
13,171,090 ( 0.13%)          if a == b {
         .                       return Ok(a);
         .                   }
         .           
 7,902,204 ( 0.08%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
 7,902,204 ( 0.08%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
         .           
         .                   let a_is_expected = relation.a_is_expected();
         .           
36,857,077 ( 0.37%)          match (a.val, b.val) {
         .                       (
         .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
         .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
         .                       ) => {
        12 ( 0.00%)                  self.inner
         .                               .borrow_mut()
         .                               .const_unification_table()
         .                               .unify_var_var(a_vid, b_vid)
         .                               .map_err(|e| const_unification_error(a_is_expected, e))?;
         .                           return Ok(a);
         .                       }
         .           
         .                       // All other cases of inference with other variables are errors.
         .                       (ty::ConstKind::Infer(InferConst::Var(_)), ty::ConstKind::Infer(_))
         .                       | (ty::ConstKind::Infer(_), ty::ConstKind::Infer(InferConst::Var(_))) => {
         .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
         .                       }
         .           
         .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
    43,057 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
         .                       }
         .           
         .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
     1,775 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
         .                       }
         .                       (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
         .                           // FIXME(#59490): Need to remove the leak check to accommodate
         .                           // escaping bound variables here.
         .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
         .                               relation.const_equate_obligation(a, b);
         .                           }
         .                           return Ok(b);
-- line 174 ----------------------------------------
-- line 179 ----------------------------------------
         .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
         .                               relation.const_equate_obligation(a, b);
         .                           }
         .                           return Ok(a);
         .                       }
         .                       _ => {}
         .                   }
         .           
13,137,800 ( 0.13%)          ty::relate::super_relate_consts(relation, a, b)
23,706,828 ( 0.24%)      }
         .           
         .               /// Unifies the const variable `target_vid` with the given constant.
         .               ///
         .               /// This also tests if the given const `ct` contains an inference variable which was previously
         .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
         .               /// would result in an infinite type as we continuously replace an inference variable
         .               /// in `ct` with `ct` itself.
         .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
         .               /// of `fn bind` (meaning that its substs contain `N`).
         .               ///
         .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
         .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
         .               ///
         .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
         .               ///
         .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
   123,614 ( 0.00%)      #[instrument(level = "debug", skip(self))]
         .               fn unify_const_variable(
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   target_vid: ty::ConstVid<'tcx>,
         .                   ct: &'tcx ty::Const<'tcx>,
         .                   vid_is_expected: bool,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .                   let (for_universe, span) = {
         .                       let mut inner = self.inner.borrow_mut();
    26,024 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
    13,012 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
    13,012 ( 0.00%)              match var_value.val {
         .                           ConstVariableValue::Known { value } => {
         .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
         .                           }
         .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
         .                       }
         .                   };
    52,048 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
         .                       .relate(ct, ct)?;
         .           
    26,024 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .const_unification_table()
         .                       .unify_var_value(
         .                           target_vid,
    39,036 ( 0.00%)                  ConstVarValue {
         .                               origin: ConstVariableOrigin {
         .                                   kind: ConstVariableOriginKind::ConstInference,
         .                                   span: DUMMY_SP,
         .                               },
         .                               val: ConstVariableValue::Known { value },
         .                           },
         .                       )
         .                       .map(|()| value)
         .                       .map_err(|e| const_unification_error(vid_is_expected, e))
         .               }
         .           
     5,616 ( 0.00%)      fn unify_integral_variable(
         .                   &self,
         .                   vid_is_expected: bool,
         .                   vid: ty::IntVid,
         .                   val: ty::IntVarValue,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
     7,488 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .int_unification_table()
         .                       .unify_var_value(vid, Some(val))
         .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
     1,872 ( 0.00%)          match val {
       402 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
     2,004 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
         .                   }
     7,488 ( 0.00%)      }
         .           
         .               fn unify_float_variable(
         .                   &self,
         .                   vid_is_expected: bool,
         .                   vid: ty::FloatVid,
         .                   val: ty::FloatTy,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
         .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
         .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
         .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
         .                   Ok(self.tcx.mk_mach_float(val))
         .               }
         .           }
         .           
         .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
         .               pub fn tcx(&self) -> TyCtxt<'tcx> {
23,679,976 ( 0.24%)          self.infcx.tcx
         .               }
         .           
         .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
         .                   Equate::new(self, a_is_expected)
         .               }
         .           
    29,938 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
         .                   Sub::new(self, a_is_expected)
    14,969 ( 0.00%)      }
         .           
         .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
         .                   Lub::new(self, a_is_expected)
         .               }
         .           
 4,251,984 ( 0.04%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
         .                   Glb::new(self, a_is_expected)
 2,125,992 ( 0.02%)      }
         .           
         .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
         .               /// The idea is that we should ensure that the type `a_ty` is equal
         .               /// to, a subtype of, or a supertype of (respectively) the type
         .               /// to which `b_vid` is bound.
         .               ///
         .               /// Since `b_vid` has not yet been instantiated with a type, we
         .               /// will first instantiate `b_vid` with a *generalized* version
         .               /// of `a_ty`. Generalization introduces other inference
         .               /// variables wherever subtyping could occur.
   107,195 ( 0.00%)      pub fn instantiate(
         .                   &mut self,
         .                   a_ty: Ty<'tcx>,
         .                   dir: RelationDir,
         .                   b_vid: ty::TyVid,
         .                   a_is_expected: bool,
         .               ) -> RelateResult<'tcx, ()> {
         .                   use self::RelationDir::*;
         .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
         .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
         .                   //   inference variable,
         .                   // - and `dir` == `SubtypeOf`.
         .                   //
         .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
         .                   // `'?2` and `?3` are fresh region/type inference
         .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
         .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
     9,745 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
         .                   debug!(
         .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
         .                       a_ty, dir, b_vid, b_ty
         .                   );
    68,215 ( 0.00%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
         .           
     9,745 ( 0.00%)          if needs_wf {
         .                       self.obligations.push(Obligation::new(
         .                           self.trace.cause.clone(),
         .                           self.param_env,
         .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
         .                               .to_predicate(self.infcx.tcx),
         .                       ));
         .                   }
         .           
         .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
         .                   //
         .                   // FIXME(#16847): This code is non-ideal because all these subtype
         .                   // relations wind up attributed to the same spans. We need
         .                   // to associate causes/spans with each of the relations in
         .                   // the stack to get this right.
    36,190 ( 0.00%)          match dir {
    20,380 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
     6,975 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
     8,548 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_ty,
         .                           b_ty,
         .                       ),
         .                   }?;
         .           
     9,745 ( 0.00%)          Ok(())
    77,960 ( 0.00%)      }
         .           
         .               /// Attempts to generalize `ty` for the type variable `for_vid`.
         .               /// This checks for cycle -- that is, whether the type `ty`
         .               /// references `for_vid`. The `dir` is the "direction" for which we
         .               /// a performing the generalization (i.e., are we producing a type
         .               /// that can be used as a supertype etc).
         .               ///
         .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
         .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
         .                   // Determine the ambient variance within which `ty` appears.
         .                   // The surrounding equation is:
         .                   //
         .                   //     ty [op] ty2
         .                   //
         .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
         .                   // naturally.
    38,980 ( 0.00%)          let ambient_variance = match dir {
         .                       RelationDir::EqTo => ty::Invariant,
         .                       RelationDir::SubtypeOf => ty::Covariant,
         .                       RelationDir::SupertypeOf => ty::Contravariant,
         .                   };
         .           
         .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
         .           
    97,450 ( 0.00%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
         .                       v @ TypeVariableValue::Known { .. } => {
         .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
         .                       }
         .                       TypeVariableValue::Unknown { universe } => universe,
         .                   };
         .           
         .                   debug!("generalize: for_universe = {:?}", for_universe);
         .                   debug!("generalize: trace = {:?}", self.trace);
         .           
    97,450 ( 0.00%)          let mut generalize = Generalizer {
         .                       infcx: self.infcx,
         .                       cause: &self.trace.cause,
         .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
         .                       for_universe,
         .                       ambient_variance,
         .                       needs_wf: false,
         .                       root_ty: ty,
     9,745 ( 0.00%)              param_env: self.param_env,
         .                       cache: SsoHashMap::new(),
         .                   };
         .           
    19,490 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
     9,745 ( 0.00%)              Ok(ty) => ty,
         .                       Err(e) => {
         .                           debug!("generalize: failure {:?}", e);
         .                           return Err(e);
         .                       }
         .                   };
     9,745 ( 0.00%)          let needs_wf = generalize.needs_wf;
         .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
         .                   Ok(Generalization { ty, needs_wf })
         .               }
         .           
         .               pub fn add_const_equate_obligation(
         .                   &mut self,
         .                   a_is_expected: bool,
         .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
         .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
         .               /// holds, which in turn implies that `?C::Item == ?D`. So once
         .               /// `?C` is constrained, that should suffice to restrict `?D`.
         .               needs_wf: bool,
         .           }
         .           
         .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
     9,781 ( 0.00%)          self.infcx.tcx
         .               }
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       627 ( 0.00%)          self.param_env
         .               }
         .           
         .               fn tag(&self) -> &'static str {
         .                   "Generalizer"
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
         .                   true
         .               }
         .           
       164 ( 0.00%)      fn binders<T>(
         .                   &mut self,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
         .               where
         .                   T: Relate<'tcx>,
         .               {
       268 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
       164 ( 0.00%)      }
         .           
    27,500 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
     2,500 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
         .                       // Avoid fetching the variance if we are in an invariant
         .                       // context; no need, and it can induce dependency cycles
         .                       // (e.g., #41849).
     1,492 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
         .                   } else {
         .                       let tcx = self.tcx();
         .                       let opt_variances = tcx.variances_of(item_def_id);
     5,040 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
         .                   }
    22,500 ( 0.00%)      }
         .           
    13,374 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   _info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
         .               ) -> RelateResult<'tcx, T> {
         .                   let old_ambient_variance = self.ambient_variance;
    35,103 ( 0.00%)          self.ambient_variance = self.ambient_variance.xform(variance);
         .           
         .                   let result = self.relate(a, b);
     6,700 ( 0.00%)          self.ambient_variance = old_ambient_variance;
         .                   result
    10,402 ( 0.00%)      }
         .           
   128,349 ( 0.00%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
    14,261 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
    85,566 ( 0.00%)          if let Some(result) = self.cache.get(&t) {
     1,064 ( 0.00%)              return result.clone();
         .                   }
         .                   debug!("generalize: t={:?}", t);
         .           
         .                   // Check to see whether the type we are generalizing references
         .                   // any other type variable related to `vid` via
         .                   // subtyping. This is basically our "occurs check", preventing
         .                   // us from creating infinitely sized types.
    45,271 ( 0.00%)          let result = match *t.kind() {
       219 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
       219 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
       219 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
       219 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
         .                               // If sub-roots are equal, then `for_vid` and
         .                               // `vid` are related via subtyping.
         .                               Err(TypeError::CyclicTy(self.root_ty))
         .                           } else {
     1,314 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
       438 ( 0.00%)                      match probe {
         .                                   TypeVariableValue::Known { value: u } => {
         .                                       debug!("generalize: known value {:?}", u);
         .                                       self.relate(u, u)
         .                                   }
         .                                   TypeVariableValue::Unknown { universe } => {
       815 ( 0.00%)                              match self.ambient_variance {
         .                                           // Invariant: no need to make a fresh type variable.
         .                                           ty::Invariant => {
       320 ( 0.00%)                                      if self.for_universe.can_name(universe) {
       256 ( 0.00%)                                          return Ok(t);
         .                                               }
         .                                           }
         .           
         .                                           // Bivariant: make a fresh var, but we
         .                                           // may need a WF predicate. See
         .                                           // comment on `needs_wf` field for
         .                                           // more info.
         .                                           ty::Bivariant => self.needs_wf = true,
         .           
         .                                           // Co/contravariant: this will be
         .                                           // sufficiently constrained later on.
         .                                           ty::Covariant | ty::Contravariant => (),
         .                                       }
         .           
         .                                       let origin =
       891 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
       693 ( 0.00%)                              let new_var_id = self
         .                                           .infcx
         .                                           .inner
         .                                           .borrow_mut()
         .                                           .type_variables()
       693 ( 0.00%)                                  .new_var(self.for_universe, origin);
         .                                       let u = self.tcx().mk_ty_var(new_var_id);
         .           
         .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
         .                                       // operation. This is needed to detect cyclic types. To see why, see the
         .                                       // docs in the `type_variables` module.
       495 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
         .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
       198 ( 0.00%)                              Ok(u)
         .                                   }
         .                               }
         .                           }
         .                       }
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
         .                           // No matter what mode we are in,
         .                           // integer/floating-point types must be equal to be
         .                           // relatable.
       493 ( 0.00%)                  Ok(t)
         .                       }
    39,849 ( 0.00%)              _ => relate::super_relate_tys(self, t, t),
         .                   };
         .           
   139,310 ( 0.00%)          self.cache.insert(t, result.clone());
    83,586 ( 0.00%)          return result;
   128,349 ( 0.00%)      }
         .           
    21,872 ( 0.00%)      fn regions(
         .                   &mut self,
         .                   r: ty::Region<'tcx>,
         .                   r2: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
     2,657 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
         .                   debug!("generalize: regions r={:?}", r);
         .           
     5,314 ( 0.00%)          match *r {
         .                       // Never make variables for regions bound within the type itself,
         .                       // nor for erased regions.
         .                       ty::ReLateBound(..) | ty::ReErased => {
         .                           return Ok(r);
         .                       }
         .           
         .                       ty::RePlaceholder(..)
         .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   // If we are in an invariant context, we can re-use the region
         .                   // as is, unless it happens to be in some universe that we
         .                   // can't name. (In the case of a region *variable*, we could
         .                   // use it if we promoted it into our universe, but we don't
         .                   // bother.)
     5,328 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
     5,904 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
    13,776 ( 0.00%)              if self.for_universe.can_name(r_universe) {
         .                           return Ok(r);
         .                       }
         .                   }
         .           
         .                   // FIXME: This is non-ideal because we don't give a
         .                   // very descriptive origin for this region variable.
     6,960 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
    21,872 ( 0.00%)      }
         .           
     5,652 ( 0.00%)      fn consts(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .                   c2: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     1,881 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
         .           
         .                   match c.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
         1 ( 0.00%)                  let mut inner = self.infcx.inner.borrow_mut();
         4 ( 0.00%)                  let variable_table = &mut inner.const_unification_table();
         1 ( 0.00%)                  let var_value = variable_table.probe_value(vid);
         2 ( 0.00%)                  match var_value.val {
         .                               ConstVariableValue::Known { value: u } => {
         .                                   drop(inner);
         .                                   self.relate(u, u)
         .                               }
         1 ( 0.00%)                      ConstVariableValue::Unknown { universe } => {
         5 ( 0.00%)                          if self.for_universe.can_name(universe) {
         .                                       Ok(c)
         .                                   } else {
         .                                       let new_var_id = variable_table.new_key(ConstVarValue {
         .                                           origin: var_value.origin,
         .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
         .                                       });
         .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
         .                                   }
-- line 743 ----------------------------------------
-- line 754 ----------------------------------------
         .                               substs,
         .                               substs,
         .                           )?;
         .                           Ok(self.tcx().mk_const(ty::Const {
         .                               ty: c.ty,
         .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
         .                           }))
         .                       }
     3,135 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
         .                   }
     5,652 ( 0.00%)      }
         .           }
         .           
         .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
         .               /// Register an obligation that both constants must be equal to each other.
         .               ///
         .               /// If they aren't equal then the relation doesn't hold.
         .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
         .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
         .               target_vid: ty::ConstVid<'tcx>,
         .           }
         .           
         .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
         .           //
         .           // Both inputs are expected to be the same.
         .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
    25,888 ( 0.00%)          self.infcx.tcx
         .               }
         .           
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
     6,506 ( 0.00%)          self.param_env
         .               }
         .           
         .               fn tag(&self) -> &'static str {
         .                   "ConstInferUnifier"
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
         .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
         .                       return Ok(r);
         .                   } else {
         .                       // FIXME: This is non-ideal because we don't give a
         .                       // very descriptive origin for this region variable.
         .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
         .                   }
         .               }
         .           
   123,614 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
         .               fn consts(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .                   _c: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .                   debug_assert_eq!(c, _c);
         .                   debug!("ConstInferUnifier: c={:?}", c);
         .           
    32,530 ( 0.00%)          match c.val {
         .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
         .                           // Check if the current unification would end up
         .                           // unifying `target_vid` with a const which contains
         .                           // an inference variable which is unioned with `target_vid`.
         .                           //
         .                           // Not doing so can easily result in stack overflows.
         .                           if self
         .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
         .                               substs,
         .                               substs,
         .                           )?;
         .                           Ok(self.tcx().mk_const(ty::Const {
         .                               ty: c.ty,
         .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
         .                           }))
         .                       }
    32,530 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
         .                   }
         .               }
         .           }

13,328,939 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs
--------------------------------------------------------------------------------
Ir                  

-- line 62 ----------------------------------------
         .               message = "expected a `{Fn}<{Args}>` closure, found `{Self}`",
         .               label = "expected an `Fn<{Args}>` closure, found `{Self}`"
         .           )]
         .           #[fundamental] // so that regex can rely that `&str: !FnMut`
         .           #[must_use = "closures are lazy and do nothing unless called"]
         .           pub trait Fn<Args>: FnMut<Args> {
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
        95 ( 0.00%)      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
         .           }
         .           
         .           /// The version of the call operator that takes a mutable receiver.
         .           ///
         .           /// Instances of `FnMut` can be called repeatedly and may mutate state.
         .           ///
         .           /// `FnMut` is implemented automatically by closures which take mutable
         .           /// references to captured variables, as well as all types that implement
-- line 78 ----------------------------------------
-- line 142 ----------------------------------------
         .               message = "expected a `{FnMut}<{Args}>` closure, found `{Self}`",
         .               label = "expected an `FnMut<{Args}>` closure, found `{Self}`"
         .           )]
         .           #[fundamental] // so that regex can rely that `&str: !FnMut`
         .           #[must_use = "closures are lazy and do nothing unless called"]
         .           pub trait FnMut<Args>: FnOnce<Args> {
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
    66,296 ( 0.00%)      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
         .           }
         .           
         .           /// The version of the call operator that takes a by-value receiver.
         .           ///
         .           /// Instances of `FnOnce` can be called, but might not be callable multiple
         .           /// times. Because of this, if the only thing known about a type is that it
         .           /// implements `FnOnce`, it can only be called once.
         .           ///
-- line 158 ----------------------------------------
-- line 219 ----------------------------------------
         .           pub trait FnOnce<Args> {
         .               /// The returned type after the call operator is used.
         .               #[lang = "fn_once_output"]
         .               #[stable(feature = "fn_once_output", since = "1.12.0")]
         .               type Output;
         .           
         .               /// Performs the call operation.
         .               #[unstable(feature = "fn_traits", issue = "29625")]
 1,272,653 ( 0.01%)      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
         .           }
         .           
         .           mod impls {
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> Fn<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
         .                   extern "rust-call" fn call(&self, args: A) -> F::Output {
         4 ( 0.00%)              (**self).call(args)
         .                   }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnMut<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
-- line 245 ----------------------------------------
-- line 251 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnOnce<A> for &F
         .               where
         .                   F: Fn<A>,
         .               {
         .                   type Output = F::Output;
         .           
         .                   extern "rust-call" fn call_once(self, args: A) -> F::Output {
         2 ( 0.00%)              (*self).call(args)
         .                   }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnMut<A> for &mut F
         .               where
         .                   F: FnMut<A>,
         .               {
     7,746 ( 0.00%)          extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
   133,644 ( 0.00%)              (*self).call_mut(args)
     8,604 ( 0.00%)          }
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A, F: ?Sized> FnOnce<A> for &mut F
         .               where
         .                   F: FnMut<A>,
         .               {
         .                   type Output = F::Output;
58,418,873 ( 0.58%)          extern "rust-call" fn call_once(self, args: A) -> F::Output {
    57,349 ( 0.00%)              (*self).call_mut(args)
47,841,921 ( 0.48%)          }
         .               }
         .           }

    14,852 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                   

-- line 28 ----------------------------------------
          .           
          .               /// Returns a static string we can use for printouts.
          .               fn tag(&self) -> &'static str;
          .           
          .               /// Returns `true` if the value `a` is the "expected" type in the
          .               /// relation. Just affects error messages.
          .               fn a_is_expected(&self) -> bool;
          .           
        100 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
          .               where
          .                   F: FnOnce(&mut Self) -> R,
          .               {
          .                   f(self)
         88 ( 0.00%)      }
          .           
          .               /// Generic relation routine suitable for most anything.
    157,580 ( 0.00%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 23,816,652 ( 0.24%)          Relate::relate(self, a, b)
    129,332 ( 0.00%)      }
          .           
          .               /// Relate the two substitutions for the given item. The default
          .               /// is to look up the variance for the item and proceed
          .               /// accordingly.
     20,440 ( 0.00%)      fn relate_item_substs(
          .                   &mut self,
          .                   item_def_id: DefId,
          .                   a_subst: SubstsRef<'tcx>,
          .                   b_subst: SubstsRef<'tcx>,
          .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
          .                   debug!(
          .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
          .                       item_def_id, a_subst, b_subst
          .                   );
          .           
          .                   let tcx = self.tcx();
          .                   let opt_variances = tcx.variances_of(item_def_id);
      8,176 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
     18,396 ( 0.00%)      }
          .           
          .               /// Switch variance for the purpose of relating `a` and `b`.
          .               fn relate_with_variance<T: Relate<'tcx>>(
          .                   &mut self,
          .                   variance: ty::Variance,
          .                   info: ty::VarianceDiagInfo<'tcx>,
          .                   a: T,
          .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
          .                   a: Self,
          .                   b: Self,
          .               ) -> RelateResult<'tcx, Self>;
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Relate impls
          .           
     32,161 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
          .               relation: &mut R,
          .               a: ty::TypeAndMut<'tcx>,
          .               b: ty::TypeAndMut<'tcx>,
          .               base_ty: Ty<'tcx>,
          .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
          .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
      6,780 ( 0.00%)      if a.mutbl != b.mutbl {
        364 ( 0.00%)          Err(TypeError::Mutability)
          .               } else {
          .                   let mutbl = a.mutbl;
          .                   let (variance, info) = match mutbl {
          .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
          .                       ast::Mutability::Mut => {
          .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
          .                       }
          .                   };
      1,785 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
     13,727 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
          .               }
     33,385 ( 0.00%)  }
          .           
          .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
          .               relation: &mut R,
          .               variances: Option<(DefId, &[ty::Variance])>,
          .               a_subst: SubstsRef<'tcx>,
          .               b_subst: SubstsRef<'tcx>,
          .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 13,776,503 ( 0.14%)      let tcx = relation.tcx();
  5,285,551 ( 0.05%)      let mut cached_ty = None;
          .           
          .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 26,461,733 ( 0.26%)          let (variance, variance_info) = match variances {
      9,002 ( 0.00%)              Some((ty_def_id, variances)) => {
     13,503 ( 0.00%)                  let variance = variances[i];
      4,501 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
          .                               let ty =
      2,509 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
          .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
          .                           } else {
          .                               ty::VarianceDiagInfo::default()
          .                           };
          .                           (variance, variance_info)
          .                       }
          .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
          .                   };
  5,296,753 ( 0.05%)          relation.relate_with_variance(variance, variance_info, a, b)
          .               });
          .           
          .               tcx.mk_substs(params)
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
      3,497 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::FnSig<'tcx>,
          .                   b: ty::FnSig<'tcx>,
          .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
          .                   let tcx = relation.tcx();
          .           
      1,614 ( 0.00%)          if a.c_variadic != b.c_variadic {
          .                       return Err(TypeError::VariadicMismatch(expected_found(
          .                           relation,
          .                           a.c_variadic,
          .                           b.c_variadic,
          .                       )));
          .                   }
      1,436 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
          .                   let abi = relation.relate(a.abi, b.abi)?;
          .           
      2,241 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
          .                       return Err(TypeError::ArgCount);
          .                   }
          .           
      2,421 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
      1,102 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
      2,152 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
        365 ( 0.00%)              .map(|((a, b), is_output)| {
        365 ( 0.00%)                  if is_output {
        276 ( 0.00%)                      relation.relate(a, b)
          .                           } else {
          .                               relation.relate_with_variance(
          .                                   ty::Contravariant,
          .                                   ty::VarianceDiagInfo::default(),
          .                                   a,
          .                                   b,
          .                               )
          .                           }
          .                       })
          .                       .enumerate()
      1,615 ( 0.00%)              .map(|(i, r)| match r {
          .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
          .                               Err(TypeError::ArgumentSorts(exp_found, i))
          .                           }
          .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
          .                               Err(TypeError::ArgumentMutability(i))
          .                           }
      2,316 ( 0.00%)                  r => r,
          .                       });
      2,063 ( 0.00%)          Ok(ty::FnSig {
          .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
        269 ( 0.00%)              c_variadic: a.c_variadic,
          .                       unsafety,
          .                       abi,
          .                   })
      2,421 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::BoundConstness,
          .                   b: ty::BoundConstness,
          .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ast::Unsafety,
          .                   b: ast::Unsafety,
          .               ) -> RelateResult<'tcx, ast::Unsafety> {
        269 ( 0.00%)          if a != b {
          .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
          .                   } else {
          .                       Ok(a)
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
          .                   a: abi::Abi,
          .                   b: abi::Abi,
          .               ) -> RelateResult<'tcx, abi::Abi> {
          .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
     30,200 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::ProjectionTy<'tcx>,
          .                   b: ty::ProjectionTy<'tcx>,
          .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
      6,606 ( 0.00%)          if a.item_def_id != b.item_def_id {
          .                       Err(TypeError::ProjectionMismatched(expected_found(
          .                           relation,
          .                           a.item_def_id,
          .                           b.item_def_id,
          .                       )))
          .                   } else {
          .                       let substs = relation.relate(a.substs, b.substs)?;
      8,808 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
          .                   }
     19,566 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::ExistentialProjection<'tcx>,
          .                   b: ty::ExistentialProjection<'tcx>,
          .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
          .                           b.substs,
          .                       )?;
          .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 35,451,974 ( 0.35%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::TraitRef<'tcx>,
          .                   b: ty::TraitRef<'tcx>,
          .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
          .                   // Different traits cannot be related.
  7,933,619 ( 0.08%)          if a.def_id != b.def_id {
         15 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
          .                   } else {
  2,644,538 ( 0.03%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
     54,824 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
          .                   }
 22,753,135 ( 0.23%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
         22 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::ExistentialTraitRef<'tcx>,
          .                   b: ty::ExistentialTraitRef<'tcx>,
          .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
          .                   // Different traits cannot be related.
         42 ( 0.00%)          if a.def_id != b.def_id {
          .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
          .                   } else {
         18 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
         24 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
          .                   }
         14 ( 0.00%)      }
          .           }
          .           
          .           #[derive(Copy, Debug, Clone, TypeFoldable)]
          .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
          .           
          .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
-- line 348 ----------------------------------------
-- line 358 ----------------------------------------
          .           
          .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
          .               #[inline]
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: Ty<'tcx>,
          .                   b: Ty<'tcx>,
          .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  4,325,806 ( 0.04%)          relation.tys(a, b)
          .               }
          .           }
          .           
          .           /// The main "type relation" routine. Note that this does not handle
          .           /// inference artifacts, so you should filter those out before calling
          .           /// it.
 21,272,904 ( 0.21%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
          .               relation: &mut R,
          .               a: Ty<'tcx>,
          .               b: Ty<'tcx>,
          .           ) -> RelateResult<'tcx, Ty<'tcx>> {
          .               let tcx = relation.tcx();
          .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
 47,843,924 ( 0.48%)      match (a.kind(), b.kind()) {
          .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
          .                       // The caller should handle these cases!
          .                       bug!("var types encountered in super_relate_tys")
          .                   }
          .           
          .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
          .                       bug!("bound types encountered in super_relate_tys")
          .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
          .           
          .                   (&ty::Never, _)
          .                   | (&ty::Char, _)
          .                   | (&ty::Bool, _)
          .                   | (&ty::Int(_), _)
          .                   | (&ty::Uint(_), _)
          .                   | (&ty::Float(_), _)
          .                   | (&ty::Str, _)
     10,055 ( 0.00%)              if a == b =>
          .                   {
          .                       Ok(a)
          .                   }
          .           
         70 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
          .           
          .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
          .           
 26,387,568 ( 0.26%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
 10,550,398 ( 0.11%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
          .                       Ok(tcx.mk_adt(a_def, substs))
          .                   }
          .           
          .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
          .           
         98 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
         28 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
          .                           relation.relate_with_variance(
          .                               ty::Contravariant,
          .                               ty::VarianceDiagInfo::default(),
         14 ( 0.00%)                      a_region,
          .                               b_region,
          .                           )
          .                       })?;
          .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
          .                   }
          .           
          .                   (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
          .                       if a_id == b_id =>
-- line 428 ----------------------------------------
-- line 439 ----------------------------------------
          .                       // inside the binder so we can related them
          .                       let a_types = a_types.map_bound(GeneratorWitness);
          .                       let b_types = b_types.map_bound(GeneratorWitness);
          .                       // Then remove the GeneratorWitness for the result
          .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
          .                       Ok(tcx.mk_generator_witness(types))
          .                   }
          .           
        224 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
          .                       // All Closure types with the same id represent
          .                       // the (anonymous) type of the same closure expression. So
          .                       // all of their regions should be equated.
         56 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
          .                       Ok(tcx.mk_closure(a_id, &substs))
          .                   }
          .           
      1,292 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        715 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
          .                       Ok(tcx.mk_ptr(mt))
          .                   }
          .           
     64,945 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
     22,967 ( 0.00%)              let r = relation.relate_with_variance(
          .                           ty::Contravariant,
          .                           ty::VarianceDiagInfo::default(),
          .                           a_r,
          .                           b_r,
          .                       )?;
          .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
          .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
     36,392 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
          .                       Ok(tcx.mk_ref(r, mt))
          .                   }
          .           
      5,047 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
        351 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
      2,022 ( 0.00%)              match relation.relate(sz_a, sz_b) {
      1,983 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
          .                           Err(err) => {
          .                               // Check whether the lengths are both concrete/known values,
          .                               // but are unequal, for better diagnostics.
          .                               //
          .                               // It might seem dubious to eagerly evaluate these constants here,
          .                               // we however cannot end up with errors in `Relate` during both
          .                               // `type_of` and `predicates_of`. This means that evaluating the
          .                               // constants should not cause cycle errors here.
      1,750 ( 0.00%)                      let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());
      1,050 ( 0.00%)                      let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());
      2,100 ( 0.00%)                      match (sz_a, sz_b) {
      1,400 ( 0.00%)                          (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(
          .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
          .                                   ),
          .                                   _ => Err(err),
          .                               }
          .                           }
          .                       }
          .                   }
          .           
      1,173 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
        104 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
          .                       Ok(tcx.mk_slice(t))
          .                   }
          .           
      1,742 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
      1,742 ( 0.00%)              if as_.len() == bs.len() {
          .                           Ok(tcx.mk_tup(
      7,377 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
          .                           )?)
          .                       } else if !(as_.is_empty() || bs.is_empty()) {
          .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
          .                       } else {
          .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
          .                       }
          .                   }
          .           
        123 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
        205 ( 0.00%)              if a_def_id == b_def_id =>
          .                   {
        164 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
          .                       Ok(tcx.mk_fn_def(a_def_id, substs))
          .                   }
          .           
          .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
      3,034 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
          .                       Ok(tcx.mk_fn_ptr(fty))
          .                   }
          .           
          .                   // these two are already handled downstream in case of lazy normalization
        630 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
          .                       let projection_ty = relation.relate(a_data, b_data)?;
          .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
          .                   }
          .           
          .                   (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
          .                       if a_def_id == b_def_id =>
          .                   {
          .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
          .                       Ok(tcx.mk_opaque(a_def_id, substs))
          .                   }
          .           
          .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
          .               }
 23,932,017 ( 0.24%)  }
          .           
          .           /// The main "const relation" routine. Note that this does not handle
          .           /// inference artifacts, so you should filter those out before calling
          .           /// it.
 26,347,010 ( 0.26%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
          .               relation: &mut R,
          .               a: &'tcx ty::Const<'tcx>,
          .               b: &'tcx ty::Const<'tcx>,
          .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
          .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
          .               let tcx = relation.tcx();
          .           
          .               // FIXME(oli-obk): once const generics can have generic types, this assertion
          .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
  5,269,402 ( 0.05%)      let a_ty = tcx.erase_regions(a.ty);
  5,269,402 ( 0.05%)      let b_ty = tcx.erase_regions(b.ty);
  2,634,701 ( 0.03%)      if a_ty != b_ty {
          .                   relation.tcx().sess.delay_span_bug(
          .                       DUMMY_SP,
          .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
          .                   );
          .               }
          .           
          .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
  2,634,701 ( 0.03%)      let a = eagerly_eval(a);
  5,269,402 ( 0.05%)      let b = eagerly_eval(b);
          .           
          .               // Currently, the values that can be unified are primitive types,
          .               // and those that derive both `PartialEq` and `Eq`, corresponding
          .               // to structural-match types.
 28,982,545 ( 0.29%)      let is_match = match (a.val, b.val) {
          .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
          .                       // The caller should handle these cases!
          .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
          .                   }
          .           
          .                   (ty::ConstKind::Error(_), _) => return Ok(a),
          .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
          .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
          .                               substs,
          .                               promoted: au.promoted,
          .                           }),
          .                           ty: a.ty,
          .                       }));
          .                   }
          .                   _ => false,
          .               };
 13,171,261 ( 0.13%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
 23,712,309 ( 0.24%)  }
          .           
          .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
          .               relation: &mut R,
          .               a_val: ConstValue<'tcx>,
          .               b_val: ConstValue<'tcx>,
          .               // FIXME(oli-obk): these arguments should go away with valtrees
          .               a: &'tcx ty::Const<'tcx>,
          .               b: &'tcx ty::Const<'tcx>,
          .               // FIXME(oli-obk): this should just be `bool` with valtrees
          .           ) -> RelateResult<'tcx, bool> {
  2,626,092 ( 0.03%)      let tcx = relation.tcx();
 28,887,012 ( 0.29%)      Ok(match (a_val, b_val) {
 57,774,024 ( 0.58%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
  2,626,092 ( 0.03%)              a_val == b_val
          .                   }
          .                   (
          .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
          .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
          .                   ) => {
          .                       a_val == b_val
          .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
          .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
          .                       }
          .                   }
          .           
          .                   _ => false,
          .               })
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
        140 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: Self,
          .                   b: Self,
          .               ) -> RelateResult<'tcx, Self> {
         14 ( 0.00%)          let tcx = relation.tcx();
          .           
          .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
          .                   // We need to perform this deduplication as we sometimes generate duplicate projections
          .                   // in `a`.
          .                   let mut a_v: Vec<_> = a.into_iter().collect();
          .                   let mut b_v: Vec<_> = b.into_iter().collect();
          .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
          .                   a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
          .                   a_v.dedup();
          .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
          .                   b_v.dedup();
         42 ( 0.00%)          if a_v.len() != b_v.len() {
          .                       return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
          .                   }
          .           
         56 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
          .                       use crate::ty::ExistentialPredicate::*;
         56 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
         56 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
          .                               .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
          .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
          .                               relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
          .                           ))),
          .                           (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
          .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
          .                       }
          .                   });
         28 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
        112 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::ClosureSubsts<'tcx>,
          .                   b: ty::ClosureSubsts<'tcx>,
          .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: SubstsRef<'tcx>,
          .                   b: SubstsRef<'tcx>,
          .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      2,230 ( 0.00%)          relate_substs(relation, None, a, b)
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::Region<'tcx>,
          .                   b: ty::Region<'tcx>,
          .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
     33,871 ( 0.00%)          relation.regions(a, b)
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: &'tcx ty::Const<'tcx>,
          .                   b: &'tcx ty::Const<'tcx>,
          .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     21,634 ( 0.00%)          relation.consts(a, b)
          .               }
          .           }
          .           
          .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::Binder<'tcx, T>,
          .                   b: ty::Binder<'tcx, T>,
          .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
      1,276 ( 0.00%)          relation.binders(a, b)
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 27,480,860 ( 0.27%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: GenericArg<'tcx>,
          .                   b: GenericArg<'tcx>,
          .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
 31,735,698 ( 0.32%)          match (a.unpack(), b.unpack()) {
          .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
          .                           Ok(relation.relate(a_lt, b_lt)?.into())
          .                       }
          .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
      1,238 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
          .                       }
          .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
          .                           Ok(relation.relate(a_ct, b_ct)?.into())
          .                       }
          .                       (GenericArgKind::Lifetime(unpacked), x) => {
          .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
          .                       }
          .                       (GenericArgKind::Type(unpacked), x) => {
          .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
          .                       }
          .                       (GenericArgKind::Const(unpacked), x) => {
          .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
          .                       }
          .                   }
 23,291,796 ( 0.23%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::ImplPolarity,
          .                   b: ty::ImplPolarity,
          .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
          .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
          .                   } else {
          .                       Ok(a)
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
         66 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: ty::TraitPredicate<'tcx>,
          .                   b: ty::TraitPredicate<'tcx>,
          .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
          .                   Ok(ty::TraitPredicate {
         30 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
          .                       constness: relation.relate(a.constness, b.constness)?,
          .                       polarity: relation.relate(a.polarity, b.polarity)?,
          .                   })
         54 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
          .               fn relate<R: TypeRelation<'tcx>>(
          .                   relation: &mut R,
          .                   a: Self,
          .                   b: Self,
          .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Error handling
          .           
          .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
          .           where
          .               R: TypeRelation<'tcx>,
          .           {
         10 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
          .           }

223,693,985 ( 2.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.21/src/metadata.rs
--------------------------------------------------------------------------------
Ir                 

-- line 583 ----------------------------------------
        .               /// `LevelFilter` **can** be used for determining if something is
        .               /// *disabled*, but **should not** be used for determining if something is
        .               /// *enabled*.`
        .               ///
        .               /// [`Level`]: ../struct.Level.html
        .               /// [`Subscriber`]: ../../trait.Subscriber.html
        .               #[inline(always)]
        .               pub fn current() -> Self {
9,761,145 ( 0.10%)          match MAX_LEVEL.load(Ordering::Relaxed) {
        .                       Self::ERROR_USIZE => Self::ERROR,
        .                       Self::WARN_USIZE => Self::WARN,
        .                       Self::INFO_USIZE => Self::INFO,
        .                       Self::DEBUG_USIZE => Self::DEBUG,
        .                       Self::TRACE_USIZE => Self::TRACE,
        .                       Self::OFF_USIZE => Self::OFF,
        .                       #[cfg(debug_assertions)]
        .                       unknown => unreachable!(
-- line 599 ----------------------------------------
-- line 890 ----------------------------------------
        .           
        .               #[inline(always)]
        .               fn le(&self, other: &LevelFilter) -> bool {
        .                   filter_as_usize(&other.0) <= filter_as_usize(&self.0)
        .               }
        .           
        .               #[inline(always)]
        .               fn gt(&self, other: &LevelFilter) -> bool {
        3 ( 0.00%)          filter_as_usize(&other.0) > filter_as_usize(&self.0)
        .               }
        .           
        .               #[inline(always)]
        .               fn ge(&self, other: &LevelFilter) -> bool {
        .                   filter_as_usize(&other.0) >= filter_as_usize(&self.0)
        .               }
        .           }
        .           
-- line 906 ----------------------------------------

9,746,313 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.21/src/metadata.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 24 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
         .               fn tag(&self) -> &'static str {
         .                   "Equate"
         .               }
         .           
         .               fn tcx(&self) -> TyCtxt<'tcx> {
 7,906,884 ( 0.08%)          self.fields.tcx()
 2,121,223 ( 0.02%)      }
         .           
         .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
 5,269,532 ( 0.05%)          self.fields.param_env
         .               }
         .           
         .               fn a_is_expected(&self) -> bool {
10,535,742 ( 0.11%)          self.a_is_expected
         .               }
         .           
13,171,125 ( 0.13%)      fn relate_item_substs(
         .                   &mut self,
         .                   _item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   // N.B., once we are equating types, we don't care about
         .                   // variance, so don't try to lookup the variance here. This
         .                   // also avoids some cycles (e.g., #41849) since looking up
         .                   // variance requires computing types which can require
         .                   // performing trait matching (which then performs equality
         .                   // unification).
         .           
 2,634,225 ( 0.03%)          relate::relate_substs(self, None, a_subst, b_subst)
15,805,350 ( 0.16%)      }
         .           
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   _: ty::Variance,
         .                   _info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
         .               ) -> RelateResult<'tcx, T> {
         .                   self.relate(a, b)
         .               }
         .           
23,925,735 ( 0.24%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
         .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 2,658,415 ( 0.03%)          if a == b {
         .                       return Ok(a);
         .                   }
         .           
 5,291,394 ( 0.05%)          let infcx = self.fields.infcx;
 5,291,394 ( 0.05%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 5,291,394 ( 0.05%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
         .           
         .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
         .           
13,249,576 ( 0.13%)          match (a.kind(), b.kind()) {
         .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
         .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
         .                       }
         .           
       973 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
     3,892 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
         .                       }
         .           
     3,103 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
    15,515 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
         .                       }
         .           
         .                       _ => {
18,490,073 ( 0.18%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
         .                       }
         .                   }
         .           
         .                   Ok(a)
23,925,735 ( 0.24%)      }
         .           
    37,215 ( 0.00%)      fn regions(
         .                   &mut self,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
         .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
    12,405 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
    24,810 ( 0.00%)          self.fields
         .                       .infcx
         .                       .inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
    24,810 ( 0.00%)              .make_eqregion(origin, a, b);
     8,270 ( 0.00%)          Ok(a)
    37,215 ( 0.00%)      }
         .           
         5 ( 0.00%)      fn consts(
         .                   &mut self,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
13,171,578 ( 0.13%)          self.fields.infcx.super_combine_consts(self, a, b)
         3 ( 0.00%)      }
         .           
         .               fn binders<T>(
         .                   &mut self,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
         .               where
         .                   T: Relate<'tcx>,
-- line 132 ----------------------------------------

 2,718,911 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   166,344 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   105,773 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 1,459,239 ( 0.01%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
60,258,083 ( 0.60%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
    39,507 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
 1,922,247 ( 0.02%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

    46,106 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
12,871,604 ( 0.13%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 9,653,703 ( 0.10%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   872,896 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,309,344 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 3,436,114 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
   289,220 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
   578,440 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/query.rs
--------------------------------------------------------------------------------
Ir                  

-- line 198 ----------------------------------------
         .                   }
         .                   #[allow(nonstandard_style, unused_lifetimes)]
         .                   pub mod query_stored {
         .                       use super::*;
         .           
         .                       $(pub type $name<$tcx> = <query_storage::$name<$tcx> as QueryStorage>::Stored;)*
         .                   }
         .           
       530 ( 0.00%)          #[derive(Default)]
         .                   pub struct QueryCaches<$tcx> {
         .                       $($(#[$attr])* pub $name: QueryCacheStore<query_storage::$name<$tcx>>,)*
         .                   }
         .           
         .                   impl<$tcx> TyCtxtEnsure<$tcx> {
         .                       $($(#[$attr])*
         .                       #[inline(always)]
         .                       pub fn $name(self, key: query_helper_param_ty!($($K)*)) {
    56,186 ( 0.00%)                  let key = key.into_query_param();
         .                           opt_remap_env_constness!([$($modifiers)*][key]);
         .           
    33,680 ( 0.00%)                  let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, noop);
         .           
    13,472 ( 0.00%)                  let lookup = match cached {
         .                               Ok(()) => return,
    10,258 ( 0.00%)                      Err(lookup) => lookup,
         .                           };
         .           
   353,387 ( 0.00%)                  self.tcx.queries.$name(self.tcx, DUMMY_SP, key, lookup, QueryMode::Ensure);
         .                       })*
         .                   }
         .           
         .                   impl<$tcx> TyCtxt<$tcx> {
         .                       $($(#[$attr])*
         .                       #[inline(always)]
         .                       #[must_use]
         .                       pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>
         .                       {
       608 ( 0.00%)                  self.at(DUMMY_SP).$name(key)
         .                       })*
         .                   }
         .           
         .                   impl<$tcx> TyCtxtAt<$tcx> {
         .                       $($(#[$attr])*
         .                       #[inline(always)]
         .                       pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>
         .                       {
22,598,709 ( 0.23%)                  let key = key.into_query_param();
    24,799 ( 0.00%)                  opt_remap_env_constness!([$($modifiers)*][key]);
         .           
 6,329,305 ( 0.06%)                  let cached = try_get_cached(self.tcx, &self.tcx.query_caches.$name, &key, Clone::clone);
         .           
 2,548,425 ( 0.03%)                  let lookup = match cached {
 3,544,740 ( 0.04%)                      Ok(value) => return value,
    56,810 ( 0.00%)                      Err(lookup) => lookup,
         .                           };
         .           
 2,032,097 ( 0.02%)                  self.tcx.queries.$name(self.tcx, self.span, key, lookup, QueryMode::Get).unwrap()
 3,197,762 ( 0.03%)              })*
         .                   }
         .           
         .                   pub struct Providers {
         .                       $(pub $name: for<'tcx> fn(
         .                           TyCtxt<'tcx>,
         .                           query_keys::$name<'tcx>,
         .                       ) -> query_values::$name<'tcx>,)*
         .                   }
         .           
         .                   pub struct ExternProviders {
         .                       $(pub $name: separate_provide_extern_decl!([$($modifiers)*][$name]),)*
         .                   }
         .           
         .                   impl Default for Providers {
         1 ( 0.00%)              fn default() -> Self {
       524 ( 0.00%)                  Providers {
         .                               $($name: |_, key| bug!(
         .                                   "`tcx.{}({:?})` unsupported by its crate; \
         .                                    perhaps the `{}` query was never assigned a provider function",
         .                                   stringify!($name),
         .                                   key,
         .                                   stringify!($name),
         .                               ),)*
         .                           }
         1 ( 0.00%)              }
         .                   }
         .           
         .                   impl Default for ExternProviders {
         1 ( 0.00%)              fn default() -> Self {
       158 ( 0.00%)                  ExternProviders {
         .                               $($name: separate_provide_extern_default!([$($modifiers)*][$name]),)*
         .                           }
         1 ( 0.00%)              }
         .                   }
         .           
         .                   impl Copy for Providers {}
         .                   impl Clone for Providers {
         .                       fn clone(&self) -> Self { *self }
         .                   }
         .           
         .                   impl Copy for ExternProviders {}
-- line 296 ----------------------------------------
-- line 354 ----------------------------------------
         .                       self.to_def_id()
         .                   }
         .               }
         .           }
         .           
         .           use sealed::IntoQueryParam;
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   768,985 ( 0.01%)      pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {
   219,710 ( 0.00%)          let def_id = def_id.into_query_param();
         .                   self.opt_def_kind(def_id)
         .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", def_id))
   878,840 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
       224 ( 0.00%)      pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {
        64 ( 0.00%)          let def_id = def_id.into_query_param();
         .                   self.opt_def_kind(def_id)
         .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", def_id))
       256 ( 0.00%)      }
         .           }

 8,848,484 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/query.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs
--------------------------------------------------------------------------------
Ir                  

-- line 124 ----------------------------------------
         .                   Self { ptr: Unique::dangling(), cap: 0, alloc }
         .               }
         .           
         .               /// Like `with_capacity`, but parameterized over the choice of
         .               /// allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
        40 ( 0.00%)          Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
         .               }
         .           
         .               /// Like `with_capacity_zeroed`, but parameterized over the choice
         .               /// of allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
         .                   Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
         .               ///
         .               /// # Safety
         .               ///
         .               /// * `len` must be greater than or equal to the most recently requested capacity, and
         .               /// * `len` must be less than or equal to `self.capacity()`.
         .               ///
         .               /// Note, that the requested capacity and `self.capacity()` could differ, as
         .               /// an allocator could overallocate and return a greater memory block than requested.
        30 ( 0.00%)      pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>], A> {
         .                   // Sanity-check one half of the safety requirement (we cannot check the other half).
         .                   debug_assert!(
         .                       len <= self.capacity(),
         .                       "`len` must be smaller than or equal to `self.capacity()`"
         .                   );
         .           
         .                   let me = ManuallyDrop::new(self);
         .                   unsafe {
         .                       let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
         .                       Box::from_raw_in(slice, ptr::read(&me.alloc))
         .                   }
        30 ( 0.00%)      }
         .           
         .               #[cfg(not(no_global_oom_handling))]
        80 ( 0.00%)      fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
         .                   if mem::size_of::<T>() == 0 {
         .                       Self::new_in(alloc)
         .                   } else {
         .                       // We avoid `unwrap_or_else` here because it bloats the amount of
         .                       // LLVM IR generated.
         .                       let layout = match Layout::array::<T>(capacity) {
         .                           Ok(layout) => layout,
         .                           Err(_) => capacity_overflow(),
         .                       };
         .                       match alloc_guard(layout.size()) {
         .                           Ok(_) => {}
         .                           Err(_) => capacity_overflow(),
         .                       }
        40 ( 0.00%)              let result = match init {
         .                           AllocInit::Uninitialized => alloc.allocate(layout),
         .                           AllocInit::Zeroed => alloc.allocate_zeroed(layout),
         .                       };
         .                       let ptr = match result {
         .                           Ok(ptr) => ptr,
         .                           Err(_) => handle_alloc_error(layout),
         .                       };
         .           
-- line 192 ----------------------------------------
-- line 194 ----------------------------------------
         .                       // matches the size requested. If that ever changes, the capacity
         .                       // here should change to `ptr.len() / mem::size_of::<T>()`.
         .                       Self {
         .                           ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
         .                           cap: capacity,
         .                           alloc,
         .                       }
         .                   }
       100 ( 0.00%)      }
         .           
         .               /// Reconstitutes a `RawVec` from a pointer, capacity, and allocator.
         .               ///
         .               /// # Safety
         .               ///
         .               /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given
         .               /// `capacity`.
         .               /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit
-- line 210 ----------------------------------------
-- line 233 ----------------------------------------
         .               }
         .           
         .               /// Returns a shared reference to the allocator backing this `RawVec`.
         .               pub fn allocator(&self) -> &A {
         .                   &self.alloc
         .               }
         .           
         .               fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
43,389,712 ( 0.43%)          if mem::size_of::<T>() == 0 || self.cap == 0 {
   296,557 ( 0.00%)              None
         .                   } else {
         .                       // We have an allocated chunk of memory, so we can bypass runtime
         .                       // checks to get our current layout.
         .                       unsafe {
         .                           let align = mem::align_of::<T>();
 2,145,438 ( 0.02%)                  let size = mem::size_of::<T>() * self.cap;
         .                           let layout = Layout::from_size_align_unchecked(size, align);
   245,876 ( 0.00%)                  Some((self.ptr.cast().into(), layout))
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that the buffer contains at least enough space to hold `len +
         .               /// additional` elements. If it doesn't already have enough capacity, will
         .               /// reallocate enough space plus comfortable slack space to get amortized
         .               /// *O*(1) behavior. Will limit this behavior if it would needlessly cause
-- line 258 ----------------------------------------
-- line 274 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               pub fn reserve(&mut self, len: usize, additional: usize) {
         .                   // Callers expect this function to be very cheap when there is already sufficient capacity.
         .                   // Therefore, we move all the resizing and error-handling logic from grow_amortized and
         .                   // handle_reserve behind a call, while making sure that this function is likely to be
         .                   // inlined as just a comparison and a call if the comparison fails.
         .                   #[cold]
   216,085 ( 0.00%)          fn do_reserve_and_handle<T, A: Allocator>(
         .                       slf: &mut RawVec<T, A>,
         .                       len: usize,
         .                       additional: usize,
         .                   ) {
       451 ( 0.00%)              handle_reserve(slf.grow_amortized(len, additional));
   268,130 ( 0.00%)          }
         .           
 3,761,264 ( 0.04%)          if self.needs_to_grow(len, additional) {
   220,605 ( 0.00%)              do_reserve_and_handle(self, len, additional);
         .                   }
         .               }
         .           
         .               /// A specialized version of `reserve()` used only by the hot and
         .               /// oft-instantiated `Vec::push()`, which does its own capacity check.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline(never)]
 1,180,790 ( 0.01%)      pub fn reserve_for_push(&mut self, len: usize) {
         .                   handle_reserve(self.grow_amortized(len, 1));
 1,457,617 ( 0.01%)      }
         .           
         .               /// The same as `reserve`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if self.needs_to_grow(len, additional) {
         .                       self.grow_amortized(len, additional)
         .                   } else {
         .                       Ok(())
         .                   }
-- line 309 ----------------------------------------
-- line 322 ----------------------------------------
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
    51,670 ( 0.00%)      pub fn reserve_exact(&mut self, len: usize, additional: usize) {
         .                   handle_reserve(self.try_reserve_exact(len, additional));
    51,670 ( 0.00%)      }
         .           
         .               /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve_exact(
         .                   &mut self,
         .                   len: usize,
         .                   additional: usize,
         .               ) -> Result<(), TryReserveError> {
    20,840 ( 0.00%)          if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }
         .               }
         .           
         .               /// Shrinks the buffer down to the specified capacity. If the given amount
         .               /// is 0, actually completely deallocates.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the given amount is *larger* than the current capacity.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
    49,085 ( 0.00%)      pub fn shrink_to_fit(&mut self, cap: usize) {
         .                   handle_reserve(self.shrink(cap));
    58,902 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> RawVec<T, A> {
         .               /// Returns if the buffer needs to grow to fulfill the needed extra capacity.
         .               /// Mainly used to make inlining reserve-calls possible without inlining `grow`.
         .               fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
 7,526,943 ( 0.08%)          additional > self.capacity().wrapping_sub(len)
         .               }
         .           
         .               fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
         .                   // Allocators currently return a `NonNull<[u8]>` whose length matches
         .                   // the size requested. If that ever changes, the capacity here should
         .                   // change to `ptr.len() / mem::size_of::<T>()`.
   371,003 ( 0.00%)          self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
   371,094 ( 0.00%)          self.cap = cap;
         .               }
         .           
         .               // This method is usually instantiated many times. So we want it to be as
         .               // small as possible, to improve compile times. But we also want as much of
         .               // its contents to be statically computable as possible, to make the
         .               // generated code run faster. Therefore, this method is carefully written
         .               // so that all of the code that depends on `T` is within it, while as much
         .               // of the code that doesn't depend on `T` as possible is in functions that
         .               // are non-generic over `T`.
       546 ( 0.00%)      fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   // This is ensured by the calling contexts.
         .                   debug_assert!(additional > 0);
         .           
         .                   if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when `elem_size` is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   // Nothing we can really do about these checks, sadly.
         .                   let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .           
         .                   // This guarantees exponential growth. The doubling cannot overflow
         .                   // because `cap <= isize::MAX` and the type of `cap` is `usize`.
 1,412,720 ( 0.01%)          let cap = cmp::max(self.cap * 2, required_cap);
         .                   let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
         .           
         .                   let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
 1,069,615 ( 0.01%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
         .                   self.set_ptr_and_cap(ptr, cap);
         .                   Ok(())
       546 ( 0.00%)      }
         .           
         .               // The constraints on this method are much the same as those on
         .               // `grow_amortized`, but this method is usually instantiated less often so
         .               // it's less critical.
         .               fn grow_exact(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when the type size is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   let cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .                   let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
    24,007 ( 0.00%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
         .                   self.set_ptr_and_cap(ptr, cap);
         .                   Ok(())
         .               }
         .           
         .               fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {
    29,451 ( 0.00%)          assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
         .           
         .                   let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
    29,451 ( 0.00%)          let new_size = cap * mem::size_of::<T>();
         .           
         .                   let ptr = unsafe {
         .                       let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
         .                       self.alloc
         .                           .shrink(ptr, layout, new_layout)
         .                           .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
         .                   };
         .                   self.set_ptr_and_cap(ptr, cap);
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               }
         .           }
         .           
         .           // This function is outside `RawVec` to minimize compile times. See the comment
         .           // above `RawVec::grow_amortized` for details. (The `A` parameter isn't
         .           // significant, because the number of different `A` types seen in practice is
         .           // much smaller than the number of `T` types.)
         .           #[inline(never)]
 1,805,910 ( 0.02%)  fn finish_grow<A>(
         .               new_layout: Result<Layout, LayoutError>,
         .               current_memory: Option<(NonNull<u8>, Layout)>,
         .               alloc: &mut A,
         .           ) -> Result<NonNull<[u8]>, TryReserveError>
         .           where
         .               A: Allocator,
         .           {
         .               // Check for the error here to minimize the size of `RawVec::grow_*`.
         .               let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
         .           
         .               alloc_guard(new_layout.size())?;
         .           
 1,141,859 ( 0.01%)      let memory = if let Some((ptr, old_layout)) = current_memory {
         .                   debug_assert_eq!(old_layout.align(), new_layout.align());
         .                   unsafe {
         .                       // The allocator checks for alignment equality
         .                       intrinsics::assume(old_layout.align() == new_layout.align());
         .                       alloc.grow(ptr, old_layout, new_layout)
         .                   }
         .               } else {
         .                   alloc.allocate(new_layout)
         .               };
         .           
         .               memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
 1,444,728 ( 0.01%)  }
         .           
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
         .               /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
     9,834 ( 0.00%)      fn drop(&mut self) {
19,646,811 ( 0.20%)          if let Some((ptr, layout)) = self.current_memory() {
         .                       unsafe { self.alloc.deallocate(ptr, layout) }
         .                   }
    10,922 ( 0.00%)      }
         .           }
         .           
         .           // Central function for reserve error handling.
         .           #[cfg(not(no_global_oom_handling))]
         .           #[inline]
         .           fn handle_reserve(result: Result<(), TryReserveError>) {
         .               match result.map_err(|e| e.kind()) {
         .                   Err(CapacityOverflow) => capacity_overflow(),
-- line 489 ----------------------------------------

 7,440,838 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 180 ----------------------------------------
          .           /// assert_eq!(v, &[0.into()]);
          .           ///
          .           /// // Ensure that the last item was dropped.
          .           /// assert!(weak.upgrade().is_none());
          .           /// ```
          .           #[stable(feature = "drop_in_place", since = "1.8.0")]
          .           #[lang = "drop_in_place"]
          .           #[allow(unconditional_recursion)]
175,723,149 ( 1.75%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
          .               // Code here does not matter - this is replaced by the
          .               // real drop glue by the compiler.
          .           
          .               // SAFETY: see comment above
          .               unsafe { drop_in_place(to_drop) }
          .           }
          .           
          .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .           
          .               // Perform the swap
          .               // SAFETY: the caller must guarantee that `x` and `y` are
          .               // valid for writes and properly aligned. `tmp` cannot be
          .               // overlapping either `x` or `y` because `tmp` was just allocated
          .               // on the stack as a separate allocated object.
          .               unsafe {
        119 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        119 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
          .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
          .               }
          .           }
          .           
          .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
          .           /// beginning at `x` and `y`. The two regions must *not* overlap.
          .           ///
          .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
          .                       return;
          .                   }
          .               }
          .           
          .               // Direct swapping, for the cases not going through the block optimization.
          .               // SAFETY: the caller must guarantee that `x` and `y` are valid
          .               // for writes, properly aligned, and non-overlapping.
          .               unsafe {
         31 ( 0.00%)          let z = read(x);
          .                   copy_nonoverlapping(y, x, 1);
          .                   write(y, z);
          .               }
          .           }
          .           
          .           #[inline]
          .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
          .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .               // SAFETY: the caller must guarantee that `src` is valid for reads.
          .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
          .               // the stack as a separate allocated object.
          .               //
          .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
          .               // to be properly initialized.
          .               unsafe {
    410,983 ( 0.00%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  9,493,994 ( 0.09%)          tmp.assume_init()
          .               }
          .           }
          .           
          .           /// Reads the value from `src` without moving it. This leaves the
          .           /// memory in `src` unchanged.
          .           ///
          .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
          .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
          .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
          .               // `dst` cannot overlap `src` because the caller has mutable access
          .               // to `dst` while `src` is owned by this function.
          .               unsafe {
131,769,531 ( 1.31%)          copy_nonoverlapping(&src as *const T, dst, 1);
          .                   intrinsics::forget(src);
          .               }
          .           }
          .           
          .           /// Overwrites a memory location with the given value without reading or
          .           /// dropping the old value.
          .           ///
          .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
          .               if stride == 1 {
          .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
          .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
          .                   //
          .                   //    round_up_to_next_alignment(p, a) - p
          .                   //
          .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
          .                   // for LLVM to be able to utilize the various optimizations it knows about.
     47,360 ( 0.00%)          return wrapping_sub(
    100,200 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
          .                       p as usize,
          .                   );
          .               }
          .           
          .               let pmoda = p as usize & a_minus_one;
          .               if pmoda == 0 {
          .                   // Already aligned. Yay!
          .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
          .           /// assert!(std::ptr::eq(
          .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
          .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
          .           /// ));
          .           /// ```
          .           #[stable(feature = "ptr_eq", since = "1.17.0")]
          .           #[inline]
          .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  8,477,126 ( 0.08%)      a == b
          .           }
          .           
          .           /// Hash a raw pointer.
          .           ///
          .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
          .           /// by its address rather than the value it points to
          .           /// (which is what the `Hash for &T` implementation does).
          .           ///
-- line 1364 ----------------------------------------

 12,068,250 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/error.rs
--------------------------------------------------------------------------------
Ir                  

-- line 16 ----------------------------------------
         .           #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub struct ExpectedFound<T> {
         .               pub expected: T,
         .               pub found: T,
         .           }
         .           
         .           impl<T> ExpectedFound<T> {
         .               pub fn new(a_is_expected: bool, a: T, b: T) -> Self {
28,059,524 ( 0.28%)          if a_is_expected {
         .                       ExpectedFound { expected: a, found: b }
         .                   } else {
         .                       ExpectedFound { expected: b, found: a }
         .                   }
        20 ( 0.00%)      }
         .           }
         .           
         .           // Data structures used in type unification
         .           #[derive(Clone, Debug, TypeFoldable)]
         .           pub enum TypeError<'tcx> {
         .               Mismatch,
         .               ConstnessMismatch(ExpectedFound<ty::BoundConstness>),
         .               PolarityMismatch(ExpectedFound<ty::ImplPolarity>),
-- line 37 ----------------------------------------

    21,007 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/error.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               PushRegionObligation,
         .           }
         .           
         .           macro_rules! impl_from {
         .               ($($ctor: ident ($ty: ty),)*) => {
         .                   $(
         .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
         .                       fn from(x: $ty) -> Self {
       901 ( 0.00%)                  UndoLog::$ctor(x.into())
         .                       }
         .                   }
         .                   )*
         .               }
         .           }
         .           
         .           // Upcast from a single kind of "undoable action" to the general enum
         .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
         .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
         .           
         .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
         .               ProjectionCache(traits::UndoLog<'tcx>),
         .           }
         .           
         .           /// The Rollback trait defines how to rollback a particular action.
         .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
   165,654 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
   276,090 ( 0.00%)          match undo {
   310,020 ( 0.00%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    13,326 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
     1,640 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
         .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
         .                       UndoLog::RegionConstraintCollector(undo) => {
    61,789 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
         .                       }
         .                       UndoLog::RegionUnificationTable(undo) => {
    15,614 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
         .                       }
         .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
         .                       UndoLog::PushRegionObligation => {
         .                           self.region_obligations.pop();
         .                       }
         .                   }
   220,872 ( 0.00%)      }
         .           }
         .           
         .           /// The combined undo log for all the various unification tables. For each change to the storage
         .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
         .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
         .               logs: Vec<UndoLog<'tcx>>,
         .               num_open_snapshots: usize,
         .           }
         .           
         .           impl Default for InferCtxtUndoLogs<'_> {
         .               fn default() -> Self {
 1,119,698 ( 0.01%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
         .               }
         .           }
         .           
         .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
         .           /// action that is convertable into an UndoLog (per the From impls above).
         .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
         .           where
         .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
         .           {
         .               #[inline]
         .               fn num_open_snapshots(&self) -> usize {
         .                   self.num_open_snapshots
         .               }
         .           
         .               #[inline]
         .               fn push(&mut self, undo: T) {
    44,170 ( 0.00%)          if self.in_snapshot() {
     7,208 ( 0.00%)              self.logs.push(undo.into())
         .                   }
         .               }
         .           
         .               fn clear(&mut self) {
         .                   self.logs.clear();
         .                   self.num_open_snapshots = 0;
         .               }
         .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
         .               {
         .                   if self.in_snapshot() {
         .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
31,727,670 ( 0.32%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("rollback_to({})", snapshot.undo_len);
         .                   self.undo_log.assert_open_snapshot(&snapshot);
         .           
10,741,544 ( 0.11%)          while self.undo_log.logs.len() > snapshot.undo_len {
         .                       let undo = self.undo_log.logs.pop().unwrap();
   662,616 ( 0.01%)              self.reverse(undo);
         .                   }
         .           
10,592,673 ( 0.11%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
 1,069,530 ( 0.01%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
16,398,600 ( 0.16%)          self.undo_log.num_open_snapshots -= 1;
37,015,615 ( 0.37%)      }
         .           
         .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
         .                   debug!("commit({})", snapshot.undo_len);
         .           
   185,997 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
         .                       // The root snapshot. It's safe to clear the undo log because
         .                       // there's no snapshot further out that we might need to roll back
         .                       // to.
    37,668 ( 0.00%)              assert!(snapshot.undo_len == 0);
         .                       self.undo_log.logs.clear();
         .                   }
         .           
   204,831 ( 0.00%)          self.undo_log.num_open_snapshots -= 1;
         .               }
         .           }
         .           
         .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
         .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
21,399,776 ( 0.21%)          self.num_open_snapshots += 1;
         .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
         .               }
         .           
         .               pub(crate) fn region_constraints_in_snapshot(
         .                   &self,
         .                   s: &Snapshot<'tcx>,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
    17,726 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               pub(crate) fn region_constraints(
         .                   &self,
         .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
         .                   self.logs.iter().filter_map(|log| match log {
         .                       UndoLog::RegionConstraintCollector(log) => Some(log),
         .                       _ => None,
         .                   })
         .               }
         .           
         .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
         .                   // Failures here may indicate a failure to follow a stack discipline.
15,863,835 ( 0.16%)          assert!(self.logs.len() >= snapshot.undo_len);
15,863,835 ( 0.16%)          assert!(self.num_open_snapshots > 0);
         .               }
         .           }
         .           
         .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
         .               type Output = UndoLog<'tcx>;
         .           
         .               fn index(&self, key: usize) -> &Self::Output {
         .                   &self.logs[key]
-- line 204 ----------------------------------------

10,676,062 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 193 ----------------------------------------
         .               /// assert_eq!(a.iter().count(), 5);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn count(self) -> usize
         .               where
         .                   Self: Sized,
         .               {
     1,343 ( 0.00%)          self.fold(
         .                       0,
         .                       #[rustc_inherit_overflow_checks]
    27,478 ( 0.00%)              |count, _| count + 1,
         .                   )
         .               }
         .           
         .               /// Consumes the iterator, returning the last element.
         .               ///
         .               /// This method will evaluate the iterator until it returns [`None`]. While
         .               /// doing so, it keeps track of the current element. After [`None`] is
         .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 267 ----------------------------------------
         .               /// assert_eq!(iter.next(), Some(&3));
         .               /// assert_eq!(iter.advance_by(0), Ok(()));
         .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   for i in 0..n {
     3,464 ( 0.00%)              self.next().ok_or(i)?;
         .                   }
         .                   Ok(())
         .               }
         .           
         .               /// Returns the `n`th element of the iterator.
         .               ///
         .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
         .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 315 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.iter().nth(10), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   self.advance_by(n).ok()?;
     7,904 ( 0.00%)          self.next()
         .               }
         .           
         .               /// Creates an iterator starting at the same point, but stepping by
         .               /// the given amount at each iteration.
         .               ///
         .               /// Note 1: The first element of the iterator will always be returned,
         .               /// regardless of the step given.
         .               ///
-- line 331 ----------------------------------------
-- line 441 ----------------------------------------
         .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator<Item = Self::Item>,
         .               {
     4,640 ( 0.00%)          Chain::new(self, other.into_iter())
         .               }
         .           
         .               /// 'Zips up' two iterators into a single iterator of pairs.
         .               ///
         .               /// `zip()` returns a new iterator that will iterate over two other
         .               /// iterators, returning a tuple where the first element comes from the
         .               /// first iterator, and the second element comes from the second iterator.
         .               ///
-- line 457 ----------------------------------------
-- line 555 ----------------------------------------
         .               /// [`zip`]: crate::iter::zip
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>
         .               where
         .                   Self: Sized,
         .                   U: IntoIterator,
         .               {
        21 ( 0.00%)          Zip::new(self, other.into_iter())
         .               }
         .           
         .               /// Creates a new iterator which places a copy of `separator` between adjacent
         .               /// items of the original iterator.
         .               ///
         .               /// In case `separator` does not implement [`Clone`] or needs to be
         .               /// computed every time, use [`intersperse_with`].
         .               ///
-- line 571 ----------------------------------------
-- line 714 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn map<B, F>(self, f: F) -> Map<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> B,
         .               {
   289,874 ( 0.00%)          Map::new(self, f)
         .               }
         .           
         .               /// Calls a closure on each element of an iterator.
         .               ///
         .               /// This is equivalent to using a [`for`] loop on the iterator, although
         .               /// `break` and `continue` are not possible from a closure. It's generally
         .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
         .               /// when processing items at the end of longer iterator chains. In some
-- line 730 ----------------------------------------
-- line 761 ----------------------------------------
         .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
         .               fn for_each<F>(self, f: F)
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item),
         .               {
         .                   #[inline]
         .                   fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
       220 ( 0.00%)              move |(), item| f(item)
         .                   }
         .           
16,941,584 ( 0.17%)          self.fold((), call(f));
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element
         .               /// should be yielded.
         .               ///
         .               /// Given an element the closure must return `true` or `false`. The returned
         .               /// iterator will yield only the elements for which the closure returns
         .               /// true.
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
         .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
     6,324 ( 0.00%)          Filter::new(self, predicate)
         .               }
         .           
         .               /// Creates an iterator that both filters and maps.
         .               ///
         .               /// The returned iterator yields only the `value`s for which the supplied
         .               /// closure returns `Some(value)`.
         .               ///
         .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
     6,459 ( 0.00%)          FilterMap::new(self, f)
         .               }
         .           
         .               /// Creates an iterator which gives the current iteration count as well as
         .               /// the next value.
         .               ///
         .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
         .               /// current index of iteration and `val` is the value returned by the
         .               /// iterator.
-- line 895 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// [`peek_mut`]: Peekable::peek_mut
         .               /// [`next`]: Iterator::next
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn peekable(self) -> Peekable<Self>
         .               where
         .                   Self: Sized,
         .               {
        13 ( 0.00%)          Peekable::new(self)
         .               }
         .           
         .               /// Creates an iterator that [`skip`]s elements based on a predicate.
         .               ///
         .               /// [`skip`]: Iterator::skip
         .               ///
         .               /// `skip_while()` takes a closure as an argument. It will call this
         .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1537 ----------------------------------------
         .               /// assert_eq!(iter.next(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn fuse(self) -> Fuse<Self>
         .               where
         .                   Self: Sized,
         .               {
    16,655 ( 0.00%)          Fuse::new(self)
         .               }
         .           
         .               /// Does something with each element of an iterator, passing the value on.
         .               ///
         .               /// When using iterators, you'll often chain several of them together.
         .               /// While working on such code, you might want to check out what's
         .               /// happening at various parts in the pipeline. To do that, insert
         .               /// a call to `inspect()`.
-- line 1553 ----------------------------------------
-- line 1769 ----------------------------------------
         .               /// [`char`]: type@char
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
         .               fn collect<B: FromIterator<Self::Item>>(self) -> B
         .               where
         .                   Self: Sized,
         .               {
    48,131 ( 0.00%)          FromIterator::from_iter(self)
         .               }
         .           
         .               /// Consumes an iterator, creating two collections from it.
         .               ///
         .               /// The predicate passed to `partition()` can return `true`, or `false`.
         .               /// `partition()` returns a pair, all of the elements for which it returned
         .               /// `true`, and all of the elements for which it returned `false`.
         .               ///
-- line 1785 ----------------------------------------
-- line 1798 ----------------------------------------
         .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
         .               ///     .iter()
         .               ///     .partition(|&n| n % 2 == 0);
         .               ///
         .               /// assert_eq!(even, vec![2]);
         .               /// assert_eq!(odd, vec![1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
       904 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
         .               where
         .                   Self: Sized,
         .                   B: Default + Extend<Self::Item>,
         .                   F: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn extend<'a, T, B: Extend<T>>(
         .                       mut f: impl FnMut(&T) -> bool + 'a,
         .                       left: &'a mut B,
         .                       right: &'a mut B,
         .                   ) -> impl FnMut((), T) + 'a {
         .                       move |(), x| {
        56 ( 0.00%)                  if f(&x) {
         .                               left.extend_one(x);
         .                           } else {
         .                               right.extend_one(x);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut left: B = Default::default();
         .                   let mut right: B = Default::default();
         .           
         4 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
         .           
     1,352 ( 0.00%)          (left, right)
     1,017 ( 0.00%)      }
         .           
         .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
         .               /// such that all those that return `true` precede all those that return `false`.
         .               /// Returns the number of `true` elements found.
         .               ///
         .               /// The relative order of partitioned items is not maintained.
         .               ///
         .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///     } else {
         .               ///         ControlFlow::Break(prev)
         .               ///     }
         .               /// });
         .               /// assert_eq!(triangular, ControlFlow::Continue(435));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
     8,229 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> R,
         .                   R: Try<Output = B>,
         .               {
    13,476 ( 0.00%)          let mut accum = init;
28,667,798 ( 0.29%)          while let Some(x) = self.next() {
41,152,853 ( 0.41%)              accum = f(accum, x)?;
         .                   }
    29,182 ( 0.00%)          try { accum }
     8,952 ( 0.00%)      }
         .           
         .               /// An iterator method that applies a fallible function to each item in the
         .               /// iterator, stopping at the first error and returning that error.
         .               ///
         .               /// This can also be thought of as the fallible form of [`for_each()`]
         .               /// or as the stateless version of [`try_fold()`].
         .               ///
         .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2077 ----------------------------------------
         .               fn try_for_each<F, R>(&mut self, f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> R,
         .                   R: Try<Output = ()>,
         .               {
         .                   #[inline]
         .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
        66 ( 0.00%)              move |(), x| f(x)
         .                   }
         .           
        52 ( 0.00%)          self.try_fold((), call(f))
         .               }
         .           
         .               /// Folds every element into an accumulator by applying an operation,
         .               /// returning the final result.
         .               ///
         .               /// `fold()` takes two arguments: an initial value, and a closure with two
         .               /// arguments: an 'accumulator', and an element. The closure returns the value that
         .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
         .               /// // they're the same
         .               /// assert_eq!(result, result2);
         .               /// ```
         .               ///
         .               /// [`reduce()`]: Iterator::reduce
         .               #[doc(alias = "inject", alias = "foldl")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        21 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
         .               where
         .                   Self: Sized,
         .                   F: FnMut(B, Self::Item) -> B,
         .               {
        65 ( 0.00%)          let mut accum = init;
   386,538 ( 0.00%)          while let Some(x) = self.next() {
   154,353 ( 0.00%)              accum = f(accum, x);
         .                   }
         .                   accum
        26 ( 0.00%)      }
         .           
         .               /// Reduces the elements to a single one, by repeatedly applying a reducing
         .               /// operation.
         .               ///
         .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
         .               /// result of the reduction.
         .               ///
         .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2240 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
         .               fn reduce<F>(mut self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
         .               {
         .                   let first = self.next()?;
    23,046 ( 0.00%)          Some(self.fold(first, f))
         .               }
         .           
         .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
         .               /// closure returns a failure, the failure is propagated back to the caller immediately.
         .               ///
         .               /// The return type of this method depends on the return type of the closure. If the closure
         .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
         .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
-- line 2256 ----------------------------------------
-- line 2370 ----------------------------------------
         .               fn all<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
     4,156 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
         .                       }
         .                   }
     2,405 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
         .               }
         .           
         .               /// Tests if any element of the iterator matches a predicate.
         .               ///
         .               /// `any()` takes a closure that returns `true` or `false`. It applies
         .               /// this closure to each element of the iterator, and if any of them return
         .               /// `true`, then so does `any()`. If they all return `false`, it
         .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2423 ----------------------------------------
         .               fn any<F>(&mut self, f: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
         .                       move |(), x| {
        12 ( 0.00%)                  if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }
         .                       }
         .                   }
         .           
         .                   self.try_fold((), check(f)) == ControlFlow::BREAK
         .               }
         .           
         .               /// Searches for an element of an iterator that satisfies a predicate.
         .               ///
-- line 2439 ----------------------------------------
-- line 2483 ----------------------------------------
         .               fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
         .                       move |(), x| {
    25,243 ( 0.00%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
     1,368 ( 0.00%)              }
         .                   }
         .           
    40,191 ( 0.00%)          self.try_fold((), check(predicate)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first non-none result.
         .               ///
         .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
         .               ///
         .               /// # Examples
-- line 2503 ----------------------------------------
-- line 2513 ----------------------------------------
         .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
         .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Self::Item) -> Option<B>,
         .               {
         .                   #[inline]
         .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
    24,544 ( 0.00%)              move |(), x| match f(x) {
    51,254 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
         .                           None => ControlFlow::CONTINUE,
         .                       }
         .                   }
         .           
         1 ( 0.00%)          self.try_fold((), check(f)).break_value()
         .               }
         .           
         .               /// Applies function to the elements of iterator and returns
         .               /// the first true result or the first error.
         .               ///
         .               /// The return type of this method depends on the return type of the closure.
         .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
         .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2655 ----------------------------------------
         .                   P: FnMut(Self::Item) -> bool,
         .               {
         .                   #[inline]
         .                   fn check<T>(
         .                       mut predicate: impl FnMut(T) -> bool,
         .                   ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {
         .                       #[rustc_inherit_overflow_checks]
         .                       move |i, x| {
     3,378 ( 0.00%)                  if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i + 1) }
         .                       }
         .                   }
         .           
         .                   self.try_fold(0, check(predicate)).break_value()
         .               }
         .           
         .               /// Searches for an element in an iterator from the right, returning its
         .               /// index.
-- line 2671 ----------------------------------------
-- line 2819 ----------------------------------------
         .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
         .               fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item) -> B,
         .               {
         .                   #[inline]
         .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
         8 ( 0.00%)              move |x| (f(&x), x)
         .                   }
         .           
         .                   #[inline]
         .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
         .                       x_p.cmp(y_p)
         .                   }
         .           
        10 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
         .                   Some(x)
         .               }
         .           
         .               /// Returns the element that gives the maximum value with respect to the
         .               /// specified comparison function.
         .               ///
         .               /// If several elements are equally maximum, the last element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
-- line 2843 ----------------------------------------
-- line 2852 ----------------------------------------
         .               #[stable(feature = "iter_max_by", since = "1.15.0")]
         .               fn max_by<F>(self, compare: F) -> Option<Self::Item>
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
         .               {
         .                   #[inline]
         .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
        21 ( 0.00%)              move |x, y| cmp::max_by(x, y, &mut compare)
         .                   }
         .           
    20,658 ( 0.00%)          self.reduce(fold(compare))
         .               }
         .           
         .               /// Returns the element that gives the minimum value from the
         .               /// specified function.
         .               ///
         .               /// If several elements are equally minimum, the first element is
         .               /// returned. If the iterator is empty, [`None`] is returned.
         .               ///
-- line 2871 ----------------------------------------
-- line 2946 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[doc(alias = "reverse")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn rev(self) -> Rev<Self>
         .               where
         .                   Self: Sized + DoubleEndedIterator,
         .               {
        13 ( 0.00%)          Rev::new(self)
         .               }
         .           
         .               /// Converts an iterator of pairs into a pair of containers.
         .               ///
         .               /// `unzip()` consumes an entire iterator of pairs, producing two
         .               /// collections: one from the left elements of the pairs, and one
         .               /// from the right elements.
         .               ///
-- line 2962 ----------------------------------------
-- line 2987 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
         .               where
         .                   FromA: Default + Extend<A>,
         .                   FromB: Default + Extend<B>,
         .                   Self: Sized + Iterator<Item = (A, B)>,
         .               {
         .                   let mut unzipped: (FromA, FromB) = Default::default();
        56 ( 0.00%)          unzipped.extend(self);
         .                   unzipped
         .               }
         .           
         .               /// Creates an iterator which copies all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "iter_copied", since = "1.36.0")]
         .               fn copied<'a, T: 'a>(self) -> Copied<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Copy,
         .               {
     5,039 ( 0.00%)          Copied::new(self)
         .               }
         .           
         .               /// Creates an iterator which [`clone`]s all of its elements.
         .               ///
         .               /// This is useful when you have an iterator over `&T`, but you need an
         .               /// iterator over `T`.
         .               ///
         .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
         .               /// assert_eq!(v_map, vec![1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
         .               where
         .                   Self: Sized + Iterator<Item = &'a T>,
         .                   T: Clone,
         .               {
    64,976 ( 0.00%)          Cloned::new(self)
         .               }
         .           
         .               /// Repeats an iterator endlessly.
         .               ///
         .               /// Instead of stopping at [`None`], the iterator will instead start again,
         .               /// from the beginning. After iterating again, it will start at the
         .               /// beginning again. And again. And again. Forever. Note that in case the
         .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!([1].iter().eq([1].iter()), true);
         .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
         .               /// ```
         .               #[stable(feature = "iter_order", since = "1.5.0")]
        21 ( 0.00%)      fn eq<I>(self, other: I) -> bool
         .               where
         .                   I: IntoIterator,
         .                   Self::Item: PartialEq<I::Item>,
         .                   Self: Sized,
         .               {
        24 ( 0.00%)          self.eq_by(other, |x, y| x == y)
        24 ( 0.00%)      }
         .           
         .               /// Determines if the elements of this [`Iterator`] are equal to those of
         .               /// another with respect to the specified equality function.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "iter_order_by", issue = "64295")]
         .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
         .               where
         .                   Self: Sized,
         .                   I: IntoIterator,
         .                   F: FnMut(Self::Item, I::Item) -> bool,
         .               {
        30 ( 0.00%)          let mut other = other.into_iter();
         .           
         .                   loop {
         9 ( 0.00%)              let x = match self.next() {
         .                           None => return other.next().is_none(),
        33 ( 0.00%)                  Some(val) => val,
         .                       };
         .           
         9 ( 0.00%)              let y = match other.next() {
         .                           None => return false,
         .                           Some(val) => val,
         .                       };
         .           
         .                       if !eq(x, y) {
         .                           return false;
         .                       }
         .                   }
-- line 3368 ----------------------------------------
-- line 3589 ----------------------------------------
         .                   unreachable!("Always specialized");
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I: Iterator + ?Sized> Iterator for &mut I {
         .               type Item = I::Item;
         .               #[inline]
        20 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
    97,305 ( 0.00%)          (**self).next()
        30 ( 0.00%)      }
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (**self).size_hint()
         .               }
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   (**self).advance_by(n)
         .               }
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   (**self).nth(n)
-- line 3607 ----------------------------------------

 5,100,399 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        15 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           
         .               /// Contains the error value
         .               #[lang = "Err"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 534 ----------------------------------------
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn is_ok(&self) -> bool {
     3,191 ( 0.00%)          matches!(*self, Ok(_))
         .               }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ok(self) -> Option<T> {
    39,809 ( 0.00%)          match self {
    23,417 ( 0.00%)              Ok(x) => Some(x),
         .                       Err(_) => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
-- line 645 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
    16,387 ( 0.00%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
12,328,923 ( 0.12%)          match self {
   424,543 ( 0.00%)              Ok(t) => Ok(op(t)),
15,807,908 ( 0.16%)              Err(e) => Err(e),
         .                   }
     1,584 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
     3,170 ( 0.00%)          match self {
     3,093 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 832 ----------------------------------------
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
 7,116,029 ( 0.07%)          match self {
 1,144,661 ( 0.01%)              Ok(t) => Ok(t),
     6,894 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
       296 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
         .               pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
    98,168 ( 0.00%)          match self {
     7,465 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1055 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   104,419 ( 0.00%)          match self {
       566 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
-- line 1072 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
     1,145 ( 0.00%)          match self {
       724 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
        86 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
   223,764 ( 0.00%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
    17,535 ( 0.00%)          match self {
    27,113 ( 0.00%)              Ok(t) => op(t),
     4,816 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
     8,082 ( 0.00%)          match self {
    25,211 ( 0.00%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
        17 ( 0.00%)          match self {
         6 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
    79,996 ( 0.00%)          match self {
    58,006 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
-- line 1423 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
     7,082 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
    14,197 ( 0.00%)      fn clone(&self) -> Self {
   227,931 ( 0.00%)          match self {
    72,339 ( 0.00%)              Ok(x) => Ok(x.clone()),
    48,082 ( 0.00%)              Err(x) => Err(x.clone()),
         .                   }
    57,370 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
       170 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
       282 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
39,624,222 ( 0.39%)          match self {
 2,763,373 ( 0.03%)              Ok(v) => ControlFlow::Continue(v),
23,711,636 ( 0.24%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
         .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
13,178,182 ( 0.13%)              Err(e) => Err(From::from(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }
-- line 2060 ----------------------------------------

12,058,918 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 208 ----------------------------------------
         .               /// There is no built-in impl. There may be some other
         .               /// candidate (a where-clause or user-defined impl).
         .               None,
         .               /// It is unknown whether there is an impl.
         .               Ambiguous,
         .           }
         .           
         .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
   151,866 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
 1,052,994 ( 0.01%)          SelectionContext {
         .                       infcx,
   174,918 ( 0.00%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
   126,555 ( 0.00%)      }
         .           
        60 ( 0.00%)      pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
 8,382,176 ( 0.08%)          SelectionContext {
         .                       infcx,
 1,047,762 ( 0.01%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: true,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
        50 ( 0.00%)      }
         .           
         .               pub fn with_negative(
         .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
         .                   allow_negative_impls: bool,
         .               ) -> SelectionContext<'cx, 'tcx> {
         .                   debug!(?allow_negative_impls, "with_negative");
         .                   SelectionContext {
         .                       infcx,
-- line 244 ----------------------------------------
-- line 245 ----------------------------------------
         .                       freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls,
         .                       query_mode: TraitQueryMode::Standard,
         .                   }
         .               }
         .           
    12,136 ( 0.00%)      pub fn with_query_mode(
         .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
         .                   query_mode: TraitQueryMode,
         .               ) -> SelectionContext<'cx, 'tcx> {
         .                   debug!(?query_mode, "with_query_mode");
    24,272 ( 0.00%)          SelectionContext {
         .                       infcx,
     1,517 ( 0.00%)              freshener: infcx.freshener_keep_static(),
         .                       intercrate: false,
         .                       intercrate_ambiguity_causes: None,
         .                       allow_negative_impls: false,
         .                       query_mode,
         .                   }
     9,102 ( 0.00%)      }
         .           
         .               /// Enables tracking of intercrate ambiguity causes. These are
         .               /// used in coherence to give improved diagnostics. We don't do
         .               /// this until we detect a coherence error because it can lead to
         .               /// false overflow results (#47139) and because it costs
         .               /// computation time.
         .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
         .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
         .               /// was enabled and disables tracking at the same time. If
         .               /// tracking is not enabled, just returns an empty vector.
         .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
         .                   assert!(self.intercrate);
         .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
         .               }
         .           
         .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
 9,229,213 ( 0.09%)          self.infcx
    27,296 ( 0.00%)      }
         .           
         .               pub fn tcx(&self) -> TyCtxt<'tcx> {
15,091,343 ( 0.15%)          self.infcx.tcx
         .               }
         .           
         .               pub fn is_intercrate(&self) -> bool {
    51,888 ( 0.00%)          self.intercrate
         .               }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Selection
         .               //
         .               // The selection phase tries to identify *how* an obligation will
         .               // be resolved. For example, it will identify which impl or
         .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
         .               // 1. If no applicable impl or parameter bound can be found.
         .               // 2. If the output type parameters in the obligation do not match
         .               //    those specified by the impl/bound. For example, if the obligation
         .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
         .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
         .           
         .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
         .               /// type environment by performing unification.
    68,180 ( 0.00%)      #[instrument(level = "debug", skip(self))]
    87,660 ( 0.00%)      pub fn select(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
    77,004 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
         .                       Err(SelectionError::Overflow) => {
         .                           // In standard mode, overflow must have been caught and reported
         .                           // earlier.
         .                           assert!(self.query_mode == TraitQueryMode::Canonical);
         .                           return Err(SelectionError::Overflow);
         .                       }
         .                       Err(SelectionError::Ambiguous(_)) => {
         .                           return Ok(None);
         .                       }
         .                       Err(e) => {
    55,020 ( 0.00%)                  return Err(e);
         .                       }
         .                       Ok(None) => {
     3,450 ( 0.00%)                  return Ok(None);
         .                       }
    25,068 ( 0.00%)              Ok(Some(candidate)) => candidate,
         .                   };
         .           
    41,850 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
         .                       Err(SelectionError::Overflow) => {
         .                           assert!(self.query_mode == TraitQueryMode::Canonical);
         .                           Err(SelectionError::Overflow)
         .                       }
       455 ( 0.00%)              Err(e) => Err(e),
         .                       Ok(candidate) => {
         .                           debug!(?candidate, "confirmed");
    49,716 ( 0.00%)                  Ok(Some(candidate))
         .                       }
         .                   }
         .               }
         .           
    97,400 ( 0.00%)      crate fn select_from_obligation(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
         .           
         .                   let pec = &ProvisionalEvaluationCache::default();
         .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
         .           
    19,480 ( 0.00%)          self.candidate_from_obligation(&stack)
    87,660 ( 0.00%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // EVALUATION
         .               //
         .               // Tests whether an obligation can be selected or whether an impl
         .               // can be applied to particular types. It skips the "confirmation"
         .               // step and hence completely ignores output type parameters.
         .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
         .               // we can be sure it does not.
         .           
         .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
         .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
         .                   debug!(?obligation, "predicate_may_hold_fatal");
         .           
         .                   // This fatal query is a stopgap that should only be used in standard mode,
         .                   // where we do not expect overflow to be propagated.
         2 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
         .           
        10 ( 0.00%)          self.evaluate_root_obligation(obligation)
         .                       .expect("Overflow should be caught earlier in standard query mode")
         .                       .may_apply()
         .               }
         .           
         .               /// Evaluates whether the obligation `obligation` can be satisfied
         .               /// and returns an `EvaluationResult`. This is meant for the
         .               /// *initial* call.
     3,034 ( 0.00%)      pub fn evaluate_root_obligation(
         .                   &mut self,
         .                   obligation: &PredicateObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   self.evaluation_probe(|this| {
     4,557 ( 0.00%)              this.evaluate_predicate_recursively(
         .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
         .                           obligation.clone(),
         .                       )
         .                   })
     3,034 ( 0.00%)      }
         .           
         .               fn evaluation_probe(
         .                   &mut self,
         .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
         .               ) -> Result<EvaluationResult, OverflowError> {
    52,306 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
     3,038 ( 0.00%)              let result = op(self)?;
         .           
    45,612 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
         .                           Ok(()) => {}
         .                           Err(_) => return Ok(EvaluatedToErr),
         .                       }
         .           
    32,580 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
         .                           None => Ok(result),
         .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
         .                       }
         .                   })
         .               }
         .           
         .               /// Evaluates the predicates in `predicates` recursively. Note that
         .               /// this applies projections in the predicates, and therefore
         .               /// is run within an inference probe.
    99,940 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
         .               fn evaluate_predicates_recursively<'o, I>(
         .                   &mut self,
         .                   stack: TraitObligationStackList<'o, 'tcx>,
         .                   predicates: I,
         .               ) -> Result<EvaluationResult, OverflowError>
         .               where
         .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
         .               {
         .                   let mut result = EvaluatedToOk;
    33,649 ( 0.00%)          for obligation in predicates {
       928 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
       464 ( 0.00%)              if let EvaluatedToErr = eval {
         .                           // fast-path - EvaluatedToErr is the top of the lattice,
         .                           // so we don't need to look on the other predicates.
         .                           return Ok(EvaluatedToErr);
         .                       } else {
         .                           result = cmp::max(result, eval);
         .                       }
         .                   }
         .                   Ok(result)
         .               }
         .           
    17,510 ( 0.00%)      #[instrument(
         .                   level = "debug",
         .                   skip(self, previous_stack),
         .                   fields(previous_stack = ?previous_stack.head())
    15,759 ( 0.00%)      )]
         .               fn evaluate_predicate_recursively<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   obligation: PredicateObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
         .                   // a `PredicateObligation`. These are distinct types, so we can't
         .                   // use any `Option` combinator method that would force them to be
         .                   // the same.
     3,502 ( 0.00%)          match previous_stack.head() {
       464 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
     1,519 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
         .                   }
         .           
    10,506 ( 0.00%)          let result = ensure_sufficient_stack(|| {
     1,751 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
    17,510 ( 0.00%)              match bound_predicate.skip_binder() {
         .                           ty::PredicateKind::Trait(t) => {
         .                               let t = bound_predicate.rebind(t);
         .                               debug_assert!(!t.has_escaping_bound_vars());
         .                               let obligation = obligation.with(t);
    26,055 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
         .                           }
         .           
         .                           ty::PredicateKind::Subtype(p) => {
         .                               let p = bound_predicate.rebind(p);
         .                               // Does this code ever run?
         .                               match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
         .                                   Some(Ok(InferOk { mut obligations, .. })) => {
         .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
-- line 483 ----------------------------------------
-- line 545 ----------------------------------------
         .                               } else {
         .                                   Ok(EvaluatedToErr)
         .                               }
         .                           }
         .           
         .                           ty::PredicateKind::Projection(data) => {
         .                               let data = bound_predicate.rebind(data);
         .                               let project_obligation = obligation.with(data);
        78 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
        65 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
         .                                       'compute_res: {
         .                                           // If we've previously marked this projection as 'complete', thne
         .                                           // use the final cached result (either `EvaluatedToOk` or
         .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
         .                                           // sub-obligations.
        52 ( 0.00%)                                  if let Some(key) =
       117 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
         .                                           {
       104 ( 0.00%)                                      if let Some(cached_res) = self
         .                                                   .infcx
         .                                                   .inner
         .                                                   .borrow_mut()
         .                                                   .projection_cache()
         .                                                   .is_complete(key)
         .                                               {
         .                                                   break 'compute_res Ok(cached_res);
         .                                               }
         .                                           }
         .           
        26 ( 0.00%)                                  self.add_depth(
         .                                               subobligations.iter_mut(),
        26 ( 0.00%)                                      obligation.recursion_depth,
         .                                           );
        26 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
        39 ( 0.00%)                                      previous_stack,
        65 ( 0.00%)                                      subobligations,
         .                                           );
        52 ( 0.00%)                                  if let Ok(res) = res {
        26 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
        52 ( 0.00%)                                          if let Some(key) =
        13 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
        91 ( 0.00%)                                                  self, data,
         .                                                       )
         .                                                   {
         .                                                       // If the result is something that we can cache, then mark this
         .                                                       // entry as 'complete'. This will allow us to skip evaluating the
         .                                                       // suboligations at all the next time we evaluate the projection
         .                                                       // predicate.
        91 ( 0.00%)                                              self.infcx
         .                                                           .inner
         .                                                           .borrow_mut()
         .                                                           .projection_cache()
         .                                                           .complete(key, res);
         .                                                   }
         .                                               }
         .                                           }
         .                                           res
-- line 601 ----------------------------------------
-- line 693 ----------------------------------------
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
         .                               bug!("TypeWellFormedFromEnv is only used for chalk")
         .                           }
         .                       }
     1,751 ( 0.00%)          });
         .           
         .                   debug!("finished: {:?} from {:?}", result, obligation);
         .           
         .                   result
         .               }
         .           
    36,477 ( 0.00%)      #[instrument(skip(self, previous_stack), level = "debug")]
         .               fn evaluate_trait_predicate_recursively<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   mut obligation: TraitObligation<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
     3,474 ( 0.00%)          if !self.intercrate
         .                       && obligation.is_global()
         .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
         .                   {
         .                       // If a param env has no global bounds, global obligations do not
         .                       // depend on its particular value in order to work, so we can clear
         .                       // out the param env and get better caching.
         .                       debug!("in global");
     3,010 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
         .                   }
         .           
         .                   let stack = self.push_stack(previous_stack, &obligation);
         .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
     3,474 ( 0.00%)          let mut param_env = obligation.param_env;
         .           
         .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
     1,737 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
    20,844 ( 0.00%)              pred
         .                   });
         .           
         .                   debug!(?fresh_trait_pred);
         .           
     3,078 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
         .                       debug!(?result, "CACHE HIT");
         .                       return Ok(result);
         .                   }
         .           
         .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
         .                       debug!(?result, "PROVISIONAL CACHE HIT");
         .                       stack.update_reached_depth(result.reached_depth);
         .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
         .                   // stack. If so, we don't want to insert the result into the
         .                   // main cache (it is cycle dependent) nor the provisional
         .                   // cache (which is meant for things that have completed but
         .                   // for a "backedge" -- this result *is* the backedge).
         .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
         .                       return Ok(cycle_result);
         .                   }
         .           
    13,869 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
     1,541 ( 0.00%)          let result = result?;
         .           
     7,705 ( 0.00%)          if !result.must_apply_modulo_regions() {
         .                       stack.cache().on_failure(stack.dfn);
         .                   }
         .           
     1,541 ( 0.00%)          let reached_depth = stack.reached_depth.get();
     3,082 ( 0.00%)          if reached_depth >= stack.depth {
         .                       debug!(?result, "CACHE MISS");
    29,279 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
         .           
         .                       stack.cache().on_completion(
     3,082 ( 0.00%)                  stack.dfn,
         .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
         .                               // Create a new `DepNode` that has dependencies on:
         .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
         .                               // entry being crated
         .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
         .                               // provisional caches entries and inserting them into the evaluation cache
         .                               //
         .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 839 ----------------------------------------
         .               fn check_evaluation_cycle(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'_, 'tcx>,
         .               ) -> Option<EvaluationResult> {
         .                   if let Some(cycle_depth) = stack
         .                       .iter()
         .                       .skip(1) // Skip top-most frame.
         .                       .find(|prev| {
       102 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
         .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
         .                       })
         .                       .map(|stack| stack.depth)
         .                   {
         .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
         .           
         .                       // If we have a stack like `A B C D E A`, where the top of
         .                       // the stack is the final `A`, then this will iterate over
-- line 855 ----------------------------------------
-- line 874 ----------------------------------------
         .                           debug!("evaluate_stack --> recursive, inductive");
         .                           Some(EvaluatedToRecur)
         .                       }
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
    13,869 ( 0.00%)      fn evaluate_stack<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   // In intercrate mode, whenever any of the generics are unbound,
         .                   // there can always be an impl. Even if there are no impls in
         .                   // this crate, perhaps the type would be unified with
         .                   // something from another crate that does provide an impl.
         .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
         .                   // imagine, this is just where we started. To avoid that, we
         .                   // check for unbound variables and return an ambiguous (hence possible)
         .                   // match if we've seen this trait before.
         .                   //
         .                   // This suffices to allow chains like `FnMut` implemented in
         .                   // terms of `Fn` etc, but we could probably make this more
         .                   // precise still.
         .                   let unbound_input_types =
     1,541 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
         .           
     4,623 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
         .                       // This check was an imperfect workaround for a bug in the old
         .                       // intercrate mode; it should be removed when that goes away.
     7,705 ( 0.00%)              if unbound_input_types && self.intercrate {
         .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
         .                           // Heuristics: show the diagnostics when there are no candidates in crate.
         .                           if self.intercrate_ambiguity_causes.is_some() {
         .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
         .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
         .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
         .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
         .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
         .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
         .                                   }
         .                               }
         .                           }
         .                           return Ok(EvaluatedToAmbig);
         .                       }
         .                   }
         .           
     3,082 ( 0.00%)          if unbound_input_types
         .                       && stack.iter().skip(1).any(|prev| {
        18 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
         .                               && self.match_fresh_trait_refs(
        24 ( 0.00%)                          stack.fresh_trait_pred,
        24 ( 0.00%)                          prev.fresh_trait_pred,
         .                                   prev.obligation.param_env,
         .                               )
         .                       })
         .                   {
         .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
         .                       return Ok(EvaluatedToUnknown);
         .                   }
         .           
    13,376 ( 0.00%)          match self.candidate_from_obligation(stack) {
     8,442 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
         .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
         .                       Ok(None) => Ok(EvaluatedToAmbig),
         .                       Err(Overflow) => Err(OverflowError::Canonical),
         .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
         .                       Err(..) => Ok(EvaluatedToErr),
         .                   }
    15,410 ( 0.00%)      }
         .           
         .               /// For defaulted traits, we use a co-inductive strategy to solve, so
         .               /// that recursion is ok. This routine returns `true` if the top of the
         .               /// stack (`cycle[0]`):
         .               ///
         .               /// - is a defaulted trait,
         .               /// - it also appears in the backtrace at some position `X`,
         .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 998 ----------------------------------------
         .                   skip(self, stack),
         .                   fields(depth = stack.obligation.recursion_depth)
         .               )]
         .               fn evaluate_candidate<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   candidate: &SelectionCandidate<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
     9,918 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
         .                       let candidate = (*candidate).clone();
    79,385 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
         .                           Ok(selection) => {
         .                               debug!(?selection);
    19,836 ( 0.00%)                      this.evaluate_predicates_recursively(
         .                                   stack.list(),
    64,467 ( 0.00%)                          selection.nested_obligations().into_iter(),
         .                               )
         .                           }
         .                           Err(..) => Ok(EvaluatedToErr),
         .                       }
         .                   })?;
         .           
         .                   // If we erased any lifetimes, then we want to use
         .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
         .               ) -> Option<EvaluationResult> {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
     3,474 ( 0.00%)          if self.intercrate {
         .                       return None;
         .                   }
         .           
         .                   let tcx = self.tcx();
         .                   if self.can_use_global_caches(param_env) {
    12,131 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
         .                           return Some(res);
         .                       }
         .                   }
     6,156 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
         .               }
         .           
    18,492 ( 0.00%)      fn insert_evaluation_cache(
         .                   &mut self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
         .                   dep_node: DepNodeIndex,
         .                   result: EvaluationResult,
         .               ) {
         .                   // Avoid caching results that depend on more than just the trait-ref
         .                   // - the stack can create recursion.
     6,164 ( 0.00%)          if result.is_stack_dependent() {
         .                       return;
         .                   }
         .           
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
     3,082 ( 0.00%)          if self.intercrate {
         .                       return;
         .                   }
         .           
         .                   if self.can_use_global_caches(param_env) {
         .                       if !trait_pred.needs_infer() {
         .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
         .                           // This may overwrite the cache with the same value
         .                           // FIXME: Due to #50507 this overwrites the different values
         .                           // This should be changed to use HashMapExt::insert_same
         .                           // when that is fixed
     1,537 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
         .                           return;
         .                       }
         .                   }
         .           
         .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
         8 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
    12,328 ( 0.00%)      }
         .           
         .               /// For various reasons, it's possible for a subobligation
         .               /// to have a *lower* recursion_depth than the obligation used to create it.
         .               /// Projection sub-obligations may be returned from the projection cache,
         .               /// which results in obligations with an 'old' `recursion_depth`.
         .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
         .               /// subobligations without taking in a 'parent' depth, causing the
         .               /// generated subobligations to have a `recursion_depth` of `0`.
         .               ///
         .               /// To ensure that obligation_depth never decreases, we force all subobligations
         .               /// to have at least the depth of the original obligation.
        13 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
         .                   &self,
         .                   it: I,
         .                   min_depth: usize,
         .               ) {
         .                   it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
        26 ( 0.00%)      }
         .           
         .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
         .                   &self,
         .                   depth: usize,
         .                   error_obligation: &Obligation<'tcx, T>,
         .               ) -> Result<(), OverflowError> {
    52,128 ( 0.00%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
         .                       match self.query_mode {
         .                           TraitQueryMode::Standard => {
         .                               if self.infcx.is_tainted_by_errors() {
         .                                   return Err(OverflowError::ErrorReporting);
         .                               }
         .                               self.infcx.report_overflow_error(error_obligation, true);
         .                           }
         .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
         .               ) -> Result<(), OverflowError> {
         .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
         .               }
         .           
         .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
         .               where
         .                   OP: FnOnce(&mut Self) -> R,
         .               {
    38,493 ( 0.00%)          let (result, dep_node) =
    30,094 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
         .                   self.tcx().dep_graph.read_index(dep_node);
    35,532 ( 0.00%)          (result, dep_node)
         .               }
         .           
         .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
         .               /// for a negative goal and a negative impl for a positive goal
         .               #[instrument(level = "debug", skip(self))]
         .               fn filter_impls(
         .                   &mut self,
         .                   candidates: Vec<SelectionCandidate<'tcx>>,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Vec<SelectionCandidate<'tcx>> {
         .                   let tcx = self.tcx();
         .                   let mut result = Vec::with_capacity(candidates.len());
         .           
    83,308 ( 0.00%)          for candidate in candidates {
         .                       // Respect const trait obligations
    18,729 ( 0.00%)              if obligation.is_const() {
         .                           match candidate {
         .                               // const impl
         .                               ImplCandidate(def_id)
         .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
         .                               // const param
         .                               ParamCandidate(trait_pred)
         .                                   if trait_pred.skip_binder().constness
         .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
         .                               ConstDropCandidate(_) => {}
         .                               _ => {
         .                                   // reject all other types of candidates
         .                                   continue;
         .                               }
         .                           }
         .                       }
         .           
    12,486 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
    11,960 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
     5,980 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
         .                               || self.allow_negative_impls
         .                           {
         .                               result.push(candidate);
         .                           }
         .                       } else {
         .                           result.push(candidate);
         .                       }
         .                   }
         .           
    11,708 ( 0.00%)          result
         .               }
         .           
         .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
    46,002 ( 0.00%)      #[instrument(level = "debug", skip(self))]
         .               fn filter_reservation_impls(
         .                   &mut self,
         .                   candidate: SelectionCandidate<'tcx>,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
         .                   let tcx = self.tcx();
         .                   // Treat reservation impls as ambiguity.
    10,302 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
     4,890 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
         .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
         .                               let attrs = tcx.get_attrs(def_id);
         .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
         .                               let value = attr.and_then(|a| a.value_str());
         .                               if let Some(value) = value {
         .                                   debug!(
         .                                       "filter_reservation_impls: \
         .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
         .                                           message: value.to_string(),
         .                                       },
         .                                   );
         .                               }
         .                           }
         .                           return Ok(None);
         .                       }
         .                   }
    16,236 ( 0.00%)          Ok(Some(candidate))
         .               }
         .           
         .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
         .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
         .           
     8,889 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
         .                       return None;
         .                   }
         .           
         .                   let obligation = &stack.obligation;
         6 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .           
         .                   // Okay to skip binder because of the nature of the
         .                   // trait-ref-is-knowable check, which does not care about
         .                   // bound regions.
         .                   let trait_ref = predicate.skip_binder().trait_ref;
         .           
         6 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
         .               }
         .           
         .               /// Returns `true` if the global caches can be used.
         .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
         .                   // If there are any inference variables in the `ParamEnv`, then we
         .                   // always use a cache local to this particular scope. Otherwise, we
         .                   // switch to a global cache.
         .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
         .                   &mut self,
         .                   mut param_env: ty::ParamEnv<'tcx>,
         .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
         .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
    22,562 ( 0.00%)          if self.intercrate {
         2 ( 0.00%)              return None;
         .                   }
         .                   let tcx = self.tcx();
         .                   let mut pred = cache_fresh_trait_pred.skip_binder();
    22,558 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
         .           
    11,279 ( 0.00%)          if self.can_use_global_caches(param_env) {
   112,770 ( 0.00%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
   108,160 ( 0.00%)                  return Some(res);
         .                       }
         .                   }
    32,547 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
         .               }
         .           
         .               /// Determines whether can we safely cache the result
         .               /// of selecting an obligation. This is almost always `true`,
         .               /// except when dealing with certain `ParamCandidate`s.
         .               ///
         .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
         .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
         .               fn can_cache_candidate(
         .                   &self,
         .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
         .               ) -> bool {
         .                   // Neither the global nor local cache is aware of intercrate
         .                   // mode, so don't do any caching. In particular, we might
         .                   // re-use the same `InferCtxt` with both an intercrate
         .                   // and non-intercrate `SelectionContext`
     5,922 ( 0.00%)          if self.intercrate {
         .                       return false;
         .                   }
     8,877 ( 0.00%)          match result {
         .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
         .                       _ => true,
         .                   }
         .               }
         .           
         .               fn insert_candidate_cache(
         .                   &mut self,
         .                   mut param_env: ty::ParamEnv<'tcx>,
         .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
         .                   dep_node: DepNodeIndex,
         .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
         .               ) {
         .                   let tcx = self.tcx();
         .                   let mut pred = cache_fresh_trait_pred.skip_binder();
         .           
     5,922 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
         .           
         .                   if !self.can_cache_candidate(&candidate) {
         .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
         .                       return;
         .                   }
         .           
     2,959 ( 0.00%)          if self.can_use_global_caches(param_env) {
     6,350 ( 0.00%)              if let Err(Overflow) = candidate {
         .                           // Don't cache overflow globally; we only produce this in certain modes.
         .                       } else if !pred.needs_infer() {
    11,828 ( 0.00%)                  if !candidate.needs_infer() {
         .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
         .                               // This may overwrite the cache with the same value.
    79,839 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
         .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
        46 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
         .               }
         .           
         .               /// Matches a predicate against the bounds of its self type.
         .               ///
         .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
         .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
         .               /// `Baz` bound. We return indexes into the list returned by
         .               /// `tcx.item_bounds` for any applicable bounds.
       288 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> smallvec::SmallVec<[usize; 2]> {
       416 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
         .                   let placeholder_trait_predicate =
       544 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
         .                   debug!(
         .                       ?placeholder_trait_predicate,
         .                       "match_projection_obligation_against_definition_bounds"
         .                   );
         .           
        32 ( 0.00%)          let tcx = self.infcx.tcx;
       192 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
        96 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
         .                       ty::Opaque(def_id, substs) => (def_id, substs),
         .                       _ => {
         .                           span_bug!(
         .                               obligation.cause.span,
         .                               "match_projection_obligation_against_definition_bounds() called \
         .                                but self-ty is not a projection: {:?}",
         .                               placeholder_trait_predicate.trait_ref.self_ty()
         .                           );
-- line 1404 ----------------------------------------
-- line 1411 ----------------------------------------
         .                   // unnecessary ambiguity.
         .                   let mut distinct_normalized_bounds = FxHashSet::default();
         .           
         .                   let matching_bounds = bounds
         .                       .iter()
         .                       .enumerate()
         .                       .filter_map(|(idx, bound)| {
         .                           let bound_predicate = bound.kind();
       672 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
         .                               let bound = bound_predicate.rebind(pred.trait_ref);
     3,360 ( 0.00%)                      if self.infcx.probe(|_| {
     1,344 ( 0.00%)                          match self.match_normalize_trait_ref(
         .                                       obligation,
       896 ( 0.00%)                              bound,
       896 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
         .                                   ) {
         .                                       Ok(None) => true,
         .                                       Ok(Some(normalized_trait))
         .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
         .                                       {
         .                                           true
         .                                       }
         .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
         .                               }
         .                           }
         .                           None
         .                       })
         .                       .collect();
         .           
         .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
         .                   matching_bounds
       288 ( 0.00%)      }
         .           
         .               /// Equates the trait in `obligation` with trait bound. If the two traits
         .               /// can be equated and the normalized trait bound doesn't contain inference
         .               /// variables or placeholders, the normalized bound is returned.
     2,912 ( 0.00%)      fn match_normalize_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   trait_bound: ty::PolyTraitRef<'tcx>,
         .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
         .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
         .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
       704 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
         .                       // Avoid unnecessary normalization
       416 ( 0.00%)              return Err(());
         .                   }
         .           
       192 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
         .                       project::normalize_with_depth(
         .                           self,
        16 ( 0.00%)                  obligation.param_env,
         .                           obligation.cause.clone(),
        48 ( 0.00%)                  obligation.recursion_depth + 1,
        64 ( 0.00%)                  trait_bound,
         .                       )
         .                   });
        48 ( 0.00%)          self.infcx
        32 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
         .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
         .                       .map(|InferOk { obligations: _, value: () }| {
         .                           // This method is called within a probe, so we can't have
         .                           // inference variables and placeholders escape.
         .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
        80 ( 0.00%)                      Some(trait_bound)
         .                           } else {
         .                               None
         .                           }
         .                       })
         .                       .map_err(|_| ())
     2,016 ( 0.00%)      }
         .           
         .               fn evaluate_where_clause<'o>(
         .                   &mut self,
         .                   stack: &TraitObligationStack<'o, 'tcx>,
         .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<EvaluationResult, OverflowError> {
         .                   self.evaluation_probe(|this| {
       418 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
       200 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
         .                           Err(()) => Ok(EvaluatedToErr),
         .                       }
         .                   })
         .               }
         .           
     9,279 ( 0.00%)      pub(super) fn match_projection_projections(
         .                   &mut self,
         .                   obligation: &ProjectionTyObligation<'tcx>,
         .                   env_predicate: PolyProjectionPredicate<'tcx>,
         .                   potentially_unnormalized_candidates: bool,
         .               ) -> bool {
         .                   let mut nested_obligations = Vec::new();
     5,155 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
     3,093 ( 0.00%)              obligation.cause.span,
         .                       LateBoundRegionConversionTime::HigherRankedType,
         .                       env_predicate,
         .                   );
     2,062 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
         .                       ensure_sufficient_stack(|| {
         .                           project::normalize_with_depth_to(
         .                               self,
         .                               obligation.param_env,
         .                               obligation.cause.clone(),
         .                               obligation.recursion_depth + 1,
         .                               infer_predicate.projection_ty,
         .                               &mut nested_obligations,
         .                           )
         .                       })
         .                   } else {
     2,062 ( 0.00%)              infer_predicate.projection_ty
         .                   };
         .           
     1,031 ( 0.00%)          self.infcx
     2,062 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
     2,062 ( 0.00%)              .sup(obligation.predicate, infer_projection)
     8,248 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
         .                           self.evaluate_predicates_recursively(
         .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
         .                               nested_obligations.into_iter().chain(obligations),
         .                           )
     2,062 ( 0.00%)                  .map_or(false, |res| res.may_apply())
         .                       })
     9,279 ( 0.00%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // WINNOW
         .               //
         .               // Winnowing is the process of attempting to resolve ambiguity by
         .               // probing further. During the winnowing process, we unify all
         .               // type variables and then we also attempt to evaluate recursive
         .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
         .               /// See the comment for "SelectionCandidate" for more details.
         .               fn candidate_should_be_dropped_in_favor_of(
         .                   &mut self,
         .                   sized_predicate: bool,
         .                   victim: &EvaluatedCandidate<'tcx>,
         .                   other: &EvaluatedCandidate<'tcx>,
         .                   needs_infer: bool,
         .               ) -> bool {
     4,918 ( 0.00%)          if victim.candidate == other.candidate {
         .                       return true;
         .                   }
         .           
         .                   // Check if a bound would previously have been removed when normalizing
         .                   // the param_env so that it can be given the lowest priority. See
         .                   // #50825 for the motivation for this.
         .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
        10 ( 0.00%)              cand.is_global() && !cand.has_late_bound_regions()
         .                   };
         .           
         .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
         .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
         .                   //
         .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
         .                   // lifetime of a variable.
   145,852 ( 0.00%)          match (&other.candidate, &victim.candidate) {
         .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
         .                           bug!(
         .                               "default implementations shouldn't be recorded \
         .                               when there are other valid candidates"
         .                           );
         .                       }
         .           
         .                       // (*)
-- line 1582 ----------------------------------------
-- line 1623 ----------------------------------------
         .                       (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,
         .           
         .                       // If obligation is a sized predicate or the where-clause bound is
         .                       // global, prefer the projection or object candidate. See issue
         .                       // #50825 and #89352.
         .                       (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {
         .                           sized_predicate || is_global(cand)
         .                       }
         4 ( 0.00%)              (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {
         4 ( 0.00%)                  !(sized_predicate || is_global(cand))
         .                       }
         .           
         .                       // Global bounds from the where clause should be ignored
         .                       // here (see issue #50825). Otherwise, we have a where
         .                       // clause so don't go around looking for impls.
         .                       // Arbitrarily give param candidates priority
         .                       // over projection and object candidates.
         .                       (
     6,144 ( 0.00%)                  ParamCandidate(ref cand),
         .                           ImplCandidate(..)
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
-- line 1649 ----------------------------------------
-- line 1654 ----------------------------------------
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { has_nested: true }
         .                           | TraitAliasCandidate(..),
     6,138 ( 0.00%)                  ParamCandidate(ref cand),
         .                       ) => {
         .                           // Prefer these to a global where-clause bound
         .                           // (see issue #50825).
         .                           is_global(cand) && other.evaluation.must_apply_modulo_regions()
         .                       }
         .           
         .                       (ProjectionCandidate(i), ProjectionCandidate(j))
         .                       | (ObjectCandidate(i), ObjectCandidate(j)) => {
-- line 1670 ----------------------------------------
-- line 1674 ----------------------------------------
         .                       }
         .                       (ObjectCandidate(_), ProjectionCandidate(_))
         .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
         .                           bug!("Have both object and projection candidate")
         .                       }
         .           
         .                       // Arbitrarily give projection and object candidates priority.
         .                       (
     9,836 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
         .                           ImplCandidate(..)
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
         .                           | ClosureCandidate
         .                           | GeneratorCandidate
         .                           | FnPointerCandidate { .. }
         .                           | BuiltinObjectCandidate
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { .. }
         .                           | TraitAliasCandidate(..),
    19,672 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
         .                       ) => false,
         .           
    49,180 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
         .                           // See if we can toss out `victim` based on specialization.
         .                           // This requires us to know *for sure* that the `other` impl applies
         .                           // i.e., `EvaluatedToOk`.
         .                           //
         .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
         .                           // to me but is required for `std` to compile, so I didn't change it
         .                           // for now.
         .                           let tcx = self.tcx();
    19,672 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
    39,344 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
         .                                   return true;
         .                               }
         .                           }
         .           
    24,590 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
    19,632 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
         .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
         .                                       // Subtle: If the predicate we are evaluating has inference
         .                                       // variables, do *not* allow discarding candidates due to
         .                                       // marker trait impls.
         .                                       //
         .                                       // Without this restriction, we could end up accidentally
         .                                       // constrainting inference variables based on an arbitrarily
         .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
         .                           | BuiltinUnsizeCandidate
         .                           | TraitUpcastingUnsizeCandidate(_)
         .                           | BuiltinCandidate { has_nested: true }
         .                           | TraitAliasCandidate(..),
         .                       ) => false,
         .                   }
         .               }
         .           
     3,550 ( 0.00%)      fn sized_conditions(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> BuiltinImplConditions<'tcx> {
         .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
         .           
         .                   // NOTE: binder moved to (*)
     1,065 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
         .           
     1,783 ( 0.00%)          match self_ty.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
         .                       | ty::Ref(..)
         .                       | ty::Generator(..)
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => {
         .                           // safe for everything
       118 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
         .                       }
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
         .           
         .                       ty::Tuple(tys) => Where(
         .                           obligation
         .                               .predicate
       276 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
         .                       ),
         .           
         .                       ty::Adt(def, substs) => {
       180 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
         .                           // (*) binder moved here
       450 ( 0.00%)                  Where(
         .                               obligation.predicate.rebind({
        90 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
         .                               }),
         .                           )
         .                       }
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
         .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
         .           
         .                       ty::Placeholder(..)
         .                       | ty::Bound(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
         .                       }
         .                   }
     2,840 ( 0.00%)      }
         .           
       880 ( 0.00%)      fn copy_clone_conditions(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> BuiltinImplConditions<'tcx> {
         .                   // NOTE: binder moved to (*)
       220 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
         .           
         .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
         .           
       578 ( 0.00%)          match *self_ty.kind() {
         .                       ty::Infer(ty::IntVar(_))
         .                       | ty::Infer(ty::FloatVar(_))
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
         .           
         .                       ty::Uint(_)
         .                       | ty::Int(_)
-- line 1874 ----------------------------------------
-- line 1886 ----------------------------------------
         .                       ty::Dynamic(..)
         .                       | ty::Str
         .                       | ty::Slice(..)
         .                       | ty::Generator(..)
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Foreign(..)
         .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
         .           
         7 ( 0.00%)              ty::Tuple(tys) => {
         .                           // (*) binder moved here
        40 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
         .                       }
         .           
         7 ( 0.00%)              ty::Closure(_, substs) => {
         .                           // (*) binder moved here
        21 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
        14 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
         .                               // Not yet resolved.
         .                               Ambiguous
         .                           } else {
        49 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
         .                           }
         .                       }
         .           
         .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
         .                           // Fallback to whatever user-defined impls exist in this case.
         .                           None
         .                       }
         .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
         .                       }
         .           
         .                       ty::Placeholder(..)
         .                       | ty::Bound(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
         .                       }
         .                   }
       660 ( 0.00%)      }
         .           
         .               /// For default impls, we need to break apart a type into its
         .               /// "constituent types" -- meaning, the types that it contains.
         .               ///
         .               /// Here are some (simple) examples:
         .               ///
         .               /// ```
         .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 2003 ----------------------------------------
         .                           // We can resolve the `impl Trait` to its concrete type,
         .                           // which enforces a DAG between the functions requiring
         .                           // the auto trait bounds in question.
         .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
         .                       }
         .                   }
         .               }
         .           
     2,232 ( 0.00%)      fn collect_predicates_for_types(
         .                   &mut self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   cause: ObligationCause<'tcx>,
         .                   recursion_depth: usize,
         .                   trait_def_id: DefId,
         .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
         .               ) -> Vec<PredicateObligation<'tcx>> {
         .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
         .                   // 2. Produce something like `&'0 i32 : Copy`
         .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
         .           
         .                   types
         .                       .as_ref()
         .                       .skip_binder() // binder moved -\
         .                       .iter()
         .                       .flat_map(|ty| {
       567 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
         .           
     2,268 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
       567 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
       945 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
     1,890 ( 0.00%)                          ensure_sufficient_stack(|| {
         .                                       project::normalize_with_depth(
         .                                           self,
       189 ( 0.00%)                                  param_env,
         .                                           cause.clone(),
       189 ( 0.00%)                                  recursion_depth,
       189 ( 0.00%)                                  placeholder_ty,
         .                                       )
         .                                   });
     2,079 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
         .                                   self.tcx(),
       189 ( 0.00%)                          param_env,
         .                                   cause.clone(),
       378 ( 0.00%)                          trait_def_id,
         .                                   recursion_depth,
         .                                   normalized_ty,
         .                                   &[],
         .                               );
     1,134 ( 0.00%)                      obligations.push(placeholder_obligation);
         .                               obligations
         .                           })
         .                       })
         .                       .collect()
     1,116 ( 0.00%)      }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Matching
         .               //
         .               // Matching is a common path used for both evaluation and
         .               // confirmation.  It basically unifies types that appear in impls
         .               // and traits. This does affect the surrounding environment;
         .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
         .               // run inside of a `probe()` so that their side-effects are
         .               // contained.
         .           
         .               fn rematch_impl(
         .                   &mut self,
         .                   impl_def_id: DefId,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
    36,275 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
    29,020 ( 0.00%)              Ok(substs) => substs,
         .                       Err(()) => {
         .                           bug!(
         .                               "Impl {:?} was matchable against {:?} but now is not",
         .                               impl_def_id,
         .                               obligation
         .                           );
         .                       }
         .                   }
         .               }
         .           
40,297,556 ( 0.40%)      #[tracing::instrument(level = "debug", skip(self))]
         .               fn match_impl(
         .                   &mut self,
         .                   impl_def_id: DefId,
         .                   obligation: &TraitObligation<'tcx>,
         .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
         .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
         .           
         .                   // Before we create the substitutions and everything, first
         .                   // consider a "quick reject". This avoids creating more types
         .                   // and so forth that we need to.
         .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
     3,122 ( 0.00%)              return Err(());
         .                   }
         .           
         .                   let placeholder_obligation =
14,835,541 ( 0.15%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
 6,358,089 ( 0.06%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
         .           
10,596,815 ( 0.11%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
         .           
 4,238,726 ( 0.04%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
         .           
         .                   debug!(?impl_trait_ref);
         .           
12,716,178 ( 0.13%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
14,835,541 ( 0.15%)              ensure_sufficient_stack(|| {
         .                           project::normalize_with_depth(
         .                               self,
 2,119,363 ( 0.02%)                      obligation.param_env,
         .                               obligation.cause.clone(),
 6,358,089 ( 0.06%)                      obligation.recursion_depth + 1,
 4,238,726 ( 0.04%)                      impl_trait_ref,
         .                           )
         .                       });
         .           
         .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
         .           
         .                   let cause = ObligationCause::new(
 2,119,363 ( 0.02%)              obligation.cause.span,
 4,238,726 ( 0.04%)              obligation.cause.body_id,
19,074,267 ( 0.19%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
         .                   );
         .           
 4,238,726 ( 0.04%)          let InferOk { obligations, .. } = self
         .                       .infcx
 2,119,363 ( 0.02%)              .at(&cause, obligation.param_env)
         .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
         .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
         .                   nested_obligations.extend(obligations);
         .           
    39,705 ( 0.00%)          if !self.intercrate
         .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
         .                   {
         .                       debug!("match_impl: reservation impls only apply in intercrate mode");
         .                       return Err(());
         .                   }
         .           
         .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
    79,410 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
         .               }
         .           
         .               fn fast_reject_trait_refs(
         .                   &mut self,
         .                   obligation: &TraitObligation<'_>,
         .                   impl_trait_ref: &ty::TraitRef<'_>,
         .               ) -> bool {
         .                   // We can avoid creating type variables and doing the full
         .                   // substitution if we find that any of the input types, when
         .                   // simplified, do not match.
         .           
 6,362,772 ( 0.06%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
         .                       |(obligation_arg, impl_arg)| {
12,759,840 ( 0.13%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
         .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
         .                                   // Note, we simplify parameters for the obligation but not the
         .                                   // impl so that we do not reject a blanket impl but do reject
         .                                   // more concrete impls if we're searching for `T: Trait`.
17,013,120 ( 0.17%)                          let simplified_obligation_ty = fast_reject::simplify_type(
         .                                       self.tcx(),
         .                                       obligation_ty,
         .                                       SimplifyParams::Yes,
         .                                       StripReferences::No,
         .                                   );
12,759,840 ( 0.13%)                          let simplified_impl_ty = fast_reject::simplify_type(
         .                                       self.tcx(),
         .                                       impl_ty,
         .                                       SimplifyParams::No,
         .                                       StripReferences::No,
         .                                   );
         .           
 6,379,920 ( 0.06%)                          simplified_obligation_ty.is_some()
         .                                       && simplified_impl_ty.is_some()
         .                                       && simplified_obligation_ty != simplified_impl_ty
         .                               }
         .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
         .                                   // Lifetimes can never cause a rejection.
         .                                   false
         .                               }
         .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
         .                           }
         .                       },
         .                   )
         .               }
         .           
         .               /// Normalize `where_clause_trait_ref` and try to match it against
         .               /// `obligation`. If successful, return any predicates that
         .               /// result from the normalization.
       342 ( 0.00%)      fn match_where_clause_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
         .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
       304 ( 0.00%)      }
         .           
         .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
         .               /// obligation is satisfied.
         .               #[instrument(skip(self), level = "debug")]
         .               fn match_poly_trait_ref(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
         .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
       353 ( 0.00%)          self.infcx
        38 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
     1,059 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
         .                       .map(|InferOk { obligations, .. }| obligations)
         .                       .map_err(|_| ())
         .               }
         .           
         .               ///////////////////////////////////////////////////////////////////////////
         .               // Miscellany
         .           
         .               fn match_fresh_trait_refs(
         .                   &self,
         .                   previous: ty::PolyTraitPredicate<'tcx>,
         .                   current: ty::PolyTraitPredicate<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> bool {
        18 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
         .                   matcher.relate(previous, current).is_ok()
         .               }
         .           
         .               fn push_stack<'o>(
         .                   &mut self,
         .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
         .                   obligation: &'o TraitObligation<'tcx>,
         .               ) -> TraitObligationStack<'o, 'tcx> {
    72,336 ( 0.00%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
         .           
         .                   let dfn = previous_stack.cache.next_dfn();
     3,474 ( 0.00%)          let depth = previous_stack.depth() + 1;
    98,082 ( 0.00%)          TraitObligationStack {
         .                       obligation,
    59,122 ( 0.00%)              fresh_trait_pred,
         .                       reached_depth: Cell::new(depth),
         .                       previous: previous_stack,
         .                       dfn,
         .                       depth,
         .                   }
         .               }
         .           
         .               #[instrument(skip(self), level = "debug")]
         .               fn closure_trait_ref_unnormalized(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::PolyTraitRef<'tcx> {
        84 ( 0.00%)          let closure_sig = substs.as_closure().sig();
         .           
         .                   debug!(?closure_sig);
         .           
         .                   // (1) Feels icky to skip the binder here, but OTOH we know
         .                   // that the self-type is an unboxed closure type and hence is
         .                   // in fact unparameterized (or at least does not reference any
         .                   // regions bound in the obligation). Still probably some
         .                   // refactoring could make this nicer.
       280 ( 0.00%)          closure_trait_ref_and_return_type(
         .                       self.tcx(),
       168 ( 0.00%)              obligation.predicate.def_id(),
        28 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
       112 ( 0.00%)              closure_sig,
         .                       util::TupleArgumentsFlag::No,
         .                   )
         .                   .map_bound(|(trait_ref, _)| trait_ref)
         .               }
         .           
         .               fn generator_trait_ref_unnormalized(
         .                   &mut self,
         .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
         .                   )
         .                   .map_bound(|(trait_ref, ..)| trait_ref)
         .               }
         .           
         .               /// Returns the obligations that are implied by instantiating an
         .               /// impl or trait. The obligations are substituted and fully
         .               /// normalized. This is used when confirming an impl or default
         .               /// impl.
   166,865 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
         .               fn impl_or_trait_obligations(
         .                   &mut self,
         .                   cause: ObligationCause<'tcx>,
         .                   recursion_depth: usize,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   def_id: DefId,           // of impl or trait
         .                   substs: SubstsRef<'tcx>, // for impl or trait
         .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
         .                   //    V: Iterator, V: Sized,
         .                   //    <U as Iterator>::Item: Copy
         .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
         .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
         .                   // `$1: Copy`, so we must ensure the obligations are emitted in
         .                   // that order.
         .                   let predicates = tcx.predicates_of(def_id);
         .                   debug!(?predicates);
     7,255 ( 0.00%)          assert_eq!(predicates.parent, None);
    21,765 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
         .                   for (predicate, _) in predicates.predicates {
         .                       debug!(?predicate);
    10,120 ( 0.00%)              let predicate = normalize_with_depth_to(
         .                           self,
         .                           param_env,
         .                           cause.clone(),
         .                           recursion_depth,
     2,024 ( 0.00%)                  predicate.subst(tcx, substs),
         .                           &mut obligations,
         .                       );
    20,240 ( 0.00%)              obligations.push(Obligation {
         .                           cause: cause.clone(),
         .                           recursion_depth,
         .                           param_env,
         .                           predicate,
         .                       });
         .                   }
         .           
         .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
         .                   // (#38528) from happening, but the real cause of the duplication is
         .                   // unknown. What we know is that the deduplication avoids exponential
         .                   // amount of predicates being propagated when processing deeply nested
         .                   // types.
         .                   //
         .                   // This code is hot enough that it's worth avoiding the allocation
         .                   // required for the FxHashSet when possible. Special-casing lengths 0,
         .                   // 1 and 2 covers roughly 75-80% of the cases.
     3,597 ( 0.00%)          if obligations.len() <= 1 {
         .                       // No possibility of duplicates.
       568 ( 0.00%)          } else if obligations.len() == 2 {
         .                       // Only two elements. Drop the second if they are equal.
         .                       if obligations[0] == obligations[1] {
         .                           obligations.truncate(1);
         .                       }
         .                   } else {
         .                       // Three or more elements. Use a general deduplication process.
         .                       let mut seen = FxHashSet::default();
       186 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
         .                   }
         .           
    29,020 ( 0.00%)          obligations
         .               }
         .           }
         .           
         .           trait TraitObligationExt<'tcx> {
         .               fn derived_cause(
         .                   &self,
         .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
         .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
         .                    */
         .           
         .                   let obligation = self;
         .           
         .                   // NOTE(flaper87): As of now, it keeps track of the whole error
         .                   // chain. Ideally, we should have a way to configure this either
         .                   // by using -Z verbose or just a CLI argument.
         .                   let derived_cause = DerivedObligationCause {
    29,764 ( 0.00%)              parent_trait_pred: obligation.predicate,
    14,696 ( 0.00%)              parent_code: obligation.cause.clone_code(),
         .                   };
         .                   let derived_code = variant(derived_cause);
    89,106 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
         .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
         .                   TraitObligationStackList::with(self)
         .               }
         .           
         .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
     8,215 ( 0.00%)          self.previous.cache
         .               }
         .           
         .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
         .                   self.list()
         .               }
         .           
         .               /// Indicates that attempting to evaluate this stack entry
         .               /// required accessing something from the stack at depth `reached_depth`.
-- line 2438 ----------------------------------------
-- line 2540 ----------------------------------------
         .               /// evaluation. When we create an entry in the evaluation cache using this provisional
         .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
         .               /// the cache will have all of the necessary incr comp dependencies tracked.
         .               dep_node: DepNodeIndex,
         .           }
         .           
         .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
         .               fn default() -> Self {
    19,940 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
         .               }
         .           }
         .           
         .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
         .               /// Get the next DFN in sequence (basically a counter).
         .               fn next_dfn(&self) -> usize {
     1,737 ( 0.00%)          let result = self.dfn.get();
     6,948 ( 0.00%)          self.dfn.set(result + 1);
         .                   result
         .               }
         .           
         .               /// Check the provisional cache for any result for
         .               /// `fresh_trait_ref`. If there is a hit, then you must consider
         .               /// it an access to the stack slots at depth
         .               /// `reached_depth` (from the returned value).
         .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
         .               fn on_completion(
         .                   &self,
         .                   dfn: usize,
         .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
         .               ) {
         .                   debug!(?dfn, "on_completion");
         .           
         .                   for (fresh_trait_pred, eval) in
    10,787 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
         .                   {
         .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
         .           
         .                       op(fresh_trait_pred, eval.result, eval.dep_node);
         .                   }
         .               }
         .           }
         .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
         .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
         .               }
         .           
         .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
         .                   self.head
         .               }
         .           
         .               fn depth(&self) -> usize {
     3,706 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
         .               type Item = &'o TraitObligationStack<'o, 'tcx>;
         .           
         .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
     4,887 ( 0.00%)          let o = self.head?;
       132 ( 0.00%)          *self = o.previous;
         .                   Some(o)
         .               }
         .           }
         .           
         .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(f, "TraitObligationStack({:?})", self.obligation)
         .               }
-- line 2717 ----------------------------------------

10,932,215 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .                   &self,
         .                   state: &'s QueryCacheStore<Self>,
         .                   key: &K,
         .                   on_hit: OnHit,
         .               ) -> Result<R, QueryLookup>
         .               where
         .                   OnHit: FnOnce(&V, DepNodeIndex) -> R,
         .               {
    54,446 ( 0.00%)          let (lookup, lock) = state.get_lookup(key);
         .                   let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);
         .           
18,566,775 ( 0.19%)          if let Some((_, value)) = result {
 9,985,230 ( 0.10%)              let hit_result = on_hit(&value.0, value.1);
 5,750,385 ( 0.06%)              Ok(hit_result)
         .                   } else {
   166,421 ( 0.00%)              Err(lookup)
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn complete(
         .                   &self,
         .                   lock_sharded_storage: &mut Self::Sharded,
         .                   key: K,
         .                   value: V,
         .                   index: DepNodeIndex,
         .               ) -> Self::Stored {
   142,759 ( 0.00%)          lock_sharded_storage.insert(key, (value.clone(), index));
       644 ( 0.00%)          value
         .               }
         .           
         .               fn iter(
         .                   &self,
         .                   shards: &Sharded<Self::Sharded>,
         .                   f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex),
         .               ) {
         .                   let shards = shards.lock_shards();
-- line 130 ----------------------------------------
-- line 178 ----------------------------------------
         .                   &self,
         .                   state: &'s QueryCacheStore<Self>,
         .                   key: &K,
         .                   on_hit: OnHit,
         .               ) -> Result<R, QueryLookup>
         .               where
         .                   OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,
         .               {
    11,312 ( 0.00%)          let (lookup, lock) = state.get_lookup(key);
         .                   let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);
         .           
 6,694,534 ( 0.07%)          if let Some((_, value)) = result {
 6,750,580 ( 0.07%)              let hit_result = on_hit(&&value.0, value.1);
    80,572 ( 0.00%)              Ok(hit_result)
         .                   } else {
     9,960 ( 0.00%)              Err(lookup)
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn complete(
         .                   &self,
         .                   lock_sharded_storage: &mut Self::Sharded,
         .                   key: K,
         .                   value: V,
         .                   index: DepNodeIndex,
         .               ) -> Self::Stored {
   136,774 ( 0.00%)          let value = self.arena.alloc((value, index));
         .                   let value = unsafe { &*(value as *const _) };
         .                   lock_sharded_storage.insert(key, value);
         .                   &value.0
         .               }
         .           
         .               fn iter(
         .                   &self,
         .                   shards: &Sharded<Self::Sharded>,
-- line 213 ----------------------------------------

10,645,892 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 79 ----------------------------------------
         .           /// The reason why we incurred this obligation; used for error reporting.
         .           ///
         .           /// Non-misc `ObligationCauseCode`s are stored on the heap. This gives the
         .           /// best trade-off between keeping the type small (which makes copies cheaper)
         .           /// while not doing too many heap allocations.
         .           ///
         .           /// We do not want to intern this as there are a lot of obligation causes which
         .           /// only live for a short period of time.
 8,707,911 ( 0.09%)  #[derive(Clone, Debug, PartialEq, Eq, Lift)]
         .           pub struct ObligationCause<'tcx> {
     1,423 ( 0.00%)      pub span: Span,
         .           
         .               /// The ID of the fn body that triggered this obligation. This is
         .               /// used for region obligations to determine the precise
         .               /// environment in which the region obligation should be evaluated
         .               /// (in particular, closures can add new assumptions). See the
         .               /// field `region_obligations` of the `FulfillmentContext` for more
         .               /// information.
 9,733,784 ( 0.10%)      pub body_id: hir::HirId,
         .           
         .               /// `None` for `MISC_OBLIGATION_CAUSE_CODE` (a common case, occurs ~60% of
         .               /// the time). `Some` otherwise.
     4,305 ( 0.00%)      code: Option<Lrc<ObligationCauseCode<'tcx>>>,
         .           }
         .           
         .           // This custom hash function speeds up hashing for `Obligation` deduplication
         .           // greatly by skipping the `code` field, which can be large and complex. That
         .           // shouldn't affect hash quality much since there are several other fields in
         .           // `Obligation` which should be unique enough, especially the predicate itself
         .           // which is hashed as an interned pointer. See #90996.
         .           impl Hash for ObligationCause<'_> {
-- line 109 ----------------------------------------
-- line 117 ----------------------------------------
         .           
         .           impl<'tcx> ObligationCause<'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   span: Span,
         .                   body_id: hir::HirId,
         .                   code: ObligationCauseCode<'tcx>,
         .               ) -> ObligationCause<'tcx> {
 8,702,901 ( 0.09%)          ObligationCause {
         .                       span,
         .                       body_id,
12,797,230 ( 0.13%)              code: if code == MISC_OBLIGATION_CAUSE_CODE { None } else { Some(Lrc::new(code)) },
         .                   }
    20,276 ( 0.00%)      }
         .           
    38,577 ( 0.00%)      pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {
         .                   ObligationCause::new(span, body_id, MiscObligation)
    38,577 ( 0.00%)      }
         .           
         .               #[inline(always)]
         .               pub fn dummy() -> ObligationCause<'tcx> {
 4,752,984 ( 0.05%)          ObligationCause { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: None }
         .               }
         .           
        31 ( 0.00%)      pub fn dummy_with_span(span: Span) -> ObligationCause<'tcx> {
        93 ( 0.00%)          ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: None }
        31 ( 0.00%)      }
         .           
     9,016 ( 0.00%)      pub fn make_mut_code(&mut self) -> &mut ObligationCauseCode<'tcx> {
         .                   Lrc::make_mut(self.code.get_or_insert_with(|| Lrc::new(MISC_OBLIGATION_CAUSE_CODE)))
    10,143 ( 0.00%)      }
         .           
         .               pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {
   119,976 ( 0.00%)          match *self.code() {
         .                       ObligationCauseCode::CompareImplMethodObligation { .. }
         .                       | ObligationCauseCode::MainFunctionType
         .                       | ObligationCauseCode::StartFunctionType => {
         .                           tcx.sess.source_map().guess_head_span(self.span)
         .                       }
         .                       ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {
         .                           arm_span,
         .                           ..
         .                       }) => arm_span,
    14,997 ( 0.00%)              _ => self.span,
         .                   }
    14,997 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn code(&self) -> &ObligationCauseCode<'tcx> {
         .                   self.code.as_deref().unwrap_or(&MISC_OBLIGATION_CAUSE_CODE)
         .               }
         .           
     8,568 ( 0.00%)      pub fn clone_code(&self) -> Lrc<ObligationCauseCode<'tcx>> {
    25,704 ( 0.00%)          match &self.code {
         .                       Some(code) => code.clone(),
         .                       None => Lrc::new(MISC_OBLIGATION_CAUSE_CODE),
         .                   }
    17,136 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
         .           pub struct UnifyReceiverContext<'tcx> {
         .               pub assoc_item: ty::AssocItem,
         .               pub param_env: ty::ParamEnv<'tcx>,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
21,320,508 ( 0.21%)  #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
         .           pub enum ObligationCauseCode<'tcx> {
         .               /// Not well classified or should be obvious from the span.
         .               MiscObligation,
         .           
         .               /// A slice or array is WF only if `T: Sized`.
         .               SliceOrArrayElem,
         .           
         .               /// A tuple is WF only if its middle elements are `Sized`.
-- line 192 ----------------------------------------
-- line 250 ----------------------------------------
         .               },
         .           
         .               /// Constant expressions must be sized.
         .               ConstSized,
         .           
         .               /// `static` items must have `Sync` type.
         .               SharedStatic,
         .           
       930 ( 0.00%)      BuiltinDerivedObligation(DerivedObligationCause<'tcx>),
         .           
    29,020 ( 0.00%)      ImplDerivedObligation(DerivedObligationCause<'tcx>),
         .           
         .               DerivedObligation(DerivedObligationCause<'tcx>),
         .           
         .               FunctionArgumentObligation {
         .                   /// The node of the relevant argument in the function call.
         .                   arg_hir_id: hir::HirId,
         .                   /// The node of the function call.
         .                   call_hir_id: hir::HirId,
-- line 268 ----------------------------------------
-- line 382 ----------------------------------------
         .                   /// Parameters are indexed from 0, with the return type
         .                   /// being the last 'parameter'
         .                   param_idx: u16,
         .               },
         .           }
         .           
         .           impl ObligationCauseCode<'_> {
         .               // Return the base obligation, ignoring derived obligations.
       951 ( 0.00%)      pub fn peel_derives(&self) -> &Self {
         .                   let mut base_cause = self;
     1,268 ( 0.00%)          while let BuiltinDerivedObligation(DerivedObligationCause { parent_code, .. })
         .                   | ImplDerivedObligation(DerivedObligationCause { parent_code, .. })
         .                   | DerivedObligation(DerivedObligationCause { parent_code, .. })
         .                   | FunctionArgumentObligation { parent_code, .. } = base_cause
         .                   {
         .                       base_cause = &parent_code;
         .                   }
         .                   base_cause
       317 ( 0.00%)      }
         .           }
         .           
         .           // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(ObligationCauseCode<'_>, 48);
         .           
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
         .           pub enum StatementAsExpression {
-- line 408 ----------------------------------------
-- line 433 ----------------------------------------
         .           pub struct IfExpressionCause {
         .               pub then: Span,
         .               pub else_sp: Span,
         .               pub outer: Option<Span>,
         .               pub semicolon: Option<(Span, StatementAsExpression)>,
         .               pub opt_suggest_box_span: Option<Span>,
         .           }
         .           
       496 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
         .           pub struct DerivedObligationCause<'tcx> {
         .               /// The trait predicate of the parent obligation that led to the
         .               /// current obligation. Note that only trait obligations lead to
         .               /// derived obligations, so we just store the trait predicate here
         .               /// directly.
         .               pub parent_trait_pred: ty::PolyTraitPredicate<'tcx>,
         .           
         .               /// The parent trait had this cause.
         .               pub parent_code: Lrc<ObligationCauseCode<'tcx>>,
         .           }
         .           
    32,325 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable, Lift)]
         .           pub enum SelectionError<'tcx> {
         .               /// The trait is not implemented.
         .               Unimplemented,
         .               /// After a closure impl has selected, its "outputs" were evaluated
         .               /// (which for closures includes the "input" type params) and they
         .               /// didn't resolve. See `confirm_poly_trait_refs` for more.
         .               OutputTypeParameterMismatch(
         .                   ty::PolyTraitRef<'tcx>,
-- line 461 ----------------------------------------
-- line 468 ----------------------------------------
         .               NotConstEvaluatable(NotConstEvaluatable),
         .               /// Exceeded the recursion depth during type projection.
         .               Overflow,
         .               /// Signaling that an error has already been emitted, to avoid
         .               /// multiple errors being shown.
         .               ErrorReporting,
         .               /// Multiple applicable `impl`s where found. The `DefId`s correspond to
         .               /// all the `impl`s' Items.
     2,036 ( 0.00%)      Ambiguous(Vec<DefId>),
         .           }
         .           
         .           /// When performing resolution, it is typically the case that there
         .           /// can be one of three outcomes:
         .           ///
         .           /// - `Ok(Some(r))`: success occurred with result `r`
         .           /// - `Ok(None)`: could not definitely determine anything, usually due
         .           ///   to inconclusive type inference.
-- line 484 ----------------------------------------
-- line 514 ----------------------------------------
         .           ///     // Case C: A mix of cases A and B.
         .           ///     mixed.clone();    // ImplSource(Impl_1, [ImplSource::Param])
         .           /// }
         .           /// ```
         .           ///
         .           /// ### The type parameter `N`
         .           ///
         .           /// See explanation on `ImplSourceUserDefinedData`.
       870 ( 0.00%)  #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub enum ImplSource<'tcx, N> {
         .               /// ImplSource identifying a particular impl.
         .               UserDefined(ImplSourceUserDefinedData<'tcx, N>),
         .           
         .               /// ImplSource for auto trait implementations.
         .               /// This carries the information and nested obligations with regards
         .               /// to an auto implementation for a trait `Trait`. The nested obligations
         .               /// ensure the trait implementation holds for all the constituent types.
-- line 530 ----------------------------------------
-- line 565 ----------------------------------------
         .               /// ImplSource for a trait alias.
         .               TraitAlias(ImplSourceTraitAliasData<'tcx, N>),
         .           
         .               /// ImplSource for a `const Drop` implementation.
         .               ConstDrop(ImplSourceConstDropData<N>),
         .           }
         .           
         .           impl<'tcx, N> ImplSource<'tcx, N> {
    14,832 ( 0.00%)      pub fn nested_obligations(self) -> Vec<N> {
    37,080 ( 0.00%)          match self {
         .                       ImplSource::UserDefined(i) => i.nested,
         .                       ImplSource::Param(n, _) => n,
         .                       ImplSource::Builtin(i) => i.nested,
         .                       ImplSource::AutoImpl(d) => d.nested,
         .                       ImplSource::Closure(c) => c.nested,
         .                       ImplSource::Generator(c) => c.nested,
         .                       ImplSource::Object(d) => d.nested,
         .                       ImplSource::FnPointer(d) => d.nested,
         .                       ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)
         .                       | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),
         .                       ImplSource::TraitAlias(d) => d.nested,
         .                       ImplSource::TraitUpcasting(d) => d.nested,
         .                       ImplSource::ConstDrop(i) => i.nested,
         .                   }
    14,832 ( 0.00%)      }
         .           
         .               pub fn borrow_nested_obligations(&self) -> &[N] {
         .                   match &self {
         .                       ImplSource::UserDefined(i) => &i.nested[..],
         .                       ImplSource::Param(n, _) => &n,
         .                       ImplSource::Builtin(i) => &i.nested,
         .                       ImplSource::AutoImpl(d) => &d.nested,
         .                       ImplSource::Closure(c) => &c.nested,
-- line 597 ----------------------------------------
-- line 601 ----------------------------------------
         .                       ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)
         .                       | ImplSource::Pointee(ImplSourcePointeeData) => &[],
         .                       ImplSource::TraitAlias(d) => &d.nested,
         .                       ImplSource::TraitUpcasting(d) => &d.nested,
         .                       ImplSource::ConstDrop(i) => &i.nested,
         .                   }
         .               }
         .           
       310 ( 0.00%)      pub fn map<M, F>(self, f: F) -> ImplSource<'tcx, M>
         .               where
         .                   F: FnMut(N) -> M,
         .               {
       155 ( 0.00%)          match self {
       350 ( 0.00%)              ImplSource::UserDefined(i) => ImplSource::UserDefined(ImplSourceUserDefinedData {
         .                           impl_def_id: i.impl_def_id,
         .                           substs: i.substs,
         .                           nested: i.nested.into_iter().map(f).collect(),
         .                       }),
        42 ( 0.00%)              ImplSource::Param(n, ct) => ImplSource::Param(n.into_iter().map(f).collect(), ct),
         .                       ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {
         .                           nested: i.nested.into_iter().map(f).collect(),
         .                       }),
         .                       ImplSource::Object(o) => ImplSource::Object(ImplSourceObjectData {
         .                           upcast_trait_ref: o.upcast_trait_ref,
         .                           vtable_base: o.vtable_base,
         .                           nested: o.nested.into_iter().map(f).collect(),
         .                       }),
-- line 627 ----------------------------------------
-- line 660 ----------------------------------------
         .                               vtable_vptr_slot: d.vtable_vptr_slot,
         .                               nested: d.nested.into_iter().map(f).collect(),
         .                           })
         .                       }
         .                       ImplSource::ConstDrop(i) => ImplSource::ConstDrop(ImplSourceConstDropData {
         .                           nested: i.nested.into_iter().map(f).collect(),
         .                       }),
         .                   }
       279 ( 0.00%)      }
         .           }
         .           
         .           /// Identifies a particular impl in the source, along with a set of
         .           /// substitutions from the impl's type/lifetime parameters. The
         .           /// `nested` vector corresponds to the nested obligations attached to
         .           /// the impl's type parameters.
         .           ///
         .           /// The type parameter `N` indicates the type used for "nested
         .           /// obligations" that are required by the impl. During type-check, this
         .           /// is `Obligation`, as one might expect. During codegen, however, this
         .           /// is `()`, because codegen only requires a shallow resolution of an
         .           /// impl, and nested obligations are satisfied later.
       418 ( 0.00%)  #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct ImplSourceUserDefinedData<'tcx, N> {
        20 ( 0.00%)      pub impl_def_id: DefId,
        20 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .               pub nested: Vec<N>,
         .           }
         .           
         .           #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct ImplSourceGeneratorData<'tcx, N> {
         .               pub generator_def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .               /// Nested obligations. This can be non-empty if the generator
-- line 692 ----------------------------------------

 4,373,764 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    2,570 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
   16,480 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  207,869 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   31,410 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
  145,227 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   47,481 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    6,783 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
   20,349 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
   13,566 ( 0.00%)              self.current_id = parent_id;
   54,264 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
   27,132 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   61,047 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  156,654 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   52,218 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    8,361 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   33,444 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    9,045 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   18,090 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   18,090 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  139,248 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      210 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       30 ( 0.00%)          self.tcx.hir_crate(())
      240 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  315,096 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
  136,113 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  236,322 ( 0.00%)      }
        .           
        .               #[inline]
  362,968 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   74,531 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   81,054 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  408,339 ( 0.00%)      }
        .           
        .               #[inline]
       56 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   31,461 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      112 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   38,640 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   71,760 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    4,492 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       26 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
    2,256 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
        5 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
        5 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
        2 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
        4 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
   12,398 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       35 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
       90 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   21,992 ( 0.00%)          Some(def_kind)
   55,200 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
  917,040 ( 0.01%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  114,630 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  215,646 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  107,823 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  323,469 ( 0.00%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
  917,040 ( 0.01%)      }
        .           
   11,638 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
  328,156 ( 0.00%)          self.find_parent_node(hir_id).unwrap()
   23,276 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
2,140,224 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  267,528 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
  126,840 ( 0.00%)              Some(owner.node.into())
        .                   } else {
  281,314 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  140,657 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  421,971 ( 0.00%)              Some(node.node)
        .                   }
2,140,224 ( 0.02%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   40,495 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  175,002 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   98,417 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
  116,668 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
   10,716 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    5,358 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
   10,716 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  227,031 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   64,866 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  259,464 ( 0.00%)      }
        .           
    2,366 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      676 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    2,704 ( 0.00%)      }
        .           
  442,519 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
  126,434 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  505,736 ( 0.01%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  777,336 ( 0.01%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  222,096 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  888,384 ( 0.01%)      }
        .           
    1,542 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    1,542 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,028 ( 0.00%)      }
        .           
    9,264 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
    9,264 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    9,264 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  444,464 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  333,348 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  444,464 ( 0.00%)      }
        .           
  149,360 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  226,855 ( 0.00%)          self.local_def_id(self.body_owner(id))
  149,360 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
   23,063 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   77,845 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   69,189 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   77,904 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   60,592 ( 0.00%)      }
        .           
      201 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    1,771 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
      584 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      603 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
  117,387 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  164,427 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
  117,387 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
  154,880 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
  232,320 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      804 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      804 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    1,608 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
  174,240 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
   16,488 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       97 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
   32,669 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   32,976 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
   29,664 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      594 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       66 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      594 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      140 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      100 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
       18 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      180 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   21,984 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    1,405 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       20 ( 0.00%)          let krate = self.krate();
       70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
  111,969 ( 0.00%)              match owner.node() {
   48,289 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    6,768 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    1,123 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
    2,256 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
       13 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      344 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       44 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       48 ( 0.00%)          for id in module.items.iter() {
   50,535 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       48 ( 0.00%)          for id in module.trait_items.iter() {
      520 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       48 ( 0.00%)          for id in module.impl_items.iter() {
   87,984 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       48 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      352 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       32 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       12 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      128 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    4,567 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
   18,268 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   51,843 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   16,977 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  152,793 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   33,954 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    3,030 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    1,716 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   67,032 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   28,728 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   76,608 ( 0.00%)      }
        .           
   31,584 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
   13,536 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   36,096 ( 0.00%)      }
        .           
      182 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       78 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      208 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    2,025 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
      675 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
      675 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    1,125 ( 0.00%)      }
        .           
    1,800 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
      675 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    1,350 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
8,410,059 ( 0.08%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
1,201,437 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
9,611,496 ( 0.10%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   36,009 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   20,195 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   36,009 ( 0.00%)      }
        .           
  145,012 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  145,012 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    2,248 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    2,248 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
    2,360 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      308 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
    2,052 ( 0.00%)                  _ => trait_item.span,
        .                       },
   11,862 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    1,608 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
   10,254 ( 0.00%)                  _ => impl_item.span,
        .                       },
        .                       Node::Variant(variant) => variant.span,
        6 ( 0.00%)              Node::Field(field) => field.span,
   72,289 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
        5 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  207,160 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    2,420 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
   12,163 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    3,630 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   62,069 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   14,599 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      182 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   31,584 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        8 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       36 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       24 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       20 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
       64 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       44 ( 0.00%)      return ModuleItems {
       16 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       16 ( 0.00%)          items: items.into_boxed_slice(),
       16 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       16 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       16 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    6,684 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    5,615 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    3,369 ( 0.00%)              self.items.push(item.item_id());
    2,246 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        3 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    6,720 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
       12 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
       39 ( 0.00%)              self.trait_items.push(item.trait_item_id());
       39 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    6,768 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    6,768 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       32 ( 0.00%)  }

1,329,729 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/spec_extend.rs
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .           pub(super) trait SpecExtend<T, I> {
        .               fn spec_extend(&mut self, iter: I);
        .           }
        .           
        .           impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>
        .           where
        .               I: Iterator<Item = T>,
        .           {
  376,183 ( 0.00%)      default fn spec_extend(&mut self, iter: I) {
  817,968 ( 0.01%)          self.extend_desugared(iter)
  386,726 ( 0.00%)      }
        .           }
        .           
        .           impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>
        .           where
        .               I: TrustedLen<Item = T>,
        .           {
9,536,573 ( 0.10%)      default fn spec_extend(&mut self, iterator: I) {
        .                   // This is the case for a TrustedLen iterator.
        .                   let (low, high) = iterator.size_hint();
    4,852 ( 0.00%)          if let Some(additional) = high {
        .                       debug_assert_eq!(
        .                           low,
        .                           additional,
        .                           "TrustedLen iterator's size hint is not exact: {:?}",
        .                           (low, high)
        .                       );
        .                       self.reserve(additional);
        .                       unsafe {
   18,137 ( 0.00%)                  let mut ptr = self.as_mut_ptr().add(self.len());
        .                           let mut local_len = SetLenOnDrop::new(&mut self.len);
        .                           iterator.for_each(move |element| {
    6,605 ( 0.00%)                      ptr::write(ptr, element);
    6,605 ( 0.00%)                      ptr = ptr.offset(1);
        .                               // Since the loop executes user code which can panic we have to bump the pointer
        .                               // after each step.
        .                               // NB can't overflow since we would have had to alloc the address space
        .                               local_len.increment_len(1);
        .                           });
        .                       }
        .                   } else {
        .                       // Per TrustedLen contract a `None` upper bound means that the iterator length
        .                       // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.
        .                       // Since the other branch already panics eagerly (via `reserve()`) we do the same here.
        .                       // This avoids additional codegen for a fallback code path which would eventually
        .                       // panic anyway.
        .                       panic!("capacity overflow");
        .                   }
8,480,070 ( 0.08%)      }
        .           }
        .           
        .           impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {
   88,767 ( 0.00%)      fn spec_extend(&mut self, mut iterator: IntoIter<T>) {
        .                   unsafe {
        .                       self.append_elements(iterator.as_slice() as _);
        .                   }
  170,816 ( 0.00%)          iterator.ptr = iterator.end;
   51,792 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>
        .           where
        .               I: Iterator<Item = &'a T>,
        .               T: Clone,
        .           {
        .               default fn spec_extend(&mut self, iterator: I) {
  154,940 ( 0.00%)          self.spec_extend(iterator.cloned())
        .               }
        .           }
        .           
        .           impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>
        .           where
        .               T: Copy,
        .           {
        .               fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {
-- line 83 ----------------------------------------

  151,819 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/spec_extend.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs
--------------------------------------------------------------------------------
Ir                 

-- line 41 ----------------------------------------
        .                   tcx: TyCtxt<'tcx>,
        .                   impl_def_id: DefId,
        .                   simplified_self: Option<SimplifiedType>,
        .               ) -> Result<Inserted, OverlapError>;
        .           }
        .           
        .           impl ChildrenExt<'_> for Children {
        .               /// Insert an impl into this set of children without comparing to any existing impls.
   57,505 ( 0.00%)      fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {
        .                   let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();
   49,290 ( 0.00%)          if let Some(st) = fast_reject::simplify_type(
        .                       tcx,
        .                       trait_ref.self_ty(),
        .                       SimplifyParams::No,
        .                       StripReferences::No,
        .                   ) {
        .                       debug!("insert_blindly: impl_def_id={:?} st={:?}", impl_def_id, st);
   16,422 ( 0.00%)              self.non_blanket_impls.entry(st).or_default().push(impl_def_id)
        .                   } else {
        .                       debug!("insert_blindly: impl_def_id={:?} st=None", impl_def_id);
        4 ( 0.00%)              self.blanket_impls.push(impl_def_id)
        .                   }
   65,720 ( 0.00%)      }
        .           
        .               /// Removes an impl from this set of children. Used when replacing
        .               /// an impl with a parent. The impl must be present in the list of
        .               /// children already.
        .               fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {
        .                   let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();
        .                   let vec: &mut Vec<DefId>;
        .                   if let Some(st) = fast_reject::simplify_type(
-- line 71 ----------------------------------------
-- line 82 ----------------------------------------
        .                   }
        .           
        .                   let index = vec.iter().position(|d| *d == impl_def_id).unwrap();
        .                   vec.remove(index);
        .               }
        .           
        .               /// Attempt to insert an impl into this set of children, while comparing for
        .               /// specialization relationships.
   12,900 ( 0.00%)      fn insert(
        .                   &mut self,
        .                   tcx: TyCtxt<'_>,
        .                   impl_def_id: DefId,
        .                   simplified_self: Option<SimplifiedType>,
        .               ) -> Result<Inserted, OverlapError> {
    1,075 ( 0.00%)          let mut last_lint = None;
        .                   let mut replace_children = Vec::new();
        .           
        .                   debug!("insert(impl_def_id={:?}, simplified_self={:?})", impl_def_id, simplified_self,);
        .           
    4,300 ( 0.00%)          let possible_siblings = match simplified_self {
        .                       Some(st) => PotentialSiblings::Filtered(filtered_children(self, st)),
        .                       None => PotentialSiblings::Unfiltered(iter_children(self)),
        .                   };
        .           
2,110,822 ( 0.02%)          for possible_sibling in possible_siblings {
        .                       debug!(
        .                           "insert: impl_def_id={:?}, simplified_self={:?}, possible_sibling={:?}",
        .                           impl_def_id, simplified_self, possible_sibling,
        .                       );
        .           
  523,943 ( 0.01%)              let create_overlap_error = |overlap: traits::coherence::OverlapResult<'_>| {
        .                           let trait_ref = overlap.impl_header.trait_ref.unwrap();
        .                           let self_ty = trait_ref.self_ty();
        .           
        .                           // FIXME: should postpone string formatting until we decide to actually emit.
        .                           with_no_trimmed_paths(|| {
        .                               OverlapError {
        .                                   with_impl: possible_sibling,
        .                                   trait_desc: trait_ref.print_only_trait_path().to_string(),
-- line 120 ----------------------------------------
-- line 127 ----------------------------------------
        .                                       None
        .                                   },
        .                                   intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,
        .                                   involves_placeholder: overlap.involves_placeholder,
        .                               }
        .                           })
        .                       };
        .           
2,095,772 ( 0.02%)              let report_overlap_error = |overlap: traits::coherence::OverlapResult<'_>,
        .                                                   last_lint: &mut _| {
        .                           // Found overlap, but no specialization; error out or report future-compat warning.
        .           
        .                           // Do we *still* get overlap if we disable the future-incompatible modes?
        .                           let should_err = traits::overlapping_impls(
        .                               tcx,
        .                               possible_sibling,
        .                               impl_def_id,
-- line 143 ----------------------------------------
-- line 156 ----------------------------------------
        .                                   kind: FutureCompatOverlapErrorKind::LeakCheck,
        .                               });
        .           
        .                               Ok((false, false))
        .                           }
        .                       };
        .           
        .                       let last_lint_mut = &mut last_lint;
3,667,601 ( 0.04%)              let (le, ge) = traits::overlapping_impls(
  523,943 ( 0.01%)                  tcx,
        .                           possible_sibling,
1,047,886 ( 0.01%)                  impl_def_id,
        .                           traits::SkipLeakCheck::Yes,
4,191,544 ( 0.04%)                  |overlap| {
        .                               if let Some(overlap_kind) =
        .                                   tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling)
        .                               {
        .                                   match overlap_kind {
        .                                       ty::ImplOverlapKind::Permitted { marker: _ } => {}
        .                                       ty::ImplOverlapKind::Issue33140 => {
        .                                           *last_lint_mut = Some(FutureCompatOverlapError {
        .                                               error: create_overlap_error(overlap),
-- line 177 ----------------------------------------
-- line 190 ----------------------------------------
        .                                   report_overlap_error(overlap, last_lint_mut)
        .                               } else {
        .                                   Ok((le, ge))
        .                               }
        .                           },
        .                           || Ok((false, false)),
        .                       )?;
        .           
2,095,772 ( 0.02%)              if le && !ge {
        .                           debug!(
        .                               "descending as child of TraitRef {:?}",
        .                               tcx.impl_trait_ref(possible_sibling).unwrap()
        .                           );
        .           
        .                           // The impl specializes `possible_sibling`.
        .                           return Ok(Inserted::ShouldRecurseOn(possible_sibling));
2,095,772 ( 0.02%)              } else if ge && !le {
        .                           debug!(
        .                               "placing as parent of TraitRef {:?}",
        .                               tcx.impl_trait_ref(possible_sibling).unwrap()
        .                           );
        .           
        .                           replace_children.push(possible_sibling);
        .                       } else {
        .                           // Either there's no overlap, or the overlap was already reported by
        .                           // `overlap_error`.
        .                       }
        .                   }
        .           
    1,075 ( 0.00%)          if !replace_children.is_empty() {
        .                       return Ok(Inserted::ReplaceChildren(replace_children));
        .                   }
        .           
        .                   // No overlap with any potential siblings, so add as a new sibling.
        .                   debug!("placing as new sibling");
    6,450 ( 0.00%)          self.insert_blindly(tcx, impl_def_id);
   30,100 ( 0.00%)          Ok(Inserted::BecameNewSibling(last_lint))
    9,675 ( 0.00%)      }
        .           }
        .           
        .           fn iter_children(children: &mut Children) -> impl Iterator<Item = DefId> + '_ {
        .               let nonblanket = children.non_blanket_impls.iter().flat_map(|(_, v)| v.iter());
        .               children.blanket_impls.iter().chain(nonblanket).cloned()
        .           }
        .           
        .           fn filtered_children(
        .               children: &mut Children,
        .               st: SimplifiedType,
        .           ) -> impl Iterator<Item = DefId> + '_ {
    1,075 ( 0.00%)      let nonblanket = children.non_blanket_impls.entry(st).or_default().iter();
        .               children.blanket_impls.iter().chain(nonblanket).cloned()
        .           }
        .           
        .           // A custom iterator used by Children::insert
        .           enum PotentialSiblings<I, J>
        .           where
        .               I: Iterator<Item = DefId>,
        .               J: Iterator<Item = DefId>,
-- line 247 ----------------------------------------
-- line 253 ----------------------------------------
        .           impl<I, J> Iterator for PotentialSiblings<I, J>
        .           where
        .               I: Iterator<Item = DefId>,
        .               J: Iterator<Item = DefId>,
        .           {
        .               type Item = DefId;
        .           
        .               fn next(&mut self) -> Option<Self::Item> {
1,573,979 ( 0.02%)          match *self {
        .                       PotentialSiblings::Unfiltered(ref mut iter) => iter.next(),
        .                       PotentialSiblings::Filtered(ref mut iter) => iter.next(),
        .                   }
        .               }
        .           }
        .           
        .           pub trait GraphExt {
        .               /// Insert a local impl into the specialization graph. If an existing impl
-- line 269 ----------------------------------------
-- line 278 ----------------------------------------
        .               /// Insert cached metadata mapping from a child impl back to its parent.
        .               fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId);
        .           }
        .           
        .           impl GraphExt for Graph {
        .               /// Insert a local impl into the specialization graph. If an existing impl
        .               /// conflicts with it (has overlap, but neither specializes the other),
        .               /// information about the area of overlap is returned in the `Err`.
    7,525 ( 0.00%)      fn insert(
        .                   &mut self,
        .                   tcx: TyCtxt<'_>,
        .                   impl_def_id: DefId,
        .               ) -> Result<Option<FutureCompatOverlapError>, OverlapError> {
    1,075 ( 0.00%)          assert!(impl_def_id.is_local());
        .           
        .                   let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();
    2,150 ( 0.00%)          let trait_def_id = trait_ref.def_id;
        .           
        .                   debug!(
        .                       "insert({:?}): inserting TraitRef {:?} into specialization graph",
        .                       impl_def_id, trait_ref
        .                   );
        .           
        .                   // If the reference itself contains an earlier error (e.g., due to a
        .                   // resolution failure), then we just insert the impl at the top level of
-- line 302 ----------------------------------------
-- line 309 ----------------------------------------
        .                           trait_ref, impl_def_id, trait_def_id
        .                       );
        .           
        .                       self.parent.insert(impl_def_id, trait_def_id);
        .                       self.children.entry(trait_def_id).or_default().insert_blindly(tcx, impl_def_id);
        .                       return Ok(None);
        .                   }
        .           
    2,150 ( 0.00%)          let mut parent = trait_def_id;
    3,225 ( 0.00%)          let mut last_lint = None;
    4,300 ( 0.00%)          let simplified = fast_reject::simplify_type(
        .                       tcx,
        .                       trait_ref.self_ty(),
        .                       SimplifyParams::No,
        .                       StripReferences::No,
        .                   );
        .           
        .                   // Descend the specialization tree, where `parent` is the current parent node.
        .                   loop {
        .                       use self::Inserted::*;
        .           
        .                       let insert_result =
   21,500 ( 0.00%)                  self.children.entry(parent).or_default().insert(tcx, impl_def_id, simplified)?;
        .           
    7,525 ( 0.00%)              match insert_result {
        .                           BecameNewSibling(opt_lint) => {
   15,050 ( 0.00%)                      last_lint = opt_lint;
        .                               break;
        .                           }
        .                           ReplaceChildren(grand_children_to_be) => {
        .                               // We currently have
        .                               //
        .                               //     P
        .                               //     |
        .                               //     G
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
        .                               break;
        .                           }
        .                           ShouldRecurseOn(new_parent) => {
        .                               parent = new_parent;
        .                           }
        .                       }
        .                   }
        .           
    2,150 ( 0.00%)          self.parent.insert(impl_def_id, parent);
   13,975 ( 0.00%)          Ok(last_lint)
    8,600 ( 0.00%)      }
        .           
        .               /// Insert cached metadata mapping from a child impl back to its parent.
        .               fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId) {
    7,140 ( 0.00%)          if self.parent.insert(child, parent).is_some() {
        .                       bug!(
        .                           "When recording an impl from the crate store, information about its parent \
        .                            was already present."
        .                       );
        .                   }
        .           
   35,700 ( 0.00%)          self.children.entry(parent).or_default().insert_blindly(tcx, child);
        .               }
        .           }

   16,884 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
     21,158 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
    153,026 ( 0.00%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
         19 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
     61,205 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
    257,480 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
     26,771 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
103,628,802 ( 1.03%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
        197 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
 20,744,103 ( 0.21%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      5,699 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     10,878 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      1,672 ( 0.00%)                  while let Some(x) = self.next() {
      5,933 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
    360,459 ( 0.00%)                  while let Some(x) = self.next() {
    474,880 ( 0.00%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
          8 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     29,721 ( 0.00%)                  while let Some(x) = self.next() {
     34,274 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
        304 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
  2,662,193 ( 0.03%)                  while let Some(x) = self.next() {
    186,417 ( 0.00%)                      if let Some(y) = f(x) {
     18,709 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     16,980 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
    180,785 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    142,345 ( 0.00%)                  while let Some(x) = self.next_back() {
  1,747,174 ( 0.02%)                      i -= 1;
  1,404,385 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
  7,415,152 ( 0.07%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
          .                               assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
         20 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  1,577,300 ( 0.02%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

  5,603,137 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 287 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *const T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
32,696,938 ( 0.33%)          unsafe { intrinsics::offset(self, count) }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 303 ----------------------------------------
-- line 443 ----------------------------------------
         .               #[inline]
         .               pub const unsafe fn offset_from(self, origin: *const T) -> isize
         .               where
         .                   T: Sized,
         .               {
         .                   let pointee_size = mem::size_of::<T>();
         .                   assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
         .                   // SAFETY: the caller must uphold the safety contract for `ptr_offset_from`.
 3,428,921 ( 0.03%)          unsafe { intrinsics::ptr_offset_from(self, origin) }
         .               }
         .           
         .               /// Returns whether two pointers are guaranteed to be equal.
         .               ///
         .               /// At runtime this function behaves like `self == other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine equality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be equal.
-- line 459 ----------------------------------------
-- line 474 ----------------------------------------
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
         .               pub const fn guaranteed_eq(self, other: *const T) -> bool
         .               where
         .                   T: Sized,
         .               {
        25 ( 0.00%)          intrinsics::ptr_guaranteed_eq(self, other)
         .               }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
-- line 490 ----------------------------------------

   106,708 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
 3,144,044 ( 0.03%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
    74,752 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    15,668 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   405,178 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
    50,264 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    32,102 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
    48,153 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
    32,028 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    16,051 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
        21 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
         8 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
     5,811 ( 0.00%)          while descendant != ancestor {
       637 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
        24 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    11,816 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    17,724 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
        38 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
       114 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
        52 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
        38 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
    35,136 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
   228,355 ( 0.00%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
     5,490 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         6 ( 0.00%)          tree.is_descendant_of(module, restriction)
    35,136 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
   136,755 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
   143,096 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
   136,755 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
       898 ( 0.00%)          matches!(self, Visibility::Public)
       449 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
    49,434 ( 0.00%)          ptr::eq(self.inner, other.inner)
    48,701 ( 0.00%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
   616,828 ( 0.01%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
 1,655,997 ( 0.02%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 1,072,068 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
        98 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
       155 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
    28,287 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
     3,143 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    28,287 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    22,001 ( 0.00%)      }
         .           }
         .           
     1,506 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    70,915 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
   209,191 ( 0.00%)      pub constness: BoundConstness,
         .           
   140,088 ( 0.00%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
   127,816 ( 0.00%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
   111,839 ( 0.00%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
         .                       param_env.remap_constness_with(self.constness)
         .                   } else {
    15,977 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
    95,862 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
    49,050 ( 0.00%)          self.trait_ref.def_id
    24,525 ( 0.00%)      }
         .           
    30,913 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
    92,739 ( 0.00%)          self.trait_ref.self_ty()
    61,826 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
    17,795 ( 0.00%)      }
         .           
         .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound(|trait_ref| trait_ref.self_ty())
         .               }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    10,026 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
     8,053 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       936 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
     1,738 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
         5 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
     9,219 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    13,258 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
         .               Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
     4,047 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
     3,240 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     1,620 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     4,503 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
     3,724 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
        28 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
        14 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
     2,064 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
     1,032 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
       409 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
       409 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
       409 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    10,602 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    53,010 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    21,204 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
         4 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         8 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     1,335 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     6,675 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     2,670 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
     5,318 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
    15,954 ( 0.00%)          match predicate.skip_binder() {
     8,100 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
     1,039 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
     5,318 ( 0.00%)      }
         .           
     2,038 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
     4,076 ( 0.00%)          match predicate.skip_binder() {
         .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
     2,038 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
     2,038 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
    25,392 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
        33 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
 2,124,936 ( 0.02%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
        33 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
     1,031 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
 2,121,203 ( 0.02%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
 6,363,609 ( 0.06%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
    27,376 ( 0.00%)          self.private >= other.private
    13,688 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
        52 ( 0.00%)          self.private < other.private
        26 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
       825 ( 0.00%)      pub universe: UniverseIndex,
       930 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
    28,880 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         .           #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    50,660 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
    67,893 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
    48,554 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    14,102 ( 0.00%)          if self.const_param_did.is_none() {
    13,938 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
     3,378 ( 0.00%)      }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
     7,882 ( 0.00%)      }
         .           
    12,352 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
    21,657 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
     3,088 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     6,656 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     6,656 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
     1,280 ( 0.00%)          if let Some(param_did) = self.const_param_did {
       608 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
       192 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
        89 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
        89 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
    68,707 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 7,767,179 ( 0.08%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
        32 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
        32 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
     4,560 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
    26,984 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
    30,357 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
    34,463 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
     4,826 ( 0.00%)                  if value.is_global() {
         .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
    33,130 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
       170 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
       755 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
    21,218 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
   233,905 ( 0.00%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
     1,824 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
       398 ( 0.00%)  bitflags! {
     9,522 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   138,008 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
       216 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
        27 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
        81 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
       243 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
       108 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
       108 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
-- line 1644 ----------------------------------------
-- line 1648 ----------------------------------------
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
         .               pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
         .                   Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
         .               }
         .           }
         .           
    73,193 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   175,462 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
        17 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   106,414 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
        39 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
         9 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
        12 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
       115 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
        24 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
        18 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
         6 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
        84 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
       336 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
       224 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
         .                   self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
         2 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
         4 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
         1 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
         .                   self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
     3,605 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
     1,030 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
     4,120 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
     1,260 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
       720 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
     1,620 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   123,992 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    30,998 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
   123,992 ( 0.00%)      }
         .           
         .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
         .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
         .               }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
        36 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
         4 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
        12 ( 0.00%)              let def_key = self.def_key(def_id);
        20 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
         8 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
        32 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
        28 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
         4 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
        20 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
   165,280 ( 0.00%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
    66,112 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
   148,752 ( 0.00%)      }
         .           
       348 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
       696 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    49,080 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     9,816 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
    49,080 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
    49,080 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    14,724 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    14,724 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    39,264 ( 0.00%)              };
    19,632 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
    19,632 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
    39,264 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
         .               pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
         .                   match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
-- line 2054 ----------------------------------------
-- line 2091 ----------------------------------------
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
         .               }
         .           
         .               /// Gets the attributes of a definition.
11,081,540 ( 0.11%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
 3,324,462 ( 0.03%)          if let Some(did) = did.as_local() {
 3,323,244 ( 0.03%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
 8,865,232 ( 0.09%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
    89,724 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   209,142 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
       154 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
        22 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
         .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
       176 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
    16,471 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
     2,353 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    18,824 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
     3,787 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
     4,869 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     2,256 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     9,024 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
     4,512 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
     5,528 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
       691 ( 0.00%)          use_name.name == def_name.name
     2,073 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
     5,528 ( 0.00%)      }
         .           
       684 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
       152 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
       152 ( 0.00%)          ident
       608 ( 0.00%)      }
         .           
     3,447 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
       383 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
     1,532 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
     2,298 ( 0.00%)          (ident, scope)
     3,447 ( 0.00%)      }
         .           
        42 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
        48 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    17,718 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    17,718 ( 0.00%)      let def_id = def_id.as_local()?;
    21,852 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     2,246 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
         .                       return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    23,624 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
         .           
         .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         .           }
         .           
     5,419 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
     5,419 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
         .               pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
         6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
-- line 2308 ----------------------------------------

 1,483,159 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  2,216,041 ( 0.02%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    269,116 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
115,352,568 ( 1.15%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
    171,112 ( 0.00%)          self.stride += Group::WIDTH;
    171,112 ( 0.00%)          self.pos += self.stride;
    143,253 ( 0.00%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    219,318 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
    524,915 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
     28,056 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    573,892 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
     36,600 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
    424,390 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    586,671 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
        232 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
      6,531 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        185 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     17,831 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     23,633 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     23,633 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
     47,266 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
      5,270 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     41,996 ( 0.00%)          self.erase_no_drop(&item);
      1,052 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,010,397 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      6,258 ( 0.00%)          match self.find(hash, eq) {
      5,026 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    121,201 ( 0.00%)              None => None,
          .                   }
  1,538,206 ( 0.02%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     40,366 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    673,288 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    372,672 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
    879,819 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
    746,072 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,034,040 ( 0.04%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
      8,033 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  2,218,799 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  2,961,027 ( 0.03%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
    382,416 ( 0.00%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
         38 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
    286,812 ( 0.00%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      2,008 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    783,045 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      7,993 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  1,624,984 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  1,298,951 ( 0.01%)          self.table.items += 1;
          .                   bucket
      4,011 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
      1,728 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     47,188 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     29,407 ( 0.00%)              eq(self.bucket(index).as_ref())
     25,537 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      6,330 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
      1,728 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     22,927 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
          .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      3,174 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
    718,819 ( 0.01%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          .                   let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    249,929 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     39,756 ( 0.00%)          let allocation = self.into_allocation();
     29,817 ( 0.00%)          RawIntoIter {
     49,695 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     15,937 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      1,183 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  8,443,824 ( 0.08%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    749,769 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    178,442 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    412,920 ( 0.00%)          Ok(Self {
          .                       ctrl,
    178,516 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    545,726 ( 0.01%)      }
          .           
          .               #[inline]
     42,557 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     13,106 ( 0.00%)          if capacity == 0 {
     16,096 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
    341,406 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     16,056 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     42,557 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    267,113 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    267,113 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    534,226 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  1,494,673 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  4,411,341 ( 0.04%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  2,024,972 ( 0.02%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
     43,616 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 14,861,534 ( 0.15%)              for bit in group.match_byte(h2_hash) {
 39,888,079 ( 0.40%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 46,348,813 ( 0.46%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  1,379,455 ( 0.01%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
  4,525,800 ( 0.05%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 68,885,490 ( 0.69%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  2,773,380 ( 0.03%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  2,218,704 ( 0.02%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
  4,168,551 ( 0.04%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  1,389,517 ( 0.01%)          *self.ctrl(index) = ctrl;
  1,389,681 ( 0.01%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
    659,019 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
    364,816 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
 14,499,916 ( 0.14%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      3,819 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    231,721 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    108,256 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    216,512 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    216,512 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    454,432 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          .                       Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    108,256 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     10,050 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
    745,745 ( 0.01%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    108,256 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
     85,803 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     14,531 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     26,515 ( 0.00%)          self.items = 0;
     14,531 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    250,417 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,001,668 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  1,252,005 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,001,668 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     17,432 ( 0.00%)      fn clone(&self) -> Self {
      2,229 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
     19,611 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
         74 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
 13,153,074 ( 0.13%)      fn drop(&mut self) {
  7,096,174 ( 0.07%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
 14,898,286 ( 0.15%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     39,756 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     49,695 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
    346,983 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     31,700 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
     56,605 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
    435,878 ( 0.00%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
      4,743 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      1,996 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      7,866 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      6,653 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     56,332 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    109,396 ( 0.00%)          if let Some(b) = self.iter.next() {
    282,567 ( 0.00%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    112,664 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      9,126 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     76,376 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        158 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      3,173 ( 0.00%)      fn next(&mut self) -> Option<T> {
      3,117 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      6,346 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          3 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      8,432 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      1,054 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      8,432 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 34,077,403 ( 0.34%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 63 ----------------------------------------
         .           /// assert!(iter.next().is_none());
         .           /// ```
         .           #[stable(feature = "iter_zip", since = "1.59.0")]
         .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
         .           where
         .               A: IntoIterator,
         .               B: IntoIterator,
         .           {
    19,966 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> Iterator for Zip<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator,
         .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
         .                           index: 0, // unused
         .                           len: 0,   // unused
         .                           a_len: 0, // unused
         .                       }
         .                   }
         .           
         .                   #[inline]
         .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    10,725 ( 0.00%)              let x = self.a.next()?;
     9,024 ( 0.00%)              let y = self.b.next()?;
     1,662 ( 0.00%)              Some((x, y))
       857 ( 0.00%)          }
         .           
         .                   #[inline]
         .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                       self.super_nth(n)
         .                   }
         .           
         .                   #[inline]
         .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
         .               B: Iterator,
         .           {
         .               type Item = (A::Item, B::Item);
         .           
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
         .                   let (b_lower, b_upper) = self.b.size_hint();
         .           
         .                   let lower = cmp::min(a_lower, b_lower);
         .           
         .                   let upper = match (a_upper, b_upper) {
         .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
         .                       (Some(x), None) => Some(x),
         .                       (None, Some(y)) => Some(y),
-- line 219 ----------------------------------------
-- line 236 ----------------------------------------
         .           where
         .               A: TrustedRandomAccessNoCoerce + Iterator,
         .               B: TrustedRandomAccessNoCoerce + Iterator,
         .           {
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
        28 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
         .                   (size, Some(size))
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
        28 ( 0.00%)          let idx = self.index + idx;
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
         .               }
         .           }
         .           
         .           #[doc(hidden)]
         .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
-- line 258 ----------------------------------------
-- line 263 ----------------------------------------
         .               fn new(a: A, b: B) -> Self {
         .                   let a_len = a.size();
         .                   let len = cmp::min(a_len, b.size());
         .                   Zip { a, b, index: 0, len, a_len }
         .               }
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
22,330,579 ( 0.22%)          if self.index < self.len {
         .                       let i = self.index;
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
10,771,459 ( 0.11%)              self.index += 1;
         .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
         .                       unsafe {
         .                           Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
         .                       }
         .                   } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
         .                       let i = self.index;
         .                       // as above, increment before executing code that may panic
         .                       self.index += 1;
-- line 283 ----------------------------------------
-- line 290 ----------------------------------------
         .                       None
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
15,859,864 ( 0.16%)          let len = self.len - self.index;
         .                   (len, Some(len))
         .               }
         .           
         .               #[inline]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   let delta = cmp::min(n, self.len - self.index);
         .                   let end = self.index + delta;
         .                   while self.index < end {
-- line 306 ----------------------------------------
-- line 535 ----------------------------------------
         .           #[unstable(feature = "trusted_random_access", issue = "none")]
         .           #[rustc_specialization_trait]
         .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
         .               // Convenience method.
         .               fn size(&self) -> usize
         .               where
         .                   Self: Iterator,
         .               {
       786 ( 0.00%)          self.size_hint().0
         .               }
         .               /// `true` if getting an iterator element may have side effects.
         .               /// Remember to take inner iterators into account.
         .               const MAY_HAVE_SIDE_EFFECT: bool;
         .           }
         .           
         .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
         .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
         .           /// Same requirements calling `get_unchecked` directly.
         .           #[doc(hidden)]
         .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
         .           where
         .               I: Iterator,
         .           {
         .               // SAFETY: the caller must uphold the contract for
         .               // `Iterator::__iterator_get_unchecked`.
     2,649 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
         .           }
         .           
         .           unsafe trait SpecTrustedRandomAccess: Iterator {
         .               /// If `Self: TrustedRandomAccess`, it must be safe to call
         .               /// `Iterator::__iterator_get_unchecked(self, index)`.
         .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
         .           }
         .           
-- line 571 ----------------------------------------

25,468,729 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 61 ----------------------------------------
         .           pub struct Map<I, F> {
         .               // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods
         .               pub(crate) iter: I,
         .               f: F,
         .           }
         .           
         .           impl<I, F> Map<I, F> {
         .               pub(in crate::iter) fn new(iter: I, f: F) -> Map<I, F> {
    88,952 ( 0.00%)          Map { iter, f }
     8,501 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "core_impl_debug", since = "1.9.0")]
         .           impl<I: fmt::Debug, F> fmt::Debug for Map<I, F> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_struct("Map").field("iter", &self.iter).finish()
         .               }
         .           }
         .           
         .           fn map_fold<T, B, Acc>(
         .               mut f: impl FnMut(T) -> B,
         .               mut g: impl FnMut(Acc, B) -> Acc,
         .           ) -> impl FnMut(Acc, T) -> Acc {
    52,573 ( 0.00%)      move |acc, elt| g(acc, f(elt))
         .           }
         .           
         .           fn map_try_fold<'a, T, B, Acc, R>(
         .               f: &'a mut impl FnMut(T) -> B,
         .               mut g: impl FnMut(Acc, B) -> R + 'a,
         .           ) -> impl FnMut(Acc, T) -> R + 'a {
    49,219 ( 0.00%)      move |acc, elt| g(acc, f(elt))
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<B, I: Iterator, F> Iterator for Map<I, F>
         .           where
         .               F: FnMut(I::Item) -> B,
         .           {
         .               type Item = B;
         .           
         .               #[inline]
    31,951 ( 0.00%)      fn next(&mut self) -> Option<B> {
 5,325,945 ( 0.05%)          self.iter.next().map(&mut self.f)
    28,367 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   132,945 ( 0.00%)          self.iter.size_hint()
         .               }
         .           
   168,049 ( 0.00%)      fn try_fold<Acc, G, R>(&mut self, init: Acc, g: G) -> R
         .               where
         .                   Self: Sized,
         .                   G: FnMut(Acc, Self::Item) -> R,
         .                   R: Try<Output = Acc>,
         .               {
    25,642 ( 0.00%)          self.iter.try_fold(init, map_try_fold(&mut self.f, g))
   207,882 ( 0.00%)      }
         .           
 8,736,783 ( 0.09%)      fn fold<Acc, G>(self, init: Acc, g: G) -> Acc
         .               where
         .                   G: FnMut(Acc, Self::Item) -> Acc,
         .               {
10,252,082 ( 0.10%)          self.iter.fold(init, map_fold(self.f, g))
 9,953,373 ( 0.10%)      }
         .           
         .               #[doc(hidden)]
         .               unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B
         .               where
         .                   Self: TrustedRandomAccessNoCoerce,
         .               {
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
-- line 133 ----------------------------------------

    67,538 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 223 ----------------------------------------
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ne(&self, other: &Rhs) -> bool {
    45,772 ( 0.00%)          !self.eq(other)
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
    12,366 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    18,529 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
    57,992 ( 0.00%)          max_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
     2,708 ( 0.00%)          min_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
   125,753 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
   528,226 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn gt(&self, other: &Rhs) -> bool {
 6,969,310 ( 0.07%)          matches!(self.partial_cmp(other), Some(Greater))
         .               }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ge(&self, other: &Rhs) -> bool {
       134 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 7,512,281 ( 0.07%)      match compare(&v1, &v2) {
         .                   Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
         .           }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   575,150 ( 0.01%)      match compare(&v1, &v2) {
        15 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
         .                   Ordering::Greater => v1,
         .               }
         .           }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
     6,790 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
    71,567 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
 4,563,160 ( 0.05%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
    51,940 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
         .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
         .                           fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 1,564,304 ( 0.02%)                      if *self < *other { Less }
         .                               else if *self == *other { Equal }
         .                               else { Greater }
         .                           }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
       602 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
 7,906,770 ( 0.08%)          fn eq(&self, other: &&B) -> bool {
   330,874 ( 0.00%)              PartialEq::eq(*self, *other)
13,204,668 ( 0.13%)          }
         .                   #[inline]
         .                   fn ne(&self, other: &&B) -> bool {
        57 ( 0.00%)              PartialEq::ne(*self, *other)
     9,074 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
         .                   fn cmp(&self, other: &Self) -> Ordering {
         .                       Ord::cmp(*self, *other)
     1,513 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

17,076,271 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/infer/unify_key.rs
--------------------------------------------------------------------------------
Ir                  

-- line 16 ----------------------------------------
         .           }
         .           
         .           #[derive(PartialEq, Copy, Clone, Debug)]
         .           pub struct UnifiedRegion<'tcx>(pub Option<ty::Region<'tcx>>);
         .           
         .           #[derive(PartialEq, Copy, Clone, Debug)]
         .           pub struct RegionVidKey<'tcx> {
         .               pub vid: ty::RegionVid,
    35,062 ( 0.00%)      pub phantom: PhantomData<UnifiedRegion<'tcx>>,
         .           }
         .           
         .           impl<'tcx> From<ty::RegionVid> for RegionVidKey<'tcx> {
     9,744 ( 0.00%)      fn from(vid: ty::RegionVid) -> Self {
         .                   RegionVidKey { vid, phantom: PhantomData }
     9,744 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> UnifyKey for RegionVidKey<'tcx> {
         .               type Value = UnifiedRegion<'tcx>;
         .               fn index(&self) -> u32 {
    28,817 ( 0.00%)          self.vid.as_u32()
    28,817 ( 0.00%)      }
         .               fn from_index(i: u32) -> Self {
         .                   RegionVidKey::from(ty::RegionVid::from_u32(i))
    42,194 ( 0.00%)      }
         .               fn tag() -> &'static str {
         .                   "RegionVidKey"
         .               }
         .           }
         .           
         .           impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {
         .               type Error = NoError;
         .           
         .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {
     7,302 ( 0.00%)          Ok(match (value1.0, value2.0) {
         .                       // Here we can just pick one value, because the full constraints graph
         .                       // will be handled later. Ideally, we might want a `MultipleValues`
         .                       // variant or something. For now though, this is fine.
         .                       (Some(_), Some(_)) => *value1,
         .           
         .                       (Some(_), _) => *value1,
         .                       (_, Some(_)) => *value2,
         .           
         .                       (None, None) => *value1,
         .                   })
     4,868 ( 0.00%)      }
         .           }
         .           
         .           impl ToType for ty::IntVarValue {
         .               fn to_type<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     1,876 ( 0.00%)          match *self {
         .                       ty::IntType(i) => tcx.mk_mach_int(i),
         .                       ty::UintType(i) => tcx.mk_mach_uint(i),
         .                   }
     1,876 ( 0.00%)      }
         .           }
         .           
         .           impl ToType for ty::FloatVarValue {
         .               fn to_type<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_mach_float(self.0)
         .               }
         .           }
         .           
-- line 78 ----------------------------------------
-- line 98 ----------------------------------------
         .               Known { value: &'tcx ty::Const<'tcx> },
         .               Unknown { universe: ty::UniverseIndex },
         .           }
         .           
         .           impl<'tcx> ConstVariableValue<'tcx> {
         .               /// If this value is known, returns the const it is known to be.
         .               /// Otherwise, `None`.
         .               pub fn known(&self) -> Option<&'tcx ty::Const<'tcx>> {
    15,292 ( 0.00%)          match *self {
         .                       ConstVariableValue::Unknown { .. } => None,
         .                       ConstVariableValue::Known { value } => Some(value),
         .                   }
     7,646 ( 0.00%)      }
         .           }
         .           
    85,008 ( 0.00%)  #[derive(Copy, Clone, Debug)]
         .           pub struct ConstVarValue<'tcx> {
         .               pub origin: ConstVariableOrigin,
         .               pub val: ConstVariableValue<'tcx>,
         .           }
         .           
         .           impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {
         .               type Value = ConstVarValue<'tcx>;
         .               fn index(&self) -> u32 {
    47,903 ( 0.00%)          self.index
    47,903 ( 0.00%)      }
     1,211 ( 0.00%)      fn from_index(i: u32) -> Self {
         .                   ty::ConstVid { index: i, phantom: PhantomData }
     1,211 ( 0.00%)      }
         .               fn tag() -> &'static str {
         .                   "ConstVid"
         .               }
         .           }
         .           
         .           impl<'tcx> UnifyValue for ConstVarValue<'tcx> {
         .               type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);
         .           
    19,524 ( 0.00%)      fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {
    84,604 ( 0.00%)          Ok(match (value1.val, value2.val) {
         .                       (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {
         .                           bug!("equating two const variables, both of which have known values")
         .                       }
         .           
         .                       // If one side is known, prefer that one.
         .                       (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => value1,
         .                       (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => value2,
         .           
-- line 144 ----------------------------------------
-- line 154 ----------------------------------------
         .                           // the one which contains the fewest names in scope.
         .                           let universe = cmp::min(universe1, universe2);
         .                           ConstVarValue {
         .                               val: ConstVariableValue::Unknown { universe },
         .                               origin: value1.origin,
         .                           }
         .                       }
         .                   })
    19,524 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> EqUnifyValue for &'tcx ty::Const<'tcx> {}
         .           
         .           pub fn replace_if_possible<'tcx, V, L>(
         .               table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,
         .               c: &'tcx ty::Const<'tcx>,
         .           ) -> &'tcx ty::Const<'tcx>
         .           where
         .               V: snapshot_vec::VecLike<unify::Delegate<ty::ConstVid<'tcx>>>,
         .               L: UndoLogs<snapshot_vec::UndoLog<unify::Delegate<ty::ConstVid<'tcx>>>>,
         .           {
10,549,408 ( 0.11%)      if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = c {
    45,976 ( 0.00%)          match table.probe_value(*vid).val.known() {
         .                       Some(c) => c,
         .                       None => c,
         .                   }
         .               } else {
         .                   c
         .               }
         .           }

   104,314 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/infer/unify_key.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir                 

-- line 173 ----------------------------------------
        .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
        .           #[macro_export]
        .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
        .           #[allow_internal_unsafe]
        .           macro_rules! __thread_local_inner {
        .               // used to generate the `LocalKey` value for const-initialized thread locals
        .               (@key $t:ty, const $init:expr) => {{
        .                   #[cfg_attr(not(windows), inline)] // see comments below
        4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
        .                       const INIT_EXPR: $t = $init;
        .           
        .                       // wasm without atomics maps directly to `static mut`, and dtors
        .                       // aren't implemented because thread dtors aren't really a thing
        .                       // on wasm right now
        .                       //
        .                       // FIXME(#84224) this should come after the `target_thread_local`
        .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
        .                           }
        .           
        .                           // 0 == dtor not registered
        .                           // 1 == dtor registered, dtor not run
        .                           // 2 == dtor registered and is running or has run
        .                           #[thread_local]
        .                           static mut STATE: u8 = 0;
        .           
        8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
        .                               let ptr = ptr as *mut $t;
        .           
        .                               unsafe {
        .                                   debug_assert_eq!(STATE, 1);
       12 ( 0.00%)                          STATE = 2;
        .                                   $crate::ptr::drop_in_place(ptr);
        .                               }
        8 ( 0.00%)                  }
        .           
        .                           unsafe {
       60 ( 0.00%)                      match STATE {
        .                                   // 0 == we haven't registered a destructor, so do
        .                                   //   so now.
        .                                   0 => {
        .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
        .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
        .                                           destroy,
        .                                       );
        8 ( 0.00%)                              STATE = 1;
        .                                       Some(&VAL)
        .                                   }
        .                                   // 1 == the destructor is registered and the value
        .                                   //   is valid, so return the pointer.
        .                                   1 => Some(&VAL),
        .                                   // otherwise the destructor has already run, so we
        .                                   // can't give access.
        .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
        .                       {
        .                           #[inline]
        .                           const fn __init() -> $t { INIT_EXPR }
        .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
        .                               $crate::thread::__OsLocalKeyInner::new();
        .                           #[allow(unused_unsafe)]
        .                           unsafe { __KEY.get(__init) }
        .                       }
  664,610 ( 0.01%)          }
        .           
        .                   unsafe {
        .                       $crate::thread::LocalKey::new(__getit)
        .                   }
        .               }};
        .           
        .               // used to generate the `LocalKey` value for `thread_local!`
        .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
        .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
        .                               $crate::thread::__OsLocalKeyInner::new();
        .           
        .                           // FIXME: remove the #[allow(...)] marker when macros don't
        .                           // raise warning for missing/extraneous unsafe blocks anymore.
        .                           // See https://github.com/rust-lang/rust/issues/74838.
        .                           #[allow(unused_unsafe)]
        .                           unsafe { __KEY.get(__init) }
1,478,259 ( 0.01%)              }
        .           
        .                       unsafe {
        .                           $crate::thread::LocalKey::new(__getit)
        .                       }
        .                   }
        .               };
        .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
        .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
        .               /// this key yet.
        .               ///
        .               /// # Panics
        .               ///
        .               /// This function will `panic!()` if the key currently has its
        .               /// destructor running, and it **may** panic if the destructor has
        .               /// previously been run for this thread.
        .               #[stable(feature = "rust1", since = "1.0.0")]
       12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
        .               where
        .                   F: FnOnce(&T) -> R,
        .               {
       17 ( 0.00%)          self.try_with(f).expect(
        .                       "cannot access a Thread Local Storage value \
        .                        during or after destruction",
        .                   )
       16 ( 0.00%)      }
        .           
        .               /// Acquires a reference to the value in this TLS key.
        .               ///
        .               /// This will lazily initialize the value if this thread has not referenced
        .               /// this key yet. If the key has been destroyed (which may happen if this is called
        .               /// in a destructor), this function will return an [`AccessError`].
        .               ///
        .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
        .               /// key's initializer panics.
        .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
        .               #[inline]
        .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
        .               where
        .                   F: FnOnce(&T) -> R,
        .               {
        .                   unsafe {
1,330,392 ( 0.01%)              let thread_local = (self.inner)().ok_or(AccessError)?;
6,637,550 ( 0.07%)              Ok(f(thread_local))
        .                   }
        .               }
        .           }
        .           
        .           mod lazy {
        .               use crate::cell::UnsafeCell;
        .               use crate::hint;
        .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
        .                       // the inner cell nor mutable reference to the Option<T> inside said
        .                       // cell. This make it safe to hand a reference, though the lifetime
        .                       // of 'static is itself unsafe, making the get method unsafe.
        .                       unsafe { (*self.inner.get()).as_ref() }
        .                   }
        .           
        .                   /// The caller must ensure that no reference is active: this method
        .                   /// needs unique access.
        9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
        .                       // Execute the initialization up front, *then* move it into our slot,
        .                       // just in case initialization fails.
        .                       let value = init();
        .                       let ptr = self.inner.get();
        .           
        .                       // SAFETY:
        .                       //
        .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
        .                           // always work it empirically doesn't seem to always get optimized away,
        .                           // which means that using something like `try_with` can pull in
        .                           // panicking code and cause a large size bloat.
        .                           match *ptr {
        .                               Some(ref x) => x,
        .                               None => hint::unreachable_unchecked(),
        .                           }
        .                       }
       10 ( 0.00%)          }
        .           
        .                   /// The other methods hand out references while taking &self.
        .                   /// As such, callers of this method must ensure no `&` and `&mut` are
        .                   /// available and used at the same time.
        .                   #[allow(unused)]
        .                   pub unsafe fn take(&mut self) -> Option<T> {
        .                       // SAFETY: See doc comment for this method.
        .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
        .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
        .                       // `try_initialize` for more information.
        .                       //
        .                       // The caller must ensure no mutable references are ever active to
        .                       // the inner cell or the inner T when this is called.
        .                       // The `try_initialize` is dependant on the passed `init` function
        .                       // for this.
        .                       unsafe {
5,973,038 ( 0.06%)                  match self.inner.get() {
        .                               Some(val) => Some(val),
       18 ( 0.00%)                      None => self.try_initialize(init),
        .                           }
        .                       }
        .                   }
        .           
        .                   // `try_initialize` is only called once per fast thread local variable,
        .                   // except in corner cases where thread_local dtors reference other
        .                   // thread_local's, or it is being recursively initialized.
        .                   //
        .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
        .                   // be performed for every call to `Key::get`.
        .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
        .                   #[inline(never)]
        8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
        .                       // SAFETY: See comment above (this function doc).
        .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
        .                           // SAFETY: See comment above (his function doc).
        6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
        .                       } else {
        .                           None
        .                       }
        8 ( 0.00%)          }
        .           
        .                   // `try_register_dtor` is only called once per fast thread local
        .                   // variable, except in corner cases where thread_local dtors reference
        .                   // other thread_local's, or it is being recursively initialized.
        .                   unsafe fn try_register_dtor(&self) -> bool {
        6 ( 0.00%)              match self.dtor_state.get() {
        .                           DtorState::Unregistered => {
        .                               // SAFETY: dtor registration happens before initialization.
        .                               // Passing `self` as a pointer while using `destroy_value<T>`
        .                               // is safe because the function will build a pointer to a
        .                               // Key<T>, which is the type of self and so find the correct
        .                               // size.
        6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
        .                               self.dtor_state.set(DtorState::Registered);
        .                               true
        .                           }
        .                           DtorState::Registered => {
        .                               // recursively initialized
        .                               true
        .                           }
        .                           DtorState::RunningOrHasRun => false,
        .                       }
        .                   }
        .               }
        .           
        4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
        .                   let ptr = ptr as *mut Key<T>;
        .           
        .                   // SAFETY:
        .                   //
        .                   // The pointer `ptr` has been built just above and comes from
        .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
        .                   // making it non-NUL and of the correct type.
        .                   //
-- line 661 ----------------------------------------

        4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 79 ----------------------------------------
         .           ///
         .           ///     dealloc(ptr, layout);
         .           /// }
         .           /// ```
         .           #[stable(feature = "global_alloc", since = "1.28.0")]
         .           #[must_use = "losing the pointer will leak memory"]
         .           #[inline]
         .           pub unsafe fn alloc(layout: Layout) -> *mut u8 {
 9,058,984 ( 0.09%)      unsafe { __rust_alloc(layout.size(), layout.align()) }
         .           }
         .           
         .           /// Deallocate memory with the global allocator.
         .           ///
         .           /// This function forwards calls to the [`GlobalAlloc::dealloc`] method
         .           /// of the allocator registered with the `#[global_allocator]` attribute
         .           /// if there is one, or the `std` crate’s default.
         .           ///
-- line 95 ----------------------------------------
-- line 97 ----------------------------------------
         .           /// of the [`Global`] type when it and the [`Allocator`] trait become stable.
         .           ///
         .           /// # Safety
         .           ///
         .           /// See [`GlobalAlloc::dealloc`].
         .           #[stable(feature = "global_alloc", since = "1.28.0")]
         .           #[inline]
         .           pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
13,547,102 ( 0.14%)      unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
         .           }
         .           
         .           /// Reallocate memory with the global allocator.
         .           ///
         .           /// This function forwards calls to the [`GlobalAlloc::realloc`] method
         .           /// of the allocator registered with the `#[global_allocator]` attribute
         .           /// if there is one, or the `std` crate’s default.
         .           ///
-- line 113 ----------------------------------------
-- line 116 ----------------------------------------
         .           ///
         .           /// # Safety
         .           ///
         .           /// See [`GlobalAlloc::realloc`].
         .           #[stable(feature = "global_alloc", since = "1.28.0")]
         .           #[must_use = "losing the pointer will leak memory"]
         .           #[inline]
         .           pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
   229,769 ( 0.00%)      unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
         .           }
         .           
         .           /// Allocate zero-initialized memory with the global allocator.
         .           ///
         .           /// This function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method
         .           /// of the allocator registered with the `#[global_allocator]` attribute
         .           /// if there is one, or the `std` crate’s default.
         .           ///
-- line 132 ----------------------------------------
-- line 150 ----------------------------------------
         .           ///
         .           ///     dealloc(ptr, layout);
         .           /// }
         .           /// ```
         .           #[stable(feature = "global_alloc", since = "1.28.0")]
         .           #[must_use = "losing the pointer will leak memory"]
         .           #[inline]
         .           pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
   684,145 ( 0.01%)      unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
         .           }
         .           
         .           #[cfg(not(test))]
         .           impl Global {
         .               #[inline]
         .               fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
 1,105,642 ( 0.01%)          match layout.size() {
         .                       0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
         .                       // SAFETY: `layout` is non-zero in size,
         .                       size => unsafe {
         .                           let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
 6,002,693 ( 0.06%)                  let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
         .                           Ok(NonNull::slice_from_raw_parts(ptr, size))
         .                       },
         .                   }
         .               }
         .           
         .               // SAFETY: Same as `Allocator::grow`
         .               #[inline]
         .               unsafe fn grow_impl(
-- line 178 ----------------------------------------
-- line 182 ----------------------------------------
         .                   new_layout: Layout,
         .                   zeroed: bool,
         .               ) -> Result<NonNull<[u8]>, AllocError> {
         .                   debug_assert!(
         .                       new_layout.size() >= old_layout.size(),
         .                       "`new_layout.size()` must be greater than or equal to `old_layout.size()`"
         .                   );
         .           
   129,250 ( 0.00%)          match old_layout.size() {
         .                       0 => self.alloc_impl(new_layout, zeroed),
         .           
         .                       // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`
         .                       // as required by safety conditions. Other conditions must be upheld by the caller
         .                       old_size if old_layout.align() == new_layout.align() => unsafe {
         .                           let new_size = new_layout.size();
         .           
         .                           // `realloc` probably checks for `new_size >= old_layout.size()` or something similar.
-- line 198 ----------------------------------------
-- line 231 ----------------------------------------
         .           
         .               #[inline]
         .               fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
         .                   self.alloc_impl(layout, true)
         .               }
         .           
         .               #[inline]
         .               unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
   263,919 ( 0.00%)          if layout.size() != 0 {
         .                       // SAFETY: `layout` is non-zero in size,
         .                       // other conditions must be upheld by the caller
         .                       unsafe { dealloc(ptr.as_ptr(), layout) }
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn grow(
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
         .                   old_layout: Layout,
         .                   new_layout: Layout,
         .               ) -> Result<NonNull<[u8]>, AllocError> {
         .                   debug_assert!(
         .                       new_layout.size() <= old_layout.size(),
         .                       "`new_layout.size()` must be smaller than or equal to `old_layout.size()`"
         .                   );
         .           
    19,642 ( 0.00%)          match new_layout.size() {
         .                       // SAFETY: conditions must be upheld by the caller
         .                       0 => unsafe {
         .                           self.deallocate(ptr, old_layout);
         .                           Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))
         .                       },
         .           
         .                       // SAFETY: `new_size` is non-zero. Other conditions must be upheld by the caller
         .                       new_size if old_layout.align() == new_layout.align() => unsafe {
         .                           // `realloc` probably checks for `new_size <= old_layout.size()` or something similar.
         .                           intrinsics::assume(new_size <= old_layout.size());
         .           
         .                           let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
    19,642 ( 0.00%)                  let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
         .                           Ok(NonNull::slice_from_raw_parts(ptr, new_size))
         .                       },
         .           
         .                       // SAFETY: because `new_size` must be smaller than or equal to `old_layout.size()`,
         .                       // both the old and new memory allocation are valid for reads and writes for `new_size`
         .                       // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap
         .                       // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract
         .                       // for `dealloc` must be upheld by the caller.
-- line 301 ----------------------------------------
-- line 308 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           /// The allocator for unique pointers.
         .           #[cfg(all(not(no_global_oom_handling), not(test)))]
         .           #[lang = "exchange_malloc"]
         .           #[inline]
       691 ( 0.00%)  unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
         .               let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
    80,640 ( 0.00%)      match Global.allocate(layout) {
         .                   Ok(ptr) => ptr.as_mut_ptr(),
         .                   Err(_) => handle_alloc_error(layout),
         .               }
     1,382 ( 0.00%)  }
         .           
         .           #[cfg_attr(not(test), lang = "box_free")]
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_box", issue = "92521")]
         .           // This signature has to be the same as `Box`, otherwise an ICE will happen.
         .           // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as
         .           // well.
         .           // For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,
         .           // this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.
         .           pub(crate) const unsafe fn box_free<T: ?Sized, A: ~const Allocator + ~const Drop>(
         .               ptr: Unique<T>,
         .               alloc: A,
         .           ) {
         .               unsafe {
    14,941 ( 0.00%)          let size = size_of_val(ptr.as_ref());
    13,633 ( 0.00%)          let align = min_align_of_val(ptr.as_ref());
         .                   let layout = Layout::from_size_align_unchecked(size, align);
         .                   alloc.deallocate(From::from(ptr.cast()), layout)
         .               }
         .           }
         .           
         .           // # Allocation error handler
         .           
         .           #[cfg(not(no_global_oom_handling))]
-- line 346 ----------------------------------------
-- line 417 ----------------------------------------
         .           /// Specialize clones into pre-allocated, uninitialized memory.
         .           /// Used by `Box::clone` and `Rc`/`Arc::make_mut`.
         .           pub(crate) trait WriteCloneIntoRaw: Sized {
         .               unsafe fn write_clone_into_raw(&self, target: *mut Self);
         .           }
         .           
         .           impl<T: Clone> WriteCloneIntoRaw for T {
         .               #[inline]
       981 ( 0.00%)      default unsafe fn write_clone_into_raw(&self, target: *mut Self) {
         .                   // Having allocated *first* may allow the optimizer to create
         .                   // the cloned value in-place, skipping the local and move.
        48 ( 0.00%)          unsafe { target.write(self.clone()) };
       872 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> WriteCloneIntoRaw for T {
         .               #[inline]
         .               unsafe fn write_clone_into_raw(&self, target: *mut Self) {
         .                   // We can always copy in-place, without ever involving a local value.
         .                   unsafe { target.copy_from_nonoverlapping(self, 1) };
         .               }
-- line 437 ----------------------------------------

 4,315,596 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 294 ----------------------------------------
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
         .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   112,214 ( 0.00%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
         .           }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
    46,652 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
     2,919 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 3,351,822 ( 0.03%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
     2,191 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
        12 ( 0.00%)          assert!(len <= A::size());
        36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
         6 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
    39,037 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
         .                       A::size()
         .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
    42,564 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
 7,732,873 ( 0.08%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
14,674,458 ( 0.15%)              if self.spilled() {
     1,526 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
15,011,460 ( 0.15%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
    37,700 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
   266,497 ( 0.00%)              if *len == cap {
        55 ( 0.00%)                  self.reserve(1);
     2,582 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
     4,482 ( 0.00%)              ptr::write(ptr.add(*len), value);
   498,798 ( 0.00%)              *len += 1;
         .                   }
    30,160 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   140,394 ( 0.00%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
    44,021 ( 0.00%)              let last_index = *len_ptr - 1;
    46,177 ( 0.00%)              *len_ptr = last_index;
    33,387 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
        10 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
       632 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
        56 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
     5,346 ( 0.00%)              assert!(new_cap >= len);
     5,346 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
     5,346 ( 0.00%)              } else if new_cap != cap {
     5,118 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
     2,673 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
     1,962 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
     5,346 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
     7,593 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
       688 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
    64,561 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   122,667 ( 0.00%)          infallible(self.try_reserve(additional))
    73,608 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
   467,083 ( 0.00%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
     2,349 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
13,137,896 ( 0.13%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       172 ( 0.00%)          self.try_grow(new_cap)
   504,662 ( 0.01%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
 6,386,013 ( 0.06%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
         .                   self.try_grow(new_cap)
         .               }
         .           
-- line 974 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
    39,650 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
         .               pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
       840 ( 0.00%)              let len = *len_ptr;
     2,856 ( 0.00%)              assert!(index < len);
    10,762 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
     1,904 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
         .               }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
    15,277 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     1,389 ( 0.00%)              let len = *len_ptr;
     2,778 ( 0.00%)              assert!(index <= len);
     5,556 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
     2,778 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
     9,724 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
    35,640 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
    13,284 ( 0.00%)              if !f(&mut self[i]) {
       168 ( 0.00%)                  del += 1;
     3,684 ( 0.00%)              } else if del > 0 {
       252 ( 0.00%)                  self.swap(i - del, i);
         .                       }
         .                   }
     7,920 ( 0.00%)          self.truncate(len - del);
    31,680 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
         .               pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
         .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
       140 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
    73,678 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
    22,377 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    14,918 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
    59,672 ( 0.00%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
    18,810 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
    23,043 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
   209,877 ( 0.00%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
   633,227 ( 0.01%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
    91,666 ( 0.00%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
    16,287 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
   277,485 ( 0.00%)              while len.get() < cap {
    70,754 ( 0.00%)                  if let Some(out) = iter.next() {
         .                               ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
    38,891 ( 0.00%)          for elem in iter {
       448 ( 0.00%)              self.push(elem);
         .                   }
   539,224 ( 0.01%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
   239,681 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
 7,092,263 ( 0.07%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
   257,263 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
       489 ( 0.00%)      fn drop(&mut self) {
    24,622 ( 0.00%)          for _ in self {}
       440 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
   196,086 ( 0.00%)          if self.current == self.end {
         .                       None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
    90,331 ( 0.00%)                  self.current += 1;
     2,996 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     6,679 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
    15,852 ( 0.00%)              IntoIter {
   120,444 ( 0.00%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
    76,712 ( 0.00%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
    37,325 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
    72,861 ( 0.00%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

10,889,393 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 165 ----------------------------------------
         .           #[rustc_insignificant_dtor]
         .           pub struct BTreeMap<K, V> {
         .               root: Option<Root<K, V>>,
         .               length: usize,
         .           }
         .           
         .           #[stable(feature = "btree_drop", since = "1.7.0")]
         .           unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {
16,754,543 ( 0.17%)      fn drop(&mut self) {
         .                   drop(unsafe { ptr::read(self) }.into_iter())
16,803,232 ( 0.17%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {
         .               fn clone(&self) -> BTreeMap<K, V> {
        24 ( 0.00%)          fn clone_subtree<'a, K: Clone, V: Clone>(
         .                       node: NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>,
         .                   ) -> BTreeMap<K, V>
         .                   where
         .                       K: 'a,
         .                       V: 'a,
         .                   {
         3 ( 0.00%)              match node.force() {
         .                           Leaf(leaf) => {
        11 ( 0.00%)                      let mut out_tree = BTreeMap { root: Some(Root::new()), length: 0 };
         .           
         .                               {
         .                                   let root = out_tree.root.as_mut().unwrap(); // unwrap succeeds because we just wrapped
         .                                   let mut out_node = match root.borrow_mut().force() {
         .                                       Leaf(leaf) => leaf,
         .                                       Internal(_) => unreachable!(),
         .                                   };
         .           
         .                                   let mut in_edge = leaf.first_edge();
         .                                   while let Ok(kv) = in_edge.right_kv() {
         .                                       let (k, v) = kv.into_kv();
         .                                       in_edge = kv.right_edge();
         .           
         6 ( 0.00%)                              out_node.push(k.clone(), v.clone());
        23 ( 0.00%)                              out_tree.length += 1;
         .                                   }
         .                               }
         .           
        17 ( 0.00%)                      out_tree
         .                           }
         .                           Internal(internal) => {
         .                               let mut out_tree = clone_subtree(internal.first_edge().descend());
         .           
         .                               {
         .                                   let out_root = BTreeMap::ensure_is_owned(&mut out_tree.root);
         .                                   let mut out_node = out_root.push_internal_level();
         .                                   let mut in_edge = internal.first_edge();
-- line 217 ----------------------------------------
-- line 235 ----------------------------------------
         .                                       out_node.push(k, v, subroot.unwrap_or_else(Root::new));
         .                                       out_tree.length += 1 + sublength;
         .                                   }
         .                               }
         .           
         .                               out_tree
         .                           }
         .                       }
        24 ( 0.00%)          }
         .           
         5 ( 0.00%)          if self.is_empty() {
         .                       BTreeMap::new()
         .                   } else {
         9 ( 0.00%)              clone_subtree(self.root.as_ref().unwrap().reborrow()) // unwrap succeeds because not empty
         .                   }
         .               }
         .           }
         .           
         .           impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
         .           where
         .               K: Borrow<Q> + Ord,
         .               Q: Ord,
-- line 256 ----------------------------------------
-- line 515 ----------------------------------------
         .               ///
         .               /// // entries can now be inserted into the empty map
         .               /// map.insert(1, "a");
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
         .               #[must_use]
         .               pub const fn new() -> BTreeMap<K, V> {
 4,917,019 ( 0.05%)          BTreeMap { root: None, length: 0 }
         .               }
         .           
         .               /// Clears the map, removing all elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 531 ----------------------------------------
-- line 560 ----------------------------------------
         .               /// assert_eq!(map.get(&2), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q> + Ord,
         .                   Q: Ord,
         .               {
       145 ( 0.00%)          let root_node = self.root.as_ref()?.reborrow();
       276 ( 0.00%)          match root_node.search_tree(key) {
         .                       Found(handle) => Some(handle.into_kv().1),
         .                       GoDown(_) => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but the ordering
-- line 577 ----------------------------------------
-- line 848 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,592 ( 0.00%)      pub fn insert(&mut self, key: K, value: V) -> Option<V>
         .               where
         .                   K: Ord,
         .               {
         .                   match self.entry(key) {
         .                       Occupied(mut entry) => Some(entry.insert(value)),
         .                       Vacant(entry) => {
     1,600 ( 0.00%)                  entry.insert(value);
         2 ( 0.00%)                  None
         .                       }
         .                   }
     1,064 ( 0.00%)      }
         .           
         .               /// Tries to insert a key-value pair into the map, and returns
         .               /// a mutable reference to the value in the entry.
         .               ///
         .               /// If the map already had this key present, nothing is updated, and
         .               /// an error containing the occupied entry and the value is returned.
         .               ///
         .               /// # Examples
-- line 875 ----------------------------------------
-- line 914 ----------------------------------------
         .               /// use std::collections::BTreeMap;
         .               ///
         .               /// let mut map = BTreeMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    34,944 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q> + Ord,
         .                   Q: Ord,
         .               {
    21,840 ( 0.00%)          self.remove_entry(key).map(|(_, v)| v)
    39,312 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the key
         .               /// was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but the ordering
         .               /// on the borrowed form *must* match the ordering on the key type.
         .               ///
         .               /// # Examples
-- line 936 ----------------------------------------
-- line 947 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "btreemap_remove_entry", since = "1.45.0")]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q> + Ord,
         .                   Q: Ord,
         .               {
         .                   let (map, dormant_map) = DormantMutRef::new(self);
     4,368 ( 0.00%)          let root_node = map.root.as_mut()?.borrow_mut();
    21,840 ( 0.00%)          match root_node.search_tree(key) {
         .                       Found(handle) => {
     8,736 ( 0.00%)                  Some(OccupiedEntry { handle, dormant_map, _marker: PhantomData }.remove_entry())
     4,368 ( 0.00%)              }
         .                       GoDown(_) => None,
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.
         .               /// The elements are visited in ascending key order.
-- line 967 ----------------------------------------
-- line 1142 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn entry(&mut self, key: K) -> Entry<'_, K, V>
         .               where
         .                   K: Ord,
         .               {
         .                   // FIXME(@porglezomp) Avoid allocating if we don't insert
         .                   let (map, dormant_map) = DormantMutRef::new(self);
         .                   let root_node = Self::ensure_is_owned(&mut map.root).borrow_mut();
    30,080 ( 0.00%)          match root_node.search_tree(&key) {
     6,324 ( 0.00%)              Found(handle) => Occupied(OccupiedEntry { handle, dormant_map, _marker: PhantomData }),
         .                       GoDown(handle) => {
    11,562 ( 0.00%)                  Vacant(VacantEntry { key, handle, dormant_map, _marker: PhantomData })
         .                       }
         .                   }
         .               }
         .           
         .               /// Splits the collection into two at the given key. Returns everything after the given key,
         .               /// including the key.
         .               ///
         .               /// # Examples
-- line 1161 ----------------------------------------
-- line 1328 ----------------------------------------
         .                   self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         9 ( 0.00%)      fn next(&mut self) -> Option<(&'a K, &'a V)> {
   181,267 ( 0.00%)          if self.length == 0 {
         .                       None
         .                   } else {
    17,258 ( 0.00%)              self.length -= 1;
         .                       Some(unsafe { self.range.next_unchecked() })
         .                   }
        14 ( 0.00%)      }
         .           
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.length, Some(self.length))
         .               }
         .           
         .               fn last(mut self) -> Option<(&'a K, &'a V)> {
         .                   self.next_back()
         .               }
-- line 1351 ----------------------------------------
-- line 1460 ----------------------------------------
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K, V> IntoIterator for BTreeMap<K, V> {
         .               type Item = (K, V);
         .               type IntoIter = IntoIter<K, V>;
         .           
         .               fn into_iter(self) -> IntoIter<K, V> {
         .                   let mut me = ManuallyDrop::new(self);
 5,484,310 ( 0.05%)          if let Some(root) = me.root.take() {
         .                       let full_range = root.into_dying().full_range();
         .           
         .                       IntoIter { range: full_range, length: me.length }
         .                   } else {
 2,972,550 ( 0.03%)              IntoIter { range: LazyLeafRange::none(), length: 0 }
         .                   }
         .               }
         .           }
         .           
         .           #[stable(feature = "btree_drop", since = "1.7.0")]
         .           impl<K, V> Drop for IntoIter<K, V> {
    26,674 ( 0.00%)      fn drop(&mut self) {
         .                   struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);
         .           
         .                   impl<'a, K, V> Drop for DropGuard<'a, K, V> {
         .                       fn drop(&mut self) {
         .                           // Continue the same loop we perform below. This only runs when unwinding, so we
         .                           // don't have to care about panics this time (they'll abort).
         .                           while let Some(kv) = self.0.dying_next() {
         .                               // SAFETY: we consume the dying handle immediately.
         .                               unsafe { kv.drop_key_val() };
         .                           }
         .                       }
         .                   }
         .           
   250,436 ( 0.00%)          while let Some(kv) = self.dying_next() {
         .                       let guard = DropGuard(self);
         .                       // SAFETY: we don't touch the tree before consuming the dying handle.
     2,528 ( 0.00%)              unsafe { kv.drop_key_val() };
         .                       mem::forget(guard);
         .                   }
    26,674 ( 0.00%)      }
         .           }
         .           
         .           impl<K, V> IntoIter<K, V> {
         .               /// Core of a `next` method returning a dying KV handle,
         .               /// invalidated by further calls to this function and some others.
   440,159 ( 0.00%)      fn dying_next(
         .                   &mut self,
         .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
 5,560,325 ( 0.06%)          if self.length == 0 {
         .                       self.range.deallocating_end();
   120,242 ( 0.00%)              None
         .                   } else {
    10,660 ( 0.00%)              self.length -= 1;
    11,630 ( 0.00%)              Some(unsafe { self.range.deallocating_next_unchecked() })
         .                   }
   440,156 ( 0.00%)      }
         .           
         .               /// Core of a `next_back` method returning a dying KV handle,
         .               /// invalidated by further calls to this function and some others.
         .               fn dying_next_back(
         .                   &mut self,
         .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
         .                   if self.length == 0 {
         .                       self.range.deallocating_end();
-- line 1524 ----------------------------------------
-- line 1529 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K, V> Iterator for IntoIter<K, V> {
         .               type Item = (K, V);
         .           
     1,274 ( 0.00%)      fn next(&mut self) -> Option<(K, V)> {
         .                   // SAFETY: we consume the dying handle immediately.
         .                   self.dying_next().map(unsafe { |kv| kv.into_key_val() })
     1,456 ( 0.00%)      }
         .           
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        48 ( 0.00%)          (self.length, Some(self.length))
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K, V> DoubleEndedIterator for IntoIter<K, V> {
         .               fn next_back(&mut self) -> Option<(K, V)> {
         .                   // SAFETY: we consume the dying handle immediately.
         .                   self.dying_next_back().map(unsafe { |kv| kv.into_key_val() })
-- line 1551 ----------------------------------------
-- line 1562 ----------------------------------------
         .           #[stable(feature = "fused", since = "1.26.0")]
         .           impl<K, V> FusedIterator for IntoIter<K, V> {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               fn next(&mut self) -> Option<&'a K> {
         8 ( 0.00%)          self.inner.next().map(|(k, _)| k)
         .               }
         .           
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           
         .               fn last(mut self) -> Option<&'a K> {
         .                   self.next_back()
-- line 1578 ----------------------------------------
-- line 2089 ----------------------------------------
         .               ///     println!("{}: {}", key, value);
         .               /// }
         .               ///
         .               /// let (first_key, first_value) = map.iter().next().unwrap();
         .               /// assert_eq!((*first_key, *first_value), (1, "a"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn iter(&self) -> Iter<'_, K, V> {
   524,085 ( 0.01%)          if let Some(root) = &self.root {
         .                       let full_range = root.reborrow().full_range();
         .           
         3 ( 0.00%)              Iter { range: full_range, length: self.length }
         .                   } else {
         6 ( 0.00%)              Iter { range: LazyLeafRange::none(), length: 0 }
         .                   }
         .               }
         .           
         .               /// Gets a mutable iterator over the entries of the map, sorted by key.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
-- line 2110 ----------------------------------------
-- line 2149 ----------------------------------------
         .               /// a.insert(2, "b");
         .               /// a.insert(1, "a");
         .               ///
         .               /// let keys: Vec<_> = a.keys().cloned().collect();
         .               /// assert_eq!(keys, [1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
     1,149 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// Gets an iterator over the values of the map, in order by key.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 2165 ----------------------------------------
-- line 2217 ----------------------------------------
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
         .               pub const fn len(&self) -> usize {
         3 ( 0.00%)          self.length
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 2233 ----------------------------------------
-- line 2238 ----------------------------------------
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
         .               pub const fn is_empty(&self) -> bool {
 2,124,419 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// If the root node is the empty (non-allocated) root node, allocate our
         .               /// own node. Is an associated function to avoid borrowing the entire BTreeMap.
         .               fn ensure_is_owned(root: &mut Option<Root<K, V>>) -> &mut Root<K, V> {
         .                   root.get_or_insert_with(Root::new)
         .               }
         .           }
-- line 2254 ----------------------------------------

    34,163 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 357 ----------------------------------------
         .               ///
         .               /// ```
         .               /// use std::rc::Rc;
         .               ///
         .               /// let five = Rc::new(5);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    12,384 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
         .                   // There is an implicit weak pointer owned by all the strong
         .                   // pointers, which ensures that the weak destructor never frees
         .                   // the allocation while the strong destructor is running, even
         .                   // if the weak pointer is stored inside the strong one.
         .                   unsafe {
         .                       Self::from_inner(
17,744,456 ( 0.18%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
         .                       )
         .                   }
    12,384 ( 0.00%)      }
         .           
         .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
         .               /// weak reference to the constructing `Rc<T>`.
         .               ///
         .               /// Generally, a structure circularly referencing itself, either directly or
         .               /// indirectly, should not hold a strong reference to prevent a memory leak.
         .               /// In `data_fn`, initialization of `T` can make use of the weak reference
         .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
         .               ///
         .               /// let x = Rc::new(4);
         .               /// let _y = Rc::clone(&x);
         .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rc_unique", since = "1.4.0")]
         .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
         2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
         .                       unsafe {
         .                           let val = ptr::read(&*this); // copy the contained object
         .           
         .                           // Indicate to Weaks that they can't be promoted by decrementing
         .                           // the strong count, and then remove the implicit "strong weak"
         .                           // pointer while also handling drop logic by just crafting a
         .                           // fake Weak.
         .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
         .               /// let five = Rc::new(5);
         .               /// let _weak_five = Rc::downgrade(&five);
         .               ///
         .               /// assert_eq!(1, Rc::weak_count(&five));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rc_counts", since = "1.15.0")]
         .               pub fn weak_count(this: &Self) -> usize {
    13,242 ( 0.00%)          this.inner().weak() - 1
         .               }
         .           
         .               /// Gets the number of strong (`Rc`) pointers to this allocation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
         .               pub unsafe fn decrement_strong_count(ptr: *const T) {
         .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
         .               }
         .           
         .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
         .               /// this allocation.
         .               #[inline]
         .               fn is_unique(this: &Self) -> bool {
       201 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
         .               }
         .           
         .               /// Returns a mutable reference into the given `Rc`, if there are
         .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
         .               ///
         .               /// Returns [`None`] otherwise, because it is not safe to
         .               /// mutate a shared value.
         .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
         .               /// assert_eq!(*x, 4);
         .               ///
         .               /// let _y = Rc::clone(&x);
         .               /// assert!(Rc::get_mut(&mut x).is_none());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rc_unique", since = "1.4.0")]
         .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
        67 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
         .               }
         .           
         .               /// Returns a mutable reference into the given `Rc`,
         .               /// without any check.
         .               ///
         .               /// See also [`get_mut`], which is safe and does appropriate checks.
         .               ///
         .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
         .               /// }
         .               /// assert_eq!(*x, "foo");
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
         .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
         .                   // We are careful to *not* create a reference covering the "count" fields, as
         .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
 2,171,306 ( 0.02%)          unsafe { &mut (*this.ptr.as_ptr()).value }
         .               }
         .           
         .               #[inline]
         .               #[stable(feature = "ptr_eq", since = "1.17.0")]
         .               /// Returns `true` if the two `Rc`s point to the same allocation
         .               /// (in a vein similar to [`ptr::eq`]).
         .               ///
         .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
         .               /// let five = Rc::new(5);
         .               /// let same_five = Rc::clone(&five);
         .               /// let other_five = Rc::new(5);
         .               ///
         .               /// assert!(Rc::ptr_eq(&five, &same_five));
         .               /// assert!(!Rc::ptr_eq(&five, &other_five));
         .               /// ```
         .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
     1,309 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
         .               }
         .           }
         .           
         .           impl<T: Clone> Rc<T> {
         .               /// Makes a mutable reference into the given `Rc`.
         .               ///
         .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
         .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
         .               /// *Rc::make_mut(&mut data) += 1;
         .               ///
         .               /// assert!(76 == *data);
         .               /// assert!(weak.upgrade().is_none());
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rc_unique", since = "1.4.0")]
    21,870 ( 0.00%)      pub fn make_mut(this: &mut Self) -> &mut T {
    13,122 ( 0.00%)          if Rc::strong_count(this) != 1 {
         .                       // Gotta clone the data, there are other Rcs.
         .                       // Pre-allocate memory to allow writing the cloned value directly.
     1,154 ( 0.00%)              let mut rc = Self::new_uninit();
         .                       unsafe {
         .                           let data = Rc::get_mut_unchecked(&mut rc);
         .                           (**this).write_clone_into_raw(data.as_mut_ptr());
     2,308 ( 0.00%)                  *this = rc.assume_init();
         .                       }
     8,694 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
         .                       // Can just steal the data, all that's left is Weaks
         .                       let mut rc = Self::new_uninit();
         .                       unsafe {
         .                           let data = Rc::get_mut_unchecked(&mut rc);
         .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
         .           
         .                           this.inner().dec_strong();
         .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
         .                           ptr::write(this, rc.assume_init());
         .                       }
         .                   }
         .                   // This unsafety is ok because we're guaranteed that the pointer
         .                   // returned is the *only* pointer that will ever be returned to T. Our
         .                   // reference count is guaranteed to be 1 at this point, and we required
         .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
         .                   // reference to the allocation.
     5,501 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
    26,244 ( 0.00%)      }
         .           }
         .           
         .           impl Rc<dyn Any> {
         .               #[inline]
         .               #[stable(feature = "rc_downcast", since = "1.29.0")]
         .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
         .               ///
         .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Copy elements from slice into newly allocated Rc<\[T\]>
         .               ///
         .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
         .               #[cfg(not(no_global_oom_handling))]
    46,210 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
         .                   unsafe {
         .                       let ptr = Self::allocate_for_slice(v.len());
     9,899 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
         .                       Self::from_ptr(ptr)
         .                   }
    59,416 ( 0.00%)      }
         .           
         .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
         .               ///
         .               /// Behavior is undefined should the size be wrong.
         .               #[cfg(not(no_global_oom_handling))]
         .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
         .                   // Panic guard while cloning T elements.
         .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
         .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
         .               #[inline]
         .               fn from_slice(v: &[T]) -> Self {
        13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Deref for Rc<T> {
         .               type Target = T;
         .           
         .               #[inline(always)]
         .               fn deref(&self) -> &T {
   236,974 ( 0.00%)          &self.inner().value
         .               }
         .           }
         .           
         .           #[unstable(feature = "receiver_trait", issue = "none")]
         .           impl<T: ?Sized> Receiver for Rc<T> {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
         .               /// }
         .               ///
         .               /// let foo  = Rc::new(Foo);
         .               /// let foo2 = Rc::clone(&foo);
         .               ///
         .               /// drop(foo);    // Doesn't print anything
         .               /// drop(foo2);   // Prints "dropped!"
         .               /// ```
 1,025,594 ( 0.01%)      fn drop(&mut self) {
         .                   unsafe {
   363,004 ( 0.00%)              self.inner().dec_strong();
 9,404,508 ( 0.09%)              if self.inner().strong() == 0 {
         .                           // destroy the contained object
 2,167,608 ( 0.02%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
         .           
         .                           // remove the implicit "strong weak" pointer now that we've
         .                           // destroyed the contents.
         1 ( 0.00%)                  self.inner().dec_weak();
         .           
 6,548,646 ( 0.07%)                  if self.inner().weak() == 0 {
     6,604 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
         .                           }
         .                       }
         .                   }
 1,127,756 ( 0.01%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Clone for Rc<T> {
         .               /// Makes a clone of the `Rc` pointer.
         .               ///
         .               /// This creates another pointer to the same allocation, increasing the
         .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
         .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
         .           /// the same value, than two `&T`s.
         .           ///
         .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
         .               #[inline]
         .               fn eq(&self, other: &Rc<T>) -> bool {
     1,805 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
         .               }
         .           
         .               #[inline]
         .               fn ne(&self, other: &Rc<T>) -> bool {
         .                   !Rc::ptr_eq(self, other) && **self != **other
         .               }
         .           }
         .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
         .               /// # use std::rc::Rc;
         .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
         .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
         .               /// assert_eq!(vec![1, 2, 3], *shared);
         .               /// ```
         .               #[inline]
         .               fn from(mut v: Vec<T>) -> Rc<[T]> {
         .                   unsafe {
    13,208 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
         .           
         .                       // Allow the Vec to free its memory, but not destroy its contents
         .                       v.set_len(0);
         .           
         .                       rc
         .                   }
         .               }
         .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
         .               #[must_use]
         .               pub fn new() -> Weak<T> {
         .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
         .               }
         .           }
         .           
         .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
         .               let address = ptr as *mut () as usize;
        28 ( 0.00%)      address == usize::MAX
         .           }
         .           
         .           /// Helper type to allow accessing the reference counts without
         .           /// making any assertions about the data field.
         .           struct WeakInner<'a> {
         .               weak: &'a Cell<usize>,
         .               strong: &'a Cell<usize>,
         .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
         .                       })
         .                       .unwrap_or(0)
         .               }
         .           
         .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
         .               /// (i.e., when this `Weak` was created by `Weak::new`).
         .               #[inline]
         .               fn inner(&self) -> Option<WeakInner<'_>> {
         1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
         .                       None
         .                   } else {
         .                       // We are careful to *not* create a reference covering the "data" field, as
         .                       // the field may be mutated concurrently (for example, if the last `Rc`
         .                       // is dropped, the data field will be dropped in-place).
         .                       Some(unsafe {
         .                           let ptr = self.ptr.as_ptr();
         .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
         .               /// assert!(other_weak_foo.upgrade().is_none());
         .               /// ```
         .               fn drop(&mut self) {
         .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
         .           
         .                   inner.dec_weak();
         .                   // the weak count starts at 1, and will only go to zero if all
         .                   // the strong pointers have disappeared.
         2 ( 0.00%)          if inner.weak() == 0 {
         .                       unsafe {
         .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
         .           
         .               #[inline]
         .               fn strong(&self) -> usize {
         .                   self.strong_ref().get()
         .               }
         .           
         .               #[inline]
         .               fn inc_strong(&self) {
 2,469,176 ( 0.02%)          let strong = self.strong();
         .           
         .                   // We want to abort on overflow instead of dropping the value.
         .                   // The reference count will never be zero when this is called;
         .                   // nevertheless, we insert an abort here to hint LLVM at
         .                   // an otherwise missed optimization.
 7,451,917 ( 0.07%)          if strong == 0 || strong == usize::MAX {
         .                       abort();
         .                   }
    13,020 ( 0.00%)          self.strong_ref().set(strong + 1);
         .               }
         .           
         .               #[inline]
         .               fn dec_strong(&self) {
14,111,681 ( 0.14%)          self.strong_ref().set(self.strong() - 1);
         .               }
         .           
         .               #[inline]
         .               fn weak(&self) -> usize {
         .                   self.weak_ref().get()
         .               }
         .           
         .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
         .                   if weak == 0 || weak == usize::MAX {
         .                       abort();
         .                   }
         .                   self.weak_ref().set(weak + 1);
         .               }
         .           
         .               #[inline]
         .               fn dec_weak(&self) {
 6,664,645 ( 0.07%)          self.weak_ref().set(self.weak() - 1);
         .               }
         .           }
         .           
         .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
         .               #[inline(always)]
         .               fn weak_ref(&self) -> &Cell<usize> {
         .                   &self.weak
         .               }
-- line 2523 ----------------------------------------

   216,478 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs
--------------------------------------------------------------------------------
Ir                  

-- line 11 ----------------------------------------
         .           use rustc_target::abi::Size;
         .           
         .           use super::ScalarInt;
         .           /// An unevaluated, potentially generic, constant.
         .           #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]
         .           #[derive(Hash, HashStable)]
         .           pub struct Unevaluated<'tcx, P = Option<Promoted>> {
         .               pub def: ty::WithOptConstParam<DefId>,
     3,255 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     2,769 ( 0.00%)      pub promoted: P,
         .           }
         .           
         .           impl<'tcx> Unevaluated<'tcx> {
         .               #[inline]
         .               pub fn shrink(self) -> Unevaluated<'tcx, ()> {
         .                   debug_assert_eq!(self.promoted, None);
         .                   Unevaluated { def: self.def, substs: self.substs, promoted: () }
         .               }
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
         .           impl<'tcx, P: Default> Unevaluated<'tcx, P> {
         .               #[inline]
         .               pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {
         .                   Unevaluated { def, substs, promoted: Default::default() }
         .               }
         .           }
         .           
         .           /// Represents a constant in Rust.
 8,184,573 ( 0.08%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]
    68,705 ( 0.00%)  #[derive(Hash, HashStable)]
         .           pub enum ConstKind<'tcx> {
         .               /// A const generic parameter.
     2,495 ( 0.00%)      Param(ty::ParamConst),
         .           
         .               /// Infer the value of the const.
         .               Infer(InferConst<'tcx>),
         .           
         .               /// Bound const variable, used only when preparing a trait query.
        10 ( 0.00%)      Bound(ty::DebruijnIndex, ty::BoundVar),
         .           
         .               /// A placeholder const - universally quantified higher-ranked const.
         .               Placeholder(ty::PlaceholderConst<'tcx>),
         .           
         .               /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other
         .               /// variants when the code is monomorphic enough for that.
         .               Unevaluated(Unevaluated<'tcx>),
         .           
         .               /// Used to hold computed value.
    24,158 ( 0.00%)      Value(ConstValue<'tcx>),
         .           
         .               /// A placeholder for a const which could not be computed; this is
         .               /// propagated to avoid useless error messages.
         .               Error(ty::DelaySpanBugEmitted),
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(ConstKind<'_>, 40);
         .           
         .           impl<'tcx> ConstKind<'tcx> {
         .               #[inline]
         .               pub fn try_to_value(self) -> Option<ConstValue<'tcx>> {
    45,806 ( 0.00%)          if let ConstKind::Value(val) = self { Some(val) } else { None }
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_scalar(self) -> Option<Scalar<AllocId>> {
         .                   self.try_to_value()?.try_to_scalar()
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_scalar_int(self) -> Option<ScalarInt> {
         .                   Some(self.try_to_value()?.try_to_scalar()?.assert_int())
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_bits(self, size: Size) -> Option<u128> {
       221 ( 0.00%)          self.try_to_scalar_int()?.to_bits(size).ok()
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_bool(self) -> Option<bool> {
         .                   self.try_to_scalar_int()?.try_into().ok()
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_machine_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {
     6,926 ( 0.00%)          self.try_to_value()?.try_to_machine_usize(tcx)
        35 ( 0.00%)      }
         .           }
         .           
         .           /// An inference variable for a const, for use in const generics.
    10,812 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]
         .           #[derive(HashStable)]
         .           pub enum InferConst<'tcx> {
         .               /// Infer the value of the const.
         .               Var(ty::ConstVid<'tcx>),
         .               /// A fresh const variable. See `infer::freshen` for more details.
         .               Fresh(u32),
         .           }
         .           
         .           impl<'tcx> ConstKind<'tcx> {
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the
         .               /// unevaluated constant.
       504 ( 0.00%)      pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {
     7,784 ( 0.00%)          self.try_eval(tcx, param_env).and_then(Result::ok).map_or(self, ConstKind::Value)
       448 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that isn't possible or necessary
         .               /// return `None`.
42,160,865 ( 0.42%)      pub(super) fn try_eval(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ParamEnv<'tcx>,
         .               ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {
10,540,810 ( 0.11%)          if let ConstKind::Unevaluated(unevaluated) = self {
         .                       use crate::mir::interpret::ErrorHandled;
         .           
         .                       // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`
         .                       // also does later, but we want to do it before checking for
         .                       // inference variables.
         .                       // Note that we erase regions *before* calling `with_reveal_all_normalized`,
         .                       // so that we don't try to invoke this query with
         .                       // any region variables.
       924 ( 0.00%)              let param_env_and = tcx
         .                           .erase_regions(param_env)
         .                           .with_reveal_all_normalized(tcx)
         .                           .and(tcx.erase_regions(unevaluated));
         .           
         .                       // HACK(eddyb) when the query key would contain inference variables,
         .                       // attempt using identity substs and `ParamEnv` instead, that will succeed
         .                       // when the expression doesn't depend on any parameters.
         .                       // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that
         .                       // we can call `infcx.const_eval_resolve` which handles inference variables.
       231 ( 0.00%)              let param_env_and = if param_env_and.needs_infer() {
         .                           tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {
         .                               def: unevaluated.def,
         .                               substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),
         .                               promoted: unevaluated.promoted,
         .                           })
         .                       } else {
         .                           param_env_and
         .                       };
         .           
         .                       // FIXME(eddyb) maybe the `const_eval_*` methods should take
         .                       // `ty::ParamEnvAnd` instead of having them separate.
         .                       let (param_env, unevaluated) = param_env_and.into_parts();
         .                       // try to resolve e.g. associated constants to their definition on an impl, and then
         .                       // evaluate the const.
     4,158 ( 0.00%)              match tcx.const_eval_resolve(param_env, unevaluated, None) {
         .                           // NOTE(eddyb) `val` contains no lifetimes/types/consts,
         .                           // and we use the original type, so nothing from `substs`
         .                           // (which may be identity substs, see above),
         .                           // can leak through `val` into the const we return.
     1,155 ( 0.00%)                  Ok(val) => Some(Ok(val)),
         .                           Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => None,
         .                           Err(ErrorHandled::Reported(e)) => Some(Err(e)),
         .                       }
         .                   } else {
        14 ( 0.00%)              None
         .                   }
42,160,872 ( 0.42%)      }
         .           }

31,681,579 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
50,719,771 ( 0.51%)          Vec { buf: RawVec::NEW, len: 0 }
        68 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 1,804,342 ( 0.02%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   192,360 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
   563,948 ( 0.01%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
 4,627,367 ( 0.05%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    23,023 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    46,597 ( 0.00%)          if self.capacity() > self.len {
    85,490 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
     3,956 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   272,712 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   246,219 ( 0.00%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   750,133 ( 0.01%)              self.len = len;
     9,340 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   327,254 ( 0.00%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
 5,190,351 ( 0.05%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 5,416,364 ( 0.05%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
   897,740 ( 0.01%)          self.len = new_len;
        80 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
     2,050 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,736 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
       252 ( 0.00%)          let len = self.len();
       500 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
       872 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
     1,296 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
       872 ( 0.00%)              self.set_len(len + 1);
         .                   }
     1,488 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
       100 ( 0.00%)          let len = self.len();
       378 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
       352 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
       314 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
       106 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   336,451 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
     4,432 ( 0.00%)          self.retain_mut(|elem| f(elem));
   331,576 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    41,625 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
    39,092 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    18,088 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
   315,912 ( 0.00%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    60,946 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
        98 ( 0.00%)                      g.processed_len += 1;
        26 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
        52 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
       723 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
       482 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
       203 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
        29 ( 0.00%)          let len = self.len();
     6,846 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
       432 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
       372 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
       144 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
       232 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        90 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
 4,528,537 ( 0.05%)          if self.len == self.buf.capacity() {
   676,990 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   303,631 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
 6,005,842 ( 0.06%)              self.len += 1;
         .                   }
        72 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 1,270,534 ( 0.01%)          if self.len == 0 {
        28 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
   736,126 ( 0.01%)                  self.len -= 1;
   143,004 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     7,581 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
     6,498 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
    35,189 ( 0.00%)          let len = self.len();
         .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   521,491 ( 0.01%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
    44,814 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
        14 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
     6,323 ( 0.00%)              Drain {
         .                           tail_start: end,
        14 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
   476,030 ( 0.00%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
   462,437 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     4,960 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     2,798 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   103,830 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
    13,834 ( 0.00%)          let len = self.len();
    27,668 ( 0.00%)          if new_len > len {
    58,328 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    89,996 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        24 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
    30,880 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     3,088 ( 0.00%)          let len = self.len();
         .           
     9,264 ( 0.00%)          if new_len > len {
    16,515 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
     3,088 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   620,427 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
    22,216 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   684,344 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   491,043 ( 0.00%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
        30 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   130,790 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   703,111 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   128,216 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
 9,923,654 ( 0.10%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
         7 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
 1,169,119 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   607,031 ( 0.01%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   770,545 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   127,530 ( 0.00%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       588 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 2,486,657 ( 0.02%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
   948,696 ( 0.01%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   383,540 ( 0.00%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
         .               fn into_iter(self) -> slice::Iter<'a, T> {
        65 ( 0.00%)          self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,074 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
       944 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
13,574,075 ( 0.14%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       944 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   120,346 ( 0.00%)          while let Some(element) = iterator.next() {
    18,764 ( 0.00%)              let len = self.len();
   155,903 ( 0.00%)              if len == self.capacity() {
     1,486 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   131,035 ( 0.00%)                  self.set_len(len + 1);
         .                       }
         .                   }
     1,608 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     7,634 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
    12,392 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
31,406,977 ( 0.31%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 7,454,005 ( 0.07%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
37,433,156 ( 0.37%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 1,760,531 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                   

-- line 118 ----------------------------------------
          .               stability: InternedSet<'tcx, attr::Stability>,
          .           
          .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
          .               const_stability: InternedSet<'tcx, attr::ConstStability>,
          .           }
          .           
          .           impl<'tcx> CtxtInterners<'tcx> {
          .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
         17 ( 0.00%)          CtxtInterners {
          .                       arena,
          .                       type_: Default::default(),
          .                       type_list: Default::default(),
          .                       substs: Default::default(),
          .                       region: Default::default(),
          .                       poly_existential_predicates: Default::default(),
          .                       canonical_var_infos: Default::default(),
          .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
          .                       stability: Default::default(),
          .                       const_stability: Default::default(),
          .                   }
          .               }
          .           
          .               /// Interns a type.
          .               #[allow(rustc::usage_of_ty_tykind)]
          .               #[inline(never)]
    892,136 ( 0.01%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
          .                   self.type_
    557,585 ( 0.01%)              .intern(kind, |kind| {
     23,546 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
          .           
          .                           let ty_struct = TyS {
     47,092 ( 0.00%)                      kind,
          .                               flags: flags.flags,
          .                               outer_exclusive_binder: flags.outer_exclusive_binder,
          .                           };
          .           
          .                           Interned(self.arena.alloc(ty_struct))
          .                       })
          .                       .0
  1,003,653 ( 0.01%)      }
          .           
          .               #[inline(never)]
    462,120 ( 0.00%)      fn intern_predicate(
          .                   &self,
          .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
          .               ) -> &'tcx PredicateInner<'tcx> {
          .                   self.predicate
    404,355 ( 0.00%)              .intern(kind, |kind| {
     84,312 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
          .           
          .                           let predicate_struct = PredicateInner {
          .                               kind,
          .                               flags: flags.flags,
          .                               outer_exclusive_binder: flags.outer_exclusive_binder,
          .                           };
          .           
          .                           Interned(self.arena.alloc(predicate_struct))
          .                       })
          .                       .0
    519,885 ( 0.01%)      }
          .           }
          .           
          .           pub struct CommonTypes<'tcx> {
          .               pub unit: Ty<'tcx>,
          .               pub bool: Ty<'tcx>,
          .               pub char: Ty<'tcx>,
          .               pub isize: Ty<'tcx>,
          .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
          .           /// safely used as a key in the maps of a TypeckResults. For that to be
          .           /// the case, the HirId must have the same `owner` as all the other IDs in
          .           /// this table (signified by `hir_owner`). Otherwise the HirId
          .           /// would be in a different frame of reference and using its `local_id`
          .           /// would result in lookup errors, or worse, in silently wrong data being
          .           /// stored/returned.
          .           #[inline]
          .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
    156,699 ( 0.00%)      if hir_id.owner != hir_owner {
          .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
          .               }
          .           }
          .           
          .           #[cold]
          .           #[inline(never)]
          .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
          .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
          .           }
          .           
          .           impl<'a, V> LocalTableInContext<'a, V> {
          .               pub fn contains_key(&self, id: hir::HirId) -> bool {
          .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
          .                   self.data.contains_key(&id.local_id)
          .               }
          .           
    109,721 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
     22,079 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
     22,079 ( 0.00%)          self.data.get(&id.local_id)
     87,850 ( 0.00%)      }
          .           
          .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
          .                   self.data.iter()
          .               }
          .           }
          .           
          .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
          .               type Output = V;
          .           
      1,248 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
          .                   self.get(key).expect("LocalTableInContext: key not found")
        832 ( 0.00%)      }
          .           }
          .           
          .           pub struct LocalTableInContextMut<'a, V> {
          .               hir_owner: LocalDefId,
          .               data: &'a mut ItemLocalMap<V>,
          .           }
          .           
          .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
          .               pub treat_byte_string_as_slice: ItemLocalSet,
          .           
          .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
          .               /// on closure size.
          .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
          .           }
          .           
          .           impl<'tcx> TypeckResults<'tcx> {
     59,598 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
    705,243 ( 0.01%)          TypeckResults {
          .                       hir_owner,
          .                       type_dependent_defs: Default::default(),
          .                       field_indices: Default::default(),
          .                       user_provided_types: Default::default(),
          .                       user_provided_sigs: Default::default(),
          .                       node_types: Default::default(),
          .                       node_substs: Default::default(),
          .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
          .                       tainted_by_errors: None,
          .                       concrete_opaque_types: Default::default(),
          .                       closure_min_captures: Default::default(),
          .                       closure_fake_reads: Default::default(),
          .                       generator_interior_types: ty::Binder::dummy(Default::default()),
          .                       treat_byte_string_as_slice: Default::default(),
          .                       closure_size_eval: Default::default(),
          .                   }
     59,598 ( 0.00%)      }
          .           
          .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
     13,137 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
      8,758 ( 0.00%)          match *qpath {
     19,314 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
          .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
          .                           .type_dependent_def(id)
      6,960 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
          .                   }
     21,895 ( 0.00%)      }
          .           
         67 ( 0.00%)      pub fn type_dependent_defs(
          .                   &self,
          .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
      1,339 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
         67 ( 0.00%)      }
          .           
      1,524 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
      3,314 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
          .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
      3,048 ( 0.00%)      }
          .           
      2,520 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
          .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
      2,520 ( 0.00%)      }
          .           
     12,861 ( 0.00%)      pub fn type_dependent_defs_mut(
          .                   &mut self,
          .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
     12,861 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
     12,861 ( 0.00%)      }
          .           
          .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
        608 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
        130 ( 0.00%)      }
          .           
          .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
        696 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
        348 ( 0.00%)      }
          .           
          .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
      8,214 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
      4,107 ( 0.00%)      }
          .           
          .               pub fn user_provided_types_mut(
          .                   &mut self,
          .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
        220 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
        110 ( 0.00%)      }
          .           
          .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
     26,534 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
     13,267 ( 0.00%)      }
          .           
          .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
     47,224 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
     23,612 ( 0.00%)      }
          .           
    181,062 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
     30,177 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
          .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
          .                   })
    150,885 ( 0.00%)      }
          .           
     37,652 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
     37,652 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
          .                   self.node_types.get(&id.local_id).cloned()
     75,304 ( 0.00%)      }
          .           
          .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
      2,586 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
      1,293 ( 0.00%)      }
          .           
      8,740 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
      8,740 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
          .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
     17,480 ( 0.00%)      }
          .           
     11,150 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
     11,150 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
          .                   self.node_substs.get(&id.local_id).cloned()
     22,300 ( 0.00%)      }
          .           
          .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
          .               // doesn't provide type parameter substitutions.
          .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
      2,884 ( 0.00%)          self.node_type(pat.hir_id)
          .               }
          .           
          .               // Returns the type of an expression as a monotype.
          .               //
          .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
          .               // some cases, we insert `Adjustment` annotations such as auto-deref or
          .               // auto-ref.  The type returned by this function does not consider such
          .               // adjustments.  See `expr_ty_adjusted()` instead.
          .               //
          .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
          .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
          .               // instead of "fn(ty) -> T with T = isize".
          .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     30,847 ( 0.00%)          self.node_type(expr.hir_id)
          .               }
          .           
          .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     29,158 ( 0.00%)          self.node_type_opt(expr.hir_id)
          .               }
          .           
          .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
     12,854 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
      6,427 ( 0.00%)      }
          .           
          .               pub fn adjustments_mut(
          .                   &mut self,
          .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
     26,278 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
     13,139 ( 0.00%)      }
          .           
     13,981 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
     27,962 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
          .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
     27,962 ( 0.00%)      }
          .           
          .               /// Returns the type of `expr`, considering any `Adjustment`
          .               /// entry recorded for that expression.
        805 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
        161 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
        128 ( 0.00%)      }
          .           
        245 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
         49 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
        140 ( 0.00%)      }
          .           
      1,272 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
          .                   // Only paths and method calls/overloaded operators have
          .                   // entries in type_dependent_defs, ignore the former here.
      2,544 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
          .                       return false;
          .                   }
          .           
      2,792 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
      2,544 ( 0.00%)      }
          .           
      5,181 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
          .                   self.pat_binding_modes().get(id).copied().or_else(|| {
          .                       s.delay_span_bug(sp, "missing binding mode");
          .                       None
          .                   })
      6,908 ( 0.00%)      }
          .           
          .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
      4,243 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
      1,258 ( 0.00%)      }
          .           
          .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
      2,284 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
      1,142 ( 0.00%)      }
          .           
          .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      4,718 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
      2,359 ( 0.00%)      }
          .           
          .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      1,458 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
        729 ( 0.00%)      }
          .           
          .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
          .               /// by the closure.
     13,296 ( 0.00%)      pub fn closure_min_captures_flattened(
          .                   &self,
          .                   closure_def_id: DefId,
          .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
          .                   self.closure_min_captures
          .                       .get(&closure_def_id)
          .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
          .                       .into_iter()
          .                       .flatten()
     16,620 ( 0.00%)      }
          .           
          .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      6,578 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      3,289 ( 0.00%)      }
          .           
          .               pub fn closure_kind_origins_mut(
          .                   &mut self,
          .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
          .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
          .               }
          .           
          .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
      7,410 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      3,705 ( 0.00%)      }
          .           
          .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
        832 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
        416 ( 0.00%)      }
          .           
          .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      6,578 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      3,289 ( 0.00%)      }
          .           
          .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
          .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
          .               }
          .           
        162 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
         54 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
          .                   self.coercion_casts.contains(&hir_id.local_id)
        108 ( 0.00%)      }
          .           
          .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
          .                   self.coercion_casts.insert(id);
          .               }
          .           
          .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      3,289 ( 0.00%)          &self.coercion_casts
      3,289 ( 0.00%)      }
          .           }
          .           
          .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
          .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
          .                   let ty::TypeckResults {
          .                       hir_owner,
          .                       ref type_dependent_defs,
          .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
          .                   const START_INDEX = 0,
          .               }
          .           }
          .           
          .           /// Mapping of type annotation indices to canonical user type annotations.
          .           pub type CanonicalUserTypeAnnotations<'tcx> =
          .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
          .           
         66 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
          .           pub struct CanonicalUserTypeAnnotation<'tcx> {
          .               pub user_ty: CanonicalUserType<'tcx>,
          .               pub span: Span,
         55 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
          .           }
          .           
          .           /// Canonicalized user type annotation.
          .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
          .           
          .           impl<'tcx> CanonicalUserType<'tcx> {
          .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
          .               /// i.e., each thing is mapped to a canonical variable with the same index.
        263 ( 0.00%)      pub fn is_identity(&self) -> bool {
        526 ( 0.00%)          match self.value {
          .                       UserType::Ty(_) => false,
          .                       UserType::TypeOf(_, user_substs) => {
        263 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
          .                               return false;
          .                           }
          .           
          .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
          .                               match kind.unpack() {
        534 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
          .                                       ty::Bound(debruijn, b) => {
          .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        251 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
          .                                           cvar == b.var
          .                                       }
          .                                       _ => false,
          .                                   },
          .           
          8 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
          .                                       ty::ReLateBound(debruijn, br) => {
          .                                           // We only allow a `ty::INNERMOST` index in substitutions.
          .                                           assert_eq!(*debruijn, ty::INNERMOST);
          .                                           cvar == br.var
          .                                       }
          .                                       _ => false,
          .                                   },
          .           
          8 ( 0.00%)                          GenericArgKind::Const(ct) => match ct.val {
         12 ( 0.00%)                              ty::ConstKind::Bound(debruijn, b) => {
          .                                           // We only allow a `ty::INNERMOST` index in substitutions.
          4 ( 0.00%)                                  assert_eq!(debruijn, ty::INNERMOST);
          .                                           cvar == b
          .                                       }
          .                                       _ => false,
          .                                   },
          .                               }
          .                           })
          .                       }
          .                   }
        526 ( 0.00%)      }
          .           }
          .           
          .           /// A user-given type annotation attached to a constant. These arise
          .           /// from constants that are named via paths, like `Foo::<A>::new` and
          .           /// so forth.
        330 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
      2,813 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub enum UserType<'tcx> {
          .               Ty(Ty<'tcx>),
          .           
          .               /// The canonical type is the result of `type_of(def_id)` with the
          .               /// given substitutions applied.
          .               TypeOf(DefId, UserSubsts<'tcx>),
          .           }
          .           
          .           impl<'tcx> CommonTypes<'tcx> {
          .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
        111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
          .           
          .                   CommonTypes {
          .                       unit: mk(Tuple(List::empty())),
          .                       bool: mk(Bool),
          .                       char: mk(Char),
          .                       never: mk(Never),
          .                       isize: mk(Int(ty::IntTy::Isize)),
          .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
          .           
          .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> CommonLifetimes<'tcx> {
          .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
         67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
          .           
          .                   CommonLifetimes {
          5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
          5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
          5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> CommonConsts<'tcx> {
          .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
          6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
          .           
          .                   CommonConsts {
          .                       unit: mk_const(ty::Const {
          .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
          .                           ty: types.unit,
          .                       }),
          .                   }
          .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
          .           
          .               /// Stores memory for globals (statics/consts).
          .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
          .           
          .               output_filenames: Arc<OutputFilenames>,
          .           }
          .           
          .           impl<'tcx> TyCtxt<'tcx> {
    131,840 ( 0.00%)      pub fn typeck_opt_const_arg(
          .                   self,
          .                   def: ty::WithOptConstParam<LocalDefId>,
          .               ) -> &'tcx TypeckResults<'tcx> {
     52,736 ( 0.00%)          if let Some(param_did) = def.const_param_did {
          .                       self.typeck_const_arg((def.did, param_did))
          .                   } else {
          .                       self.typeck(def.did)
          .                   }
    105,472 ( 0.00%)      }
          .           
      9,888 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      3,296 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     13,184 ( 0.00%)      }
          .           
     64,880 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     12,976 ( 0.00%)          self.arena.alloc(Steal::new(mir))
     90,832 ( 0.00%)      }
          .           
     13,184 ( 0.00%)      pub fn alloc_steal_promoted(
          .                   self,
          .                   promoted: IndexVec<Promoted, Body<'tcx>>,
          .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      3,296 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     16,480 ( 0.00%)      }
          .           
        207 ( 0.00%)      pub fn alloc_adt_def(
          .                   self,
          .                   did: DefId,
          .                   kind: AdtKind,
          .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
          .                   repr: ReprOptions,
          .               ) -> &'tcx ty::AdtDef {
        368 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
         92 ( 0.00%)      }
          .           
          .               /// Allocates a read-only byte or string literal for `mir::interpret`.
          .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
          .                   // Create an allocation that just contains these bytes.
          .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
          .                   let alloc = self.intern_const_alloc(alloc);
          .                   self.create_memory_alloc(alloc)
          .               }
          .           
          .               /// Returns a range of the start/end indices specified with the
          .               /// `rustc_layout_scalar_valid_range` attribute.
          .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
        848 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
        424 ( 0.00%)          let attrs = self.get_attrs(def_id);
      1,802 ( 0.00%)          let get = |name| {
        424 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
          .                           Some(attr) => attr,
          .                           None => return Bound::Unbounded,
          .                       };
          .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
          .                       if let Some(
          .                           &[
          .                               ast::NestedMetaItem::Literal(ast::Lit {
          .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
          .                       ) = attr.meta_item_list().as_deref()
          .                       {
          .                           Bound::Included(a)
          .                       } else {
          .                           self.sess
          .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
          .                           Bound::Unbounded
          .                       }
      2,120 ( 0.00%)          };
        636 ( 0.00%)          (
        636 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
        318 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
          .                   )
        848 ( 0.00%)      }
          .           
          .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
          .                   value.lift_to_tcx(self)
          .               }
          .           
          .               /// Creates a type context and call the closure with a `TyCtxt` reference
          .               /// to the context. The closure enforces that the type context and any interned
          .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
          .               /// reference to the context, to allow formatting values that need it.
         23 ( 0.00%)      pub fn create_global_ctxt(
          .                   s: &'tcx Session,
          .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
          .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
          .                   resolutions: ty::ResolverOutputs,
          .                   krate: &'tcx hir::Crate<'tcx>,
          .                   dep_graph: DepGraph,
          .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
          .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
          .                   query_kinds: &'tcx [DepKindStruct],
          .                   crate_name: &str,
          .                   output_filenames: OutputFilenames,
          .               ) -> GlobalCtxt<'tcx> {
          1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
          .                       s.fatal(&err);
          .                   });
          .                   let interners = CtxtInterners::new(arena);
          .                   let common_types = CommonTypes::new(&interners);
          .                   let common_lifetimes = CommonLifetimes::new(&interners);
          .                   let common_consts = CommonConsts::new(&interners, &common_types);
          .           
        127 ( 0.00%)          GlobalCtxt {
          .                       sess: s,
          6 ( 0.00%)              lint_store,
          .                       arena,
          2 ( 0.00%)              interners,
          5 ( 0.00%)              dep_graph,
          4 ( 0.00%)              untracked_resolutions: resolutions,
          2 ( 0.00%)              prof: s.prof.clone(),
          .                       types: common_types,
          .                       lifetimes: common_lifetimes,
          .                       consts: common_consts,
          .                       untracked_crate: krate,
          .                       on_disk_cache,
          .                       queries,
          .                       query_caches: query::QueryCaches::default(),
          .                       query_kinds,
          .                       ty_rcache: Default::default(),
          .                       pred_rcache: Default::default(),
          .                       selection_cache: Default::default(),
          .                       evaluation_cache: Default::default(),
          1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
          .                       data_layout,
          .                       alloc_map: Lock::new(interpret::AllocMap::new()),
          .                       output_filenames: Arc::new(output_filenames),
          .                   }
          9 ( 0.00%)      }
          .           
          .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
          .                   &self.query_kinds[k as usize]
          .               }
          .           
          .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
          .               #[track_caller]
          .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
          .                   ty: Ty<'tcx>,
          .                   span: S,
          .                   msg: &str,
          .               ) -> &'tcx Const<'tcx> {
          .                   self.sess.delay_span_bug(span, msg);
          .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
          .               }
          .           
      7,189 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      1,027 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
      7,192 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
      8,216 ( 0.00%)      }
          .           
          .               /// Obtain all lang items of this crate and all dependencies (recursively)
    443,380 ( 0.00%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
          .                   self.get_lang_items(())
    570,060 ( 0.01%)      }
          .           
          .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
          .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
         21 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
          .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
         24 ( 0.00%)      }
          .           
          .               /// Obtain the diagnostic item's name
      5,607 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
          .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
      6,408 ( 0.00%)      }
          .           
          .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
      5,222 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
          .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
      5,968 ( 0.00%)      }
          .           
     23,758 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
          .                   self.stability_index(())
     30,546 ( 0.00%)      }
          .           
    409,857 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
          .                   self.features_query(())
    468,408 ( 0.00%)      }
          .           
          .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
          .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
     42,949 ( 0.00%)          if let Some(id) = id.as_local() {
          .                       self.untracked_resolutions.definitions.def_key(id)
          .                   } else {
      2,240 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
          .                   }
          .               }
          .           
          .               /// Converts a `DefId` into its fully expanded `DefPath` (every
          .               /// `DefId` is really just an interned `DefPath`).
          .               ///
          .               /// Note that if `id` is not local to this crate, the result will
          .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
          .                   } else {
          .                       self.untracked_resolutions.cstore.def_path(id)
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
          .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
     14,958 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
          .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
          .                   } else {
        236 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
          .                   if crate_num == LOCAL_CRATE {
          .                       self.sess.local_stable_crate_id()
          .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
          .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
          .                       self.def_path(def_id).to_string_no_crate_verbose()
          .                   )
          .               }
          .           
          .               /// Note that this is *untracked* and should only be used within the query
          .               /// system if the result is otherwise tracked through queries
          .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
     50,900 ( 0.00%)          &*self.untracked_resolutions.cstore
     25,450 ( 0.00%)      }
          .           
          .               /// Note that this is *untracked* and should only be used within the query
          .               /// system if the result is otherwise tracked through queries
          .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
          .                   &self.untracked_resolutions.definitions
          .               }
          .           
          .               #[inline(always)]
          .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      5,341 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     24,452 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
          .               }
          .           
          .               #[inline(always)]
          .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
          .                   let resolutions = &self.gcx.untracked_resolutions;
          .                   StableHashingContext::ignore_spans(
          .                       self.sess,
          .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
          .               /// If `true`, we should use the MIR-based borrowck, but also
          .               /// fall back on the AST borrowck if the MIR-based one errors.
          .               pub fn migrate_borrowck(self) -> bool {
          .                   self.borrowck_mode().migrate()
          .               }
          .           
          .               /// What mode(s) of borrowck should we run? AST? MIR? both?
          .               /// (Also considers the `#![feature(nll)]` setting.)
      6,578 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
          .                   // Here are the main constraints we need to deal with:
          .                   //
          .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
          .                   //    synonymous with no `-Z borrowck=...` flag at all.
          .                   //
          .                   // 2. We want to allow developers on the Nightly channel
          .                   //    to opt back into the "hard error" mode for NLL,
          .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
          .                   //   errors. (To simplify the code here, it now even overrides
          .                   //   a user's attempt to specify `-Z borrowck=compare`, which
          .                   //   we arguably do not need anymore and should remove.)
          .                   //
          .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
          .                   //
          .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
          .           
      9,867 ( 0.00%)          if self.features().nll {
          .                       return BorrowckMode::Mir;
          .                   }
          .           
      3,289 ( 0.00%)          self.sess.opts.borrowck_mode
     13,156 ( 0.00%)      }
          .           
          .               /// If `true`, we should use lazy normalization for constants, otherwise
          .               /// we still evaluate them eagerly.
          .               #[inline]
          .               pub fn lazy_normalization(self) -> bool {
     10,551 ( 0.00%)          let features = self.features();
          .                   // Note: We only use lazy normalization for generic const expressions.
      6,423 ( 0.00%)          features.generic_const_exprs
          .               }
          .           
          .               #[inline]
          .               pub fn local_crate_exports_generics(self) -> bool {
          .                   debug_assert!(self.sess.opts.share_generics());
          .           
          .                   self.sess.crate_types().iter().any(|crate_type| {
          .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
          .                   self.mk_imm_ref(
          .                       self.lifetimes.re_static,
          .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
          .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
          .                   )
          .               }
          .           
          .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
        517 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
        376 ( 0.00%)          match self.def_kind(def_id) {
          .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
          .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
          .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
          .                       },
        846 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
          .                   }
        423 ( 0.00%)      }
          .           
          .               pub fn type_length_limit(self) -> Limit {
          .                   self.limits(()).type_length_limit
          .               }
          .           
    119,889 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
          .                   self.limits(()).recursion_limit
    137,016 ( 0.00%)      }
          .           
          .               pub fn move_size_limit(self) -> Limit {
          .                   self.limits(()).move_size_limit
          .               }
          .           
        448 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
          .                   self.limits(()).const_eval_limit
        512 ( 0.00%)      }
          .           
          .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
          .                   iter::once(LOCAL_CRATE)
          .                       .chain(self.crates(()).iter().copied())
          .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
          .               }
          .           }
          .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
          .               /// This is the implicit state of rustc. It contains the current
          .               /// `TyCtxt` and query. It is updated when creating a local interner or
          .               /// executing a new query. Whenever there's a `TyCtxt` value available
          .               /// you should also have access to an `ImplicitCtxt` through the functions
          .               /// in this module.
          .               #[derive(Clone)]
          .               pub struct ImplicitCtxt<'a, 'tcx> {
          .                   /// The current `TyCtxt`.
          1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
          .           
          .                   /// The current query job, if any. This is updated by `JobOwner::start` in
          .                   /// `ty::query::plumbing` when executing a query.
          .                   pub query: Option<query::QueryJobId<DepKind>>,
          .           
          .                   /// Where to store diagnostics for the current query job, if any.
          .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
          .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
          .                   pub layout_depth: usize,
          .           
          .                   /// The current dep graph task. This is used to add dependencies to queries
          .                   /// when executing them.
          .                   pub task_deps: TaskDepsRef<'a>,
          .               }
          .           
          .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
          5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
          .                       let tcx = TyCtxt { gcx };
         25 ( 0.00%)              ImplicitCtxt {
          .                           tcx,
          .                           query: None,
          .                           diagnostics: None,
          .                           layout_depth: 0,
          .                           task_deps: TaskDepsRef::Ignore,
          .                       }
          5 ( 0.00%)          }
          .               }
          .           
          .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
          .               /// to `value` during the call to `f`. It is restored to its previous value after.
          .               /// This is used to set the pointer to the new `ImplicitCtxt`.
          .               #[cfg(parallel_compiler)]
          .               #[inline]
          .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
          .           
          .               /// Sets TLV to `value` during the call to `f`.
          .               /// It is restored to its previous value after.
          .               /// This is used to set the pointer to the new `ImplicitCtxt`.
          .               #[cfg(not(parallel_compiler))]
          .               #[inline]
          .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
          .                   let old = get_tlv();
    217,715 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
          .                   TLV.with(|tlv| tlv.set(value));
          .                   f()
          .               }
          .           
          .               /// Gets the pointer to the current `ImplicitCtxt`.
          .               #[cfg(not(parallel_compiler))]
          .               #[inline]
          .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
          .               }
          .           
          .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
          .               #[inline]
          .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
          .               where
          .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
          .               {
          1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
          .               }
          .           
          .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
          .               #[inline]
          .               pub fn with_context_opt<F, R>(f: F) -> R
          .               where
          .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
          .               {
          .                   let context = get_tlv();
    898,927 ( 0.01%)          if context == 0 {
          .                       f(None)
          .                   } else {
          .                       // We could get an `ImplicitCtxt` pointer from another thread.
          .                       // Ensure that `ImplicitCtxt` is `Sync`.
          .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
          .           
          .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
          .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
          .               /// This will panic if you pass it a `TyCtxt` which is different from the current
          .               /// `ImplicitCtxt`'s `tcx` field.
          .               #[inline]
          .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
          .               where
          .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
          .               {
          .                   with_context(|context| unsafe {
    443,085 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
          .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
    443,066 ( 0.00%)              f(context)
          .                   })
          .               }
          .           
          .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
          .               /// Panics if there is no `ImplicitCtxt` available.
          .               #[inline]
          .               pub fn with<F, R>(f: F) -> R
          .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
          .               fn into_pointer(&self) -> *const () {
          .                   self.0 as *const _ as *const ()
          .               }
          .           }
          .           
          .           #[allow(rustc::usage_of_ty_tykind)]
          .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
          .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
    102,352 ( 0.00%)          &self.0.kind()
          .               }
          .           }
          .           
          .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
          .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
          .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
          .                   // `x == y`.
          .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
          .           
          .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
          .               fn hash<H: Hasher>(&self, s: &mut H) {
          .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
     42,996 ( 0.00%)          self.0.kind().hash(s)
          .               }
          .           }
          .           
          .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
          .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
     45,891 ( 0.00%)          &self.0.kind
          .               }
          .           }
          .           
          .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
          .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
          .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
          .                   // `x == y`.
          .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
          .           
          .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
          .               fn hash<H: Hasher>(&self, s: &mut H) {
          .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
     14,332 ( 0.00%)          self.0.kind.hash(s)
          .               }
          .           }
          .           
          .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
          .               fn borrow<'a>(&'a self) -> &'a [T] {
    158,295 ( 0.00%)          &self.0[..]
          .               }
          .           }
          .           
          .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
          .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
          .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
          .                   // `x == y`.
          .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
          .           
          .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
          .               fn hash<H: Hasher>(&self, s: &mut H) {
          .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
     17,990 ( 0.00%)          self.0[..].hash(s)
          .               }
          .           }
          .           
          .           macro_rules! direct_interners {
          .               ($($name:ident: $method:ident($ty:ty),)+) => {
          .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
          .                       fn borrow<'a>(&'a self) -> &'a $ty {
     42,907 ( 0.00%)                  &self.0
          .                       }
          .                   }
          .           
          .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
          .                       fn eq(&self, other: &Self) -> bool {
          .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
          .                           // equals `x == y`.
          .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
          .                   }
          .           
          .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
          .           
          .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
          .                       fn hash<H: Hasher>(&self, s: &mut H) {
          .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
          .                           // x.hash(s)`.
     27,100 ( 0.00%)                  self.0.hash(s)
          .                       }
          .                   }
          .           
          .                   impl<'tcx> TyCtxt<'tcx> {
    381,034 ( 0.00%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
    205,409 ( 0.00%)                  self.interners.$name.intern(v, |v| {
      5,110 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
          .                           }).0
    428,175 ( 0.00%)              }
          .                   })+
          .               }
          .           }
          .           
          .           direct_interners! {
          .               region: mk_region(RegionKind),
          .               const_: mk_const(Const<'tcx>),
          .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
          .               adt_def: intern_adt_def(AdtDef),
          .               stability: intern_stability(attr::Stability),
          .               const_stability: intern_const_stability(attr::ConstStability),
          .           }
          .           
          .           macro_rules! slice_interners {
          .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
          .                   impl<'tcx> TyCtxt<'tcx> {
  1,716,118 ( 0.02%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
          .                           self.interners.$field.intern_ref(v, || {
          .                               Interned(List::from_arena(&*self.arena, v))
          .                           }).0
  1,538,577 ( 0.02%)              })+
          .                   }
          .               );
          .           }
          .           
          .           slice_interners!(
          .               type_list: _intern_type_list(Ty<'tcx>),
          .               substs: _intern_substs(GenericArg<'tcx>),
          .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
          .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
          .                   })
          .               }
          .           
          .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
          .               /// `*r == kind`.
          .               #[inline]
          .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
     26,340 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
          .               }
          .           
          .               #[allow(rustc::usage_of_ty_tykind)]
          .               #[inline]
          .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
    807,414 ( 0.01%)          self.interners.intern_ty(st)
          .               }
          .           
          .               #[inline]
          .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
    631,341 ( 0.01%)          let inner = self.interners.intern_predicate(binder);
          .                   Predicate { inner }
          .               }
          .           
          .               #[inline]
    349,512 ( 0.00%)      pub fn reuse_or_mk_predicate(
          .                   self,
          .                   pred: Predicate<'tcx>,
          .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
          .               ) -> Predicate<'tcx> {
     12,614 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
    349,512 ( 0.00%)      }
          .           
          .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
        402 ( 0.00%)          match tm {
          .                       IntTy::Isize => self.types.isize,
          .                       IntTy::I8 => self.types.i8,
          .                       IntTy::I16 => self.types.i16,
          .                       IntTy::I32 => self.types.i32,
          .                       IntTy::I64 => self.types.i64,
          .                       IntTy::I128 => self.types.i128,
          .                   }
        402 ( 0.00%)      }
          .           
          .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      5,953 ( 0.00%)          match tm {
          .                       UintTy::Usize => self.types.usize,
          .                       UintTy::U8 => self.types.u8,
          .                       UintTy::U16 => self.types.u16,
          .                       UintTy::U32 => self.types.u32,
          .                       UintTy::U64 => self.types.u64,
          .                       UintTy::U128 => self.types.u128,
          .                   }
      5,953 ( 0.00%)      }
          .           
          .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
          .                   match tm {
          .                       FloatTy::F32 => self.types.f32,
          .                       FloatTy::F64 => self.types.f64,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn mk_static_str(self) -> Ty<'tcx> {
         46 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
          .               }
          .           
          .               #[inline]
          .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
          .                   // Take a copy of substs so that we own the vectors inside.
          .                   self.mk_ty(Adt(def, substs))
          .               }
          .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
          .               }
          .           
          .               #[inline]
          .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
          .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
          .               }
          .           
          .               #[inline]
        759 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
          .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
        792 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
          .                   self.mk_ty(Slice(ty))
          .               }
          .           
          .               #[inline]
          .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
        688 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      1,139 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
          .               }
          .           
          .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
      2,860 ( 0.00%)          iter.intern_with(|ts| {
      1,346 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      4,398 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
      2,574 ( 0.00%)          })
          .               }
          .           
          .               #[inline]
          .               pub fn mk_unit(self) -> Ty<'tcx> {
        599 ( 0.00%)          self.types.unit
          .               }
          .           
          .               #[inline]
          .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
          .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
          .               }
          .           
          .               #[inline]
          .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
          .                   self.mk_ty(FnDef(def_id, substs))
          .               }
          .           
          .               #[inline]
          .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
        646 ( 0.00%)          self.mk_ty(FnPtr(fty))
          .               }
          .           
          .               #[inline]
          .               pub fn mk_dynamic(
          .                   self,
          .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
          .                   reg: ty::Region<'tcx>,
          .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
          .                   self.mk_ty_infer(TyVar(v))
          .               }
          .           
          .               #[inline]
          .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      2,860 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
          .               }
          .           
          .               #[inline]
          .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
          .                   self.mk_ty_infer(IntVar(v))
          .               }
          .           
          .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
          .                   self.mk_ty(Infer(it))
          .               }
          .           
          .               #[inline]
          .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
        189 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
          .               }
          .           
          .               #[inline]
          .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
          .                   self.mk_ty(Param(ParamTy { index, name }))
          .               }
          .           
          .               #[inline]
          .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      1,120 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
          .               }
          .           
      1,953 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
      1,333 ( 0.00%)          match param.kind {
          .                       GenericParamDefKind::Lifetime => {
        186 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
          .                       }
        176 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
          .                       GenericParamDefKind::Const { .. } => {
        640 ( 0.00%)                  self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
          .                       }
          .                   }
      1,953 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
          .                   self.mk_ty(Opaque(def_id, substs))
          .               }
          .           
        172 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
        172 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
        344 ( 0.00%)      }
          .           
          .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
          .                   self.mk_place_elem(place, PlaceElem::Deref)
          .               }
          .           
          .               pub fn mk_place_downcast(
          .                   self,
          .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
          .           
          .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
          .                   self.mk_place_elem(place, PlaceElem::Index(index))
          .               }
          .           
          .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
          .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
          .               /// flight.
      1,548 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
          .                   let mut projection = place.projection.to_vec();
          .                   projection.push(elem);
          .           
          .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
      1,720 ( 0.00%)      }
          .           
        210 ( 0.00%)      pub fn intern_poly_existential_predicates(
          .                   self,
          .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
          .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         30 ( 0.00%)          assert!(!eps.is_empty());
          .                   assert!(
          .                       eps.array_windows()
         70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
          .                               != Ordering::Greater)
          .                   );
        120 ( 0.00%)          self._intern_poly_existential_predicates(eps)
        240 ( 0.00%)      }
          .           
          .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
          .                   // FIXME consider asking the input slice to be sorted to avoid
          .                   // re-interning permutations, in which case that would be asserted
          .                   // here.
     25,402 ( 0.00%)          if preds.is_empty() {
          .                       // The macro-generated method below asserts we don't intern an empty slice.
          .                       List::empty()
          .                   } else {
      1,498 ( 0.00%)              self._intern_predicates(preds)
          .                   }
     47,808 ( 0.00%)      }
          .           
          .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
     18,833 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
         42 ( 0.00%)      }
          .           
          .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  3,462,059 ( 0.03%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  6,334,688 ( 0.06%)      }
          .           
          .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
          .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
          .               }
          .           
          .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
      7,563 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
      5,762 ( 0.00%)      }
          .           
          .               pub fn intern_canonical_var_infos(
          .                   self,
          .                   ts: &[CanonicalVarInfo<'tcx>],
          .               ) -> CanonicalVarInfos<'tcx> {
      8,488 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
        108 ( 0.00%)      }
          .           
          .               pub fn intern_bound_variable_kinds(
          .                   self,
          .                   ts: &[ty::BoundVariableKind],
          .               ) -> &'tcx List<ty::BoundVariableKind> {
     13,982 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
     24,628 ( 0.00%)      }
          .           
          .               pub fn mk_fn_sig<I>(
          .                   self,
          .                   inputs: I,
          .                   output: I::Item,
          .                   c_variadic: bool,
          .                   unsafety: hir::Unsafety,
          .                   abi: abi::Abi,
          .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
          .               where
          .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
          .               {
          .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
      1,532 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
        317 ( 0.00%)              c_variadic,
        443 ( 0.00%)              unsafety,
        382 ( 0.00%)              abi,
         70 ( 0.00%)          })
          .               }
          .           
          .               pub fn mk_poly_existential_predicates<
          .                   I: InternAs<
          .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
          .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
          .                   >,
          .               >(
          .                   self,
          .                   iter: I,
          .               ) -> I::Output {
        101 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
          .               }
          .           
          .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
          .                   self,
          .                   iter: I,
          .               ) -> I::Output {
          2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
          .               }
          .           
          .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
      1,846 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
          .               }
          .           
          .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
          .                   self,
          .                   iter: I,
          .               ) -> I::Output {
    264,147 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
          .               }
          .           
          .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
          .                   self,
          .                   iter: I,
          .               ) -> I::Output {
     45,376 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
          .               }
          .           
     16,306 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
          .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
     32,612 ( 0.00%)      }
          .           
          .               pub fn mk_bound_variable_kinds<
          .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
          .               >(
          .                   self,
          .                   iter: I,
          .               ) -> I::Output {
     73,667 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
          .               }
          .           
          .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
          .               /// It stops at `bound` and just returns it if reached.
     99,568 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
     99,568 ( 0.00%)          let hir = self.hir();
          .                   loop {
    149,508 ( 0.00%)              if id == bound {
          .                           return bound;
          .                       }
          .           
    178,060 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
          .                           return id;
          .                       }
          .                       let next = hir.get_parent_node(id);
    106,836 ( 0.00%)              if next == id {
          .                           bug!("lint traversal reached the root of the crate");
          .                       }
          .                       id = next;
          .                   }
    142,240 ( 0.00%)      }
          .           
     10,328 ( 0.00%)      pub fn lint_level_at_node(
          .                   self,
          .                   lint: &'static Lint,
          .                   mut id: hir::HirId,
          .               ) -> (Level, LintLevelSource) {
          .                   let sets = self.lint_levels(());
          .                   loop {
     44,831 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
          .                           return pair;
          .                       }
      2,973 ( 0.00%)              let next = self.hir().get_parent_node(id);
      8,919 ( 0.00%)              if next == id {
          .                           bug!("lint traversal reached the root of the crate");
          .                       }
          .                       id = next;
          .                   }
     10,328 ( 0.00%)      }
          .           
         14 ( 0.00%)      pub fn struct_span_lint_hir(
          .                   self,
          .                   lint: &'static Lint,
          .                   hir_id: HirId,
          .                   span: impl Into<MultiSpan>,
          .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
          .               ) {
        912 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
        229 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
          8 ( 0.00%)      }
          .           
          .               pub fn struct_lint_node(
          .                   self,
          .                   lint: &'static Lint,
          .                   id: HirId,
          .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
          .               ) {
          .                   let (level, src) = self.lint_level_at_node(lint, id);
          .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
          .               }
          .           
      1,939 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
        554 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
          .                   let candidates = map.get(&id.local_id)?;
        554 ( 0.00%)          Some(&*candidates)
      2,216 ( 0.00%)      }
          .           
      4,529 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
          .                   debug!(?id, "named_region");
          .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
      5,823 ( 0.00%)      }
          .           
         90 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
          .                   self.is_late_bound_map(id.owner)
          5 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
         80 ( 0.00%)      }
          .           
     46,347 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
          .                   self.object_lifetime_defaults_map(id.owner)
     59,589 ( 0.00%)      }
          .           
     12,456 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
          .                   self.mk_bound_variable_kinds(
          .                       self.late_bound_vars_map(id.owner)
          .                           .and_then(|map| map.get(&id.local_id).cloned())
          .                           .unwrap_or_else(|| {
          .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
          .                           })
          .                           .iter(),
          .                   )
     12,456 ( 0.00%)      }
          .           
          .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
          .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
          .               }
          .           
          .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
          .               /// feature gates
         80 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
          8 ( 0.00%)          if self.is_const_fn_raw(def_id) {
          .                       match self.lookup_const_stability(def_id) {
          .                           Some(stability) if stability.level.is_unstable() => {
          .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
          .                               // corresponding feature gate.
          .                               self.features()
          .                                   .declared_lib_features
          .                                   .iter()
          .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
          .                           // functions without const stability are either stable user written
          .                           // const fn or the user is using feature gates and we thus don't
          .                           // care what they do
          .                           _ => true,
          .                       }
          .                   } else {
          .                       false
          .                   }
         72 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TyCtxtAt<'tcx> {
          .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
          .               #[track_caller]
          .               pub fn ty_error(self) -> Ty<'tcx> {
          .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
          .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
          .           }
          .           
          .           impl<I, T, R, E> InternAs<[T], R> for I
          .           where
          .               E: InternIteratorElement<T, R>,
          .               I: Iterator<Item = E>,
          .           {
          .               type Output = E::Output;
    116,504 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
          .               where
          .                   F: FnOnce(&[T]) -> R,
          .               {
108,122,699 ( 1.08%)          E::intern_with(self, f)
    104,985 ( 0.00%)      }
          .           }
          .           
          .           pub trait InternIteratorElement<T, R>: Sized {
          .               type Output;
          .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
          .           }
          .           
          .           impl<T, R> InternIteratorElement<T, R> for T {
          .               type Output = R;
    168,864 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
          .                   mut iter: I,
          .                   f: F,
          .               ) -> Self::Output {
          .                   // This code is hot enough that it's worth specializing for the most
          .                   // common length lists, to avoid the overhead of `SmallVec` creation.
          .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
          .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
          .                   // `assert`.
    200,363 ( 0.00%)          match iter.size_hint() {
          .                       (0, Some(0)) => {
          .                           assert!(iter.next().is_none());
          .                           f(&[])
          .                       }
          .                       (1, Some(1)) => {
          .                           let t0 = iter.next().unwrap();
          2 ( 0.00%)                  assert!(iter.next().is_none());
     28,611 ( 0.00%)                  f(&[t0])
          .                       }
          .                       (2, Some(2)) => {
          .                           let t0 = iter.next().unwrap();
          .                           let t1 = iter.next().unwrap();
        133 ( 0.00%)                  assert!(iter.next().is_none());
     20,741 ( 0.00%)                  f(&[t0, t1])
          .                       }
        736 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
          .                   }
    130,495 ( 0.00%)      }
          .           }
          .           
          .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
          .           where
          .               T: Clone + 'a,
          .           {
          .               type Output = R;
      7,011 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
          .                   // This code isn't hot.
         28 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
      5,634 ( 0.00%)      }
          .           }
          .           
          .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
          .               type Output = Result<R, E>;
 42,293,066 ( 0.42%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
          .                   mut iter: I,
          .                   f: F,
          .               ) -> Self::Output {
          .                   // This code is hot enough that it's worth specializing for the most
          .                   // common length lists, to avoid the overhead of `SmallVec` creation.
          .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
          .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
          .                   // `assert`, unless a failure happens first, in which case the result
          .                   // will be an error anyway.
 21,221,164 ( 0.21%)          Ok(match iter.size_hint() {
          .                       (0, Some(0)) => {
          .                           assert!(iter.next().is_none());
          .                           f(&[])
          .                       }
          .                       (1, Some(1)) => {
         42 ( 0.00%)                  let t0 = iter.next().unwrap()?;
          .                           assert!(iter.next().is_none());
     22,333 ( 0.00%)                  f(&[t0])
          .                       }
          .                       (2, Some(2)) => {
        192 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        192 ( 0.00%)                  let t1 = iter.next().unwrap()?;
        288 ( 0.00%)                  assert!(iter.next().is_none());
     11,154 ( 0.00%)                  f(&[t0, t1])
          .                       }
      1,005 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
          .                   })
 47,580,076 ( 0.47%)      }
          .           }
          .           
          .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
          .           // won't work for us.
          .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
    443,085 ( 0.00%)      t as *const () == u as *const ()
          .           }
          .           
          .           pub fn provide(providers: &mut ty::query::Providers) {
          2 ( 0.00%)      providers.in_scope_traits_map =
          .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
          3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
          2 ( 0.00%)      providers.module_reexports =
          .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
          2 ( 0.00%)      providers.crate_name = |tcx, id| {
          1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
          1 ( 0.00%)          tcx.crate_name
          .               };
          2 ( 0.00%)      providers.maybe_unused_trait_import =
          .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
          2 ( 0.00%)      providers.maybe_unused_extern_crates =
          .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
          2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
          .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
          .               };
          .           
         11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
          2 ( 0.00%)      providers.lookup_const_stability =
          .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
          2 ( 0.00%)      providers.lookup_deprecation_entry =
     27,136 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
          2 ( 0.00%)      providers.extern_mod_stmt_cnum =
          .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
          3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
          3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
          2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
          .                   assert_eq!(cnum, LOCAL_CRATE);
          .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
          .               };
          2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
          .                   assert_eq!(cnum, LOCAL_CRATE);
          .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
          .               };
          2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
          1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
          .                   // We want to check if the panic handler was defined in this crate
          3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
          .               };
          .           }

 37,812,480 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                  

-- line 44 ----------------------------------------
         .           /// Convert from a specific kind of undo to the more general UndoLog
         .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
         .               fn from(l: Instantiate) -> Self {
         .                   UndoLog::Values(sv::UndoLog::Other(l))
         .               }
         .           }
         .           
         .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
    31,002 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
   130,226 ( 0.00%)          match undo {
    24,784 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
    12,884 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
    24,336 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
         .                   }
    62,004 ( 0.00%)      }
         .           }
         .           
         .           pub struct TypeVariableStorage<'tcx> {
         .               values: sv::SnapshotVecStorage<Delegate>,
         .           
         .               /// Two variables are unified in `eq_relations` when we have a
         .               /// constraint `?X == ?Y`. This table also stores, for each key,
         .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
         .               DynReturnFn,
         .               LatticeVariable,
         .           }
         .           
         .           pub(crate) struct TypeVariableData {
         .               origin: TypeVariableOrigin,
         .           }
         .           
   172,376 ( 0.00%)  #[derive(Copy, Clone, Debug)]
         .           pub enum TypeVariableValue<'tcx> {
         .               Known { value: Ty<'tcx> },
         .               Unknown { universe: ty::UniverseIndex },
         .           }
         .           
         .           impl<'tcx> TypeVariableValue<'tcx> {
         .               /// If this value is known, returns the type it is known to be.
         .               /// Otherwise, `None`.
         .               pub fn known(&self) -> Option<Ty<'tcx>> {
    98,614 ( 0.00%)          match *self {
         .                       TypeVariableValue::Unknown { .. } => None,
         .                       TypeVariableValue::Known { value } => Some(value),
         .                   }
         .               }
         .           
         .               pub fn is_unknown(&self) -> bool {
         .                   match *self {
         .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
         .           }
         .           
         .           pub(crate) struct Instantiate;
         .           
         .           pub(crate) struct Delegate;
         .           
         .           impl<'tcx> TypeVariableStorage<'tcx> {
         .               pub fn new() -> TypeVariableStorage<'tcx> {
 1,679,547 ( 0.02%)          TypeVariableStorage {
         .                       values: sv::SnapshotVecStorage::new(),
         .                       eq_relations: ut::UnificationTableStorage::new(),
         .                       sub_relations: ut::UnificationTableStorage::new(),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
         .               /// Returns the origin that was given when `vid` was created.
         .               ///
         .               /// Note that this function does not return care whether
         .               /// `vid` has been unified with something else or not.
         .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
       156 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
         .               }
         .           
         .               /// Records that `a == b`, depending on `dir`.
         .               ///
         .               /// Precondition: neither `a` nor `b` are known.
         .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
         .                   debug_assert!(self.probe(a).is_unknown());
         .                   debug_assert!(self.probe(b).is_unknown());
     1,274 ( 0.00%)          self.eq_relations().union(a, b);
     1,092 ( 0.00%)          self.sub_relations().union(a, b);
         .               }
         .           
         .               /// Records that `a <: b`, depending on `dir`.
         .               ///
         .               /// Precondition: neither `a` nor `b` are known.
         .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
         .                   debug_assert!(self.probe(a).is_unknown());
         .                   debug_assert!(self.probe(b).is_unknown());
     1,027 ( 0.00%)          self.sub_relations().union(a, b);
         .               }
         .           
         .               /// Instantiates `vid` with the type `ty`.
         .               ///
         .               /// Precondition: `vid` must not have been previously instantiated.
    48,940 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
         .                   let vid = self.root_var(vid);
         .                   debug_assert!(self.probe(vid).is_unknown());
         .                   debug_assert!(
         .                       self.eq_relations().probe_value(vid).is_unknown(),
         .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
         .                       vid,
         .                       ty,
         .                       self.eq_relations().probe_value(vid)
         .                   );
    68,516 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
         .           
         .                   // Hack: we only need this so that `types_escaping_snapshot`
         .                   // can see what has been unified; see the Delegate impl for
         .                   // more details.
         .                   self.undo_log.push(Instantiate);
    48,940 ( 0.00%)      }
         .           
         .               /// Creates a new type variable.
         .               ///
         .               /// - `diverging`: indicates if this is a "diverging" type
         .               ///   variable, e.g.,  one created as the type of a `return`
         .               ///   expression. The code in this module doesn't care if a
         .               ///   variable is diverging, but the main Rust type-checker will
         .               ///   sometimes "unify" such variables with the `!` or `()` types.
         .               /// - `origin`: indicates *why* the type variable was created.
         .               ///   The code in this module doesn't care, but it can be useful
         .               ///   for improving error messages.
    57,714 ( 0.00%)      pub fn new_var(
         .                   &mut self,
         .                   universe: ty::UniverseIndex,
         .                   origin: TypeVariableOrigin,
         .               ) -> ty::TyVid {
    86,571 ( 0.00%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
         .           
    48,095 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
     9,619 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
         .           
    86,571 ( 0.00%)          let index = self.values().push(TypeVariableData { origin });
    38,476 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
         .           
         .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
         .           
         .                   eq_key.vid
    67,333 ( 0.00%)      }
         .           
         .               /// Returns the number of type variables created thus far.
         .               pub fn num_vars(&self) -> usize {
       367 ( 0.00%)          self.storage.values.len()
         .               }
         .           
         .               /// Returns the "root" variable of `vid` in the `eq_relations`
         .               /// equivalence table. All type variables that have been equated
         .               /// will yield the same root variable (per the union-find
         .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
         .               /// b` (transitively).
         .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    34,527 ( 0.00%)          self.eq_relations().find(vid).vid
         .               }
         .           
         .               /// Returns the "root" variable of `vid` in the `sub_relations`
         .               /// equivalence table. All type variables that have been are
         .               /// related via equality or subtyping will yield the same root
         .               /// variable (per the union-find algorithm), so `sub_root_var(a)
         .               /// == sub_root_var(b)` implies that:
         .               ///
         .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
        43 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    30,021 ( 0.00%)          self.sub_relations().find(vid)
        86 ( 0.00%)      }
         .           
         .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
         .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
         .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
         .                   self.sub_root_var(a) == self.sub_root_var(b)
         .               }
         .           
         .               /// Retrieves the type to which `vid` has been instantiated, if
         .               /// any.
   380,395 ( 0.00%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
         .                   self.inlined_probe(vid)
   380,395 ( 0.00%)      }
         .           
         .               /// An always-inlined variant of `probe`, for very hot call sites.
         .               #[inline(always)]
         .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
   183,984 ( 0.00%)          self.eq_relations().inlined_probe_value(vid)
         .               }
         .           
         .               /// If `t` is a type-inference variable, and it has been
         .               /// instantiated, then return the with which it was
         .               /// instantiated. Otherwise, returns `t`.
         .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
10,646,514 ( 0.11%)          match *t.kind() {
    74,136 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
         .                           TypeVariableValue::Unknown { .. } => t,
         .                           TypeVariableValue::Known { value } => value,
         .                       },
         .                       _ => t,
         .                   }
         .               }
         .           
         .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
         .               fn values(
         .                   &mut self,
         .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
         .                   self.storage.values.with_log(self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
   304,274 ( 0.00%)          self.storage.eq_relations.with_log(self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
    20,324 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
         .               }
         .           
         .               /// Returns a range of the type variables created during the snapshot.
     1,835 ( 0.00%)      pub fn vars_since_snapshot(
         .                   &mut self,
         .                   value_count: usize,
         .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
         .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
     2,202 ( 0.00%)          (
         .                       range.start..range.end,
         .                       (range.start.as_usize()..range.end.as_usize())
         .                           .map(|index| self.storage.values.get(index).origin)
         .                           .collect(),
         .                   )
     2,202 ( 0.00%)      }
         .           
         .               /// Returns indices of all variables that are not yet
         .               /// instantiated.
         .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
         .                   (0..self.storage.values.len())
         .                       .filter_map(|i| {
         .                           let vid = ty::TyVid::from_usize(i);
    18,856 ( 0.00%)                  match self.probe(vid) {
         .                               TypeVariableValue::Unknown { .. } => Some(vid),
         .                               TypeVariableValue::Known { .. } => None,
         .                           }
         .                       })
         .                       .collect()
         .               }
         .           }
         .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
         .           /// These structs (a newtyped TyVid) are used as the unification key
         .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
         .           /// with them.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
         .           pub(crate) struct TyVidEqKey<'tcx> {
         .               vid: ty::TyVid,
         .           
         .               // in the table, we map each ty-vid to one of these:
   148,125 ( 0.00%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
         .           }
         .           
         .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
         .               #[inline] // make this function eligible for inlining - it is quite hot.
         .               fn from(vid: ty::TyVid) -> Self {
         .                   TyVidEqKey { vid, phantom: PhantomData }
         .               }
         .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
         .                   "TyVidEqKey"
         .               }
         .           }
         .           
         .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
         .               type Error = ut::NoError;
         .           
         .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
    40,062 ( 0.00%)          match (value1, value2) {
         .                       // We never equate two type variables, both of which
         .                       // have known types.  Instead, we recursively equate
         .                       // those types.
         .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
         .                           bug!("equating two type variables, both of which have known types")
         .                       }
         .           
         .                       // If one side is known, prefer that one.
         .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
         .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
         .           
         .                       // If both sides are *unknown*, it hardly matters, does it?
         .                       (
       182 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
       182 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
         .                       ) => {
         .                           // If we unify two unbound variables, ?T and ?U, then whatever
         .                           // value they wind up taking (which must be the same value) must
         .                           // be nameable by both universes. Therefore, the resulting
         .                           // universe is the minimum of the two universes, because that is
         .                           // the one which contains the fewest names in scope.
         .                           let universe = cmp::min(universe1, universe2);
       728 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
         .                       }
         .                   }
         .               }
         .           }

    26,569 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .           
          .           /// An entity in the Rust type system, which can be one of
          .           /// several kinds (types, lifetimes, and consts).
          .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
          .           /// with the lowest 2 bits being reserved for a tag to
          .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
          .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
          .           pub struct GenericArg<'tcx> {
    186,230 ( 0.00%)      ptr: NonZeroUsize,
  3,589,159 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
          .           }
          .           
          .           const TAG_MASK: usize = 0b11;
          .           const TYPE_TAG: usize = 0b00;
          .           const REGION_TAG: usize = 0b01;
          .           const CONST_TAG: usize = 0b10;
          .           
     65,917 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
          .           pub enum GenericArgKind<'tcx> {
          .               Lifetime(ty::Region<'tcx>),
          .               Type(Ty<'tcx>),
          .               Const(&'tcx ty::Const<'tcx>),
          .           }
          .           
          .           impl<'tcx> GenericArgKind<'tcx> {
     16,384 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
     16,384 ( 0.00%)          let (tag, ptr) = match self {
          .                       GenericArgKind::Lifetime(lt) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
          .                           (REGION_TAG, lt as *const _ as usize)
          .                       }
          .                       GenericArgKind::Type(ty) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
          .                       }
          .                       GenericArgKind::Const(ct) => {
          .                           // Ensure we can use the tag bits.
          .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
          .                           (CONST_TAG, ct as *const _ as usize)
          .                       }
          .                   };
          .           
     75,017 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
     16,384 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
          .                       GenericArgKind::Type(ty) => ty.fmt(f),
          .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
          .           
          .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
          .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
          .                   Some(self.cmp(&other))
          .               }
          .           }
          .           
          .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
     34,198 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Lifetime(r).pack()
     34,198 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  3,346,561 ( 0.03%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Type(ty).pack()
  3,346,561 ( 0.03%)      }
          .           }
          .           
          .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
     11,045 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
          .                   GenericArgKind::Const(c).pack()
     11,045 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> GenericArg<'tcx> {
          .               #[inline]
          .               pub fn unpack(self) -> GenericArgKind<'tcx> {
          .                   let ptr = self.ptr.get();
          .                   unsafe {
131,833,332 ( 1.31%)              match ptr & TAG_MASK {
     25,570 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 31,288,563 ( 0.31%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
     20,234 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
          .                           _ => intrinsics::unreachable(),
          .                       }
          .                   }
          .               }
          .           
          .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
          .               /// This is true in cases where `Substs` is used in places where the kinds are known
          .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
          .               pub fn expect_ty(self) -> Ty<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Type(ty) => ty,
          .                       _ => bug!("expected a type, but found another kind"),
          .                   }
      7,782 ( 0.00%)      }
          .           
          .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
          .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
          .                   match self.unpack() {
          .                       GenericArgKind::Const(c) => c,
          .                       _ => bug!("expected a const, but found another kind"),
          .                   }
          .               }
-- line 140 ----------------------------------------
-- line 155 ----------------------------------------
          .           impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {
          .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),
          .                       GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),
         21 ( 0.00%)              GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),
          .                   }
          .               }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
          .                   match self.unpack() {
          .                       GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),
          .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
          .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
          .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      4,604 ( 0.00%)          self.unpack().encode(e)
          .               }
          .           }
          .           
          .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
     81,920 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
     81,920 ( 0.00%)          GenericArgKind::decode(d).pack()
          .               }
          .           }
          .           
          .           /// A substitution mapping generic parameters to new values.
          .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
          .           
          .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
          .           
          .           impl<'a, 'tcx> InternalSubsts<'tcx> {
          .               /// Interpret these substitutions as the substitutions of a closure type.
          .               /// Closure substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and closure kind;
          .               /// see `ty::ClosureSubsts` struct for more comments.
        189 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
          .                   ClosureSubsts { substs: self }
        189 ( 0.00%)      }
          .           
          .               /// Interpret these substitutions as the substitutions of a generator type.
          .               /// Generator substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the signature and generator kind;
          .               /// see `ty::GeneratorSubsts` struct for more comments.
          .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
          .                   GeneratorSubsts { substs: self }
          .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
          .               /// Inline const substitutions have a particular structure controlled by the
          .               /// compiler that encodes information like the inferred type;
          .               /// see `ty::InlineConstSubsts` struct for more comments.
          .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
          .                   InlineConstSubsts { substs: self }
          .               }
          .           
          .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
     99,140 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
        760 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
     89,226 ( 0.00%)      }
          .           
          .               /// Creates an `InternalSubsts` for generic parameter definitions,
          .               /// by calling closures to obtain each kind.
          .               /// The closures get to observe the `InternalSubsts` as they're
          .               /// being built, which can be used to correctly
          .               /// substitute defaults of generic parameters.
 28,533,230 ( 0.28%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   let defs = tcx.generics_of(def_id);
          .                   let count = defs.count();
          .                   let mut substs = SmallVec::with_capacity(count);
  9,541,503 ( 0.10%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  6,340,902 ( 0.06%)          tcx.intern_substs(&substs)
 28,534,059 ( 0.28%)      }
          .           
          .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
          .               where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   Self::for_item(tcx, def_id, |param, substs| {
          .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
          .                   })
          .               }
          .           
 31,878,280 ( 0.32%)      pub fn fill_item<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   tcx: TyCtxt<'tcx>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
 12,753,043 ( 0.13%)          if let Some(def_id) = defs.parent {
          .                       let parent_defs = tcx.generics_of(def_id);
     31,408 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
          .                   }
          .                   Self::fill_single(substs, defs, mk_kind)
 25,501,416 ( 0.25%)      }
          .           
      8,248 ( 0.00%)      pub fn fill_single<F>(
          .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
          .                   defs: &ty::Generics,
          .                   mk_kind: &mut F,
          .               ) where
          .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
          .               {
          .                   substs.reserve(defs.params.len());
          .                   for param in &defs.params {
          .                       let kind = mk_kind(param, substs);
     48,427 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
          .                       substs.push(kind);
          .                   }
      8,248 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
          .                   self.iter()
          .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
          .               }
          .           
          .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
          .                   self.iter().filter_map(|k| match k.unpack() {
          .                       GenericArgKind::Lifetime(_) => None,
          .                       generic => Some(generic),
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
    160,704 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
          .                       ty
          .                   } else {
          .                       bug!("expected type for param #{} in {:?}", i, self);
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
          .               /// impl<U> X<U> for U { fn f<V>() {} }
          .               /// ```
          .               ///
          .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
          .               /// * If `source_ancestor` is the def_id of the trait.
          .               /// * If `target_substs` is `[U]`, the substs for the impl.
          .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
          .               ///   are needed for it to match the trait.
     26,747 ( 0.00%)      pub fn rebase_onto(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   source_ancestor: DefId,
          .                   target_substs: SubstsRef<'tcx>,
          .               ) -> SubstsRef<'tcx> {
          .                   let defs = tcx.generics_of(source_ancestor);
      7,642 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
     30,568 ( 0.00%)      }
          .           
          .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
          .                   tcx.mk_substs(self.iter().take(generics.count()))
          .               }
          .           }
          .           
          .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
     71,960 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
          .                   self,
          .                   folder: &mut F,
          .               ) -> Result<Self, F::Error> {
          .                   // This code is hot enough that it's worth specializing for the most
          .                   // common length lists, to avoid the overhead of `SmallVec` creation.
          .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
          .                   // typically hit in 90--99.99% of cases. When folding doesn't change
          .                   // the substs, it's faster to reuse the existing substs rather than
          .                   // calling `intern_substs`.
 13,238,382 ( 0.13%)          match self.len() {
          .                       1 => {
  3,251,541 ( 0.03%)                  let param0 = self[0].try_fold_with(folder)?;
  6,690,359 ( 0.07%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
          .                       }
          .                       2 => {
     66,288 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
    153,906 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
    155,368 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
          .                               Ok(self)
          .                           } else {
    163,406 ( 0.00%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
          .                           }
          .                       }
          .                       0 => Ok(self),
          .                       _ => {
          .                           let params: SmallVec<[_; 8]> =
      1,358 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
        154 ( 0.00%)                  if params[..] == self[..] {
          .                               Ok(self)
          .                           } else {
        546 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
          .                           }
          .                       }
          .                   }
     89,692 ( 0.00%)      }
          .           
          .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    143,574 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // Public trait `Subst`
          .           //
          .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
          .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
          .           
          .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
          .               fn subst_spanned(
          .                   self,
          .                   tcx: TyCtxt<'tcx>,
          .                   substs: &[GenericArg<'tcx>],
          .                   span: Option<Span>,
          .               ) -> T {
 28,651,096 ( 0.29%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
          .                   self.fold_with(&mut folder)
          .               }
          .           }
          .           
          .           ///////////////////////////////////////////////////////////////////////////
          .           // The actual substitution engine itself is a type folder.
          .           
          .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
          .               span: Option<Span>,
          .           
          .               /// Number of region binders we have passed through while doing the substitution
          .               binders_passed: u32,
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     50,414 ( 0.00%)          self.tcx
          .               }
          .           
          .               fn fold_binder<T: TypeFoldable<'tcx>>(
          .                   &mut self,
          .                   t: ty::Binder<'tcx, T>,
          .               ) -> ty::Binder<'tcx, T> {
     58,020 ( 0.00%)          self.binders_passed += 1;
     13,762 ( 0.00%)          let t = t.super_fold_with(self);
     58,020 ( 0.00%)          self.binders_passed -= 1;
          .                   t
          .               }
          .           
     56,832 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
          .                   // Note: This routine only handles regions that are bound on
          .                   // type declarations and other outer declarations, not those
          .                   // bound in *fn types*. Region substitution of the bound
          .                   // regions that appear in a function signature is done using
          .                   // the specialized routine `ty::replace_late_regions()`.
     18,944 ( 0.00%)          match *r {
     15,612 ( 0.00%)              ty::ReEarlyBound(data) => {
     15,612 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
          .                           match rk {
      7,806 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
          .                               _ => {
          .                                   let span = self.span.unwrap_or(DUMMY_SP);
          .                                   let msg = format!(
          .                                       "Region parameter out of range \
          .                                        when substituting in region {} (index={})",
          .                                       data.name, data.index
          .                                   );
          .                                   span_bug!(span, "{}", msg);
          .                               }
          .                           }
          .                       }
          .                       _ => r,
          .                   }
     66,304 ( 0.00%)      }
          .           
 12,832,923 ( 0.13%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  4,277,641 ( 0.04%)          if !t.needs_subst() {
          .                       return t;
          .                   }
          .           
    101,718 ( 0.00%)          match *t.kind() {
    137,080 ( 0.00%)              ty::Param(p) => self.ty_for_param(p, t),
    140,658 ( 0.00%)              _ => t.super_fold_with(self),
          .                   }
 21,270,990 ( 0.21%)      }
          .           
     39,781 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     30,671 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
          .                       self.const_for_param(p, c)
          .                   } else {
     16,398 ( 0.00%)              c.super_fold_with(self)
          .                   }
     30,888 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
          .                   c.super_fold_with(self)
          .               }
          .           }
          .           
          .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
          .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
          .                   // Look up the type in the substitutions. It really should be in there.
     54,832 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ty = match opt_ty {
          .                       Some(GenericArgKind::Type(ty)) => ty,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
          .               }
          .           
          .               fn const_for_param(
          .                   &self,
          .                   p: ParamConst,
          .                   source_ct: &'tcx ty::Const<'tcx>,
          .               ) -> &'tcx ty::Const<'tcx> {
          .                   // Look up the const in the substitutions. It really should be in there.
      7,722 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
          .                   let ct = match opt_ct {
          .                       Some(GenericArgKind::Const(ct)) => ct,
          .                       Some(kind) => {
          .                           let span = self.span.unwrap_or(DUMMY_SP);
          .                           span_bug!(
          .                               span,
          .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
          .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
          .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
          .                   debug!(
          .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
          .                       val,
          .                       self.binders_passed,
          .                       val.has_escaping_bound_vars()
          .                   );
          .           
    110,779 ( 0.00%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
          .                       return val;
          .                   }
          .           
          .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
          .                   debug!("shift_vars: shifted result = {:?}", result);
          .           
          .                   result
          .               }
          .           
          .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
     17,087 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
          .                       return region;
          .                   }
          .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
          .               }
          .           }
          .           
          .           /// Stores the user-given substs to reach some fully qualified path
          .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        935 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSubsts<'tcx> {
          .               /// The substitutions for the item as given by the user.
          .               pub substs: SubstsRef<'tcx>,
          .           
          .               /// The self type, in the case of a `<T>::Item` path (when applied
          .               /// to an inherent impl). See `UserSelfTy` below.
        306 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
          .           }
          .           
          .           /// Specifies the user-given self type. In the case of a path that
          .           /// refers to a member in an inherent impl, this self type is
          .           /// sometimes needed to constrain the type parameters on the impl. For
          .           /// example, in this code:
          .           ///
          .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
          .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
          .           /// the impl (with the substs from `UserSubsts`) and apply those to
          .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
          .           /// the self type here, which contains `?A` to be `&'static u32`
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
          .           #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct UserSelfTy<'tcx> {
          .               pub impl_def_id: DefId,
         90 ( 0.00%)      pub self_ty: Ty<'tcx>,
          .           }

 46,951,461 ( 0.47%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
6,158,339 ( 0.06%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    2,092 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
   21,097 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
2,336,772 ( 0.02%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
  242,041 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
   62,298 ( 0.00%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
    1,765 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    1,963 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    2,515 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
      564 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
1,119,698 ( 0.01%)      pub fn new() -> Self {
        .                   Self::default()
1,119,698 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
   44,135 ( 0.00%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
   17,836 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
    4,368 ( 0.00%)              AddConstraint(ref constraint) => {
   17,472 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    1,636 ( 0.00%)          &self.data
    1,636 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
   24,344 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
5,287,945 ( 0.05%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  126,582 ( 0.00%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
   21,097 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
   63,291 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
   21,097 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
  168,776 ( 0.00%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
    8,586 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
   78,801 ( 0.00%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
   44,016 ( 0.00%)              undo_log.push(AddConstraint(constraint));
   29,344 ( 0.00%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
      196 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
       82 ( 0.00%)              if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
       16 ( 0.00%)          let index = self.data.verifys.len();
      240 ( 0.00%)          self.data.verifys.push(verify);
       16 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
        .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
   41,350 ( 0.00%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
   20,675 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
   19,552 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
   21,996 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
   12,221 ( 0.00%)              match (sub, sup) {
    6,678 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
   11,130 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
      868 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
   17,108 ( 0.00%)      }
        .           
        .               pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
        .               }
        .           
  105,344 ( 0.00%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
   77,388 ( 0.00%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
    6,027 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
   42,189 ( 0.00%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
    2,016 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
      656 ( 0.00%)              (&ReVar(sub_id), _) => {
    4,592 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
    3,507 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
      490 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
    1,274 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
      490 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 623 ----------------------------------------
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
        .               }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
   10,150 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 683 ----------------------------------------
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
        .               }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
   11,808 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    1,728 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
    1,835 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    2,202 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
    2,202 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
   19,548 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    6,516 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
    1,326 ( 0.00%)              .map(|&elt| match elt {
      212 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
   26,064 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
   52,155 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
       66 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      301 ( 0.00%)          match *self {
       17 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
       32 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
       66 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
    2,784 ( 0.00%)      pub fn must_hold(&self) -> bool {
    2,804 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
        .                       VerifyBound::IsEmpty => false,
      124 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
        .                   }
    3,248 ( 0.00%)      }
        .           
    1,155 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
    1,842 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
        .                       VerifyBound::IsEmpty => false,
        .                       VerifyBound::OutlivedBy(_) => false,
        6 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
      114 ( 0.00%)              VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
        .                   }
    1,617 ( 0.00%)      }
        .           
      684 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
      912 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
        .                       self
      468 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
      456 ( 0.00%)              vb
        .                   } else {
        .                       VerifyBound::AnyBound(vec![self, vb])
        .                   }
      912 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    9,888 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
   44,135 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
   35,308 ( 0.00%)          self.rollback_undo_entry(undo)
   44,135 ( 0.00%)      }
        .           }

  314,990 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .                   // Rather than checking the subtype relationship between `a` and `b`
         .                   // as-is, we need to do some extra work here in order to make sure
         .                   // that function subtyping works correctly with respect to regions
         .                   //
         .                   // Note: this is a subtle algorithm.  For a full explanation, please see
         .                   // the rustc dev guide:
         .                   // <https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html>
         .           
     1,330 ( 0.00%)          let span = self.trace.cause.span;
         .           
     8,645 ( 0.00%)          self.infcx.commit_if_ok(|_| {
         .                       // First, we instantiate each bound region in the supertype with a
         .                       // fresh placeholder region.
     5,077 ( 0.00%)              let b_prime = self.infcx.replace_bound_vars_with_placeholders(b);
         .           
         .                       // Next, we instantiate each bound region in the subtype
         .                       // with a fresh region variable. These region variables --
         .                       // but no other pre-existing region variables -- can name
         .                       // the placeholders.
       966 ( 0.00%)              let (a_prime, _) =
     2,662 ( 0.00%)                  self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);
         .           
         .                       debug!("a_prime={:?}", a_prime);
         .                       debug!("b_prime={:?}", b_prime);
         .           
         .                       // Compare types now that bound regions have been replaced.
     4,471 ( 0.00%)              let result = self.sub(a_is_expected).relate(a_prime, b_prime)?;
         .           
         .                       debug!("higher_ranked_sub: OK result={:?}", result);
         .           
         .                       // We related `a_prime` and `b_prime`, which just had any bound vars
         .                       // replaced with placeholders or infer vars, respectively. Relating
         .                       // them should not introduce new bound vars.
         .                       Ok(ty::Binder::dummy(result))
         .                   })
-- line 56 ----------------------------------------
-- line 63 ----------------------------------------
         .               /// placeholder region. This is the first step of checking subtyping
         .               /// when higher-ranked things are involved.
         .               ///
         .               /// **Important:** You have to be careful to not leak these placeholders,
         .               /// for more information about how placeholders and HRTBs work, see
         .               /// the [rustc dev guide].
         .               ///
         .               /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
14,838,663 ( 0.15%)      pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   // Figure out what the next universe will be, but don't actually create
         .                   // it until after we've done the substitution (in particular there may
         .                   // be no bound variables). This is a performance optimization, since the
         .                   // leak check for example can be skipped if no new universes are created
         .                   // (i.e., if there are no placeholders).
10,604,076 ( 0.11%)          let next_universe = self.universe().next_universe();
         .           
         .                   let fld_r = |br: ty::BoundRegion| {
     1,482 ( 0.00%)              self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {
       228 ( 0.00%)                  universe: next_universe,
         .                           name: br.kind,
         .                       }))
         .                   };
         .           
         .                   let fld_t = |bound_ty: ty::BoundTy| {
         .                       self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {
         .                           universe: next_universe,
         .                           name: bound_ty.var,
-- line 92 ----------------------------------------
-- line 98 ----------------------------------------
         .                           val: ty::ConstKind::Placeholder(ty::PlaceholderConst {
         .                               universe: next_universe,
         .                               name: ty::BoundConst { var: bound_var, ty },
         .                           }),
         .                           ty,
         .                       })
         .                   };
         .           
50,898,138 ( 0.51%)          let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t, fld_c);
         .           
         .                   // If there were higher-ranked regions to replace, then actually create
         .                   // the next universe (this avoids needlessly creating universes).
 2,121,117 ( 0.02%)          if !map.is_empty() {
        38 ( 0.00%)              let n_u = self.create_next_universe();
        38 ( 0.00%)              assert_eq!(n_u, next_universe);
         .                   }
         .           
         .                   debug!(
         .                       "replace_bound_vars_with_placeholders(\
         .                        next_universe={:?}, \
         .                        result={:?}, \
         .                        map={:?})",
         .                       next_universe, result, map,
         .                   );
         .           
         .                   result
12,719,751 ( 0.13%)      }
         .           
         .               /// See `infer::region_constraints::RegionConstraintCollector::leak_check`.
    39,096 ( 0.00%)      pub fn leak_check(
         .                   &self,
         .                   overly_polymorphic: bool,
         .                   snapshot: &CombinedSnapshot<'_, 'tcx>,
         .               ) -> RelateResult<'tcx, ()> {
         .                   // If the user gave `-Zno-leak-check`, or we have been
         .                   // configured to skip the leak check, then skip the leak check
         .                   // completely. The leak check is deprecated. Any legitimate
         .                   // subtyping errors that it would have caught will now be
         .                   // caught later on, during region checking. However, we
         .                   // continue to use it for a transition period.
    32,580 ( 0.00%)          if self.tcx.sess.opts.debugging_opts.no_leak_check || self.skip_leak_check.get() {
         3 ( 0.00%)              return Ok(());
         .                   }
         .           
    39,078 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().leak_check(
         .                       self.tcx,
         .                       overly_polymorphic,
         .                       self.universe(),
         .                       snapshot,
         .                   )
    32,580 ( 0.00%)      }
         .           }

 2,127,291 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/higher_ranked/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                  

-- line 46 ----------------------------------------
         .           ///
         .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
         .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
         .               /// provided default definition delegates.  Implementors **should not** override
         .               /// this provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_super_fold_with` instead).
 1,134,740 ( 0.01%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
    16,936 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
 1,144,133 ( 0.01%)      }
         .               /// Consumers may find this more convenient to use with infallible folders than
         .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
         .               /// default definition delegates.  Implementors **should not** override this
         .               /// provided default definition, to ensure that the two methods are coherent
         .               /// (provide a definition of `try_fold_with` instead).
    65,423 ( 0.00%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
    66,876 ( 0.00%)          self.try_fold_with(folder).into_ok()
    59,763 ( 0.00%)      }
         .           
         .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error>;
         .           
23,583,421 ( 0.24%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
   394,406 ( 0.00%)          self.try_super_fold_with(folder)
26,797,879 ( 0.27%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
   370,438 ( 0.00%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 3,350,000 ( 0.03%)          self.super_visit_with(visitor)
   292,858 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` has any late-bound regions that are either
         .               /// bound by `binder` or bound by some binder outside of `binder`.
         .               /// If `binder` is `ty::INNERMOST`, this indicates whether
         .               /// there are any late-bound regions that appear free.
         .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
 5,410,822 ( 0.05%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
         .               }
         .           
         .               /// Returns `true` if this `self` has any regions that escape `binder` (and
         .               /// hence are not bound by it).
         .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
        21 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
         .               }
         .           
   442,005 ( 0.00%)      fn has_escaping_bound_vars(&self) -> bool {
    50,304 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
   442,870 ( 0.00%)      }
         .           
    28,850 ( 0.00%)      #[instrument(level = "trace")]
         .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
    52,650 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
         .               }
         .               fn has_projections(&self) -> bool {
     1,064 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
         .               }
         .               fn has_opaque_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
         .               }
     5,136 ( 0.00%)      fn references_error(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_ERROR)
     5,136 ( 0.00%)      }
         .               fn has_param_types_or_consts(&self) -> bool {
        90 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
         .               }
         .               fn has_infer_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
         .               }
         .               fn has_infer_types(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
         .               }
         .               fn has_infer_types_or_consts(&self) -> bool {
   104,358 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
         .               }
    24,401 ( 0.00%)      fn needs_infer(&self) -> bool {
    44,486 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    24,550 ( 0.00%)      }
         .               fn has_placeholders(&self) -> bool {
         .                   self.has_type_flags(
         .                       TypeFlags::HAS_RE_PLACEHOLDER
         .                           | TypeFlags::HAS_TY_PLACEHOLDER
         .                           | TypeFlags::HAS_CT_PLACEHOLDER,
         .                   )
         .               }
         .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 146 ----------------------------------------
         .               /// True if there are any un-erased free regions.
         .               fn has_erasable_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
         .               }
         .           
         .               /// Indicates whether this value references only 'global'
         .               /// generic parameters that are the same regardless of what fn we are
         .               /// in. This is used for caching.
        10 ( 0.00%)      fn is_global(&self) -> bool {
    36,108 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        12 ( 0.00%)      }
         .           
         .               /// True if there are any late-bound regions
         .               fn has_late_bound_regions(&self) -> bool {
         .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
         .               }
         .           
         .               /// Indicates whether this value still has parameters/placeholders/inference variables
         .               /// which could be replaced later, in a way that would change the results of `impl`
-- line 164 ----------------------------------------
-- line 194 ----------------------------------------
         .           
         .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
         .           
         .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
   168,566 ( 0.00%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    65,876 ( 0.00%)          t.super_fold_with(self)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   r.super_fold_with(self)
         .               }
         .           
         .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
     9,947 ( 0.00%)          c.super_fold_with(self)
         .               }
         .           
         .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
    22,118 ( 0.00%)          p.super_fold_with(self)
         .               }
         .           
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
         .               where
         .                   Self: TypeFolder<'tcx, Error = !>,
         .               {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
         .           /// A blanket implementation of this trait (that defers to the relevant
         .           /// method of [`TypeFolder`]) is provided for all infallible folders in
         .           /// order to ensure the two APIs are coherent.
         .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
         .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
     1,698 ( 0.00%)          t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
         .                   t.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
         .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
         .                   c.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
       847 ( 0.00%)          p.try_super_fold_with(self)
         .               }
         .           
         .               fn try_fold_mir_const(
         .                   &mut self,
         .                   c: mir::ConstantKind<'tcx>,
         .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
         .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
         .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
         .           }
         .           
         .           // Blanket implementation of fallible trait for infallible folders
         .           // delegates to infallible methods to prevent incoherence
         .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
         .           where
         .               F: TypeFolder<'tcx, Error = !>,
         .           {
    56,512 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   142,719 ( 0.00%)          Ok(self.fold_binder(t))
    83,853 ( 0.00%)      }
         .           
    10,885 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
 9,120,894 ( 0.09%)          Ok(self.fold_ty(t))
     8,468 ( 0.00%)      }
         .           
     4,672 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
    75,040 ( 0.00%)          Ok(self.fold_region(r))
     4,672 ( 0.00%)      }
         .           
     3,885 ( 0.00%)      fn try_fold_const(
         .                   &mut self,
         .                   c: &'tcx ty::Const<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    16,736 ( 0.00%)          Ok(self.fold_const(c))
     2,880 ( 0.00%)      }
         .           
         .               fn try_fold_predicate(
         .                   &mut self,
         .                   p: ty::Predicate<'tcx>,
         .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
         .                   Ok(self.fold_predicate(p))
         .               }
         .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
         .           
         .           pub trait TypeVisitor<'tcx>: Sized {
         .               type BreakTy = !;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
        12 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
     1,440 ( 0.00%)          t.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   r.super_visit_with(self)
         .               }
         .           
        56 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   c.super_visit_with(self)
        49 ( 0.00%)      }
         .           
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   uv.super_visit_with(self)
         .               }
         .           
         .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   p.super_visit_with(self)
         .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
         .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
         .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
         .           {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
       883 ( 0.00%)          let t = ty.super_fold_with(self);
         .                   (self.ty_op)(t)
         .               }
         .           
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   let r = r.super_fold_with(self);
         .                   (self.lt_op)(r)
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        68 ( 0.00%)          let ct = ct.super_fold_with(self);
         .                   (self.ct_op)(ct)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Region folder
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
         .               }
         .           
         .               /// Invoke `callback` on every region appearing free in `value`.
       660 ( 0.00%)      pub fn for_each_free_region(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>),
         .               ) {
         .                   self.any_free_region_meets(value, |r| {
     7,526 ( 0.00%)              callback(r);
         .                       false
         .                   });
       565 ( 0.00%)      }
         .           
         .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
         .               pub fn all_free_regions_meet(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
     1,213 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
         .               }
         .           
         .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
         .               pub fn any_free_region_meets(
         .                   self,
         .                   value: &impl TypeFoldable<'tcx>,
         .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
         .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
         .                       F: FnMut(ty::Region<'tcx>) -> bool,
         .                   {
         .                       type BreakTy = ();
         .           
         .                       fn visit_binder<T: TypeFoldable<'tcx>>(
         .                           &mut self,
         .                           t: &Binder<'tcx, T>,
         .                       ) -> ControlFlow<Self::BreakTy> {
       296 ( 0.00%)                  self.outer_index.shift_in(1);
        16 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
        12 ( 0.00%)                  self.outer_index.shift_out(1);
         .                           result
         .                       }
         .           
     6,775 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    10,749 ( 0.00%)                  match *r {
        96 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
         .                                   ControlFlow::CONTINUE
         .                               }
         .                               _ => {
         .                                   if (self.callback)(r) {
         .                                       ControlFlow::BREAK
         .                                   } else {
         .                                       ControlFlow::CONTINUE
         .                                   }
         .                               }
         .                           }
     9,485 ( 0.00%)              }
         .           
         .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                           // We're only interested in types involving regions
    15,938 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    11,678 ( 0.00%)                      ty.super_visit_with(self)
         .                           } else {
         .                               ControlFlow::CONTINUE
         .                           }
         .                       }
         .                   }
         .           
    40,100 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
         .               }
         .           }
         .           
         .           /// Folds over the substructure of a type, visiting its component
         .           /// types and all regions that occur *free* within it.
         .           ///
         .           /// That is, `Ty` can contain function or method types that bind
         .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
         .           
         .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
         .               #[inline]
         .               pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   skipped_regions: &'a mut bool,
         .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
         .               ) -> RegionFolder<'a, 'tcx> {
   182,784 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    28,621 ( 0.00%)          self.tcx
    28,621 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
       859 ( 0.00%)          self.current_index.shift_in(1);
        52 ( 0.00%)          let t = t.super_fold_with(self);
       798 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
       560 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
     6,382 ( 0.00%)          match *r {
       560 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
         .                           debug!(?self.current_index, "skipped bound region");
       560 ( 0.00%)                  *self.skipped_regions = true;
         .                           r
         .                       }
         .                       _ => {
         .                           debug!(?self.current_index, "folding free region");
    17,466 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Bound vars replacer
         .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
         .               current_index: ty::DebruijnIndex,
         .           
         .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .           }
         .           
         .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
    18,708 ( 0.00%)      fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
         .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
         .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
         .               ) -> Self {
    65,595 ( 0.00%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
     9,354 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     9,040 ( 0.00%)          self.tcx
     2,545 ( 0.00%)      }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
    12,172 ( 0.00%)          self.current_index.shift_in(1);
     1,830 ( 0.00%)          let t = t.super_fold_with(self);
     9,300 ( 0.00%)          self.current_index.shift_out(1);
         .                   t
         .               }
         .           
    33,360 ( 0.00%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
    23,274 ( 0.00%)          match *t.kind() {
       887 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
       185 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
         .                               let ty = fld_t(bound_ty);
       185 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
         .                           }
         .                       }
    22,904 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
    32,944 ( 0.00%)                  return t.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   t
    17,136 ( 0.00%)      }
         .           
    33,388 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    25,112 ( 0.00%)          match *r {
    25,106 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    12,548 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
         .                               let region = fld_r(br);
    25,174 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
         .                                   // If the callback returns a late-bound region,
         .                                   // that region should always use the INNERMOST
         .                                   // debruijn index. Then we adjust it to the
         .                                   // correct depth.
        39 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
       377 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
         .                               } else {
         .                                   region
         .                               };
         .                           }
         .                       }
         .                       _ => {}
         .                   }
         .                   r
    33,388 ( 0.00%)      }
         .           
         7 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       153 ( 0.00%)          match *ct {
         8 ( 0.00%)              ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        12 ( 0.00%)                  if debruijn == self.current_index =>
         .                       {
         4 ( 0.00%)                  if let Some(fld_c) = self.fld_c.as_mut() {
         .                               let ct = fld_c(bound_const, ty);
         4 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
         .                           }
         .                       }
        47 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
         .                           return ct.super_fold_with(self);
         .                       }
         .                       _ => {}
         .                   }
         .                   ct
         7 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
         .               /// Replaces all regions bound by the given `Binder` with the
         .               /// results returned by the closure; the closure is expected to
         .               /// return a free region (relative to this binder), and hence the
         .               /// binder is removed in the return type. The closure is invoked
         .               /// once for each unique `BoundRegionKind`; multiple references to the
-- line 687 ----------------------------------------
-- line 697 ----------------------------------------
         .                   mut fld_r: F,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
         .                   let mut real_fld_r =
    75,133 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
     1,324 ( 0.00%)          let value = value.skip_binder();
    35,366 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
    65,460 ( 0.00%)              value
         .                   } else {
     5,212 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
         .                       value.fold_with(&mut replacer)
         .                   };
   111,703 ( 0.00%)          (value, region_map)
         .               }
         .           
         .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
         .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
         .               /// closure replaces escaping bound consts.
    71,781 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: T,
         .                   mut fld_r: F,
         .                   mut fld_t: G,
         .                   mut fld_c: H,
         .               ) -> T
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
    20,705 ( 0.00%)          if !value.has_escaping_bound_vars() {
 8,501,683 ( 0.08%)              value
         .                   } else {
         .                       let mut replacer =
   104,604 ( 0.00%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
     3,245 ( 0.00%)              value.fold_with(&mut replacer)
         .                   }
    49,304 ( 0.00%)      }
         .           
         .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
         .               /// closure replaces bound regions while the `fld_t` closure replaces bound
         .               /// types.
29,715,527 ( 0.30%)      pub fn replace_bound_vars<T, F, G, H>(
         .                   self,
         .                   value: Binder<'tcx, T>,
         .                   mut fld_r: F,
         .                   fld_t: G,
         .                   fld_c: H,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
         .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
         .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let mut region_map = BTreeMap::new();
    29,334 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
29,721,351 ( 0.30%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
29,714,682 ( 0.30%)          (value, region_map)
19,111,118 ( 0.19%)      }
         .           
         .               /// Replaces any late-bound regions bound in `value` with
         .               /// free variants attached to `all_outlive_scope`.
     6,985 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
         .                   self,
         .                   all_outlive_scope: DefId,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_late_bound_regions(value, |br| {
     8,281 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     1,274 ( 0.00%)                  scope: all_outlive_scope,
         .                           bound_region: br.kind,
         .                       }))
         .                   })
         .                   .0
     3,810 ( 0.00%)      }
         .           
         .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.replace_escaping_bound_vars(
    47,145 ( 0.00%)              value,
         .                       |r| {
         .                           self.mk_region(ty::ReLateBound(
         .                               ty::INNERMOST,
         .                               ty::BoundRegion {
         .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
         .                                   kind: r.kind,
         .                               },
         .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
         .               fn collect_late_bound_regions<T>(
         .                   self,
         .                   value: &Binder<'tcx, T>,
         .                   just_constraint: bool,
         .               ) -> FxHashSet<ty::BoundRegionKind>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
       848 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
         .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
         .                   assert!(result.is_continue()); // should never have stopped early
     1,696 ( 0.00%)          collector.regions
         .               }
         .           
         .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
         .               /// method lookup and a few other places where precise region relationships are not required.
         .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
       444 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
         .               }
         .           
         .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
         .               /// assigned starting at 0 and increasing monotonically in the order traversed
         .               /// by the fold operation.
         .               ///
         .               /// The chief purpose of this function is to canonicalize regions so that two
         .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
         .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
         .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
    76,529 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    54,685 ( 0.00%)          let mut counter = 0;
         9 ( 0.00%)          let inner = self
         .                       .replace_late_bound_regions(sig, |_| {
         .                           let br = ty::BoundRegion {
        78 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
         .                               kind: ty::BrAnon(counter),
         .                           };
       312 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
       195 ( 0.00%)                  counter += 1;
         .                           r
         .                       })
         .                       .0;
    10,937 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    32,811 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
         .                   );
    65,460 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
    65,619 ( 0.00%)      }
         .           }
         .           
         .           pub struct ValidateBoundVars<'tcx> {
         .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
         .               binder_index: ty::DebruijnIndex,
         .               // We may encounter the same variable at different levels of binding, so
         .               // this can't just be `Ty`
         .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               current_index: ty::DebruijnIndex,
         .               amount: u32,
         .           }
         .           
         .           impl<'tcx> Shifter<'tcx> {
         .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
         .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
       378 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
         .                               self.tcx.mk_region(shifted)
         .                           }
         .                       }
         .                       _ => r,
         .                   }
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
       378 ( 0.00%)          match *ty.kind() {
         .                       ty::Bound(debruijn, bound_ty) => {
         .                           if self.amount == 0 || debruijn < self.current_index {
         .                               ty
         .                           } else {
         .                               let debruijn = debruijn.shifted_in(self.amount);
         .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
         .                           }
         .                       }
         .           
       685 ( 0.00%)              _ => ty.super_fold_with(self),
         .                   }
         .               }
         .           
         .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
         8 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
         .                       if self.amount == 0 || debruijn < self.current_index {
         .                           ct
         .                       } else {
         .                           let debruijn = debruijn.shifted_in(self.amount);
         .                           self.tcx.mk_const(ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty })
         .                       }
         .                   } else {
        12 ( 0.00%)              ct.super_fold_with(self)
         .                   }
         .               }
         .           }
         .           
         .           pub fn shift_region<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               region: ty::Region<'tcx>,
         .               amount: u32,
         .           ) -> ty::Region<'tcx> {
         .               match region {
         .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
       494 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
         .                   }
         .                   _ => region,
         .               }
         .           }
         .           
         .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               debug!("shift_vars(value={:?}, amount={})", value, amount);
         .           
       530 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
         .           struct FoundEscapingVars;
         .           
         .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
         .           /// bound region or a bound type.
         .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
         .               type BreakTy = FoundEscapingVars;
         .           
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
     5,439 ( 0.00%)          self.outer_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
     7,350 ( 0.00%)          self.outer_index.shift_out(1);
         .                   result
         .               }
         .           
         .               #[inline]
         .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // If the outer-exclusive-binder is *strictly greater* than
         .                   // `outer_index`, that means that `t` contains some content
         .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
         .                   // visited.
         .                   if r.bound_at_or_above_binder(self.outer_index) {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
       122 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // we don't have a `visit_infer_const` callback, so we have to
         .                   // hook in here to catch this case (annoying...), but
         .                   // otherwise we do want to remember to visit the rest of the
         .                   // const, as it has types/regions embedded in a lot of other
         .                   // places.
     1,654 ( 0.00%)          match ct.val {
         3 ( 0.00%)              ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
         .                           ControlFlow::Break(FoundEscapingVars)
         .                       }
        24 ( 0.00%)              _ => ct.super_visit_with(self),
         .                   }
       120 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
         .                       ControlFlow::Break(FoundEscapingVars)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
         .               #[instrument(level = "trace")]
         .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
         .                   debug!(
         .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
         .                       t,
         .                       t.flags(),
         .                       self.flags
         .                   );
10,741,192 ( 0.11%)          if t.flags().intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(skip(self), level = "trace")]
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     2,094 ( 0.00%)          let flags = r.type_flags();
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    11,196 ( 0.00%)          let flags = FlagComputation::for_const(c);
         .                   trace!(r.flags=?flags);
       824 ( 0.00%)          if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
         .               #[inline]
         .               #[instrument(level = "trace")]
         .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
     8,547 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
         .                   trace!(r.flags=?flags);
         .                   if flags.intersects(self.flags) {
         .                       ControlFlow::Break(FoundFlags)
         .                   } else {
         .                       ControlFlow::CONTINUE
         .                   }
         .               }
         .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
         .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
         .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
         .               /// types may mean that `'a` and `'b` don't appear in the results,
         .               /// so they are not considered *constrained*.
         .               just_constrained: bool,
         .           }
         .           
         .           impl LateBoundRegionsCollector {
       424 ( 0.00%)      fn new(just_constrained: bool) -> Self {
     2,968 ( 0.00%)          LateBoundRegionsCollector {
         .                       current_index: ty::INNERMOST,
         .                       regions: Default::default(),
         .                       just_constrained,
         .                   }
       424 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
         .               fn visit_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: &Binder<'tcx, T>,
         .               ) -> ControlFlow<Self::BreakTy> {
         .                   self.current_index.shift_in(1);
         .                   let result = t.super_visit_with(self);
         .                   self.current_index.shift_out(1);
         .                   result
         .               }
         .           
     1,563 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs to a projection, as they may not appear
         .                   // in the normalized form
     1,692 ( 0.00%)          if self.just_constrained {
     2,236 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
     1,897 ( 0.00%)          t.super_visit_with(self)
     1,280 ( 0.00%)      }
         .           
         .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
         .                   // if we are only looking for "constrained" region, we have to
         .                   // ignore the inputs of an unevaluated const, as they may not appear
         .                   // in the normalized form
       558 ( 0.00%)          if self.just_constrained {
       304 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
         .                           return ControlFlow::CONTINUE;
         .                       }
         .                   }
         .           
         .                   c.super_visit_with(self)
         .               }
         .           
         .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     1,089 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
       215 ( 0.00%)              if debruijn == self.current_index {
         .                           self.regions.insert(br.kind);
         .                       }
         .                   }
         .                   ControlFlow::CONTINUE
         .               }
         .           }

 6,464,885 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
7,589,087,121 (75.65%)  events annotated

