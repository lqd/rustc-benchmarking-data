--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name snafu --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="rust_1_46" --cfg feature="std" -C metadata=c30e039a61f03c47 -C extra-filename=-c30e039a61f03c47 --out-dir /usr/home/liquid/tmp/.tmp2LGK4L/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp2LGK4L/target/debug/deps --extern doc_comment=/usr/home/liquid/tmp/.tmp2LGK4L/target/debug/deps/libdoc_comment-bc37d49ef57f9266.rmeta --extern snafu_derive=/usr/home/liquid/tmp/.tmp2LGK4L/target/debug/deps/libsnafu_derive-e691c1dbc7fbd6ef.so -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-snafu-0.7.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
289,433,562 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
18,188,694 ( 6.28%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
12,534,072 ( 4.33%)  ./elf/dl-lookup.c:do_lookup_x
 7,833,575 ( 2.71%)  ./malloc/malloc.c:_int_free
 7,634,274 ( 2.64%)  ./malloc/malloc.c:_int_malloc
 4,954,384 ( 1.71%)  ./malloc/malloc.c:malloc
 4,944,274 ( 1.71%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,645,576 ( 1.61%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 3,243,861 ( 1.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
 2,851,369 ( 0.99%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,533,377 ( 0.88%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,382,550 ( 0.82%)  ./elf/do-rel.h:_dl_relocate_object
 2,380,430 ( 0.82%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,267,745 ( 0.78%)  ./malloc/malloc.c:free
 1,793,904 ( 0.62%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
 1,362,217 ( 0.47%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,349,110 ( 0.47%)  ./elf/dl-lookup.c:check_match
 1,287,781 ( 0.44%)  ./malloc/malloc.c:malloc_consolidate
 1,100,388 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,096,949 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,092,749 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,089,589 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,079,208 ( 0.37%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   922,610 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_parse::lexer::StringReader>::validate_literal_escape::{closure#0}>
   913,012 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
   905,142 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   872,871 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   811,200 ( 0.28%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   804,841 ( 0.28%)  ./malloc/malloc.c:realloc
   799,862 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   758,625 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   727,258 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   703,047 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::string::String::push
   662,368 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   642,836 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   631,158 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
   626,157 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   626,095 ( 0.22%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   611,794 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   607,176 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   599,790 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   560,929 ( 0.19%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   558,545 ( 0.19%)  ./malloc/malloc.c:_int_realloc
   542,952 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
   531,151 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
   515,053 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   514,520 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::validate_literal_escape::{closure#0}
   509,058 ( 0.18%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
   505,511 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   504,942 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   489,510 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   473,931 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   473,790 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   468,702 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
   460,204 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   459,321 ( 0.16%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   447,672 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   416,700 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:rustc_lexer::unescape::scan_escape
   412,875 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
   404,111 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   403,804 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   402,849 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
   401,625 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   400,819 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   398,239 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   397,594 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   396,140 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   390,585 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
   390,291 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   385,993 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   379,180 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   377,997 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   377,758 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   374,190 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   372,996 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   372,400 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   371,601 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs:<core::iter::adapters::map::Map<I,F> as core::iter::traits::iterator::Iterator>::try_fold
   367,727 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   361,431 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   361,431 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   361,431 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   361,128 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
   359,717 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   356,854 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   349,139 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
   346,180 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   344,789 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   342,125 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   329,348 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   328,342 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   328,067 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   327,705 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   326,016 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:<alloc::string::String as core::fmt::Write>::write_char
   320,386 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs:<snap::decompress::Decoder>::decompress
   314,205 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
   301,180 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
163,965 ( 0.06%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    975 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 43,949 ( 0.02%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
540,639 ( 0.19%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 86,946 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 86,946 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 97,244 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 22,382 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,664 ( 0.00%)          self.hash = hash.hash;
    975 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     21 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    306 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
208,984 ( 0.07%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   57,420 ( 0.02%)                  if value < 0x80 {
        .                               unsafe {
   27,500 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   37,244 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   26,816 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   12,452 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,062,632 ( 0.37%)              let byte = slice[*position];
  531,316 ( 0.18%)              *position += 1;
  531,316 ( 0.18%)              if (byte & 0x80) == 0 {
       10 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,120 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  377,745 ( 0.13%)                  let byte = slice[*position];
  244,978 ( 0.08%)                  *position += 1;
  251,830 ( 0.09%)                  if (byte & 0x80) == 0 {
  195,833 ( 0.07%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  412,645 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
    1,016 ( 0.00%)      pub const fn new() -> Self {
  342,548 ( 0.12%)          Vec { buf: RawVec::NEW, len: 0 }
    1,039 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
       64 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       16 ( 0.00%)          Self::with_capacity_in(capacity, Global)
       32 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       18 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
        3 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
        6 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    1,547 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  122,658 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
      442 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
      208 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    8,711 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
       32 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,396 ( 0.00%)      pub fn capacity(&self) -> usize {
   38,510 ( 0.01%)          self.buf.capacity()
      698 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,170 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   27,452 ( 0.01%)          self.buf.reserve(self.len, additional);
      468 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    2,289 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      879 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    5,326 ( 0.00%)          if self.capacity() > self.len {
      923 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
      586 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      586 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
    1,758 ( 0.00%)              self.shrink_to_fit();
    3,590 ( 0.00%)              let me = ManuallyDrop::new(self);
    2,930 ( 0.00%)              let buf = ptr::read(&me.buf);
    1,465 ( 0.00%)              let len = me.len();
    3,809 ( 0.00%)              buf.into_box(len).assume_init()
      293 ( 0.00%)          }
      586 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   57,492 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   39,216 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   22,953 ( 0.01%)              self.len = len;
      555 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   68,990 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
    1,740 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  289,527 ( 0.10%)          let ptr = self.buf.ptr();
        .                   unsafe {
      870 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
    1,740 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   12,444 ( 0.00%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  749,467 ( 0.26%)          let ptr = self.buf.ptr();
        .                   unsafe {
    6,222 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   12,444 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
      662 ( 0.00%)      pub fn allocator(&self) -> &A {
      662 ( 0.00%)          self.buf.allocator()
      662 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,209 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   67,519 ( 0.02%)          self.len = new_len;
    1,418 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        2 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      588 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       95 ( 0.00%)          let len = self.len();
      218 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      424 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      603 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      424 ( 0.00%)              self.set_len(len + 1);
        .                   }
      504 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
      234 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      195 ( 0.00%)          let len = self.len();
      615 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,810 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      410 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      195 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
      390 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,914 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      992 ( 0.00%)          self.retain_mut(|elem| f(elem));
   15,576 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,184 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    1,870 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,245 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   24,291 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    6,687 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      140 ( 0.00%)                      g.processed_len += 1;
       64 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       22 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      201 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      134 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    7,105 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    1,015 ( 0.00%)          let len = self.len();
    2,340 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      707 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      216 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      465 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    8,120 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   24,050 ( 0.01%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,852,278 ( 0.64%)          if self.len == self.buf.capacity() {
   65,536 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   69,050 ( 0.02%)              let end = self.as_mut_ptr().add(self.len);
   29,054 ( 0.01%)              ptr::write(end, value);
2,204,030 ( 0.76%)              self.len += 1;
        .                   }
    8,698 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   83,772 ( 0.03%)          if self.len == 0 {
       16 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   61,729 ( 0.02%)                  self.len -= 1;
    9,246 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      315 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      270 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
    2,130 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
      213 ( 0.00%)          let count = unsafe { (*other).len() };
      213 ( 0.00%)          self.reserve(count);
    6,126 ( 0.00%)          let len = self.len();
      639 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   35,252 ( 0.01%)          self.len += count;
      426 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
      987 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,823 ( 0.00%)          let len = self.len();
    2,115 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
      423 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
    2,274 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    3,366 ( 0.00%)              Drain {
        .                           tail_start: end,
      723 ( 0.00%)                  tail_len: len - end,
      705 ( 0.00%)                  iter: range_slice.iter(),
      564 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
      282 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  101,527 ( 0.04%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    3,526 ( 0.00%)      pub fn len(&self) -> usize {
    1,763 ( 0.00%)          self.len
    3,526 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      844 ( 0.00%)      pub fn is_empty(&self) -> bool {
   40,136 ( 0.01%)          self.len() == 0
    1,688 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      282 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      222 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,747 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      369 ( 0.00%)          let len = self.len();
      738 ( 0.00%)          if new_len > len {
    3,372 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,378 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
      348 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
      464 ( 0.00%)              slice::from_raw_parts_mut(
      816 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
      639 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
      232 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       40 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        4 ( 0.00%)          let len = self.len();
        .           
       12 ( 0.00%)          if new_len > len {
      762 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    2,123 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
      772 ( 0.00%)          self.spec_extend(other.iter())
      386 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       44 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   13,199 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      860 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   26,577 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   10,161 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    1,016 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,310 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   19,305 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    4,080 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
    2,610 ( 0.00%)      fn deref(&self) -> &[T] {
  420,007 ( 0.15%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    1,740 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
       12 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
   83,574 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        8 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   26,760 ( 0.01%)      fn clone(&self) -> Self {
      580 ( 0.00%)          let alloc = self.allocator().clone();
    1,046 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   33,316 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   11,340 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2538 ----------------------------------------
        .                   IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
       58 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  162,099 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
       28 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
        .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
      645 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   64,424 ( 0.02%)              let mut me = ManuallyDrop::new(self);
      430 ( 0.00%)              let alloc = ptr::read(me.allocator());
    1,033 ( 0.00%)              let begin = me.as_mut_ptr();
      645 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
    1,033 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
      215 ( 0.00%)              let cap = me.buf.capacity();
   19,104 ( 0.01%)              IntoIter {
      818 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
      215 ( 0.00%)                  end,
        .                       }
        .                   }
      430 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
       14 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
       60 ( 0.00%)          self.iter()
       14 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,120 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      306 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   84,124 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      268 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
      236 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
        .               // they have no further optimizations to apply
        .               #[cfg(not(no_global_oom_handling))]
       44 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   29,299 ( 0.01%)          while let Some(element) = iterator.next() {
    2,688 ( 0.00%)              let len = self.len();
   29,708 ( 0.01%)              if len == self.capacity() {
      292 ( 0.00%)                  let (lower, _) = iterator.size_hint();
       10 ( 0.00%)                  self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
    1,136 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   25,621 ( 0.01%)                  self.set_len(len + 1);
        .                       }
       50 ( 0.00%)          }
      322 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      132 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      280 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      352 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2796 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Eq, A: Allocator> Eq for Vec<T, A> {}
        .           
        .           /// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Ord, A: Allocator> Ord for Vec<T, A> {
        .               #[inline]
       24 ( 0.00%)      fn cmp(&self, other: &Self) -> Ordering {
       48 ( 0.00%)          Ord::cmp(&**self, &**other)
       12 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   88,241 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   47,500 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  101,894 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
       57 ( 0.00%)      fn default() -> Vec<T> {
       19 ( 0.00%)          Vec::new()
       38 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: fmt::Debug, A: Allocator> fmt::Debug for Vec<T, A> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
-- line 2836 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  220,803 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    3,463 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   93,728 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       42 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      469 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   80,061 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      981 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       21 ( 0.00%)          self.position += bytes;
       21 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      565 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,713 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   21,673 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  109,435 ( 0.04%)          read_leb128!(self, read_u32_leb128)
   43,346 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.19%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.03%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.06%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,825,243 ( 0.63%)          let value = self.data[self.position];
  343,906 ( 0.12%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  152,937 ( 0.05%)      fn read_usize(&mut self) -> usize {
  152,945 ( 0.05%)          read_leb128!(self, read_usize_leb128)
  305,874 ( 0.11%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    5,569 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   28,859 ( 0.01%)          let len = self.read_usize();
  141,696 ( 0.05%)          let sentinel = self.data[self.position + len];
   35,430 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   88,575 ( 0.03%)          self.position += len + 1;
   33,447 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       85 ( 0.00%)          let start = self.position;
      457 ( 0.00%)          self.position += s.len();
       85 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  394,251 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
378,496 ( 0.13%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
283,872 ( 0.10%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  7,340 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 11,010 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 96,447 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 34,288 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 68,576 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
 63,254 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
 82,140 ( 0.03%)      if enough_space {
  3,658 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
 54,760 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
 54,760 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
109,520 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
 54,760 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 31,648 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs
--------------------------------------------------------------------------------
Ir              

-- line 22 ----------------------------------------
     .           /// compressor.
     .           ///
     .           /// # Errors
     .           ///
     .           /// This function returns an error in the following circumstances:
     .           ///
     .           /// * An invalid Snappy header was seen.
     .           /// * The total space required for decompression exceeds `2^32 - 1`.
     4 ( 0.00%)  pub fn decompress_len(input: &[u8]) -> Result<usize> {
     2 ( 0.00%)      if input.is_empty() {
     .                   return Ok(0);
     .               }
     4 ( 0.00%)      Ok(Header::read(input)?.decompress_len)
     6 ( 0.00%)  }
     .           
     .           /// Decoder is a raw decoder for decompressing bytes in the Snappy format.
     .           ///
     .           /// This decoder does not use the Snappy frame format and simply decompresses
     .           /// the given bytes as if it were returned from `Encoder`.
     .           ///
     .           /// Unless you explicitly need the low-level control, you should use
     .           /// [`read::FrameDecoder`](../read/struct.FrameDecoder.html)
-- line 43 ----------------------------------------
-- line 47 ----------------------------------------
     .               // Place holder for potential future fields.
     .               _dummy: (),
     .           }
     .           
     .           impl Decoder {
     .               /// Return a new decoder that can be used for decompressing bytes.
     .               pub fn new() -> Decoder {
     .                   Decoder { _dummy: () }
     2 ( 0.00%)      }
     .           
     .               /// Decompresses all bytes in `input` into `output`.
     .               ///
     .               /// `input` must be a sequence of bytes returned by a conforming Snappy
     .               /// compressor.
     .               ///
     .               /// The size of `output` must be large enough to hold all decompressed
     .               /// bytes from the `input`. The size required can be queried with the
-- line 63 ----------------------------------------
-- line 67 ----------------------------------------
     .               ///
     .               /// # Errors
     .               ///
     .               /// This method returns an error in the following circumstances:
     .               ///
     .               /// * Invalid compressed Snappy data was seen.
     .               /// * The total space required for decompression exceeds `2^32 - 1`.
     .               /// * `output` has length less than `decompress_len(input)`.
    16 ( 0.00%)      pub fn decompress(
     .                   &mut self,
     .                   input: &[u8],
     .                   output: &mut [u8],
     .               ) -> Result<usize> {
     2 ( 0.00%)          if input.is_empty() {
     .                       return Err(Error::Empty);
     .                   }
     .                   let hdr = Header::read(input)?;
     4 ( 0.00%)          if hdr.decompress_len > output.len() {
     .                       return Err(Error::BufferTooSmall {
     .                           given: output.len() as u64,
     .                           min: hdr.decompress_len as u64,
     .                       });
     .                   }
     .                   let dst = &mut output[..hdr.decompress_len];
     .                   let mut dec =
     .                       Decompress { src: &input[hdr.len..], s: 0, dst: dst, d: 0 };
     .                   dec.decompress()?;
     6 ( 0.00%)          Ok(dec.dst.len())
    18 ( 0.00%)      }
     .           
     .               /// Decompresses all bytes in `input` into a freshly allocated `Vec`.
     .               ///
     .               /// This is just like the `decompress` method, except it allocates a `Vec`
     .               /// with the right size for you. (This is intended to be a convenience
     .               /// method.)
     .               ///
     .               /// This method returns an error under the same circumstances that
-- line 103 ----------------------------------------
-- line 123 ----------------------------------------
     .           }
     .           
     .           impl<'s, 'd> Decompress<'s, 'd> {
     .               /// Decompresses snappy compressed bytes in `src` to `dst`.
     .               ///
     .               /// This assumes that the header has already been read and that `dst` is
     .               /// big enough to store all decompressed bytes.
     .               fn decompress(&mut self) -> Result<()> {
14,456 ( 0.00%)          while self.s < self.src.len() {
 7,226 ( 0.00%)              let byte = self.src[self.s];
 7,226 ( 0.00%)              self.s += 1;
14,452 ( 0.00%)              if byte & 0b000000_11 == 0 {
 8,556 ( 0.00%)                  let len = (byte >> 2) as usize + 1;
     .                           self.read_literal(len)?;
     .                       } else {
     .                           self.read_copy(byte)?;
     .                       }
     .                   }
     4 ( 0.00%)          if self.d != self.dst.len() {
     .                       return Err(Error::HeaderMismatch {
     .                           expected_len: self.dst.len() as u64,
     .                           got_len: self.d as u64,
     .                       });
     .                   }
     .                   Ok(())
     .               }
     .           
-- line 149 ----------------------------------------
-- line 162 ----------------------------------------
     .                   debug_assert!(len <= 64);
     .                   let mut len = len as u64;
     .                   // As an optimization for the common case, if the literal length is
     .                   // <=16 and we have enough room in both `src` and `dst`, copy the
     .                   // literal using unaligned loads and stores.
     .                   //
     .                   // We pick 16 bytes with the hope that it optimizes down to a 128 bit
     .                   // load/store.
11,216 ( 0.00%)          if len <= 16
 8,268 ( 0.00%)              && self.s + 16 <= self.src.len()
11,024 ( 0.00%)              && self.d + 16 <= self.dst.len()
     .                   {
     .                       unsafe {
     .                           // SAFETY: We know both src and dst have at least 16 bytes of
     .                           // wiggle room after s/d, even if `len` is <16, so the copy is
     .                           // safe.
     .                           let srcp = self.src.as_ptr().add(self.s);
     .                           let dstp = self.dst.as_mut_ptr().add(self.d);
     .                           // Hopefully uses SIMD registers for 128 bit load/store.
     .                           ptr::copy_nonoverlapping(srcp, dstp, 16);
     .                       }
 2,756 ( 0.00%)              self.d += len as usize;
 8,268 ( 0.00%)              self.s += len as usize;
     .                       return Ok(());
     .                   }
     .                   // When the length is bigger than 60, it indicates that we need to read
     .                   // an additional 1-4 bytes to get the real length of the literal.
   192 ( 0.00%)          if len >= 61 {
     .                       // If there aren't at least 4 bytes left to read then we know this
     .                       // is corrupt because the literal must have length >=61.
   110 ( 0.00%)              if self.s as u64 + 4 > self.src.len() as u64 {
     .                           return Err(Error::Literal {
     .                               len: 4,
     .                               src_len: (self.src.len() - self.s) as u64,
     .                               dst_len: (self.dst.len() - self.d) as u64,
     .                           });
     .                       }
     .                       // Since we know there are 4 bytes left to read, read a 32 bit LE
     .                       // integer and mask away the bits we don't need.
     .                       let byte_count = len as usize - 60;
     .                       len = bytes::read_u32_le(&self.src[self.s..]) as u64;
   132 ( 0.00%)              len = (len & (WORD_MASK[byte_count] as u64)) + 1;
    22 ( 0.00%)              self.s += byte_count;
     .                   }
     .                   // If there's not enough buffer left to load or store this literal,
     .                   // then the input is corrupt.
     .                   // if self.s + len > self.src.len() || self.d + len > self.dst.len() {
   576 ( 0.00%)          if ((self.src.len() - self.s) as u64) < len
   288 ( 0.00%)              || ((self.dst.len() - self.d) as u64) < len
     .                   {
     .                       return Err(Error::Literal {
     .                           len: len,
     .                           src_len: (self.src.len() - self.s) as u64,
     .                           dst_len: (self.dst.len() - self.d) as u64,
     .                       });
     .                   }
     .                   unsafe {
     .                       // SAFETY: We've already checked the bounds, so we know this copy
     .                       // is correct.
     .                       let srcp = self.src.as_ptr().add(self.s);
     .                       let dstp = self.dst.as_mut_ptr().add(self.d);
     .                       ptr::copy_nonoverlapping(srcp, dstp, len as usize);
     .                   }
   192 ( 0.00%)          self.s += len as usize;
   192 ( 0.00%)          self.d += len as usize;
     .                   Ok(())
     .               }
     .           
     .               /// Reads a copy from `src` and writes the decompressed bytes to `dst`. `s`
     .               /// should point to the byte immediately proceding the copy tag byte.
     .               #[inline(always)]
     .               fn read_copy(&mut self, tag_byte: u8) -> Result<()> {
     .                   // Find the copy offset and len, then advance the input past the copy.
     .                   // The rest of this function deals with reading/writing to output only.
     .                   let entry = TAG_LOOKUP_TABLE.entry(tag_byte);
     .                   let offset = entry.offset(self.src, self.s)?;
     .                   let len = entry.len();
 8,748 ( 0.00%)          self.s += entry.num_tag_bytes();
     .           
     .                   // What we really care about here is whether `d == 0` or `d < offset`.
     .                   // To save an extra branch, use `d < offset - 1` instead. If `d` is
     .                   // `0`, then `offset.wrapping_sub(1)` will be usize::MAX which is also
     .                   // the max value of `d`.
 8,748 ( 0.00%)          if self.d <= offset.wrapping_sub(1) {
     .                       return Err(Error::Offset {
     .                           offset: offset as u64,
     .                           dst_pos: self.d as u64,
     .                       });
     .                   }
     .                   // When all is said and done, dst is advanced to end.
13,122 ( 0.00%)          let end = self.d + len;
     .                   // When the copy is small and the offset is at least 8 bytes away from
     .                   // `d`, then we can decompress the copy with two 64 bit unaligned
     .                   // loads/stores.
31,456 ( 0.01%)          if offset >= 8 && len <= 16 && self.d + 16 <= self.dst.len() {
     .                       unsafe {
     .                           // SAFETY: We know dstp points to at least 16 bytes of memory
     .                           // from the condition above, and we also know that dstp is
     .                           // preceded by at least `offset` bytes from the `d <= offset`
     .                           // check above.
     .                           //
     .                           // We also know that dstp and dstp-8 do not overlap from the
     .                           // check above, justifying the use of copy_nonoverlapping.
-- line 264 ----------------------------------------
-- line 273 ----------------------------------------
     .                   // If we have some wiggle room, try to decompress the copy 16 bytes
     .                   // at a time with 128 bit unaligned loads/stores. Remember, we can't
     .                   // just do a memcpy because decompressing copies may require copying
     .                   // overlapping memory.
     .                   //
     .                   // We need the extra wiggle room to make effective use of 128 bit
     .                   // loads/stores. Even if the store ends up copying more data than we
     .                   // need, we're careful to advance `d` by the correct amount at the end.
 7,910 ( 0.00%)          } else if end + 24 <= self.dst.len() {
     .                       unsafe {
     .                           // SAFETY: We know that dstp is preceded by at least `offset`
     .                           // bytes from the `d <= offset` check above.
     .                           //
     .                           // We don't know whether dstp overlaps with srcp, so we start
     .                           // by copying from srcp to dstp until they no longer overlap.
     .                           // The worst case is when dstp-src = 3 and copy length = 1. The
     .                           // first loop will issue these copy operations before stopping:
-- line 289 ----------------------------------------
-- line 295 ----------------------------------------
     .                           // But the copy had length 1, so it was only supposed to write
     .                           // to [0, 0]. But the last copy wrote to [9, 24], which is 24
     .                           // extra bytes in dst *beyond* the end of the copy, which is
     .                           // guaranteed by the conditional above.
     .                           let mut dstp = self.dst.as_mut_ptr().add(self.d);
     .                           let mut srcp = dstp.sub(offset);
     .                           loop {
     .                               debug_assert!(dstp >= srcp);
12,486 ( 0.00%)                      let diff = (dstp as usize) - (srcp as usize);
 8,324 ( 0.00%)                      if diff >= 16 {
     .                                   break;
     .                               }
     .                               // srcp and dstp can overlap, so use ptr::copy.
     .                               debug_assert!(self.d + 16 <= self.dst.len());
     .                               ptr::copy(srcp, dstp, 16);
 5,160 ( 0.00%)                      self.d += diff as usize;
     .                               dstp = dstp.add(diff);
     .                           }
18,022 ( 0.01%)                  while self.d < end {
     .                               ptr::copy_nonoverlapping(srcp, dstp, 16);
     .                               srcp = srcp.add(16);
     .                               dstp = dstp.add(16);
15,072 ( 0.01%)                      self.d += 16;
     .                           }
     .                           // At this point, `d` is likely wrong. We correct it before
     .                           // returning. It's correct value is `end`.
     .                       }
     .                   } else {
     .                       if end > self.dst.len() {
     .                           return Err(Error::CopyWrite {
     .                               len: len as u64,
-- line 325 ----------------------------------------
-- line 350 ----------------------------------------
     .           
     .           impl Header {
     .               /// Reads the varint header from the given input.
     .               ///
     .               /// If there was a problem reading the header then an error is returned.
     .               /// If a header is returned then it is guaranteed to be valid.
     .               #[inline(always)]
     .               fn read(input: &[u8]) -> Result<Header> {
    16 ( 0.00%)          let (decompress_len, header_len) = bytes::read_varu64(input);
     8 ( 0.00%)          if header_len == 0 {
     .                       return Err(Error::Header);
     .                   }
    12 ( 0.00%)          if decompress_len > MAX_INPUT_SIZE {
     .                       return Err(Error::TooBig {
     .                           given: decompress_len as u64,
     .                           max: MAX_INPUT_SIZE,
     .                       });
     .                   }
     .                   Ok(Header { len: header_len, decompress_len: decompress_len as usize })
     .               }
     .           }
-- line 370 ----------------------------------------
-- line 426 ----------------------------------------
     .               /// This requires reading from the compressed input since the offset is
     .               /// encoded in bytes proceding the tag byte.
     .               fn offset(&self, src: &[u8], s: usize) -> Result<usize> {
     .                   let num_tag_bytes = self.num_tag_bytes();
     .                   let trailer =
     .                       // It is critical for this case to come first, since it is the
     .                       // fast path. We really hope that this case gets branch
     .                       // predicted.
21,870 ( 0.01%)              if s + 4 <= src.len() {
     .                           unsafe {
     .                               // SAFETY: The conditional above guarantees that
     .                               // src[s..s+4] is valid to read from.
     .                               let p = src.as_ptr().add(s);
     .                               // We use WORD_MASK here to mask out the bits we don't
     .                               // need. While we're guaranteed to read 4 valid bytes,
     .                               // not all of those bytes are necessarily part of the
     .                               // offset. This is the key optimization: we don't need to
     .                               // branch on num_tag_bytes.
21,870 ( 0.01%)                      bytes::loadu_u32_le(p) as usize & WORD_MASK[num_tag_bytes]
     .                           }
     .                       } else if num_tag_bytes == 1 {
     .                           if s >= src.len() {
     .                               return Err(Error::CopyRead {
     .                                   len: 1,
     .                                   src_len: (src.len() - s) as u64,
     .                               });
     .                           }
-- line 452 ----------------------------------------

52,376 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/snap-1.0.1/src/decompress.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  1,475 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    341 ( 0.00%)              self.file = file;
    292 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  1,042 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  2,506 ( 0.00%)          self.line_number = line_index + 1;
  3,713 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 15,541 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    494 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    247 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  1,235 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  1,729 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
    988 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 58,324 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 33,328 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
  8,332 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  8,332 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 14,528 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 14,418 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 43,254 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 14,418 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
  7,209 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
  7,209 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  7,209 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 28,836 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  2,136 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
  8,984 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    405 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    486 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
    324 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  3,126 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  3,126 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  5,615 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  2,676 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    110 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    165 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    176 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    352 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    704 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  2,246 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  1,123 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  2,246 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  1,123 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  5,615 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  3,369 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  3,369 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  3,369 ( 0.00%)          Some((
  1,123 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  1,123 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
 74,988 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
 86,829 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  5,352 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  2,093 ( 0.00%)              if idx != avoid_idx
  1,105 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
    405 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
     81 ( 0.00%)          if !self.source_map.files().is_empty() {
    162 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
    648 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
    405 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

106,187 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 222 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
      612 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
    6,067 ( 0.00%)          !self.eq(other)
      816 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
        .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
      209 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
        9 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(2, 1.max(2));
        .               /// assert_eq!(2, 2.max(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
    5,463 ( 0.00%)      fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    8,424 ( 0.00%)          max_by(self, other, Ord::cmp)
    3,642 ( 0.00%)      }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(1, 1.min(2));
        .               /// assert_eq!(2, 2.min(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
       21 ( 0.00%)      fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
      394 ( 0.00%)          min_by(self, other, Ord::cmp)
       14 ( 0.00%)      }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
        .               ///
-- line 829 ----------------------------------------
-- line 1096 ----------------------------------------
        .               ///
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        6 ( 0.00%)      fn lt(&self, other: &Rhs) -> bool {
    9,600 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
       10 ( 0.00%)      }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 <= 2.0;
-- line 1114 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
   57,722 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn gt(&self, other: &Rhs) -> bool {
  108,287 ( 0.04%)          matches!(self.partial_cmp(other), Some(Greater))
        .               }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1156 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
       24 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
      115 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
       40 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
        .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1190 ----------------------------------------
        .           ///
        .           /// assert_eq!(1, cmp::min(1, 2));
        .           /// assert_eq!(2, cmp::min(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_min")]
       21 ( 0.00%)  pub fn min<T: Ord>(v1: T, v2: T) -> T {
       14 ( 0.00%)      v1.min(v2)
       14 ( 0.00%)  }
        .           
        .           /// Returns the minimum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1208 ----------------------------------------
-- line 1209 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
       21 ( 0.00%)  pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   29,272 ( 0.01%)      match compare(&v1, &v2) {
       24 ( 0.00%)          Ordering::Less | Ordering::Equal => v1,
        3 ( 0.00%)          Ordering::Greater => v2,
        .               }
       62 ( 0.00%)  }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1230 ----------------------------------------
-- line 1253 ----------------------------------------
        .           ///
        .           /// assert_eq!(2, cmp::max(1, 2));
        .           /// assert_eq!(2, cmp::max(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
    5,463 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
    3,642 ( 0.00%)      v1.max(v2)
    3,642 ( 0.00%)  }
        .           
        .           /// Returns the maximum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
    5,463 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   97,519 ( 0.03%)      match compare(&v1, &v2) {
    4,130 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
    2,523 ( 0.00%)          Ordering::Greater => v1,
        .               }
   15,409 ( 0.01%)  }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
    3,063 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   41,142 ( 0.01%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
1,039,876 ( 0.36%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
    6,730 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
    9,185 ( 0.00%)                  fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
  565,746 ( 0.20%)                      if *self < *other { Less }
    4,270 ( 0.00%)                      else if *self == *other { Equal }
      850 ( 0.00%)                      else { Greater }
    5,511 ( 0.00%)                  }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for () {
        .                   #[inline]
        .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
      714 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
   22,724 ( 0.01%)          fn eq(&self, other: &&B) -> bool {
   94,824 ( 0.03%)              PartialEq::eq(*self, *other)
   27,842 ( 0.01%)          }
        .                   #[inline]
        6 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
       71 ( 0.00%)              PartialEq::ne(*self, *other)
    2,696 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
        .                       PartialOrd::partial_cmp(*self, *other)
        .                   }
        .                   #[inline]
        6 ( 0.00%)          fn lt(&self, other: &&B) -> bool {
        8 ( 0.00%)              PartialOrd::lt(*self, *other)
        8 ( 0.00%)          }
        .                   #[inline]
        .                   fn le(&self, other: &&B) -> bool {
        .                       PartialOrd::le(*self, *other)
        .                   }
        .                   #[inline]
        .                   fn gt(&self, other: &&B) -> bool {
        .                       PartialOrd::gt(*self, *other)
        .                   }
-- line 1510 ----------------------------------------
-- line 1514 ----------------------------------------
        .                   }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
       12 ( 0.00%)          fn cmp(&self, other: &Self) -> Ordering {
       16 ( 0.00%)              Ord::cmp(*self, *other)
      643 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

  282,131 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  320,957 ( 0.11%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   24,807 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
3,120,239 ( 1.08%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   33,272 ( 0.01%)          self.stride += Group::WIDTH;
   33,272 ( 0.01%)          self.pos += self.stride;
   27,075 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   17,454 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   35,940 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    9,234 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   44,771 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   11,550 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   35,977 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   47,834 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       70 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      489 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       34 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,334 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    2,167 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    2,167 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    4,334 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      570 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    3,764 ( 0.00%)          self.erase_no_drop(&item);
       55 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   97,429 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      136 ( 0.00%)          match self.find(hash, eq) {
      475 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   13,484 ( 0.00%)              None => None,
        .                   }
  145,052 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,828 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   59,033 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   29,030 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   69,637 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   46,416 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  472,716 ( 0.16%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      792 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  297,501 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  348,494 ( 0.12%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  118,992 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       60 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   89,244 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      223 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   72,524 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      761 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  148,932 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  119,485 ( 0.04%)          self.table.items += 1;
        .                   bucket
      401 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      568 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      280 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,688 ( 0.00%)              eq(self.bucket(index).as_ref())
       21 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
        5 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      568 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,124 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      449 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   88,519 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   10,604 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,332 ( 0.00%)          let allocation = self.into_allocation();
      999 ( 0.00%)          RawIntoIter {
    1,665 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      558 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      145 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   82,772 ( 0.03%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   61,624 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   14,490 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   35,400 ( 0.01%)          Ok(Self {
        .                       ctrl,
   14,634 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   45,016 ( 0.02%)      }
        .           
        .               #[inline]
    4,594 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,180 ( 0.00%)          if capacity == 0 {
      613 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   28,268 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    2,754 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    4,594 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   24,619 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   24,619 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   49,238 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  208,587 ( 0.07%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  609,005 ( 0.21%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  277,317 ( 0.10%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    6,636 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  401,219 ( 0.14%)              for bit in group.match_byte(h2_hash) {
  655,832 ( 0.23%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  451,793 ( 0.16%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  165,521 ( 0.06%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  780,520 ( 0.27%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,727,563 ( 0.94%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  371,800 ( 0.13%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  297,440 ( 0.10%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  590,196 ( 0.20%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  196,732 ( 0.07%)          *self.ctrl(index) = ctrl;
  196,811 ( 0.07%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   36,664 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   33,184 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  157,177 ( 0.05%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      738 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   18,213 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    8,514 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   17,031 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   17,028 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   35,505 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    8,514 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,827 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  118,000 ( 0.04%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    8,514 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    5,428 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      766 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      993 ( 0.00%)          self.items = 0;
      766 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   21,718 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   86,872 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  108,480 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   86,872 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    1,328 ( 0.00%)      fn clone(&self) -> Self {
      173 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,494 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       12 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1732 ----------------------------------------
        .                       // Update the index in case we need to unwind.
        .                       guard.0 = index;
        .                   }
        .           
        .                   // Successfully cloned all items, no need to clean up.
        .                   mem::forget(guard);
        .           
        .                   self.table.items = source.table.items;
        3 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           
        .               /// Variant of `clone_from` to use when a hasher is available.
        .               #[cfg(feature = "raw")]
        .               pub fn clone_from_with_hasher(&mut self, source: &Self, hasher: impl Fn(&T) -> u64) {
        .                   // If we have enough capacity in the table, just clear it and insert
        .                   // elements one by one. We don't do this if we have the same number of
        .                   // buckets as the source since we can just copy the contents directly
-- line 1748 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   89,278 ( 0.03%)      fn drop(&mut self) {
   67,329 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   95,936 ( 0.03%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,332 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,665 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   24,194 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    3,233 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    5,230 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   21,242 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      702 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      364 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,460 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      536 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    3,912 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    9,168 ( 0.00%)          if let Some(b) = self.iter.next() {
   28,361 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    7,824 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      856 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    2,588 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      190 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      151 ( 0.00%)      fn next(&mut self) -> Option<T> {
      120 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      302 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        5 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      376 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       47 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      376 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,509,683 ( 0.52%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           };
     .           use rustc_ast_pretty::pprust::token_to_string;
     .           use rustc_data_structures::fx::FxHashMap;
     .           use rustc_errors::PResult;
     .           use rustc_span::Span;
     .           
     .           impl<'a> StringReader<'a> {
     .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
   171 ( 0.00%)          let mut tt_reader = TokenTreesReader {
     .                       string_reader: self,
     9 ( 0.00%)              token: Token::dummy(),
     .                       open_braces: Vec::new(),
     .                       unmatched_braces: Vec::new(),
     .                       matching_delim_spans: Vec::new(),
     .                       last_unclosed_found_span: None,
     .                       last_delim_empty_block_spans: FxHashMap::default(),
     .                       matching_block_spans: Vec::new(),
     .                   };
     9 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
    54 ( 0.00%)          (res, tt_reader.unmatched_braces)
     .               }
     .           }
     .           
     .           struct TokenTreesReader<'a> {
     .               string_reader: StringReader<'a>,
     .               token: Token,
     .               /// Stack of open delimiters and their spans. Used for error message.
     .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
     .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
     .               /// Collect the spans of braces (Open, Close). Used only
     .               /// for detecting if blocks are empty and only braces.
     .               matching_block_spans: Vec<(Span, Span)>,
     .           }
     .           
     .           impl<'a> TokenTreesReader<'a> {
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
    72 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
     .                   let mut buf = TokenStreamBuilder::default();
     .           
     .                   self.bump();
 1,986 ( 0.00%)          while self.token != token::Eof {
 7,872 ( 0.00%)              buf.push(self.parse_token_tree()?);
     .                   }
     .           
     .                   Ok(buf.into_token_stream())
    81 ( 0.00%)      }
     .           
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
     .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
     .                   let mut buf = TokenStreamBuilder::default();
     .                   loop {
 7,874 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
     .                           return buf.into_token_stream();
     .                       }
     .           
17,010 ( 0.01%)              match self.parse_token_tree() {
30,618 ( 0.01%)                  Ok(tree) => buf.push(tree),
     .                           Err(mut e) => {
     .                               e.emit();
     .                               return buf.into_token_stream();
     .                           }
     .                       }
     .                   }
     .               }
     .           
39,474 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 8,772 ( 0.00%)          let sm = self.string_reader.sess.source_map();
     .           
37,334 ( 0.01%)          match self.token.kind {
     .                       token::Eof => {
     .                           let msg = "this file contains an unclosed delimiter";
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
     .                           for &(_, sp) in &self.open_braces {
     .                               err.span_label(sp, "unclosed delimiter");
     .                               self.unmatched_braces.push(UnmatchedBrace {
     .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
     .                                   err.span_label(
     .                                       *close_sp,
     .                                       "...as it matches this but it has different indentation",
     .                                   );
     .                               }
     .                           }
     .                           Err(err)
     .                       }
   535 ( 0.00%)              token::OpenDelim(delim) => {
     .                           // The span for beginning of the delimited section
   535 ( 0.00%)                  let pre_span = self.token.span;
     .           
     .                           // Parse the open delimiter.
 3,745 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
     .                           self.bump();
     .           
     .                           // Parse the token trees within the delimiters.
     .                           // We stop at any delimiter so we can try to recover if the user
     .                           // uses an incorrect delimiter.
   535 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
     .           
     .                           // Expand to cover the entire delimited token tree
 2,675 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
     .           
 1,070 ( 0.00%)                  match self.token.kind {
     .                               // Correct delimiter.
 1,070 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
     .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
 1,070 ( 0.00%)                          let close_brace_span = self.token.span;
     .           
 1,605 ( 0.00%)                          if tts.is_empty() {
   150 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   200 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
     .                                           // Only track if the block is in the form of `{}`, otherwise it is
     .                                           // likely that it was written on purpose.
     .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
     .                                       }
     .                                   }
     .           
     .                                   //only add braces
 2,140 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
     .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
     .                                   }
     .           
   535 ( 0.00%)                          if self.open_braces.is_empty() {
     .                                       // Clear up these spans to avoid suggesting them as we've found
     .                                       // properly matched delimiters so far for an entire block.
     .                                       self.matching_delim_spans.clear();
     .                                   } else {
     .                                       self.matching_delim_spans.push((
     .                                           open_brace,
     .                                           open_brace_span,
     .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
     .                               token::Eof => {
     .                                   // Silently recover, the EOF token will be seen again
     .                                   // and an error emitted then. Thus we don't pop from
     .                                   // self.open_braces here.
     .                               }
     .                               _ => {}
     .                           }
     .           
 3,745 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
     .                       }
     .                       token::CloseDelim(delim) => {
     .                           // An unexpected closing delimiter (i.e., there is no
     .                           // matching opening delimiter).
     .                           let token_str = token_to_string(&self.token);
     .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
     .                                   err.span_label(parent.1, "...matches this closing brace");
     .                               }
     .                           }
     .           
     .                           err.span_label(self.token.span, "unexpected closing delimiter");
     .                           Err(err)
     .                       }
     .                       _ => {
19,255 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
     .                           let mut spacing = self.bump();
 7,702 ( 0.00%)                  if !self.token.is_op() {
     .                               spacing = Alone;
     .                           }
23,106 ( 0.01%)                  Ok((tt, spacing))
     .                       }
     .                   }
35,088 ( 0.01%)      }
     .           
     .               fn bump(&mut self) -> Spacing {
41,668 ( 0.01%)          let (spacing, token) = self.string_reader.next_token();
22,011 ( 0.01%)          self.token = token;
     .                   spacing
     .               }
     .           }
     .           
   535 ( 0.00%)  #[derive(Default)]
     .           struct TokenStreamBuilder {
     .               buf: Vec<TreeAndSpacing>,
     .           }
     .           
     .           impl TokenStreamBuilder {
57,018 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
26,826 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 1,828 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 3,482 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
     .                               self.buf.pop();
 2,220 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
     .                               return;
     .                           }
     .                       }
     .                   }
21,005 ( 0.01%)          self.buf.push((tree, joint))
35,088 ( 0.01%)      }
     .           
     .               fn into_token_stream(self) -> TokenStream {
 5,431 ( 0.00%)          TokenStream::new(self.buf)
     .               }
     .           }

14,085 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs
--------------------------------------------------------------------------------
Ir               

-- line 338 ----------------------------------------
      .               #[must_use = "this returns the result of the operation, \
      .                             without modifying the original"]
      .               #[inline]
      .               pub const fn to_digit(self, radix: u32) -> Option<u32> {
      .                   assert!(radix <= 36, "to_digit: radix is too high (maximum 36)");
      .                   // If not a digit, a number greater than radix will be created.
      .                   let mut digit = (self as u32).wrapping_sub('0' as u32);
      .                   if radix > 10 {
     64 ( 0.00%)              if digit < 10 {
      .                           return Some(digit);
      .                       }
      .                       // Force the 6th bit to be set to ensure ascii is lower case.
      .                       digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);
      .                   }
      .                   // FIXME: once then_some is const fn, use it here
    400 ( 0.00%)          if digit < radix { Some(digit) } else { None }
      .               }
      .           
      .               /// Returns an iterator that yields the hexadecimal Unicode escape of a
      .               /// character as `char`s.
      .               ///
      .               /// This will escape characters with the Rust syntax of the form
      .               /// `\u{NNNNNN}` where `NNNNNN` is a hexadecimal representation.
      .               ///
-- line 361 ----------------------------------------
-- line 392 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn escape_unicode(self) -> EscapeUnicode {
      .                   let c = self as u32;
      .           
      .                   // or-ing 1 ensures that for c==0 the code computes that one
      .                   // digit should be printed and (which is the same) avoids the
      .                   // (31 - 32) underflow
      2 ( 0.00%)          let msb = 31 - (c | 1).leading_zeros();
      .           
      .                   // the index of the most significant hex digit
      4 ( 0.00%)          let ms_hex_digit = msb / 4;
      .                   EscapeUnicode {
      .                       c: self,
      .                       state: EscapeUnicodeState::Backslash,
      .                       hex_digit_idx: ms_hex_digit as usize,
      .                   }
     10 ( 0.00%)      }
      .           
      .               /// An extended version of `escape_debug` that optionally permits escaping
      .               /// Extended Grapheme codepoints, single quotes, and double quotes. This
      .               /// allows us to format characters like nonspacing marks better when they're
      .               /// at the start of a string, and allows escaping single quotes in
      .               /// characters, and double quotes in strings.
      .               #[inline]
      .               pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {
  5,843 ( 0.00%)          let init_state = match self {
      .                       '\t' => EscapeDefaultState::Backslash('t'),
      .                       '\r' => EscapeDefaultState::Backslash('r'),
      .                       '\n' => EscapeDefaultState::Backslash('n'),
      .                       '\\' => EscapeDefaultState::Backslash(self),
      .                       '"' if args.escape_double_quote => EscapeDefaultState::Backslash(self),
      .                       '\'' if args.escape_single_quote => EscapeDefaultState::Backslash(self),
  2,518 ( 0.00%)              _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {
      .                           EscapeDefaultState::Unicode(self.escape_unicode())
      .                       }
  5,036 ( 0.00%)              _ if is_printable(self) => EscapeDefaultState::Char(self),
      .                       _ => EscapeDefaultState::Unicode(self.escape_unicode()),
      .                   };
      .                   EscapeDebug(EscapeDefault { state: init_state })
      .               }
      .           
      .               /// Returns an iterator that yields the literal escape code of a character
      .               /// as `char`s.
      .               ///
-- line 436 ----------------------------------------
-- line 521 ----------------------------------------
      .               /// ```
      .               /// assert_eq!('"'.escape_default().to_string(), "\\\"");
      .               /// ```
      .               #[must_use = "this returns the escaped char as an iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn escape_default(self) -> EscapeDefault {
146,986 ( 0.05%)          let init_state = match self {
      .                       '\t' => EscapeDefaultState::Backslash('t'),
      .                       '\r' => EscapeDefaultState::Backslash('r'),
      .                       '\n' => EscapeDefaultState::Backslash('n'),
      .                       '\\' | '\'' | '"' => EscapeDefaultState::Backslash(self),
125,580 ( 0.04%)              '\x20'..='\x7e' => EscapeDefaultState::Char(self),
      .                       _ => EscapeDefaultState::Unicode(self.escape_unicode()),
      .                   };
      .                   EscapeDefault { state: init_state }
      .               }
      .           
      .               /// Returns the number of bytes this `char` would need if encoded in UTF-8.
      .               ///
      .               /// That number of bytes is always between 1 and 4, inclusive.
-- line 542 ----------------------------------------
-- line 580 ----------------------------------------
      .               /// assert_eq!(6, tokyo.len());
      .               ///
      .               /// // ... just like the &str
      .               /// assert_eq!(len, tokyo.len());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_char_len_utf", since = "1.52.0")]
      .               #[inline]
 10,206 ( 0.00%)      pub const fn len_utf8(self) -> usize {
 10,206 ( 0.00%)          len_utf8(self as u32)
 10,206 ( 0.00%)      }
      .           
      .               /// Returns the number of 16-bit code units this `char` would need if
      .               /// encoded in UTF-16.
      .               ///
      .               /// See the documentation for [`len_utf8()`] for more explanation of this
      .               /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.
      .               ///
      .               /// [`len_utf8()`]: #method.len_utf8
-- line 598 ----------------------------------------
-- line 643 ----------------------------------------
      .               /// ```should_panic
      .               /// let mut b = [0; 1];
      .               ///
      .               /// // this panics
      .               /// 'ß'.encode_utf8(&mut b);
      .               /// ```
      .               #[stable(feature = "unicode_encode_char", since = "1.15.0")]
      .               #[inline]
    380 ( 0.00%)      pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
      .                   // SAFETY: `char` is not a surrogate, so this is valid UTF-8.
    570 ( 0.00%)          unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
    190 ( 0.00%)      }
      .           
      .               /// Encodes this character as UTF-16 into the provided `u16` buffer,
      .               /// and then returns the subslice of the buffer that contains the encoded character.
      .               ///
      .               /// # Panics
      .               ///
      .               /// Panics if the buffer is not large enough.
      .               /// A buffer of length 2 is large enough to encode any `char`.
-- line 662 ----------------------------------------
-- line 708 ----------------------------------------
      .               /// // love is many things, but it is not alphabetic
      .               /// assert!(!c.is_alphabetic());
      .               /// ```
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn is_alphabetic(self) -> bool {
      .                   match self {
     25 ( 0.00%)              'a'..='z' | 'A'..='Z' => true,
      .                       c => c > '\x7f' && unicode::Alphabetic(c),
      .                   }
      .               }
      .           
      .               /// Returns `true` if this `char` has the `Lowercase` property.
      .               ///
      .               /// `Lowercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and
      .               /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].
-- line 724 ----------------------------------------
-- line 741 ----------------------------------------
      .               /// assert!(!'中'.is_lowercase());
      .               /// assert!(!' '.is_lowercase());
      .               /// ```
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn is_lowercase(self) -> bool {
      .                   match self {
    231 ( 0.00%)              'a'..='z' => true,
    154 ( 0.00%)              c => c > '\x7f' && unicode::Lowercase(c),
      .                   }
      .               }
      .           
      .               /// Returns `true` if this `char` has the `Uppercase` property.
      .               ///
      .               /// `Uppercase` is described in Chapter 4 (Character Properties) of the [Unicode Standard] and
      .               /// specified in the [Unicode Character Database][ucd] [`DerivedCoreProperties.txt`].
      .               ///
-- line 758 ----------------------------------------
-- line 774 ----------------------------------------
      .               /// assert!(!'中'.is_uppercase());
      .               /// assert!(!' '.is_uppercase());
      .               /// ```
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn is_uppercase(self) -> bool {
      .                   match self {
  2,973 ( 0.00%)              'A'..='Z' => true,
  1,982 ( 0.00%)              c => c > '\x7f' && unicode::Uppercase(c),
      .                   }
      .               }
      .           
      .               /// Returns `true` if this `char` has the `White_Space` property.
      .               ///
      .               /// `White_Space` is specified in the [Unicode Character Database][ucd] [`PropList.txt`].
      .               ///
      .               /// [ucd]: https://www.unicode.org/reports/tr44/
-- line 791 ----------------------------------------
-- line 801 ----------------------------------------
      .               /// // a non-breaking space
      .               /// assert!('\u{A0}'.is_whitespace());
      .               ///
      .               /// assert!(!'越'.is_whitespace());
      .               /// ```
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
     18 ( 0.00%)      pub fn is_whitespace(self) -> bool {
    747 ( 0.00%)          match self {
     28 ( 0.00%)              ' ' | '\x09'..='\x0d' => true,
    468 ( 0.00%)              c => c > '\x7f' && unicode::White_Space(c),
      .                   }
     30 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].
      .               ///
      .               /// [`is_alphabetic()`]: #method.is_alphabetic
      .               /// [`is_numeric()`]: #method.is_numeric
      .               ///
      .               /// # Examples
      .               ///
-- line 822 ----------------------------------------
-- line 872 ----------------------------------------
      .               /// [`DerivedCoreProperties.txt`].
      .               ///
      .               /// [uax29]: https://www.unicode.org/reports/tr29/
      .               /// [ucd]: https://www.unicode.org/reports/tr44/
      .               /// [`DerivedCoreProperties.txt`]: https://www.unicode.org/Public/UCD/latest/ucd/DerivedCoreProperties.txt
      .               #[must_use]
      .               #[inline]
      .               pub(crate) fn is_grapheme_extended(self) -> bool {
  2,518 ( 0.00%)          unicode::Grapheme_Extend(self)
      .               }
      .           
      .               /// Returns `true` if this `char` has one of the general categories for numbers.
      .               ///
      .               /// The general categories for numbers (`Nd` for decimal digits, `Nl` for letter-like numeric
      .               /// characters, and `No` for other numeric characters) are specified in the [Unicode Character
      .               /// Database][ucd] [`UnicodeData.txt`].
      .               ///
-- line 888 ----------------------------------------
-- line 973 ----------------------------------------
      .               /// // convert into themselves.
      .               /// assert_eq!('山'.to_lowercase().to_string(), "山");
      .               /// ```
      .               #[must_use = "this returns the lowercase character as a new iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn to_lowercase(self) -> ToLowercase {
  1,278 ( 0.00%)          ToLowercase(CaseMappingIter::new(conversions::to_lower(self)))
      .               }
      .           
      .               /// Returns an iterator that yields the uppercase mapping of this `char` as one or more
      .               /// `char`s.
      .               ///
      .               /// If this `char` does not have an uppercase mapping, the iterator yields the same `char`.
      .               ///
      .               /// If this `char` has a one-to-one uppercase mapping given by the [Unicode Character
-- line 989 ----------------------------------------
-- line 1065 ----------------------------------------
      .               /// ```
      .               ///
      .               /// holds across languages.
      .               #[must_use = "this returns the uppercase character as a new iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn to_uppercase(self) -> ToUppercase {
  1,278 ( 0.00%)          ToUppercase(CaseMappingIter::new(conversions::to_upper(self)))
      .               }
      .           
      .               /// Checks if the value is within the ASCII range.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let ascii = 'a';
-- line 1081 ----------------------------------------
-- line 1084 ----------------------------------------
      .               /// assert!(ascii.is_ascii());
      .               /// assert!(!non_ascii.is_ascii());
      .               /// ```
      .               #[must_use]
      .               #[stable(feature = "ascii_methods_on_intrinsics", since = "1.23.0")]
      .               #[rustc_const_stable(feature = "const_ascii_methods_on_intrinsics", since = "1.32.0")]
      .               #[inline]
      .               pub const fn is_ascii(&self) -> bool {
103,230 ( 0.04%)          *self as u32 <= 0x7F
      .               }
      .           
      .               /// Makes a copy of the value in its ASCII upper case equivalent.
      .               ///
      .               /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',
      .               /// but non-ASCII letters are unchanged.
      .               ///
      .               /// To uppercase the value in-place, use [`make_ascii_uppercase()`].
-- line 1100 ----------------------------------------
-- line 1621 ----------------------------------------
      .               pub(crate) const ESCAPE_ALL: Self = Self {
      .                   escape_grapheme_extended: true,
      .                   escape_single_quote: true,
      .                   escape_double_quote: true,
      .               };
      .           }
      .           
      .           #[inline]
 15,594 ( 0.01%)  const fn len_utf8(code: u32) -> usize {
434,061 ( 0.15%)      if code < MAX_ONE_B {
  5,198 ( 0.00%)          1
210,424 ( 0.07%)      } else if code < MAX_TWO_B {
      .                   2
     15 ( 0.00%)      } else if code < MAX_THREE_B {
      .                   3
      .               } else {
      .                   4
      .               }
 15,594 ( 0.01%)  }
      .           
      .           /// Encodes a raw u32 value as UTF-8 into the provided byte buffer,
      .           /// and then returns the subslice of the buffer that contains the encoded character.
      .           ///
      .           /// Unlike `char::encode_utf8`, this method also handles codepoints in the surrogate range.
      .           /// (Creating a `char` in the surrogate range is UB.)
      .           /// The result is valid [generalized UTF-8] but not valid UTF-8.
      .           ///
-- line 1647 ----------------------------------------
-- line 1649 ----------------------------------------
      .           ///
      .           /// # Panics
      .           ///
      .           /// Panics if the buffer is not large enough.
      .           /// A buffer of length four is large enough to encode any `char`.
      .           #[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
      .           #[doc(hidden)]
      .           #[inline]
    570 ( 0.00%)  pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
    285 ( 0.00%)      let len = len_utf8(code);
  1,330 ( 0.00%)      match (len, &mut dst[..]) {
    380 ( 0.00%)          (1, [a, ..]) => {
    190 ( 0.00%)              *a = code as u8;
     95 ( 0.00%)          }
      .                   (2, [a, b, ..]) => {
      6 ( 0.00%)              *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
      .                       *b = (code & 0x3F) as u8 | TAG_CONT;
      .                   }
      .                   (3, [a, b, c, ..]) => {
     18 ( 0.00%)              *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
     30 ( 0.00%)              *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
     30 ( 0.00%)              *c = (code & 0x3F) as u8 | TAG_CONT;
      .                   }
      .                   (4, [a, b, c, d, ..]) => {
      .                       *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
      .                       *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
      .                       *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
      .                       *d = (code & 0x3F) as u8 | TAG_CONT;
      .                   }
      .                   _ => panic!(
      .                       "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
      .                       len,
      .                       code,
      .                       dst.len(),
      .                   ),
      .               };
    760 ( 0.00%)      &mut dst[..len]
    190 ( 0.00%)  }
      .           
      .           /// Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,
      .           /// and then returns the subslice of the buffer that contains the encoded character.
      .           ///
      .           /// Unlike `char::encode_utf16`, this method also handles codepoints in the surrogate range.
      .           /// (Creating a `char` in the surrogate range is UB.)
      .           ///
      .           /// # Panics
-- line 1694 ----------------------------------------

216,355 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/char/methods.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
    959 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  9,247 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    373 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    326 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    164 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    489 ( 0.00%)      pub prev_token: Token,
    165 ( 0.00%)      pub capture_cfg: bool,
    331 ( 0.00%)      restrictions: Restrictions,
    328 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    328 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    328 ( 0.00%)      unmatched_angle_bracket_count: u32,
    492 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    164 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    164 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    702 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    656 ( 0.00%)      capturing: Capturing,
    164 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,365 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 17,101 ( 0.01%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  3,793 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,251 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  7,772 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  1,575 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  3,150 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,240 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  1,804 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
143,640 ( 0.05%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
 68,886 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
  1,306 ( 0.00%)                  self.frame.open_delim = true;
  6,530 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
138,790 ( 0.05%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  5,692 ( 0.00%)              } else if !self.frame.close_delim {
  1,278 ( 0.00%)                  self.frame.close_delim = true;
  6,390 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  2,516 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 16,354 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  5,580 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 26,548 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
 95,760 ( 0.03%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
 95,760 ( 0.03%)      }
      .           
 24,430 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  7,333 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      6 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 12,205 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
    698 ( 0.00%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
      .                           '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
      8 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
     10 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
     24 ( 0.00%)              [
     14 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
      8 ( 0.00%)                  TokenTree::token(token::Eq, sp),
     16 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
      2 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
      2 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
     24 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      6 ( 0.00%)          self.next()
 21,987 ( 0.01%)      }
      .           }
      .           
  4,280 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  3,424 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      9 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    482 ( 0.00%)      Some(match token.kind {
    964 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    964 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    964 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  1,687 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    482 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  1,687 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  1,205 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  3,472 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    248 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    496 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  7,688 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    248 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    248 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,488 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    496 ( 0.00%)          parser.bump();
      .           
      .                   parser
  2,232 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 67,170 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
  9,772 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 26,256 ( 0.01%)                  self.token_cursor.next()
      .                       };
 44,780 ( 0.02%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 11,195 ( 0.00%)              self.token_cursor.break_last_token = false;
 44,780 ( 0.02%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,004 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 37,271 ( 0.01%)              if matches!(
 22,390 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 44,764 ( 0.02%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  6,885 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    765 ( 0.00%)          if self.expected_tokens.is_empty() {
    990 ( 0.00%)              if self.token == *t {
    825 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
  7,200 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 11,475 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
  8,040 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  1,340 ( 0.00%)          if edible.contains(&self.token.kind) {
  1,887 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 10,050 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  5,296 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  4,098 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
  9,485 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  1,355 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  8,130 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  5,420 ( 0.00%)          self.bump();
      .                   Ok(ident)
 13,550 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
104,013 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
 45,505 ( 0.02%)          let is_present = self.token == *tok;
 30,578 ( 0.01%)          if !is_present {
 64,591 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
104,013 ( 0.04%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     32 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 22,117 ( 0.01%)          let is_present = self.check(tok);
 14,725 ( 0.01%)          if is_present {
  3,158 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
     40 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  6,445 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,281 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 38,958 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
  8,300 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  7,066 ( 0.00%)          if self.check_keyword(kw) {
    687 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
  8,300 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,590 ( 0.00%)          if self.token.is_keyword(kw) {
    312 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    315 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    252 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  2,952 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  1,476 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  3,321 ( 0.00%)      }
      .           
  8,106 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  2,828 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  1,940 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  8,106 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,091 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  2,276 ( 0.00%)      fn check_path(&mut self) -> bool {
  5,679 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  2,845 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
  1,204 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    808 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
    756 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    420 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
    756 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,060 ( 0.00%)          self.check_or_expected(
    530 ( 0.00%)              self.token.is_like_plus(),
    530 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 10,128 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  5,908 ( 0.00%)          if self.token.kind == expected {
    526 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  2,905 ( 0.00%)          match self.token.kind.break_two_token_op() {
     38 ( 0.00%)              Some((first, second)) if first == expected => {
      8 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     10 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     18 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      2 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
     28 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  1,737 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
  9,920 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    384 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    216 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     18 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    628 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  1,987 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  1,296 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    400 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    430 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    628 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    600 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    300 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    200 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  2,190 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     45 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  1,605 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  1,173 ( 0.00%)              if let Some(ref t) = sep.sep {
  1,712 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
    588 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
    612 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    375 ( 0.00%)              let t = f(self)?;
  1,347 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,076 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,095 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
    810 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    618 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    446 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  1,425 ( 0.00%)          Ok((val, trailing))
    648 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    547 ( 0.00%)          self.expect(bra)?;
    648 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    260 ( 0.00%)              &token::OpenDelim(delim),
    439 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
145,509 ( 0.05%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 67,158 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 44,772 ( 0.02%)          self.prev_token = mem::replace(&mut self.token, next_token);
 11,193 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 11,193 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
 89,528 ( 0.03%)      pub fn bump(&mut self) {
 44,764 ( 0.02%)          let next_token = self.next_tok(self.token.span);
 67,146 ( 0.02%)          self.bump_with(next_token);
 89,528 ( 0.03%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
     32 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    430 ( 0.00%)          if dist == 0 {
    184 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  1,570 ( 0.00%)          let frame = &self.token_cursor.frame;
  1,715 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  3,858 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  5,132 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
  6,264 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  2,126 ( 0.00%)                      Some(tree) => match tree {
    910 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,155 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  1,344 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    491 ( 0.00%)          let mut token = Token::dummy();
    350 ( 0.00%)          while i < dist {
  3,573 ( 0.00%)              token = cursor.next().0;
  1,528 ( 0.00%)              if matches!(
    974 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    175 ( 0.00%)              i += 1;
      .                   }
     13 ( 0.00%)          return looker(&token);
     36 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  1,413 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    404 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  1,413 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    226 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
    904 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  2,352 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
    773 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
      .                       Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  4,116 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     74 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     36 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
     54 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    270 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    390 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  1,989 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  1,768 ( 0.00%)          Ok(
  1,301 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    768 ( 0.00%)                  match self.parse_token_tree() {
    960 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    384 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     58 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     11 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     11 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     11 ( 0.00%)                      let span = expr.span;
      .           
     55 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
     99 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,547 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
    903 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    526 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  6,472 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  4,623 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 12,826 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  8,760 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    520 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    520 ( 0.00%)                  let span = frame.span;
    260 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    520 ( 0.00%)                  self.bump();
  1,300 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
  1,098 ( 0.00%)                  self.bump();
  2,745 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  5,663 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    335 ( 0.00%)          let old = self.restrictions;
    400 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    399 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  2,680 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  1,675 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  3,015 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  2,970 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    594 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    297 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,188 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    248 ( 0.00%)              return Ok(Visibility {
    744 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     49 ( 0.00%)          let lo = self.prev_token.span;
      .           
    245 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    147 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  2,673 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     54 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
  1,110 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    111 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
  1,110 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
  9,528 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  4,764 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  1,564 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 10,053 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  3,320 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,660 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,660 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  3,320 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 58,514 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
417,314 ( 0.14%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
  4,179 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 43,338 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 29,727 ( 0.01%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 98,194 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 15,739 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
319,733 ( 0.11%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  1,673 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,334 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
  8,352 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    771 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  1,815 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 84,536 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   77,363 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       43 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,104 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        4 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,848 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        6 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       24 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        8 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        8 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,268 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        5 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        5 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,247 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,703 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        3 ( 0.00%)      MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
        .               /// Strings provided as crate attributes in the CLI.
        .               CliCrateAttr(u64),
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       42 ( 0.00%)      fn from(p: PathBuf) -> Self {
       12 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       36 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       42 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       20 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       30 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       30 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       25 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,130 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        5 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       10 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
       15 ( 0.00%)      pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::MacroExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn anon_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::Anon(hasher.finish())
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       10 ( 0.00%)      pub lo: BytePos,
       10 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       30 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   29,664 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      129 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   12,576 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    9,432 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   12,576 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    4,842 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    3,228 ( 0.00%)      }
        .               #[inline]
      272 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      272 ( 0.00%)      }
        .               #[inline]
    1,350 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      900 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,455 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      873 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        3 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        2 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      387 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      258 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 650 ----------------------------------------
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
        .               /// Returns the source span -- this is either the supplied span, or the span for
        .               /// the macro callsite that expanded to it.
       35 ( 0.00%)      pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
       15 ( 0.00%)          if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
       28 ( 0.00%)      }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      300 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      150 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      330 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    1,755 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    1,170 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      478 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      107 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      164 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      115 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       23 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       92 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      889 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      762 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      635 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       10 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       12 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   50,897 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    9,141 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      113 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       55 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   31,605 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   41,643 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      319 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      203 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      232 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      330 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       60 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      210 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      270 ( 0.00%)      }
        .           
       44 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
       28 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      176 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    1,092 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      637 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   15,111 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    5,103 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    3,402 ( 0.00%)          let mut span = self.data();
    2,761 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    5,103 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    5,596 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       48 ( 0.00%)          let mut span = self.data();
       72 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      192 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       18 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       16 ( 0.00%)          let mut span = self.data();
       18 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
       34 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       20 ( 0.00%)      }
        .           
        .               #[inline]
    5,920 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    5,180 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        5 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
    1,385 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        5 ( 0.00%)      }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       40 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
       12 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
        4 ( 0.00%)          self.span_labels.push((span, label));
       10 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      241 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,380 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,380 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       40 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       32 ( 0.00%)          MultiSpan::from_spans(spans)
       40 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        9 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       27 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,120 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       18 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,240 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       30 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       30 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      174 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        3 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        3 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        3 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       12 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        6 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        9 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,040 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      560 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  882,138 ( 0.30%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,120 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,160 ( 0.00%)              SourceFile {
    4,480 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,240 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,240 ( 0.00%)                  lines,
    2,240 ( 0.00%)                  multibyte_chars,
    2,240 ( 0.00%)                  non_narrow_chars,
    2,240 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,040 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      110 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       30 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       20 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       20 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       30 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      120 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       20 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      170 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      110 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       40 ( 0.00%)              lines,
       40 ( 0.00%)              multibyte_chars,
       40 ( 0.00%)              non_narrow_chars,
       40 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      469 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       67 ( 0.00%)          if matches!(
      134 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       67 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      603 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      565 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    3,357 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    1,525 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    3,889 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    2,682 ( 0.00%)          assert!(line_index < self.lines.len());
    3,759 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       21 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    2,488 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       24 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       72 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      144 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      120 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       48 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       84 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       24 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        9 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       12 ( 0.00%)                  let linebpos = self.lines[a];
       24 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       12 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       96 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       96 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       36 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       24 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       12 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       60 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       84 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      100 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       90 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       10 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       10 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    7,892 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    1,451 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   16,320 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,516,377 ( 0.52%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  868,234 ( 0.30%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   47,082 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       22 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       11 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   59,500 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   12,662 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   46,838 ( 0.02%)          let span = self.data_untracked();
   13,018 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   25,500 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   17,168 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   16,664 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   33,328 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   16,664 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    8,332 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    8,332 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   68,000 ( 0.02%)      }
        .           }

1,250,982 ( 0.43%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
     10 ( 0.00%)      pub ty: Ty<'tcx>,
     50 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
  2,784 ( 0.00%)      pub scope: DefId,
  5,029 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
 26,886 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
  1,439 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
     28 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
    126 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  5,109 ( 0.00%)      pub var: BoundVar,
  4,153 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
675,739 ( 0.23%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
      .           #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 61,296 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
  1,086 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 62,065 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
 19,744 ( 0.01%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
    113 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
      .               pub closure_kind_ty: T,
      .               pub closure_sig_as_fn_ptr_ty: T,
      .               pub tupled_upvars_ty: T,
      .           }
      .           
      .           impl<'tcx> ClosureSubsts<'tcx> {
      .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
      .               /// for the closure parent, alongside additional closure-specific components.
      5 ( 0.00%)      pub fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
      .               ) -> ClosureSubsts<'tcx> {
      .                   ClosureSubsts {
      .                       substs: tcx.mk_substs(
     10 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
     20 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
      .                                   .iter()
      .                                   .map(|&ty| ty.into()),
      .                           ),
      .                       ),
      .                   }
     10 ( 0.00%)      }
      .           
      .               /// Divides the closure substs into their respective components.
      .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     50 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
      .                   match self.substs[..] {
    470 ( 0.00%)              [
    120 ( 0.00%)                  ref parent_substs @ ..,
    125 ( 0.00%)                  closure_kind_ty,
     75 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     85 ( 0.00%)                  tupled_upvars_ty,
    200 ( 0.00%)              ] => ClosureSubstsParts {
      .                           parent_substs,
      .                           closure_kind_ty,
      .                           closure_sig_as_fn_ptr_ty,
      .                           tupled_upvars_ty,
      .                       },
      .                       _ => bug!("closure substs missing synthetics"),
      .                   }
    150 ( 0.00%)      }
      .           
      .               /// Returns `true` only if enough of the synthetic types are known to
      .               /// allow using all of the methods on `ClosureSubsts` without panicking.
      .               ///
      .               /// Used primarily by `ty::print::pretty` to be able to handle closure
      .               /// types that haven't had their synthetic types substituted in.
      .               pub fn is_valid(self) -> bool {
      .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 384 ----------------------------------------
      .                   self.split().parent_substs
      .               }
      .           
      .               /// Returns an iterator over the list of types of captured paths by the closure.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
      .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     15 ( 0.00%)          match self.tupled_upvars_ty().kind() {
      .                       TyKind::Error(_) => None,
     10 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
      .               }
      .           
      .               /// Returns the tuple type representing the upvars for this closure.
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    225 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
      .               }
      .           
      .               /// Returns the closure kind for this closure; may return a type
      .               /// variable during inference. To get the closure kind during
      .               /// inference, use `infcx.closure_kind(substs)`.
     30 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_kind_ty.expect_ty()
     60 ( 0.00%)      }
      .           
      .               /// Returns the `fn` pointer type representing the closure signature for this
      .               /// closure.
      .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
      .               // type is known at the time of the creation of `ClosureSubsts`,
      .               // see `rustc_typeck::check::closure`.
      .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
      .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
-- line 421 ----------------------------------------
-- line 426 ----------------------------------------
      .               /// there are no type variables.
      .               ///
      .               /// If you have an inference context, use `infcx.closure_kind()`.
      .               pub fn kind(self) -> ty::ClosureKind {
      .                   self.kind_ty().to_opt_closure_kind().unwrap()
      .               }
      .           
      .               /// Extracts the signature from the closure.
     40 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
      .                   let ty = self.sig_as_fn_ptr_ty();
     80 ( 0.00%)          match ty.kind() {
    160 ( 0.00%)              ty::FnPtr(sig) => *sig,
      .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
      .                   }
    120 ( 0.00%)      }
      .           }
      .           
      .           /// Similar to `ClosureSubsts`; see the above documentation for more.
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GeneratorSubsts<'tcx> {
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> UpvarSubsts<'tcx> {
      .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
      .               /// In case there was a type error in figuring out the types of the captured path, an
      .               /// empty iterator is returned.
      .               #[inline]
      .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     10 ( 0.00%)          let tupled_tys = match self {
     15 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   };
      .           
     25 ( 0.00%)          match tupled_tys.kind() {
      .                       TyKind::Error(_) => None,
     20 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
      .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
      .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
      .                   }
      .                   .into_iter()
      .                   .flatten()
      .               }
      .           
      .               #[inline]
      .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     20 ( 0.00%)          match self {
     20 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
      .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
      .                   }
      .               }
      .           }
      .           
      .           /// An inline const is modeled like
      .           ///
      .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
 18,631 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
 15,951 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
    143 ( 0.00%)      AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
  1,005 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
  1,424 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
  1,206 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
  1,323 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
    799 ( 0.00%)          match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::Projection(p) => {
      .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::AutoTrait(did) => {
     48 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
      .                               def_id: did,
      .                               substs: tcx.mk_substs_trait(self_ty, &[]),
      .                           });
      .                           trait_ref.without_const().to_predicate(tcx)
      .                       }
      .                   }
  1,176 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .               /// Returns the "principal `DefId`" of this set of existential predicates.
      .               ///
      .               /// A Rust trait object type consists (in addition to a lifetime bound)
      .               /// of a set of trait bounds, which are separated into any number
      .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
      .               /// are the set `{Sync}`.
      .               ///
      .               /// It is also possible to have a "trivial" trait object that
      .               /// consists only of auto traits, with no principal - for example,
      .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
      .               /// is `{Send, Sync}`, while there is no principal. These trait objects
      .               /// have a "trivial" vtable consisting of just the size, alignment,
      .               /// and destructor.
     71 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
    970 ( 0.00%)          self[0]
    757 ( 0.00%)              .map_bound(|this| match this {
      .                           ExistentialPredicate::Trait(tr) => Some(tr),
      .                           _ => None,
    284 ( 0.00%)              })
      .                       .transpose()
    213 ( 0.00%)      }
      .           
    148 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
      .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
    296 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn projection_bounds<'a>(
      .                   &'a self,
      .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
      .                   self.iter().filter_map(|predicate| {
      .                       predicate
    120 ( 0.00%)                  .map_bound(|pred| match pred {
      .                               ExistentialPredicate::Projection(projection) => Some(projection),
      .                               _ => None,
      .                           })
      .                           .transpose()
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
      4 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
      .                       ExistentialPredicate::AutoTrait(did) => Some(did),
      .                       _ => None,
      .                   })
      .               }
      .           }
      .           
      .           /// A complete reference to a trait. These take numerous guises in syntax,
      .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
 12,227 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 61,084 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
     53 ( 0.00%)      pub def_id: DefId,
 42,368 ( 0.01%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
    318 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
  1,272 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
  1,809 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    804 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
  1,206 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
  1,608 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
     56 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
      7 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     77 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
  1,716 ( 0.00%)          self.skip_binder().def_id
    572 ( 0.00%)      }
      .           
     87 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    174 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     87 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
    100 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  7,295 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
  1,146 ( 0.00%)      pub def_id: DefId,
  9,158 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
    284 ( 0.00%)      pub fn erase_self_ty(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .               ) -> ty::ExistentialTraitRef<'tcx> {
      .                   // Assert there is a Self.
      .                   trait_ref.substs.type_at(0);
      .           
      .                   ty::ExistentialTraitRef {
      .                       def_id: trait_ref.def_id,
      .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
      .                   }
    284 ( 0.00%)      }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
     26 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
      .                   // otherwise the escaping vars would be captured by the binder
      .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
      .           
     13 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
     65 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
      .               pub fn def_id(&self) -> DefId {
      .                   self.skip_binder().def_id
      .               }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
     63 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     63 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     84 ( 0.00%)      }
      .           }
      .           
  3,811 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
 21,046 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 30,617 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
  1,710 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  7,218 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 16,678 ( 0.01%)          Binder(value, ty::List::empty())
  1,694 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  4,429 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 98,284 ( 0.03%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    670 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
  1,292 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .           
      .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
    499 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  3,386 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
 22,714 ( 0.01%)          Binder(value, self.1)
    499 ( 0.00%)      }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  2,372 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
  2,466 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 15,671 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     60 ( 0.00%)      }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
      .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
    175 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  2,422 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    641 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
  1,028 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    644 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    184 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    736 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    791 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    339 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
    565 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
  1,017 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    783 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     87 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     87 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    957 ( 0.00%)      }
      .           
    156 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    468 ( 0.00%)          self.substs.type_at(0)
    312 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  3,519 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  1,253 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
    178 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
  1,749 ( 0.00%)      pub c_variadic: bool,
    273 ( 0.00%)      pub unsafety: hir::Unsafety,
  2,133 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
  1,529 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  7,040 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  3,058 ( 0.00%)      }
      .           
  1,023 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  7,872 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
  2,046 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    333 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    726 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     45 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    486 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     90 ( 0.00%)          self.skip_binder().c_variadic
     45 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    176 ( 0.00%)          self.skip_binder().unsafety
     88 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    492 ( 0.00%)          self.skip_binder().abi
    123 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
     88 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
    176 ( 0.00%)      pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
    100 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
     50 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
     12 ( 0.00%)          ParamTy::new(def.index, def.name)
      6 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
     46 ( 0.00%)      pub index: u32,
     46 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
285,705 ( 0.10%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     34 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  8,242 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  8,964 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    603 ( 0.00%)      pub def_id: DefId,
  3,760 ( 0.00%)      pub index: u32,
  4,197 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
     73 ( 0.00%)      pub index: u32,
      .               pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
    113 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  1,954 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
    326 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  7,801 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 15,980 ( 0.01%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    503 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    136 ( 0.00%)          match self.kind() {
     13 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  1,685 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  2,906 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  2,614 ( 0.00%)          match self.kind() {
    238 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
     15 ( 0.00%)          matches!(self.kind(), Infer(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_phantom_data(&self) -> bool {
      2 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
      .               }
      .           
      .               #[inline]
      .               pub fn is_bool(&self) -> bool {
      .                   *self.kind() == Bool
      .               }
      .           
      .               /// Returns `true` if this type is a `str`.
      .               #[inline]
      .               pub fn is_str(&self) -> bool {
      .                   *self.kind() == Str
      .               }
      .           
      .               #[inline]
      .               pub fn is_param(&self, index: u32) -> bool {
     20 ( 0.00%)          match self.kind() {
      .                       ty::Param(ref data) => data.index == index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_slice(&self) -> bool {
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
     12 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
     12 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     24 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
     12 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    140 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      2 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
  2,070 ( 0.00%)          match self.kind() {
    360 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
     36 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     36 ( 0.00%)          match self.kind() {
     90 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
      .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
      .                   }
     36 ( 0.00%)      }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
      2 ( 0.00%)          matches!(
      5 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    235 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
     64 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
     96 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
     62 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    397 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      .                   matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
     24 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    449 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  2,586 ( 0.00%)          match self.kind() {
     66 ( 0.00%)              Adt(def, _) if def.is_box() => {
     42 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
  1,500 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      .                       RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
    898 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
  2,184 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,092 ( 0.00%)          match self.kind() {
    819 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  2,457 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
     48 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
  1,381 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
     13 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     56 ( 0.00%)          match self.kind() {
     28 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
     26 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2073 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If the type contains variants, returns the variant for `variant_index`.
      .               /// Panics if `variant_index` is out of range.
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
     10 ( 0.00%)      pub fn discriminant_for_variant(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Option<Discr<'tcx>> {
      5 ( 0.00%)          match self.kind() {
      .                       TyKind::Adt(adt, _) if adt.variants.is_empty() => {
      .                           // This can actually happen during CTFE, see
      .                           // https://github.com/rust-lang/rust/issues/89765.
      .                           None
      .                       }
      .                       TyKind::Adt(adt, _) if adt.is_enum() => {
      .                           Some(adt.discriminant_for_variant(tcx, variant_index))
      .                       }
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Returns the type of the discriminant of this type.
    220 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    110 ( 0.00%)          match self.kind() {
    176 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
    176 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
      .               pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
      .               /// function converts such a special type into the closure
      .               /// kind. To go the other way, use
      .               /// `tcx.closure_kind_ty(closure_kind)`.
      .               ///
      .               /// Note that during type checking, we use an inference variable
      .               /// to represent the closure kind, because it has not yet been
      .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
      .               /// is complete, that type variable will be unified.
     80 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    160 ( 0.00%)          match self.kind() {
    160 ( 0.00%)              Int(int_ty) => match int_ty {
      .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
      .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
      .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
      .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                       },
      .           
      .                       // "Bound" types appear in canonical queries when the
      .                       // closure type is not yet known
      .                       Bound(..) | Infer(_) => None,
      .           
      .                       Error(_) => Some(ty::ClosureKind::Fn),
      .           
      .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
      .                   }
     80 ( 0.00%)      }
      .           
      .               /// Fast path helper for testing if a type is `Sized`.
      .               ///
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  6,624 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  4,416 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
     42 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    297 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  6,624 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
      .           /// When in doubt, use `VarianceDiagInfo::default()`
     60 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum VarianceDiagInfo<'tcx> {
      .               /// No additional information - this is the default.
      .               /// We will not add any additional information to error messages.
      .               #[default]
      .               None,
      .               /// We switched our variance because a generic argument occurs inside
      .               /// the invariant generic argument of another type.
      .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
  2,888 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  4,332 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
  1,444 ( 0.00%)      }
      .           }

939,193 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs
--------------------------------------------------------------------------------
Ir               

-- line 19 ----------------------------------------
      .               InvalidFloatSuffix,
      .               NonDecimalFloat(u32),
      .               IntTooLarge,
      .           }
      .           
      .           impl LitKind {
      .               /// Converts literal token into a semantic literal.
      .               fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {
    338 ( 0.00%)          let token::Lit { kind, symbol, suffix } = lit;
    338 ( 0.00%)          if suffix.is_some() && !kind.may_have_suffix() {
      .                       return Err(LitError::InvalidSuffix);
      .                   }
      .           
  4,394 ( 0.00%)          Ok(match kind {
      .                       token::Bool => {
      8 ( 0.00%)                  assert!(symbol.is_bool_lit());
      .                           LitKind::Bool(symbol == kw::True)
      .                       }
      .                       token::Byte => {
      .                           return unescape_byte(symbol.as_str())
      .                               .map(LitKind::Byte)
      .                               .map_err(|_| LitError::LexerError);
      .                       }
      .                       token::Char => {
-- line 42 ----------------------------------------
-- line 50 ----------------------------------------
      .                       token::Integer => return integer_lit(symbol, suffix),
      .                       token::Float => return float_lit(symbol, suffix),
      .           
      .                       token::Str => {
      .                           // If there are no characters requiring special treatment we can
      .                           // reuse the symbol from the token. Otherwise, we must generate a
      .                           // new symbol because the string in the LitKind is different to the
      .                           // string in the token.
  1,008 ( 0.00%)                  let s = symbol.as_str();
      .                           let symbol =
      .                               if s.contains(&['\\', '\r']) {
      .                                   let mut buf = String::with_capacity(s.len());
     18 ( 0.00%)                          let mut error = Ok(());
     72 ( 0.00%)                          unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {
156,234 ( 0.05%)                              match unescaped_char {
156,234 ( 0.05%)                                  Ok(c) => buf.push(c),
      .                                           Err(err) => {
      .                                               if err.is_fatal() {
      .                                                   error = Err(LitError::LexerError);
      .                                               }
      .                                           }
      .                                       }
      .                                   });
     27 ( 0.00%)                          error?;
      9 ( 0.00%)                          Symbol::intern(&buf)
      .                               } else {
    654 ( 0.00%)                          symbol
      .                               };
  1,680 ( 0.00%)                  LitKind::Str(symbol, ast::StrStyle::Cooked)
      .                       }
      .                       token::StrRaw(n) => {
      .                           // Ditto.
      .                           let s = symbol.as_str();
      .                           let symbol =
      .                               if s.contains('\r') {
      .                                   let mut buf = String::with_capacity(s.len());
      .                                   let mut error = Ok(());
-- line 86 ----------------------------------------
-- line 143 ----------------------------------------
      .                       }
      .                       token::Err => LitKind::Err(symbol),
      .                   })
      .               }
      .           
      .               /// Attempts to recover a token from semantic literal.
      .               /// This function is used when the original token doesn't exist (e.g. the literal is created
      .               /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).
    186 ( 0.00%)      pub fn to_lit_token(&self) -> token::Lit {
    193 ( 0.00%)          let (kind, symbol, suffix) = match *self {
     57 ( 0.00%)              LitKind::Str(symbol, ast::StrStyle::Cooked) => {
      .                           // Don't re-intern unless the escaped string is different.
     76 ( 0.00%)                  let s = symbol.as_str();
     38 ( 0.00%)                  let escaped = s.escape_default().to_string();
     41 ( 0.00%)                  let symbol = if s == escaped { symbol } else { Symbol::intern(&escaped) };
      .                           (token::Str, symbol, None)
      .                       }
      .                       LitKind::Str(symbol, ast::StrStyle::Raw(n)) => (token::StrRaw(n), symbol, None),
      .                       LitKind::ByteStr(ref bytes) => {
      .                           let string = bytes
      .                               .iter()
      .                               .cloned()
      .                               .flat_map(ascii::escape_default)
-- line 165 ----------------------------------------
-- line 166 ----------------------------------------
      .                               .map(Into::<char>::into)
      .                               .collect::<String>();
      .                           (token::ByteStr, Symbol::intern(&string), None)
      .                       }
      .                       LitKind::Byte(byte) => {
      .                           let string: String = ascii::escape_default(byte).map(Into::<char>::into).collect();
      .                           (token::Byte, Symbol::intern(&string), None)
      .                       }
      8 ( 0.00%)              LitKind::Char(ch) => {
      .                           let string: String = ch.escape_default().map(Into::<char>::into).collect();
      8 ( 0.00%)                  (token::Char, Symbol::intern(&string), None)
      .                       }
     40 ( 0.00%)              LitKind::Int(n, ty) => {
     24 ( 0.00%)                  let suffix = match ty {
      .                               ast::LitIntType::Unsigned(ty) => Some(ty.name()),
      .                               ast::LitIntType::Signed(ty) => Some(ty.name()),
      .                               ast::LitIntType::Unsuffixed => None,
      .                           };
     40 ( 0.00%)                  (token::Integer, sym::integer(n), suffix)
      .                       }
      .                       LitKind::Float(symbol, ty) => {
      .                           let suffix = match ty {
      .                               ast::LitFloatType::Suffixed(ty) => Some(ty.name()),
      .                               ast::LitFloatType::Unsuffixed => None,
      .                           };
      .                           (token::Float, symbol, suffix)
      .                       }
-- line 192 ----------------------------------------
-- line 193 ----------------------------------------
      .                       LitKind::Bool(value) => {
      .                           let symbol = if value { kw::True } else { kw::False };
      .                           (token::Bool, symbol, None)
      .                       }
      .                       LitKind::Err(symbol) => (token::Err, symbol, None),
      .                   };
      .           
      .                   token::Lit::new(kind, symbol, suffix)
    217 ( 0.00%)      }
      .           }
      .           
      .           impl Lit {
      .               /// Converts literal token into an AST literal.
  4,732 ( 0.00%)      pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {
  2,028 ( 0.00%)          Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })
  3,042 ( 0.00%)      }
      .           
      .               /// Converts arbitrary token into an AST literal.
      .               ///
      .               /// Keep this in sync with `Token::can_begin_literal_or_bool` excluding unary negation.
  5,913 ( 0.00%)      pub fn from_token(token: &Token) -> Result<Lit, LitError> {
  4,188 ( 0.00%)          let lit = match token.uninterpolate().kind {
  1,872 ( 0.00%)              token::Ident(name, false) if name.is_bool_lit() => {
      .                           token::Lit::new(token::Bool, name, None)
      .                       }
  1,344 ( 0.00%)              token::Literal(lit) => lit,
     30 ( 0.00%)              token::Interpolated(ref nt) => {
     60 ( 0.00%)                  if let token::NtExpr(expr) | token::NtLiteral(expr) = &**nt {
     20 ( 0.00%)                      if let ast::ExprKind::Lit(lit) = &expr.kind {
    100 ( 0.00%)                          return Ok(lit.clone());
      .                               }
      .                           }
      .                           return Err(LitError::NotLiteral);
      .                       }
      .                       _ => return Err(LitError::NotLiteral),
      .                   };
      .           
  1,014 ( 0.00%)          Lit::from_lit_token(lit, token.span)
  5,913 ( 0.00%)      }
      .           
      .               /// Attempts to recover an AST literal from semantic literal.
      .               /// This function is used when the original token doesn't exist (e.g. the literal is created
      .               /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).
    186 ( 0.00%)      pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {
    279 ( 0.00%)          Lit { token: kind.to_lit_token(), kind, span }
    155 ( 0.00%)      }
      .           
      .               /// Losslessly convert an AST literal into a token.
      .               pub fn to_token(&self) -> Token {
      .                   let kind = match self.token.kind {
      .                       token::Bool => token::Ident(self.token.symbol, false),
      .                       _ => token::Literal(self.token),
      .                   };
      .                   Token::new(kind, self.span)
-- line 246 ----------------------------------------

158,555 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
 11,014 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 16,734 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 35,918 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  4,849 ( 0.00%)          i += 2
      .               }
      .           
 16,734 ( 0.01%)      if i < count {
  9,407 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 70,177 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
461,148 ( 0.16%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
139,297 ( 0.05%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 21,303 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  6,726 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  6,726 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 67,260 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 53,808 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 60,534 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 31,602 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 26,904 ( 0.01%)          self.processed += BUFFER_SIZE;
 13,452 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  6,831 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 46,676 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 17,056 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  8,537 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  4,879 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  3,905 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    781 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,343 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    781 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,562 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  6,024 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  6,805 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 12,048 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,562 ( 0.00%)          let input_left = length - processed;
    633 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
  7,102 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
  7,102 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
  7,102 ( 0.00%)              self.state.v0 ^= elem;
 14,204 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    781 ( 0.00%)          self.nbuf = extra_bytes_left;
  3,905 ( 0.00%)          self.processed += nbuf + processed;
  4,686 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  4,602 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  6,136 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  4,423 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  4,423 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  4,423 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  3,068 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,323 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  4,391 ( 0.00%)          let length = self.processed + self.nbuf;
  3,066 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,533 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,533 ( 0.00%)          state.v0 ^= b;
      .           
  1,533 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  4,356 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  1,288 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,288 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
300,629 ( 0.10%)          compress!(state);
329,810 ( 0.11%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  8,708 ( 0.00%)          compress!(state);
  8,708 ( 0.00%)          compress!(state);
  8,708 ( 0.00%)          compress!(state);
  7,176 ( 0.00%)          compress!(state);
      .               }
      .           }

 54,533 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir               

-- line 124 ----------------------------------------
      .           /// sizes and avoid calling `memcpy`, which is good for speed.
      .           ///
      .           /// Unsafe because: unchecked indexing at start..start+len
      .           #[inline]
      .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
      .               debug_assert!(len < 8);
      .               let mut i = 0; // current byte index (from LSB) in the output u64
      .               let mut out = 0;
 34,494 ( 0.01%)      if i + 3 < len {
      .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
      .                   // that the index start..start+len is in bounds.
      .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
      .                   i += 4;
      .               }
 70,969 ( 0.02%)      if i + 1 < len {
      .                   // SAFETY: same as above.
 35,456 ( 0.01%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
 17,518 ( 0.01%)          i += 2
      .               }
 39,925 ( 0.01%)      if i < len {
      .                   // SAFETY: same as above.
 55,074 ( 0.02%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
      .                   i += 1;
      .               }
      .               debug_assert_eq!(i, len);
      .               out
      .           }
      .           
      .           impl SipHasher {
      .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
      .               /// Creates a `SipHasher13` that is keyed off the provided keys.
      .               #[inline]
      .               #[unstable(feature = "hashmap_internals", issue = "none")]
      .               #[rustc_deprecated(
      .                   since = "1.13.0",
      .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
      .               )]
      .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
  6,649 ( 0.00%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
      .               }
      .           }
      .           
      .           impl<S: Sip> Hasher<S> {
      .               #[inline]
      .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
      9 ( 0.00%)          let mut state = Hasher {
      .                       k0: key0,
      .                       k1: key1,
      .                       length: 0,
      .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
      .                       tail: 0,
      .                       ntail: 0,
      .                       _marker: PhantomData,
      .                   };
      .                   state.reset();
      .                   state
      .               }
      .           
      .               #[inline]
      .               fn reset(&mut self) {
      .                   self.length = 0;
  9,969 ( 0.00%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
 10,462 ( 0.00%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
      .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
      .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
      .                   self.ntail = 0;
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
      .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
      .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
      .               // greatly speed up integer hashing by those hashers, at the cost of
      .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
      .               // details.
      .               #[inline]
      .               fn write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
 42,795 ( 0.01%)          self.length += length;
      .           
      .                   let mut needed = 0;
      .           
 42,291 ( 0.01%)          if self.ntail != 0 {
 21,400 ( 0.01%)              needed = 8 - self.ntail;
      .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
106,960 ( 0.04%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
 21,392 ( 0.01%)              if length < needed {
 14,138 ( 0.00%)                  self.ntail += length;
      .                           return;
      .                       } else {
  3,627 ( 0.00%)                  self.state.v3 ^= self.tail;
      .                           S::c_rounds(&mut self.state);
  7,254 ( 0.00%)                  self.state.v0 ^= self.tail;
  3,627 ( 0.00%)                  self.ntail = 0;
      .                       }
      .                   }
      .           
      .                   // Buffered tail is now flushed, process new input.
 13,059 ( 0.00%)          let len = length - needed;
 13,070 ( 0.00%)          let left = len & 0x7; // len % 8
      .           
      .                   let mut i = needed;
 19,941 ( 0.01%)          while i < len - left {
      .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
      .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
      .                       // `i + 8` is guaranteed to be less than or equal to `length`.
      .                       let mi = unsafe { load_int_le!(msg, i, u64) };
      .           
    168 ( 0.00%)              self.state.v3 ^= mi;
      .                       S::c_rounds(&mut self.state);
    168 ( 0.00%)              self.state.v0 ^= mi;
      .           
    336 ( 0.00%)              i += 8;
      .                   }
      .           
      .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
      .                   // so `i + left` = `needed + len` = `length`, which is by
      .                   // definition equal to `msg.len()`.
 13,552 ( 0.00%)          self.tail = unsafe { u8to64_le(msg, i, left) };
      .                   self.ntail = left;
      .               }
      .           
      .               #[inline]
      .               fn finish(&self) -> u64 {
  3,326 ( 0.00%)          let mut state = self.state;
      .           
 16,630 ( 0.01%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
      .           
  3,326 ( 0.00%)          state.v3 ^= b;
      .                   S::c_rounds(&mut state);
  3,326 ( 0.00%)          state.v0 ^= b;
      .           
  3,326 ( 0.00%)          state.v2 ^= 0xff;
      .                   S::d_rounds(&mut state);
      .           
  6,652 ( 0.00%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
      .               }
      .           }
      .           
      .           impl<S: Sip> Clone for Hasher<S> {
      .               #[inline]
      .               fn clone(&self) -> Hasher<S> {
      .                   Hasher {
      .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip13Rounds;
      .           
      .           impl Sip for Sip13Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
 46,865 ( 0.02%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 13,304 ( 0.00%)          compress!(state);
 13,304 ( 0.00%)          compress!(state);
  9,978 ( 0.00%)          compress!(state);
      .               }
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip for Sip24Rounds {
      .               #[inline]
-- line 377 ----------------------------------------

100,826 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    126 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
     81 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  6,492 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
 34,510 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
  9,860 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 14,790 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
  4,930 ( 0.00%)          if is_beginning_of_file {
     36 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
  9,888 ( 0.00%)              let start_src_index = self.src_index(self.pos);
 22,227 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
  7,409 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     45 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
 22,200 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 14,800 ( 0.01%)              let start = self.pos;
  7,400 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
 62,120 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
 39,368 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
 29,526 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
 44,370 ( 0.02%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
    301 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
    344 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
 37,000 ( 0.01%)          Some(match token {
    773 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  3,736 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
  3,650 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      .                           if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
  6,212 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  7,765 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
  3,106 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
  4,659 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
  7,765 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
  6,212 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
  3,106 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 10,871 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
  1,456 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
    273 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
      .                                       .emit();
      .                                   None
      .                               } else {
      .                                   Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
    728 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
     48 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
     24 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
     72 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
     96 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
  8,760 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
    730 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  2,190 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 10,950 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
     91 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
     91 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
-- line 397 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    273 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 15,136 ( 0.01%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
  1,092 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
  2,532 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 10,128 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
    546 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
218,642 ( 0.08%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
 54,160 ( 0.02%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
243,720 ( 0.08%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
      .                   let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
-- line 645 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 16,434 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
  3,652 ( 0.00%)      match is_nfc_quick(string.chars()) {
 18,260 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

 29,012 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
        .                   )
        .               }
        .           }
        .           
        .           /// Takes a contents of a literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           /// Values are returned through invoking of the provided callback.
    1,800 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               match mode {
        .                   Mode::Char | Mode::Byte => {
        .                       let mut chars = literal_text.chars();
        .                       let result = unescape_char_or_byte(&mut chars, mode);
        .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
        .                   }
        .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
        .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
        .                   // only translate CRLF to LF and produce errors on bare CR.
        .                   Mode::RawStr | Mode::RawByteStr => {
        .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
        .                   }
        .               }
      800 ( 0.00%)  }
        .           
        .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
        .           /// and produces a sequence of bytes or errors.
        .           /// Values are returned through invoking of the provided callback.
        .           pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
        .           {
-- line 107 ----------------------------------------
-- line 136 ----------------------------------------
        .               Byte,
        .               ByteStr,
        .               RawStr,
        .               RawByteStr,
        .           }
        .           
        .           impl Mode {
        .               pub fn in_single_quotes(self) -> bool {
      200 ( 0.00%)          match self {
        .                       Mode::Char | Mode::Byte => true,
        .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
        .                   }
        .               }
        .           
      200 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
        .                   !self.in_single_quotes()
      100 ( 0.00%)      }
        .           
        .               pub fn is_bytes(self) -> bool {
        .                   match self {
        .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
        .                       Mode::Char | Mode::Str | Mode::RawStr => false,
        .                   }
        .               }
        .           }
        .           
1,051,970 ( 0.36%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
  494,807 ( 0.17%)      if first_char != '\\' {
        .                   // Previous character was not a slash, and we don't expect it to be
        .                   // an escape-only character.
        .                   return match first_char {
        .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
        .                       '\r' => Err(EscapeError::BareCarriageReturn),
        .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       _ => {
  101,109 ( 0.03%)                  if mode.is_bytes() && !first_char.is_ascii() {
        .                               // Byte literal can't be a non-ascii character.
        .                               return Err(EscapeError::NonAsciiCharInByte);
        .                           }
        .                           Ok(first_char)
        .                       }
        .                   };
        .               }
        .           
        .               // Previous character is '\\', try to unescape it.
        .           
   12,264 ( 0.00%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
        .           
        .               let res = match second_char {
        .                   '"' => '"',
        .                   'n' => '\n',
        .                   'r' => '\r',
        .                   't' => '\t',
        .                   '\\' => '\\',
        .                   '\'' => '\'',
-- line 191 ----------------------------------------
-- line 209 ----------------------------------------
        .                       let value = value as u8;
        .           
        .                       value as char
        .                   }
        .           
        .                   'u' => {
        .                       // We've parsed '\u', now we have to parse '{..}'.
        .           
       32 ( 0.00%)              if chars.next() != Some('{') {
        .                           return Err(EscapeError::NoBraceInUnicodeEscape);
        .                       }
        .           
        .                       // First character must be a hexadecimal digit.
        .                       let mut n_digits = 1;
       64 ( 0.00%)              let mut value: u32 = match chars.next().ok_or(EscapeError::UnclosedUnicodeEscape)? {
        .                           '_' => return Err(EscapeError::LeadingUnderscoreUnicodeEscape),
        .                           '}' => return Err(EscapeError::EmptyUnicodeEscape),
        .                           c => c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?,
        .                       };
        .           
        .                       // First character is valid, now parse the rest of the number
        .                       // and closing brace.
        .                       loop {
      240 ( 0.00%)                  match chars.next() {
        .                               None => return Err(EscapeError::UnclosedUnicodeEscape),
        .                               Some('_') => continue,
        .                               Some('}') => {
       16 ( 0.00%)                          if n_digits > 6 {
        .                                       return Err(EscapeError::OverlongUnicodeEscape);
        .                                   }
        .           
        .                                   // Incorrect syntax has higher priority for error reporting
        .                                   // than unallowed value for a literal.
        .                                   if mode.is_bytes() {
        .                                       return Err(EscapeError::UnicodeEscapeInByte);
        .                                   }
        .           
       24 ( 0.00%)                          break std::char::from_u32(value).ok_or_else(|| {
        .                                       if value > 0x10FFFF {
        .                                           EscapeError::OutOfRangeUnicodeEscape
        .                                       } else {
        .                                           EscapeError::LoneSurrogateUnicodeEscape
        .                                       }
        .                                   })?;
        .                               }
        .                               Some(c) => {
        .                                   let digit =
        .                                       c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;
       48 ( 0.00%)                          n_digits += 1;
       48 ( 0.00%)                          if n_digits > 6 {
        .                                       // Stop updating value since we're sure that it's is incorrect already.
        .                                       continue;
        .                                   }
        .                                   let digit = digit as u32;
      168 ( 0.00%)                          value = value * 16 + digit;
        .                               }
        .                           };
        .                       }
        .                   }
        .                   _ => return Err(EscapeError::InvalidEscape),
        .               };
        .               Ok(res)
1,262,364 ( 0.44%)  }
        .           
        .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
        .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
        .               let res = scan_escape(first_char, chars, mode)?;
        .               if chars.next().is_some() {
        .                   return Err(EscapeError::MoreThanOneChar);
        .               }
        .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
      309 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = src.len();
      100 ( 0.00%)      let mut chars = src.chars();
        .               while let Some(first_char) = chars.next() {
  525,985 ( 0.18%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
        .           
  614,830 ( 0.21%)          let unescaped_char = match first_char {
        .                       '\\' => {
        .                           let second_char = chars.clone().next();
    8,176 ( 0.00%)                  match second_char {
        .                               Some('\n') => {
        .                                   // Rust language specification requires us to skip whitespaces
        .                                   // if unescaped '\' character is followed by '\n'.
        .                                   // For details see [Rust language reference]
        .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
        .                                   skip_ascii_whitespace(&mut chars, start, callback);
        .                                   continue;
        .                               }
    4,088 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
        .                           }
        .                       }
        .                       '\n' => Ok('\n'),
        .                       '\t' => Ok('\t'),
        .                       _ => scan_escape(first_char, &mut chars, mode),
        .                   };
  237,474 ( 0.08%)          let end = initial_len - chars.as_str().len();
  586,391 ( 0.20%)          callback(start..end, unescaped_char);
        .               }
        .           
        .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
        .               where
        .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
        .               {
        .                   let tail = chars.as_str();
        .                   let first_non_space = tail
-- line 322 ----------------------------------------
-- line 344 ----------------------------------------
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of characters or errors.
        .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
        .           /// only translate CRLF to LF and produce errors on bare CR.
        .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
      182 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = literal_text.len();
        .           
        .               let mut chars = literal_text.chars();
        .               while let Some(curr) = chars.next() {
        .                   let start = initial_len - chars.as_str().len() - curr.len_utf8();
        .           
        .                   let result = match curr {
        .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
-- line 360 ----------------------------------------

1,057,086 ( 0.37%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     56 ( 0.00%)      fn clone(&self) -> Self {
    799 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
    165 ( 0.00%)              table: self.table.clone(),
      .                   }
     63 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 12,062 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 28,871 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 36,041 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
    660 ( 0.00%)      hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
  7,989 ( 0.00%)      hash_builder.hash_one(val)
      .           }
      .           
      .           #[cfg(feature = "ahash")]
      .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
      .               /// Creates an empty `HashMap`.
      .               ///
      .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
      .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 15,907 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     61 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  1,594 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  6,093 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    152 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      5 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    185 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    190 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 44,725 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 88,387 ( 0.03%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 28,095 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 37,062 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     18 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     54 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     36 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     18 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
447,711 ( 0.15%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     71 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
268,232 ( 0.09%)              self.table
239,541 ( 0.08%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 23,546 ( 0.01%)              None
      .                   }
418,364 ( 0.14%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  3,959 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
127,386 ( 0.04%)          match self.remove_entry(k) {
  2,083 ( 0.00%)              Some((_, v)) => Some(v),
  4,069 ( 0.00%)              None => None,
      .                   }
  8,737 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 32,142 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
167,374 ( 0.06%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
433,509 ( 0.15%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
464,011 ( 0.16%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 43,082 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
231,398 ( 0.08%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 51,462 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 96,061 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
131,365 ( 0.05%)          self.from_hash(hash, equivalent(k))
180,304 ( 0.06%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
176,471 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 83,340 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    225 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  4,789 ( 0.00%)          IntoIter {
  2,892 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    675 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 11,522 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    185 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    296 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     16 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     14 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  3,965 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  3,413 ( 0.00%)          let iter = iter.into_iter();
  1,613 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     59 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 18,834 ( 0.01%)              self.insert(k, v);
      .                   });
  2,364 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

194,011 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
      .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
      .                       extern "C" fn get() -> &'static Self {
      .                           static COUNTERS: HandleCounters = HandleCounters {
      .                               $($oty: AtomicUsize::new(1),)*
      .                               $($ity: AtomicUsize::new(1),)*
      .                           };
      .                           &COUNTERS
      2 ( 0.00%)              }
      .                   }
      .           
      .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
      .                   #[repr(C)]
      .                   #[allow(non_snake_case)]
      .                   pub(super) struct HandleStore<S: server::Types> {
      .                       $($oty: handle::OwnedStore<S::$oty>,)*
      .                       $($ity: handle::InternedStore<S::$ity>,)*
      .                   }
      .           
      .                   impl<S: server::Types> HandleStore<S> {
      6 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
     59 ( 0.00%)                  HandleStore {
      .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
      .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
      .                           }
      8 ( 0.00%)              }
      .                   }
      .           
      .                   $(
      .                       #[repr(C)]
      .                       pub(crate) struct $oty(handle::Handle);
      .                       impl !Send for $oty {}
      .                       impl !Sync for $oty {}
      .           
      .                       // Forward `Drop::drop` to the inherent `drop` method.
      .                       impl Drop for $oty {
    292 ( 0.00%)                  fn drop(&mut self) {
  1,250 ( 0.00%)                      $oty(self.0).drop();
    438 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S> Encode<S> for $oty {
      8 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
      3 ( 0.00%)                      let handle = self.0;
      4 ( 0.00%)                      mem::forget(self);
      1 ( 0.00%)                      handle.encode(w, s);
      2 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
      .                           for Marked<S::$oty, $oty>
      .                       {
  6,018 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
      .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  8,024 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S> Encode<S> for &$oty {
      .                           fn encode(self, w: &mut Writer, s: &mut S) {
  3,345 ( 0.00%)                      self.0.encode(w, s);
      .                           }
      .                       }
      .           
      .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
      .                           for &'s Marked<S::$oty, $oty>
      .                       {
  1,115 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
      .                               &s.$oty[handle::Handle::decode(r, &mut ())]
  2,230 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S> Encode<S> for &mut $oty {
      .                           fn encode(self, w: &mut Writer, s: &mut S) {
  5,787 ( 0.00%)                      self.0.encode(w, s);
      .                           }
      .                       }
      .           
      .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
      .                           for &'s mut Marked<S::$oty, $oty>
      .                       {
  1,929 ( 0.00%)                  fn decode(
      .                               r: &mut Reader<'_>,
      .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
      .                           ) -> Self {
      .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
  3,858 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
      .                           for Marked<S::$oty, $oty>
      .                       {
 13,103 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  4,304 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
      .                           }
      .                       }
      .           
      .                       impl<S> DecodeMut<'_, '_, S> for $oty {
      3 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      3 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
      3 ( 0.00%)                  }
      .                       }
      .                   )*
      .           
      .                   $(
      .                       #[repr(C)]
  4,284 ( 0.00%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .                       pub(crate) struct $ity(handle::Handle);
      .                       impl !Send for $ity {}
      .                       impl !Sync for $ity {}
      .           
      .                       impl<S> Encode<S> for $ity {
      .                           fn encode(self, w: &mut Writer, s: &mut S) {
      .                               self.0.encode(w, s);
      .                           }
      .                       }
      .           
      .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
      .                           for Marked<S::$ity, $ity>
      .                       {
  2,000 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
      .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
  4,000 ( 0.00%)                  }
      .                       }
      .           
      .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
      .                           for Marked<S::$ity, $ity>
      .                       {
      .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
 13,974 ( 0.00%)                      s.$ity.alloc(self).encode(w, s);
      .                           }
      .                       }
      .           
      .                       impl<S> DecodeMut<'_, '_, S> for $ity {
      .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      .                               $ity(handle::Handle::decode(r, s))
      .                           }
      .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
      .           
      .           // FIXME(eddyb) generate these impls by pattern-matching on the
      .           // names of methods - also could use the presence of `fn drop`
      .           // to distinguish between 'owned and 'interned, above.
      .           // Alternatively, special 'modes" could be listed of types in with_api
      .           // instead of pattern matching on methods, here and in server decl.
      .           
      .           impl Clone for TokenStream {
    264 ( 0.00%)      fn clone(&self) -> Self {
      .                   self.clone()
    264 ( 0.00%)      }
      .           }
      .           
      .           impl Clone for TokenStreamIter {
      .               fn clone(&self) -> Self {
      .                   self.clone()
      .               }
      .           }
      .           
      .           impl Clone for Group {
    102 ( 0.00%)      fn clone(&self) -> Self {
      .                   self.clone()
    102 ( 0.00%)      }
      .           }
      .           
      .           impl Clone for Literal {
    402 ( 0.00%)      fn clone(&self) -> Self {
      .                   self.clone()
    402 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for Literal {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_struct("Literal")
      .                       // format the kind without quotes, as in `kind: Float`
      .                       .field("kind", &format_args!("{}", &self.debug_kind()))
      .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
      .           impl Clone for SourceFile {
      .               fn clone(&self) -> Self {
      .                   self.clone()
      .               }
      .           }
      .           
      .           impl fmt::Debug for Span {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    610 ( 0.00%)          f.write_str(&self.debug())
      .               }
      .           }
      .           
      .           macro_rules! define_client_side {
      .               ($($name:ident {
      .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
      .               }),* $(,)?) => {
      .                   $(impl $name {
  6,726 ( 0.00%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
  3,467 ( 0.00%)                  Bridge::with(|bridge| {
      .                               let mut b = bridge.cached_buffer.take();
      .           
      .                               b.clear();
 27,621 ( 0.01%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
  4,752 ( 0.00%)                      reverse_encode!(b; $($arg),*);
      .           
 55,242 ( 0.02%)                      b = bridge.dispatch.call(b);
      .           
 39,198 ( 0.01%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
      .           
110,484 ( 0.04%)                      bridge.cached_buffer = b;
      .           
 15,019 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
      .                           })
  5,605 ( 0.00%)              })*
      .                   })*
      .               }
      .           }
      .           with_api!(self, self, define_client_side);
      .           
      .           enum BridgeState<'a> {
      .               /// No server is currently connected to this client.
      .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
      .           enum BridgeStateL {}
      .           
      .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
      .               type Out = BridgeState<'a>;
      .           }
      .           
      .           thread_local! {
      .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
      3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
      .           }
      .           
      .           impl BridgeState<'_> {
      .               /// Take exclusive control of the thread-local
      .               /// `BridgeState`, and pass it to `f`, mutably.
      .               /// The state will be restored after `f` exits, even
      .               /// by panic, including modifications made to it by `f`.
      .               ///
      .               /// N.B., while `f` is running, the thread-local state
      .               /// is `BridgeState::InUse`.
  6,150 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
  4,978 ( 0.00%)          BRIDGE_STATE.with(|state| {
 48,066 ( 0.02%)              state.replace(BridgeState::InUse, |mut state| {
      .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
     24 ( 0.00%)                  f(&mut *state)
      4 ( 0.00%)              })
      4 ( 0.00%)          })
  5,191 ( 0.00%)      }
      .           }
      .           
      .           impl Bridge<'_> {
      .               pub(crate) fn is_available() -> bool {
      3 ( 0.00%)          BridgeState::with(|state| match state {
      .                       BridgeState::Connected(_) | BridgeState::InUse => true,
      .                       BridgeState::NotConnected => false,
      .                   })
      .               }
      .           
      6 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
      7 ( 0.00%)          let force_show_panics = self.force_show_panics;
      .                   // Hide the default panic output within `proc_macro` expansions.
      .                   // NB. the server can't do this because it may use a different libstd.
      .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
      7 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
      7 ( 0.00%)              panic::update_hook(move |prev, info| {
      .                           let show = BridgeState::with(|state| match state {
      .                               BridgeState::NotConnected => true,
      .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
      .                           });
      .                           if show {
      .                               prev(info)
      .                           }
      .                       });
      2 ( 0.00%)          });
      .           
     37 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
      2 ( 0.00%)      }
      .           
      5 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
 65,452 ( 0.02%)          BridgeState::with(|state| match state {
      .                       BridgeState::NotConnected => {
      .                           panic!("procedural macro API is used outside of a procedural macro");
      .                       }
      .                       BridgeState::InUse => {
      .                           panic!("procedural macro API is used while it's already in use");
      .                       }
     13 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
      4 ( 0.00%)          })
      4 ( 0.00%)      }
      .           }
      .           
      .           /// A client-side "global object" (usually a function pointer),
      .           /// which may be using a different `proc_macro` from the one
      .           /// used by the server, but can be interacted with compatibly.
      .           ///
      .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
      .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
      .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
      .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
      .               pub(super) f: F,
      .           }
      .           
      .           /// Client-side helper for handling client panics, entering the bridge,
      .           /// deserializing input and serializing output.
      .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
      7 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
      .               mut bridge: Bridge<'_>,
      .               f: impl FnOnce(A) -> R,
      .           ) -> Buffer<u8> {
      .               // The initial `cached_buffer` contains the input.
      6 ( 0.00%)      let mut b = bridge.cached_buffer.take();
      .           
     36 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
     15 ( 0.00%)          bridge.enter(|| {
     19 ( 0.00%)              let reader = &mut &b[..];
      7 ( 0.00%)              let input = A::decode(reader, &mut ());
      .           
      .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
     20 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
      .           
     16 ( 0.00%)              let output = f(input);
      .           
      .                       // Take the `cached_buffer` back out, for the output value.
     19 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
      .           
      .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
      .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
      .                       // having handles outside the `bridge.enter(|| ...)` scope, and
      .                       // to catch panics that could happen while encoding the success.
      .                       //
      .                       // Note that panics should be impossible beyond this point, but
      .                       // this is defensively trying to avoid any accidental panicking
      .                       // reaching the `extern "C"` (which should `abort` but might not
      .                       // at the moment, so this is also potentially preventing UB).
      3 ( 0.00%)              b.clear();
     10 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
      4 ( 0.00%)          })
      2 ( 0.00%)      }))
      .               .map_err(PanicMessage::from)
      1 ( 0.00%)      .unwrap_or_else(|e| {
      .                   b.clear();
      .                   Err::<(), _>(e).encode(&mut b, &mut ());
      .               });
      .               b
      2 ( 0.00%)  }
      .           
      .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
      .               #[rustc_allow_const_fn_unstable(const_fn)]
      1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
      7 ( 0.00%)          extern "C" fn run(
      .                       bridge: Bridge<'_>,
      .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
      .                   ) -> Buffer<u8> {
     30 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
      2 ( 0.00%)          }
      5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
      1 ( 0.00%)      }
      .           }
      .           
      .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
      .               #[rustc_allow_const_fn_unstable(const_fn)]
      .               pub const fn expand2(
      .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
      .               ) -> Self {
      .                   extern "C" fn run(
-- line 420 ----------------------------------------

 23,764 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
71,192 ( 0.02%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
14,962 ( 0.01%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
   619 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    81 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
    27 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    72 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
 2,999 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
10,773 ( 0.00%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
22,040 ( 0.01%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
64,704 ( 0.02%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
 1,072 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
   458 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
 1,082 ( 0.00%)      }
     .           
 2,125 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
    20 ( 0.00%)          match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
   354 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
 2,049 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
    18 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
     .                       Entry::Vacant(entry) => entry.insert(default),
     .                   }
     .               }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
19,368 ( 0.01%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
 4,842 ( 0.00%)          match self {
 1,228 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 1,501 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
19,368 ( 0.01%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
68,971 ( 0.02%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
19,706 ( 0.01%)          match self {
   727 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
27,378 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
78,824 ( 0.03%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
 3,482 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
28,786 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
    63 ( 0.00%)          &mut self.map.entries[i].value
 3,968 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

71,895 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  4,815 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,605 ( 0.00%)          let tcx = self.tcx();
227,158 ( 0.08%)          DecodeContext {
 23,492 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,605 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 11,156 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 20,737 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  4,815 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 44,853 ( 0.02%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 23,191 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 64,451 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 17,411 ( 0.01%)          T::decode(&mut dcx)
 57,145 ( 0.02%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     35 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     10 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 10,066 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 86,650 ( 0.03%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 32,222 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 31,190 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  5,240 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 10,480 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  9,282 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 16,668 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 32,222 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 54,475 ( 0.02%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 53,914 ( 0.02%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  7,702 ( 0.00%)          let tcx = self.tcx();
      .           
  7,702 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 21,192 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  2,404 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 69,318 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 12,335 ( 0.00%)          self.opaque = old_opaque;
  2,467 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 46,938 ( 0.02%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    122 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 80,518 ( 0.03%)          DefIndex::from_u32(d.read_u32())
    244 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 28,432 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  7,108 ( 0.00%)          let cdata = decoder.cdata();
  7,108 ( 0.00%)          let sess = decoder.sess.unwrap();
 14,216 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    108 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 35,540 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  2,716 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    388 ( 0.00%)          let local_cdata = decoder.cdata();
    388 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     39 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    195 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    195 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    390 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  3,104 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 56,216 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  7,027 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 14,054 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 21,063 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 16,033 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      9 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     18 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
      9 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 21,063 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 27,991 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  3,982 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  1,991 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  1,988 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  3,982 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 28,084 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 63,243 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  9,645 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 11,178 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 10,985 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    195 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     65 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    325 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    130 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    260 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    195 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    325 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     41 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     21 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     45 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     40 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
     14 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      4 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      8 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
     18 ( 0.00%)      }
      .           
 16,060 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 12,070 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  6,727 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     72 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 20,596 ( 0.01%)      }
      .           
    117 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,933 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    234 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  9,864 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 39,456 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 29,592 ( 0.01%)      }
      .           
  6,608 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  4,596 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,776 ( 0.00%)      }
      .           
  1,053 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,980 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    585 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
     16 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
     10 ( 0.00%)              ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
      .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
      6 ( 0.00%)                      helper_attrs,
      .                           )
      .                       }
      .                       ProcMacro::Attr { name, client } => {
      .                           (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
      .                       }
      .                       ProcMacro::Bang { name, client } => {
      .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
      .                       }
      .                   };
      .           
      5 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
     12 ( 0.00%)          SyntaxExtension::new(
      .                       sess,
      5 ( 0.00%)              kind,
      .                       self.get_span(id, sess),
      4 ( 0.00%)              helper_attrs,
      3 ( 0.00%)              self.root.edition,
      1 ( 0.00%)              Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    312 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     96 ( 0.00%)          match self.kind(item_id) {
     24 ( 0.00%)              EntryKind::Trait(data) => {
    144 ( 0.00%)                  let data = data.decode((self, sess));
    384 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     48 ( 0.00%)                      data.unsafety,
     48 ( 0.00%)                      data.paren_sugar,
     48 ( 0.00%)                      data.has_auto_impl,
     48 ( 0.00%)                      data.is_marker,
     24 ( 0.00%)                      data.skip_array_during_method_dispatch,
     24 ( 0.00%)                      data.specialization_kind,
     96 ( 0.00%)                      self.def_path_hash(item_id),
     24 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    216 ( 0.00%)      }
      .           
    243 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    108 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    135 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     90 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     54 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    594 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    108 ( 0.00%)              data.discr,
    162 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     32 ( 0.00%)                      did: self.local_def_id(index),
     64 ( 0.00%)                      name: self.item_ident(index, sess).name,
     64 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     27 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    243 ( 0.00%)      }
      .           
    315 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     84 ( 0.00%)          let kind = self.kind(item_id);
     42 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     99 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    153 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    144 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    309 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    147 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    705 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    705 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     80 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      4 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,353 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  6,960 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    390 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     10 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    350 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     30 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  2,820 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     20 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 23,916 ( 0.01%)          match self.kind(id) {
 19,930 ( 0.01%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 11,805 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     48 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      .                   self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      3 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  1,295 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 47,706 ( 0.02%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,610 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     63 ( 0.00%)          tcx.arena.alloc_from_iter(
     42 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     42 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    189 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    188 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      1 ( 0.00%)              if id == CRATE_DEF_INDEX {
     15 ( 0.00%)                  for def_index in data.macros.decode(self) {
      3 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
      .                               );
      .                               let ident = self.item_ident(def_index, sess);
      .                               callback(ModChild {
      .                                   ident,
      .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    368 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    736 ( 0.00%)              for child_index in children.decode((self, sess)) {
  6,096 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,410 ( 0.00%)                      let kind = self.def_kind(child_index);
    940 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,806 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     35 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     21 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      7 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    468 ( 0.00%)          match self.kind(id) {
     30 ( 0.00%)              EntryKind::Mod(exports) => {
    872 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     20 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,121 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     25 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    585 ( 0.00%)          match self.kind(id) {
    468 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    357 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    153 ( 0.00%)              tcx.arena.alloc_from_iter(
     51 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  3,072 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  1,792 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  1,796 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    254 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  1,778 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
      4 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  4,608 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  2,304 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    130 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    938 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    405 ( 0.00%)                  let vdata = data.decode(self);
    201 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    437 ( 0.00%)      }
      .           
    192 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    438 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    144 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    395 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  1,170 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     50 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     10 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     44 ( 0.00%)          tcx.arena.alloc_from_iter(
     55 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    288 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  4,536 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    504 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    738 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    568 ( 0.00%)              tcx.arena.alloc_from_iter(
    284 ( 0.00%)                  impls
      .                               .decode(self)
  5,843 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  4,032 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    116 ( 0.00%)          let def_key = self.def_key(id);
    145 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    261 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     42 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    105 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     66 ( 0.00%)          match self.kind(id) {
     11 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     72 ( 0.00%)          let constness = match self.kind(id) {
     16 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     11 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    230 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 16,996 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  4,856 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  7,000 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 19,424 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  1,992 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    425 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  6,972 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  7,968 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 14,042 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 14,042 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,800 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 14,033 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     30 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 11,760 ( 0.00%)                          mut name,
  3,360 ( 0.00%)                          src_hash,
    560 ( 0.00%)                          start_pos,
  1,120 ( 0.00%)                          end_pos,
  2,800 ( 0.00%)                          mut lines,
  2,800 ( 0.00%)                          mut multibyte_chars,
  3,360 ( 0.00%)                          mut non_narrow_chars,
  2,800 ( 0.00%)                          mut normalized_pos,
  3,360 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,120 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
722,862 ( 0.25%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,596 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,080 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,280 ( 0.00%)                          name,
  3,920 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,120 ( 0.00%)                          self.cnum,
  2,800 ( 0.00%)                          lines,
  3,360 ( 0.00%)                          multibyte_chars,
  2,800 ( 0.00%)                          non_narrow_chars,
  2,240 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,680 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    252 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     63 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     63 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     21 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    483 ( 0.00%)          CrateMetadata {
     21 ( 0.00%)              blob,
     63 ( 0.00%)              root,
     84 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     84 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    147 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     84 ( 0.00%)              cnum_map,
    105 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    252 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    189 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    110 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    216 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    125 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    385 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  9,631 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  1,513 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
      .           // Cannot be implemented on 'ProcMacro', as libproc_macro
      .           // does not depend on librustc_ast
      .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      3 ( 0.00%)      match raw {
      .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
      .                   ProcMacro::Attr { .. } => MacroKind::Attr,
      .                   ProcMacro::Bang { .. } => MacroKind::Bang,
      .               }
      .           }

230,590 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
  355,568 ( 0.12%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
   24,408 ( 0.01%)                      let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  235,764 ( 0.08%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    4,068 ( 0.00%)                      old
        .                           }
    8,136 ( 0.00%)              }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
    1,757 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
      496 ( 0.00%)                      self.end
        .                           }
      496 ( 0.00%)              }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   17,814 ( 0.01%)                  len!(self)
      332 ( 0.00%)              }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> Iterator for $name<'a, T> {
        .                       type Item = $elem;
        .           
        .                       #[inline]
   13,710 ( 0.00%)              fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   41,802 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
   22,850 ( 0.01%)                      if mem::size_of::<T>() != 0 {
  122,572 ( 0.04%)                          assume(!self.end.is_null());
        .                               }
5,664,813 ( 1.96%)                      if is_empty!(self) {
      502 ( 0.00%)                          None
        .                               } else {
    8,137 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
   13,710 ( 0.00%)              }
        .           
        .                       #[inline]
       20 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
   89,332 ( 0.03%)                  let exact = len!(self);
       36 ( 0.00%)                  (exact, Some(exact))
        8 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      907 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      302 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      115 ( 0.00%)                  while let Some(x) = self.next() {
    4,206 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
      880 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   25,042 ( 0.01%)                  while let Some(x) = self.next() {
   59,760 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
      880 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
      260 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    2,367 ( 0.00%)                  while let Some(x) = self.next() {
   11,398 ( 0.00%)                      if predicate(&x) {
       94 ( 0.00%)                          return Some(x);
        .                               }
        .                           }
        5 ( 0.00%)                  None
    1,659 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    6,763 ( 0.00%)                  while let Some(x) = self.next() {
   16,140 ( 0.01%)                      if let Some(y) = f(x) {
    2,600 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      755 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
       16 ( 0.00%)              fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
      100 ( 0.00%)                  let n = len!(self);
        4 ( 0.00%)                  let mut i = 0;
      360 ( 0.00%)                  while let Some(x) = self.next() {
   24,576 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        2 ( 0.00%)                          unsafe { assume(i < n) };
        6 ( 0.00%)                          return Some(i);
        .                               }
      176 ( 0.00%)                      i += 1;
        .                           }
        2 ( 0.00%)                  None
       18 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    1,209 ( 0.00%)                  while let Some(x) = self.next_back() {
   15,842 ( 0.01%)                      i -= 1;
   14,343 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    6,204 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
      747 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
      996 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    1,245 ( 0.00%)                      if mem::size_of::<T>() != 0 {
      519 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   56,022 ( 0.02%)                      if is_empty!(self) {
        1 ( 0.00%)                          None
        .                               } else {
      496 ( 0.00%)                          Some(next_back_unchecked!(self))
        .                               }
        .                           }
      747 ( 0.00%)              }
        .           
        .                       #[inline]
        .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
        .                           if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               self.end = self.ptr.as_ptr();
        .                               return None;
        .                           }
-- line 375 ----------------------------------------

  799,372 ( 0.28%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .                   (type SourceFile: 'static + Clone;);
      .               (type MultiSpan) =>
      .                   (type MultiSpan: 'static;);
      .               (type Diagnostic) =>
      .                   (type Diagnostic: 'static;);
      .               (type Span) =>
      .                   (type Span: 'static + Copy + Eq + Hash;);
      .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
  2,634 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
      .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
     88 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
      .               ($($item:tt)*) => ($($item)*;)
      .           }
      .           
      .           macro_rules! declare_server_traits {
      .               ($($name:ident {
      .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
      .               }),* $(,)?) => {
      .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 64 ----------------------------------------
      .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
      .               }),* $(,)?) => {
      .                   impl<S: Types> Types for MarkedTypes<S> {
      .                       $(type $name = Marked<S::$name, client::$name>;)*
      .                   }
      .           
      .                   $(impl<S: $name> $name for MarkedTypes<S> {
      .                       $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
 30,701 ( 0.01%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
      .                       })*
      .                   })*
      .               }
      .           }
      .           with_api!(Self, self_, define_mark_types_impls);
      .           
      .           struct Dispatcher<S: Types> {
      .               handle_store: HandleStore<S>,
-- line 80 ----------------------------------------
-- line 89 ----------------------------------------
      .                   pub trait DispatcherTrait {
      .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
      .                       $(type $name;)*
      .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
      .                   }
      .           
      .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
      .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
 92,070 ( 0.03%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
      .                           let Dispatcher { handle_store, server } = self;
      .           
 27,621 ( 0.01%)                  let mut reader = &b[..];
 64,449 ( 0.02%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
 44,438 ( 0.02%)                      $(api_tags::Method::$name(m) => match m {
      .                                   $(api_tags::$name::$method => {
      .                                       let mut call_method = || {
 24,598 ( 0.01%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
      .                                           $name::$method(server, $($arg),*)
      .                                       };
      .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
      .                                       // If client and server happen to use the same `libstd`,
      .                                       // `catch_unwind` asserts that the panic counter was 0,
      .                                       // even when the closure passed to it didn't panic.
      .                                       let r = if thread::panicking() {
      .                                           Ok(call_method())
      .                                       } else {
 41,111 ( 0.01%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
      .                                               .map_err(PanicMessage::from)
      .                                       };
      .           
      .                                       b.clear();
102,342 ( 0.04%)                              r.encode(&mut b, handle_store);
      .                                   })*
      .                               }),*
      .                           }
 55,242 ( 0.02%)                  b
 82,863 ( 0.03%)              }
      .                   }
      .               }
      .           }
      .           with_api!(Self, self_, define_dispatcher_impl);
      .           
      .           pub trait ExecutionStrategy {
      .               fn run_bridge_and_client<D: Copy + Send + 'static>(
      .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
      .               fn run_bridge_and_client<D: Copy + Send + 'static>(
      .                   &self,
      .                   dispatcher: &mut impl DispatcherTrait,
      .                   input: Buffer<u8>,
      .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
      .                   client_data: D,
      .                   force_show_panics: bool,
      .               ) -> Buffer<u8> {
 82,864 ( 0.03%)          let mut dispatch = |b| dispatcher.dispatch(b);
      .           
     10 ( 0.00%)          run_client(
     11 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
      .                       client_data,
      .                   )
      .               }
      .           }
      .           
      .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
      .           // faster but neither is anywhere near as fast as same-thread execution.
      .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
      .                       *state.lock().unwrap() = State::Res(b);
      .                       join_handle.thread().unpark();
      .                   }
      .           
      .                   join_handle.join().unwrap()
      .               }
      .           }
      .           
     13 ( 0.00%)  fn run_server<
      .               S: Server,
      .               I: Encode<HandleStore<MarkedTypes<S>>>,
      .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
      .               D: Copy + Send + 'static,
      .           >(
      .               strategy: &impl ExecutionStrategy,
      .               handle_counters: &'static client::HandleCounters,
      .               server: S,
      .               input: I,
      .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
      .               client_data: D,
      .               force_show_panics: bool,
      .           ) -> Result<O, PanicMessage> {
      .               let mut dispatcher =
     17 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
      .           
      .               let mut b = Buffer::new();
      3 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
      .           
      6 ( 0.00%)      b = strategy.run_bridge_and_client(
      .                   &mut dispatcher,
      .                   b,
      .                   run_client,
      .                   client_data,
      .                   force_show_panics,
      .               );
      .           
      5 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
     10 ( 0.00%)  }
      .           
      .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
      .               pub fn run<S: Server>(
      .                   &self,
      .                   strategy: &impl ExecutionStrategy,
      .                   server: S,
      .                   input: S::TokenStream,
      .                   force_show_panics: bool,
      .               ) -> Result<S::TokenStream, PanicMessage> {
      2 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
     11 ( 0.00%)          run_server(
      .                       strategy,
      1 ( 0.00%)              get_handle_counters(),
     10 ( 0.00%)              server,
      .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
      .                       run,
      .                       f,
      .                       force_show_panics,
      .                   )
      .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
      .               }
      .           }
-- line 322 ----------------------------------------

 21,979 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir               

      .           #![allow(clippy::many_single_char_names)]
      .           use crate::consts::RC;
      .           use core::convert::TryInto;
      .           
      .           #[inline(always)]
      .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
117,807 ( 0.04%)      ((x & y) | (!x & z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           #[inline(always)]
      .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
112,302 ( 0.04%)      ((x & z) | (y & !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
 55,050 ( 0.02%)      (x ^ y ^ z)
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
 70,464 ( 0.02%)      (y ^ (x | !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline]
  9,909 ( 0.00%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
  2,202 ( 0.00%)      let mut a = state[0];
  1,101 ( 0.00%)      let mut b = state[1];
  1,101 ( 0.00%)      let mut c = state[2];
  1,101 ( 0.00%)      let mut d = state[3];
      .           
      .               let mut data = [0u32; 16];
      .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
 27,525 ( 0.01%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
      .               }
      .           
      .               // round 1
      .               a = op_f(a, b, c, d, data[0], RC[0], 7);
      .               d = op_f(d, a, b, c, data[1], RC[1], 12);
      .               c = op_f(c, d, a, b, data[2], RC[2], 17);
      .               b = op_f(b, c, d, a, data[3], RC[3], 22);
      .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
      .               c = op_i(c, d, a, b, data[6], RC[58], 15);
      .               b = op_i(b, c, d, a, data[13], RC[59], 21);
      .           
      .               a = op_i(a, b, c, d, data[4], RC[60], 6);
      .               d = op_i(d, a, b, c, data[11], RC[61], 10);
      .               c = op_i(c, d, a, b, data[2], RC[62], 15);
      .               b = op_i(b, c, d, a, data[9], RC[63], 21);
      .           
  2,202 ( 0.00%)      state[0] = state[0].wrapping_add(a);
  1,101 ( 0.00%)      state[1] = state[1].wrapping_add(b);
  1,101 ( 0.00%)      state[2] = state[2].wrapping_add(c);
  1,101 ( 0.00%)      state[3] = state[3].wrapping_add(d);
  8,808 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
181,309 ( 0.06%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 54,674 ( 0.02%)      Token(Token),
      .               /// A delimited sequence of token trees.
  4,650 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
    626 ( 0.00%)          match self {
    252 ( 0.00%)              TokenTree::Token(token) => token.span,
    336 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
    229 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
    626 ( 0.00%)          match self {
    229 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    168 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
    313 ( 0.00%)      }
      .           
  1,332 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 15,664 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
  1,332 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  1,306 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  3,918 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  1,306 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  1,278 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  3,834 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  1,278 ( 0.00%)      }
      .           
    204 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    136 ( 0.00%)          match self {
    612 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
  2,025 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
 13,500 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
  1,800 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
      1 ( 0.00%)          self.clone()
      1 ( 0.00%)      }
      .           }
      .           
      .           /// A lazy version of [`TokenStream`], which defers creation
      .           /// of an actual `TokenStream` until it is needed.
      .           /// `Box` is here only to reduce the structure size.
      .           #[derive(Clone)]
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
      .               pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      .               }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
    222 ( 0.00%)          self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
      .               }
      .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  2,730 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  2,730 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
     14 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
     68 ( 0.00%)          let trees: Vec<_> = self
      .                       .0
      .                       .iter()
  1,126 ( 0.00%)              .flat_map(|tree| match &tree.0 {
    564 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
  1,410 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
      .                           }
  1,080 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
    162 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
     54 ( 0.00%)                      tree.1,
      .                           )]
      .                           .into_iter(),
      .                           AttrAnnotatedTokenTree::Attributes(data) => {
      .                               let mut outer_attrs = Vec::new();
      .                               let mut inner_attrs = Vec::new();
      .                               for attr in &data.attrs {
    188 ( 0.00%)                          match attr.style {
      .                                       crate::AttrStyle::Outer => {
      .                                           outer_attrs.push(attr);
      .                                       }
      .                                       crate::AttrStyle::Inner => {
      .                                           inner_attrs.push(attr);
      .                                       }
      .                                   }
      .                               }
      .           
      4 ( 0.00%)                      let mut target_tokens: Vec<_> = data
      .                                   .tokens
      .                                   .create_token_stream()
      .                                   .to_tokenstream()
      .                                   .0
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect();
      2 ( 0.00%)                      if !inner_attrs.is_empty() {
      .                                   let mut found = false;
      .                                   // Check the last two trees (to account for a trailing semi)
      .                                   for (tree, _) in target_tokens.iter_mut().rev().take(2) {
      .                                       if let TokenTree::Delimited(span, delim, delim_tokens) = tree {
      .                                           // Inner attributes are only supported on extern blocks, functions, impls,
      .                                           // and modules. All of these have their inner attributes placed at
      .                                           // the beginning of the rightmost outermost braced group:
      .                                           // e.g. fn foo() { #![my_attr} }
-- line 248 ----------------------------------------
-- line 269 ----------------------------------------
      .           
      .                                   assert!(
      .                                       found,
      .                                       "Failed to find trailing delimited group in: {:?}",
      .                                       target_tokens
      .                                   );
      .                               }
      .                               let mut flat: SmallVec<[_; 1]> = SmallVec::new();
    214 ( 0.00%)                      for attr in outer_attrs {
      .                                   // FIXME: Make this more efficient
    564 ( 0.00%)                          flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
      .                               }
     16 ( 0.00%)                      flat.extend(target_tokens);
     20 ( 0.00%)                      flat.into_iter()
      2 ( 0.00%)                  }
      .                       })
      .                       .collect();
      .                   TokenStream::new(trees)
     28 ( 0.00%)      }
      .           }
      .           
      .           /// Stores the tokens for an attribute target, along
      .           /// with its attributes.
      .           ///
      .           /// This is constructed during parsing when we need to capture
      .           /// tokens.
      .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 16,126 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 365 ----------------------------------------
      .                       return Some((TokenStream::new(new_stream), sp));
      .                   }
      .                   None
      .               }
      .           }
      .           
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
    430 ( 0.00%)          AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
  4,280 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  5,310 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
     86 ( 0.00%)      fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
     90 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
    129 ( 0.00%)      }
      .           }
      .           
      .           impl Eq for TokenStream {}
      .           
      .           impl PartialEq<TokenStream> for TokenStream {
      .               fn eq(&self, other: &TokenStream) -> bool {
      .                   self.trees().eq(other.trees())
      .               }
-- line 400 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    633 ( 0.00%)          self.0.is_empty()
    633 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 20,065 ( 0.01%)          self.0.len()
     56 ( 0.00%)      }
      .           
  2,168 ( 0.00%)      pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
  1,084 ( 0.00%)          match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
      .                           // using `make_mut()` on the first stream, and in practice this
      .                           // doesn't cause cloning 99.9% of the time.
      .                           //
-- line 425 ----------------------------------------
-- line 430 ----------------------------------------
      .           
      .                           // Determine how much the first stream will be extended.
      .                           // Needed to avoid quadratic blow up from on-the-fly
      .                           // reallocations (#57735).
      .                           let num_appends = streams.iter().skip(1).map(|ts| ts.len()).sum();
      .           
      .                           // Get the first stream. If it's `None`, create an empty
      .                           // stream.
    530 ( 0.00%)                  let mut iter = streams.drain(..);
    530 ( 0.00%)                  let mut first_stream_lrc = iter.next().unwrap().0;
      .           
      .                           // Append the elements to the first stream, after reserving
      .                           // space for them.
    265 ( 0.00%)                  let first_vec_mut = Lrc::make_mut(&mut first_stream_lrc);
      .                           first_vec_mut.reserve(num_appends);
  3,906 ( 0.00%)                  for stream in iter {
      .                               first_vec_mut.extend(stream.0.iter().cloned());
      .                           }
      .           
      .                           // Create the final `TokenStream`.
    530 ( 0.00%)                  TokenStream(first_stream_lrc)
      .                       }
      .                   }
  2,439 ( 0.00%)      }
      .           
      .               pub fn trees(&self) -> Cursor {
  1,129 ( 0.00%)          self.clone().into_trees()
  2,258 ( 0.00%)      }
      .           
  1,678 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  3,356 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     43 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
  1,878 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
      .           
      .           impl TokenStreamBuilder {
    271 ( 0.00%)      pub fn new() -> TokenStreamBuilder {
    271 ( 0.00%)          TokenStreamBuilder(SmallVec::new())
    271 ( 0.00%)      }
      .           
 10,089 ( 0.00%)      pub fn push<T: Into<TokenStream>>(&mut self, stream: T) {
  1,121 ( 0.00%)          let mut stream = stream.into();
      .           
      .                   // If `self` is not empty and the last tree within the last stream is a
      .                   // token tree marked with `Joint`...
  3,363 ( 0.00%)          if let Some(TokenStream(ref mut last_stream_lrc)) = self.0.last_mut() {
  5,062 ( 0.00%)              if let Some((TokenTree::Token(last_token), Spacing::Joint)) = last_stream_lrc.last() {
      .                           // ...and `stream` is not empty and the first tree within it is
      .                           // a token tree...
      .                           let TokenStream(ref mut stream_lrc) = stream;
    546 ( 0.00%)                  if let Some((TokenTree::Token(token), spacing)) = stream_lrc.first() {
      .                               // ...and the two tokens can be glued together...
    546 ( 0.00%)                      if let Some(glued_tok) = last_token.glue(&token) {
      .                                   // ...then do so, by overwriting the last token
      .                                   // tree in `self` and removing the first token tree
      .                                   // from `stream`. This requires using `make_mut()`
      .                                   // on the last stream in `self` and on `stream`,
      .                                   // and in practice this doesn't cause cloning 99.9%
      .                                   // of the time.
      .           
      .                                   // Overwrite the last token tree with the merged
      .                                   // token.
     78 ( 0.00%)                          let last_vec_mut = Lrc::make_mut(last_stream_lrc);
  1,794 ( 0.00%)                          *last_vec_mut.last_mut().unwrap() = (TokenTree::Token(glued_tok), *spacing);
      .           
      .                                   // Remove the first token tree from `stream`. (This
      .                                   // is almost always the only tree in `stream`.)
     78 ( 0.00%)                          let stream_vec_mut = Lrc::make_mut(stream_lrc);
    468 ( 0.00%)                          stream_vec_mut.remove(0);
      .           
      .                                   // Don't push `stream` if it's empty -- that could
      .                                   // block subsequent token gluing, by getting
      .                                   // between two token trees that should be glued
      .                                   // together.
    234 ( 0.00%)                          if !stream.is_empty() {
      .                                       self.0.push(stream);
      .                                   }
      .                                   return;
      .                               }
      .                           }
      .                       }
      .                   }
      .                   self.0.push(stream);
  8,968 ( 0.00%)      }
      .           
    271 ( 0.00%)      pub fn build(self) -> TokenStream {
  1,626 ( 0.00%)          TokenStream::from_streams(self.0)
    542 ( 0.00%)      }
      .           }
      .           
      .           /// By-reference iterator over a [`TokenStream`].
      .           #[derive(Clone)]
      .           pub struct CursorRef<'t> {
      .               stream: &'t TokenStream,
      .               index: usize,
      .           }
-- line 550 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 15,126 ( 0.01%)      fn next(&mut self) -> Option<TokenTree> {
 24,674 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 20,168 ( 0.01%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
 70,695 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 57,543 ( 0.02%)          if self.index < self.stream.len() {
 29,988 ( 0.01%)              self.index += 1;
 77,413 ( 0.03%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  6,160 ( 0.00%)              None
      .                   }
 84,834 ( 0.03%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  2,572 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  5,144 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  5,144 ( 0.00%)      }
      .           }
      .           
 10,050 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
    218 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
    436 ( 0.00%)      }
      .           
  1,178 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    589 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
    930 ( 0.00%)      }
      .           
  3,544 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  2,658 ( 0.00%)      }
      .           }

 10,843 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .               () => {
      .                   #[inline]
      .                   unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
      .                       // SAFETY: the caller has to guarantee that `start + n` doesn't overflow.
      .                       unsafe { start.unchecked_add(n as Self) }
      .                   }
      .           
      .                   #[inline]
     10 ( 0.00%)          unsafe fn backward_unchecked(start: Self, n: usize) -> Self {
      .                       // SAFETY: the caller has to guarantee that `start - n` doesn't overflow.
      .                       unsafe { start.unchecked_sub(n as Self) }
      4 ( 0.00%)          }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  4,523 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
825,277 ( 0.29%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 656 ----------------------------------------
      .                   // together with the initial inequality implies more than usize::MAX steps.
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
     12 ( 0.00%)      fn spec_next_back(&mut self) -> Option<T> {
 39,283 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
     16 ( 0.00%)              self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
     10 ( 0.00%)              Some(self.end.clone())
      .                   } else {
      1 ( 0.00%)              None
      .                   }
     12 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn spec_nth_back(&mut self, n: usize) -> Option<T> {
      .                   if let Some(minus_n) = Step::backward_checked(self.end.clone(), n) {
      .                       if minus_n > self.start {
      .                           // SAFETY: just checked precondition
      .                           self.end = unsafe { Step::backward_unchecked(minus_n, 1) };
      .                           return Some(self.end.clone());
-- line 680 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 39,581 ( 0.01%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 811 ----------------------------------------
      .               // on 16-bit platforms, but continue to give a wrong result.
      .               u16
      .               i16
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> DoubleEndedIterator for ops::Range<A> {
      .               #[inline]
      6 ( 0.00%)      fn next_back(&mut self) -> Option<A> {
      9 ( 0.00%)          self.spec_next_back()
      6 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn nth_back(&mut self, n: usize) -> Option<A> {
      .                   self.spec_nth_back(n)
      .               }
      .           
      .               #[inline]
      .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
-- line 829 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
  1,598 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
  2,355 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
  1,543 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
  1,459 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
    157 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  1,364 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

152,835 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir               

-- line 4 ----------------------------------------
      .           
      .           use super::Utf8Error;
      .           
      .           /// Returns the initial codepoint accumulator for the first byte.
      .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
      .           /// for width 3, and 3 bits for width 4.
      .           #[inline]
      .           const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
      6 ( 0.00%)      (byte & (0x7F >> width)) as u32
      .           }
      .           
      .           /// Returns the value of `ch` updated with continuation byte `byte`.
      .           #[inline]
      .           const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
     18 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
      .           }
      .           
      .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
      .           /// bits `10`).
      .           #[inline]
      .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
      .               (byte as i8) < -64
      .           }
-- line 26 ----------------------------------------
-- line 28 ----------------------------------------
      .           /// Reads the next code point out of a byte iterator (assuming a
      .           /// UTF-8-like encoding).
      .           ///
      .           /// # Safety
      .           ///
      .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
      .           #[unstable(feature = "str_internals", issue = "none")]
      .           #[inline]
  9,381 ( 0.00%)  pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
      .               // Decode UTF-8
316,332 ( 0.11%)      let x = *bytes.next()?;
545,710 ( 0.19%)      if x < 128 {
 13,145 ( 0.00%)          return Some(x as u32);
      .               }
      .           
      .               // Multibyte case follows
      .               // Decode from a byte combination out of: [[[x y] z] w]
      .               // NOTE: Performance is sensitive to the exact formulation here
      .               let init = utf8_first_byte(x, 2);
      .               // SAFETY: `bytes` produces an UTF-8-like string,
      .               // so the iterator must produce a value here.
      .               let y = unsafe { *bytes.next().unwrap_unchecked() };
      .               let mut ch = utf8_acc_cont_byte(init, y);
      6 ( 0.00%)      if x >= 0xE0 {
      .                   // [[x y z] w] case
      .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
      .                   // SAFETY: `bytes` produces an UTF-8-like string,
      .                   // so the iterator must produce a value here.
      .                   let z = unsafe { *bytes.next().unwrap_unchecked() };
      .                   let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
      .                   ch = init << 12 | y_z;
      6 ( 0.00%)          if x >= 0xF0 {
      .                       // [x y z w] case
      .                       // use only the lower 3 bits of `init`
      .                       // SAFETY: `bytes` produces an UTF-8-like string,
      .                       // so the iterator must produce a value here.
      .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
      .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
      .                   }
      .               }
      .           
      .               Some(ch)
 15,635 ( 0.01%)  }
      .           
      .           /// Reads the last code point out of a byte iterator (assuming a
      .           /// UTF-8-like encoding).
      .           ///
      .           /// # Safety
      .           ///
      .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
      .           #[inline]
    378 ( 0.00%)  pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
      .           where
      .               I: DoubleEndedIterator<Item = &'a u8>,
      .           {
      .               // Decode UTF-8
  1,515 ( 0.00%)      let w = match *bytes.next_back()? {
  1,912 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
      .                   back_byte => back_byte,
      .               };
      .           
      .               // Multibyte case follows
      .               // Decode from a byte combination out of: [x [y [z w]]]
      .               let mut ch;
      .               // SAFETY: `bytes` produces an UTF-8-like string,
      .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 105 ----------------------------------------
      .                       ch = utf8_first_byte(x, 4);
      .                       ch = utf8_acc_cont_byte(ch, y);
      .                   }
      .                   ch = utf8_acc_cont_byte(ch, z);
      .               }
      .               ch = utf8_acc_cont_byte(ch, w);
      .           
      .               Some(ch)
    630 ( 0.00%)  }
      .           
      .           // use truncation to fit u64 into usize
      .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
      .           
      .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
      .           #[inline]
      .           const fn contains_nonascii(x: usize) -> bool {
  6,139 ( 0.00%)      (x & NONASCII_MASK) != 0
      .           }
      .           
      .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
      .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
      .           #[inline(always)]
      .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
      .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
      .               let mut index = 0;
      .               let len = v.len();
      .           
      .               let usize_bytes = mem::size_of::<usize>();
      .               let ascii_block_size = 2 * usize_bytes;
  2,529 ( 0.00%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
      .               let align = v.as_ptr().align_offset(usize_bytes);
      .           
  8,394 ( 0.00%)      while index < len {
      .                   let old_offset = index;
      .                   macro_rules! err {
      .                       ($error_len: expr) => {
      .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
      .                       };
      .                   }
      .           
      .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
      .                           // we needed data, but there was none: error!
      .                           if index >= len {
      .                               err!(None)
      .                           }
      .                           v[index]
      .                       }};
      .                   }
      .           
  3,837 ( 0.00%)          let first = v[index];
  7,674 ( 0.00%)          if first >= 128 {
      .                       let w = utf8_char_width(first);
      .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
      .                       //        first  C2 80        last DF BF
      .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
      .                       //        first  E0 A0 80     last EF BF BF
      .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
      .                       //               ED A0 80 to       ED BF BF
      .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
      .                       //
      .                       // https://tools.ietf.org/html/rfc3629
      .                       // UTF8-1      = %x00-7F
      .                       // UTF8-2      = %xC2-DF UTF8-tail
      .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
      .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
      .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
      .                       //               %xF4 %x80-8F 2( UTF8-tail )
     16 ( 0.00%)              match w {
      .                           2 => {
      .                               if next!() as i8 >= -64 {
      .                                   err!(Some(1))
      .                               }
      .                           }
      .                           3 => {
     32 ( 0.00%)                      match (first, next!()) {
      .                                   (0xE0, 0xA0..=0xBF)
     28 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
      .                                   | (0xED, 0x80..=0x9F)
      .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
      .                                   _ => err!(Some(1)),
      .                               }
     20 ( 0.00%)                      if next!() as i8 >= -64 {
      .                                   err!(Some(2))
      .                               }
      .                           }
      .                           4 => {
      .                               match (first, next!()) {
      .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
      .                                   _ => err!(Some(1)),
      .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
      .                                   err!(Some(2))
      .                               }
      .                               if next!() as i8 >= -64 {
      .                                   err!(Some(3))
      .                               }
      .                           }
      .                           _ => err!(Some(1)),
      .                       }
     12 ( 0.00%)              index += 1;
      .                   } else {
      .                       // Ascii case, try to skip forward quickly.
      .                       // When the pointer is aligned, read 2 words of data per iteration
      .                       // until we find a word containing a non-ascii byte.
 12,005 ( 0.00%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
      .                           let ptr = v.as_ptr();
 13,282 ( 0.00%)                  while index < blocks_end {
      .                               // SAFETY: since `align - index` and `ascii_block_size` are
      .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
      .                               // always aligned with a `usize` so it's safe to dereference
      .                               // both `block` and `block.offset(1)`.
      .                               unsafe {
      .                                   let block = ptr.add(index) as *const usize;
      .                                   // break if there is a nonascii byte
  6,139 ( 0.00%)                          let zu = contains_nonascii(*block);
      .                                   let zv = contains_nonascii(*block.offset(1));
 12,278 ( 0.00%)                          if zu || zv {
      .                                       break;
      .                                   }
      .                               }
 12,270 ( 0.00%)                      index += ascii_block_size;
      .                           }
      .                           // step from the point where the wordwise loop stopped
 18,701 ( 0.01%)                  while index < len && v[index] < 128 {
  4,056 ( 0.00%)                      index += 1;
      .                           }
      .                       } else {
  3,327 ( 0.00%)                  index += 1;
      .                       }
      .                   }
      .               }
      .           
      .               Ok(())
      .           }
      .           
      .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
      .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
      .           ];
      .           
      .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
      .           #[unstable(feature = "str_internals", issue = "none")]
      .           #[must_use]
      .           #[inline]
      .           pub const fn utf8_char_width(b: u8) -> usize {
      8 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
      .           }
      .           
      .           /// Mask of the value bits of a continuation byte.
      .           const CONT_MASK: u8 = 0b0011_1111;
      .           
      .           // truncate `&str` to length at most equal to `max`
      .           // return `true` if it were truncated, and the new str.
      .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

727,183 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
 15,180 ( 0.01%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 53,909 ( 0.02%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      4 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      4 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     16 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     16 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      8 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     16 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  3,040 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  1,900 ( 0.00%)      }
      .           
     80 ( 0.00%)      pub fn without_first_quote(self) -> Ident {
     80 ( 0.00%)          Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     50 ( 0.00%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 25,830 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 20,090 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
 10,629 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
  8,267 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     68 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
  9,678 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 23,408 ( 0.01%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 12,904 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
     48 ( 0.00%)          self.name.hash(state);
  3,612 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
    216 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    288 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
    216 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
    592 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
  2,834 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    592 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     44 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     44 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     22 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
  3,430 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  1,372 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
    686 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
  4,573 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
  1,086 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1685 ----------------------------------------
      .           ///
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
  2,465 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  9,634 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
     20 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
179,235 ( 0.06%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
179,235 ( 0.06%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
 24,330 ( 0.01%)      pub fn as_str(&self) -> &str {
  8,110 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 32,440 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
      .           
      .               /// This method is supposed to be used in error messages, so it's expected to be
      .               /// identical to printing the original identifier token written in source code
      .               /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag
      .               /// or edition, so we have to guess the rawness using the global edition.
    108 ( 0.00%)      pub fn to_ident_string(self) -> String {
      .                   Ident::with_dummy_span(self).to_string()
    108 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    368 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  7,278 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
 13,965 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
  7,484 ( 0.00%)      fn decode(d: &mut D) -> Symbol {
 47,761 ( 0.02%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    462 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  4,853 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    456 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 28,216 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  5,807 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
 24,330 ( 0.01%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
     38 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
     32 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      4 ( 0.00%)              if idx < 10 {
     40 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      .                   Symbol::intern(&n.to_string())
      .               }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    723 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  7,317 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    723 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    241 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 11,230 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 25,991 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    477 ( 0.00%)          self == kw::True || self == kw::False
    477 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
    210 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      .               }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
    241 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    241 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    241 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    482 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    241 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    241 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    482 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
  2,141 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  4,282 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  3,713 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     33 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
     66 ( 0.00%)      }
      .           }

 33,924 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
  1,771 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    882 ( 0.00%)      Spanned { node: t, span: sp }
    621 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     16 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     16 ( 0.00%)      }
      .           
      6 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      9 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     48 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,120 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  2,860 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    572 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,432 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 176 ----------------------------------------
      .               // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.
      .               path_mapping: FilePathMapping,
      .           
      .               /// The algorithm used for hashing the contents of each source file.
      .               hash_kind: SourceFileHashAlgorithm,
      .           }
      .           
      .           impl SourceMap {
      3 ( 0.00%)      pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
     12 ( 0.00%)              path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      3 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
     23 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      5 ( 0.00%)          &self.path_mapping
      5 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     20 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     33 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
     12 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     54 ( 0.00%)          Ok(self.new_source_file(filename, src))
     27 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
     36 ( 0.00%)      pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
      .                   let bytes = fs::read(path)?;
      .           
      .                   // We need to add file to the `SourceMap`, so that it is present
      .                   // in dep-info. There's also an edge case that file might be both
      .                   // loaded as a binary via `include_bytes!` and as proper `SourceFile`
      .                   // via `mod`, so we try to use real file contents and not just an
      .                   // empty string.
      6 ( 0.00%)          let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
     24 ( 0.00%)          self.new_source_file(path.to_owned().into(), text);
     15 ( 0.00%)          Ok(bytes)
     27 ( 0.00%)      }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     63 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
    189 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     60 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    570 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    570 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,710 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     96 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
    144 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
    108 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
    156 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
     24 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     72 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     60 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     90 ( 0.00%)                      filename,
     30 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,480 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
361,431 ( 0.12%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    798 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,680 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,480 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,040 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
     36 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
     12 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
     12 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
     36 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
     48 ( 0.00%)      pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
     60 ( 0.00%)          let sf = self.lookup_source_file(pos);
     56 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
     36 ( 0.00%)          Loc { file: sf, line, col, col_display }
     48 ( 0.00%)      }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
      .                       None => Err(f),
-- line 426 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     44 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
     12 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
     32 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    572 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    208 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    208 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
    104 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
    104 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    468 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    469 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    469 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
    134 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     67 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
    268 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
    201 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    804 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    603 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    704 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
    256 ( 0.00%)          match self.span_to_snippet(sp) {
    256 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
    128 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
    265 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    576 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
    128 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
     24 ( 0.00%)      pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
     10 ( 0.00%)              let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
      .                       let src = local_begin.sf.external_src.borrow();
      .           
      6 ( 0.00%)              let snippet = if let Some(ref src) = local_begin.sf.src {
      .                           Some(&src[start_index..])
      .                       } else if let Some(src) = src.get_source() {
      .                           Some(&src[start_index..])
      .                       } else {
      .                           None
      .                       };
      .           
      2 ( 0.00%)              match snippet {
      .                           None => 1,
      .                           Some(snippet) => match snippet.chars().next() {
      .                               None => 1,
      .                               Some(c) => c.len_utf8(),
      .                           },
      .                       }
      .                   };
      .           
     24 ( 0.00%)          sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  4,608 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
  1,536 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  3,840 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    660 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     60 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
    240 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
    120 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
    120 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    540 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  5,328 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    444 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  2,674 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  3,438 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    764 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
  1,528 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    382 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
  1,528 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
  1,146 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
     27 ( 0.00%)          } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  2,130 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
  1,420 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
  1,420 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  3,996 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  4,500 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    900 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
  1,800 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  4,500 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  3,468 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  2,302 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  4,624 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    469 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      3 ( 0.00%)      pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      3 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     24 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
    108 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     60 ( 0.00%)          (path, false)
    108 ( 0.00%)      }
      .           
     96 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
     24 ( 0.00%)          match file {
     12 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     84 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      6 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     60 ( 0.00%)                  (FileName::Real(realfile), mapped)
     24 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
     66 ( 0.00%)              other => (other.clone(), false),
      .                   }
     48 ( 0.00%)      }
      .           }

  8,392 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir               

-- line 283 ----------------------------------------
      .           /// Here, there's no need to allocate more memory inside the loop.
      .           ///
      .           /// [str]: prim@str "str"
      .           /// [`str`]: prim@str "str"
      .           /// [`&str`]: prim@str "&str"
      .           /// [Deref]: core::ops::Deref "ops::Deref"
      .           /// [`Deref`]: core::ops::Deref "ops::Deref"
      .           /// [`as_str()`]: String::as_str
     38 ( 0.00%)  #[derive(PartialOrd, Eq, Ord)]
      .           #[cfg_attr(not(test), rustc_diagnostic_item = "String")]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           pub struct String {
     51 ( 0.00%)      vec: Vec<u8>,
      .           }
      .           
      .           /// A possible error value when converting a `String` from a UTF-8 byte vector.
      .           ///
      .           /// This type is the error type for the [`from_utf8`] method on [`String`]. It
      .           /// is designed in such a way to carefully avoid reallocations: the
      .           /// [`into_bytes`] method will give back the byte vector that was used in the
      .           /// conversion attempt.
-- line 303 ----------------------------------------
-- line 374 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let s = String::new();
      .               /// ```
      .               #[inline]
      .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[must_use]
    840 ( 0.00%)      pub const fn new() -> String {
  3,451 ( 0.00%)          String { vec: Vec::new() }
    560 ( 0.00%)      }
      .           
      .               /// Creates a new empty `String` with a particular capacity.
      .               ///
      .               /// `String`s have an internal buffer to hold their data. The capacity is
      .               /// the length of that buffer, and can be queried with the [`capacity`]
      .               /// method. This method creates an empty `String`, but one with an initial
      .               /// buffer that can hold `capacity` bytes. This is useful when you may be
      .               /// appending a bunch of data to the `String`, reducing the number of
-- line 392 ----------------------------------------
-- line 420 ----------------------------------------
      .               /// // ...but this may make the string reallocate
      .               /// s.push('a');
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[must_use]
      .               pub fn with_capacity(capacity: usize) -> String {
  3,988 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
      .               }
      .           
      .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
      .               // required for this method definition, is not available. Since we don't
      .               // require this method for testing purposes, I'll just stub it
      .               // NB see the slice::hack module in slice.rs for more information
      .               #[inline]
      .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
      .               ///
      .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
      .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
      .               /// [`&str`]: prim@str "&str"
      .               /// [`into_bytes`]: String::into_bytes
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
    185 ( 0.00%)          match str::from_utf8(&vec) {
      .                       Ok(..) => Ok(String { vec }),
      .                       Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
      .                   }
      .               }
      .           
      .               /// Converts a slice of bytes to a string, including invalid characters.
      .               ///
      .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
-- line 508 ----------------------------------------
-- line 550 ----------------------------------------
      .               /// let input = b"Hello \xF0\x90\x80World";
      .               /// let output = String::from_utf8_lossy(input);
      .               ///
      .               /// assert_eq!("Hello �World", output);
      .               /// ```
      .               #[must_use]
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    108 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
    120 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
      .           
     60 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
      .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
     12 ( 0.00%)              if broken.is_empty() {
      .                           debug_assert_eq!(valid.len(), v.len());
     12 ( 0.00%)                  return Cow::Borrowed(valid);
      .                       }
      .                       valid
      .                   } else {
      .                       return Cow::Borrowed("");
      .                   };
      .           
      .                   const REPLACEMENT: &str = "\u{FFFD}";
      .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
      .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
      .                       res.push_str(valid);
      .                       if !broken.is_empty() {
      .                           res.push_str(REPLACEMENT);
      .                       }
      .                   }
      .           
      .                   Cow::Owned(res)
     96 ( 0.00%)      }
      .           
      .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
      .               /// if `v` contains any invalid data.
      .               ///
      .               /// # Examples
      .               ///
      .               /// Basic usage:
      .               ///
-- line 594 ----------------------------------------
-- line 761 ----------------------------------------
      .               ///     String::from_utf8_unchecked(sparkle_heart)
      .               /// };
      .               ///
      .               /// assert_eq!("💖", sparkle_heart);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    178 ( 0.00%)      pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
  2,314 ( 0.00%)          String { vec: bytes }
    178 ( 0.00%)      }
      .           
      .               /// Converts a `String` into a byte vector.
      .               ///
      .               /// This consumes the `String`, so we do not need to copy its contents.
      .               ///
      .               /// # Examples
      .               ///
      .               /// Basic usage:
-- line 779 ----------------------------------------
-- line 800 ----------------------------------------
      .               /// ```
      .               /// let s = String::from("foo");
      .               ///
      .               /// assert_eq!("foo", s.as_str());
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "string_as_str", since = "1.7.0")]
    156 ( 0.00%)      pub fn as_str(&self) -> &str {
    234 ( 0.00%)          self
    156 ( 0.00%)      }
      .           
      .               /// Converts a `String` into a mutable string slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// Basic usage:
      .               ///
      .               /// ```
-- line 818 ----------------------------------------
-- line 841 ----------------------------------------
      .               ///
      .               /// s.push_str("bar");
      .               ///
      .               /// assert_eq!("foobar", s);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  1,351 ( 0.00%)      pub fn push_str(&mut self, string: &str) {
    193 ( 0.00%)          self.vec.extend_from_slice(string.as_bytes())
    386 ( 0.00%)      }
      .           
      .               /// Copies elements from `src` range to the end of the string.
      .               ///
      .               /// ## Panics
      .               ///
      .               /// Panics if the starting point or end point do not lie on a [`char`]
      .               /// boundary, or if they're out of bounds.
      .               ///
-- line 859 ----------------------------------------
-- line 1138 ----------------------------------------
      .               /// s.push('2');
      .               /// s.push('3');
      .               ///
      .               /// assert_eq!("abc123", s);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
496,820 ( 0.17%)      pub fn push(&mut self, ch: char) {
 10,228 ( 0.00%)          match ch.len_utf8() {
 10,228 ( 0.00%)              1 => self.vec.push(ch as u8),
      6 ( 0.00%)              _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
      .                   }
402,084 ( 0.14%)      }
      .           
      .               /// Returns a byte slice of this `String`'s contents.
      .               ///
      .               /// The inverse of this method is [`from_utf8`].
      .               ///
      .               /// [`from_utf8`]: String::from_utf8
      .               ///
      .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1163 ----------------------------------------
      .               /// ```
      .               /// let s = String::from("hello");
      .               ///
      .               /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     90 ( 0.00%)      pub fn as_bytes(&self) -> &[u8] {
    135 ( 0.00%)          &self.vec
     90 ( 0.00%)      }
      .           
      .               /// Shortens this `String` to the specified length.
      .               ///
      .               /// If `new_len` is greater than the string's current length, this has no
      .               /// effect.
      .               ///
      .               /// Note that this method has no effect on the allocated capacity
      .               /// of the string
-- line 1181 ----------------------------------------
-- line 1542 ----------------------------------------
      .               ///
      .               /// let fancy_f = String::from("ƒoo");
      .               /// assert_eq!(fancy_f.len(), 4);
      .               /// assert_eq!(fancy_f.chars().count(), 3);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      6 ( 0.00%)      pub fn len(&self) -> usize {
     27 ( 0.00%)          self.vec.len()
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
      .               ///
      .               /// # Examples
      .               ///
      .               /// Basic usage:
      .               ///
      .               /// ```
-- line 1560 ----------------------------------------
-- line 1562 ----------------------------------------
      .               /// assert!(v.is_empty());
      .               ///
      .               /// v.push('a');
      .               /// assert!(!v.is_empty());
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      6 ( 0.00%)      pub fn is_empty(&self) -> bool {
     15 ( 0.00%)          self.len() == 0
     12 ( 0.00%)      }
      .           
      .               /// Splits the string into two at the given byte index.
      .               ///
      .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
      .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
      .               /// boundary of a UTF-8 code point.
      .               ///
      .               /// Note that the capacity of `self` does not change.
-- line 1580 ----------------------------------------
-- line 1747 ----------------------------------------
      .               /// let s = String::from("hello");
      .               ///
      .               /// let b = s.into_boxed_str();
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "box_str", since = "1.4.0")]
      .               #[must_use = "`self` will be dropped if the result is not used"]
      .               #[inline]
    178 ( 0.00%)      pub fn into_boxed_str(self) -> Box<str> {
  2,136 ( 0.00%)          let slice = self.vec.into_boxed_slice();
    534 ( 0.00%)          unsafe { from_boxed_utf8_unchecked(slice) }
    356 ( 0.00%)      }
      .           }
      .           
      .           impl FromUtf8Error {
      .               /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// Basic usage:
-- line 1766 ----------------------------------------
-- line 1845 ----------------------------------------
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl Clone for String {
  1,968 ( 0.00%)      fn clone(&self) -> Self {
    984 ( 0.00%)          String { vec: self.vec.clone() }
  2,296 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.vec.clone_from(&source.vec);
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl FromIterator<char> for String {
     20 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
      .                   let mut buf = String::new();
      .                   buf.extend(iter);
      .                   buf
     24 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
      .           impl<'a> FromIterator<&'a char> for String {
      .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
      .                   let mut buf = String::new();
      .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1937 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl Extend<char> for String {
      .               fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
  5,080 ( 0.00%)          let iterator = iter.into_iter();
  5,060 ( 0.00%)          let (lower_bound, _) = iterator.size_hint();
      .                   self.reserve(lower_bound);
  3,825 ( 0.00%)          iterator.for_each(move |c| self.push(c));
      .               }
      .           
      .               #[inline]
      .               fn extend_one(&mut self, c: char) {
      .                   self.push(c);
      .               }
      .           
      .               #[inline]
-- line 1956 ----------------------------------------
-- line 2067 ----------------------------------------
      .               fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {
      .                   self[..].strip_suffix_of(haystack)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl PartialEq for String {
      .               #[inline]
      8 ( 0.00%)      fn eq(&self, other: &String) -> bool {
     20 ( 0.00%)          PartialEq::eq(&self[..], &other[..])
      8 ( 0.00%)      }
      .               #[inline]
      .               fn ne(&self, other: &String) -> bool {
      .                   PartialEq::ne(&self[..], &other[..])
      .               }
      .           }
      .           
      .           macro_rules! impl_eq {
      .               ($lhs:ty, $rhs: ty) => {
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[allow(unused_lifetimes)]
      .                   impl<'a, 'b> PartialEq<$rhs> for $lhs {
      .                       #[inline]
  1,020 ( 0.00%)              fn eq(&self, other: &$rhs) -> bool {
  3,060 ( 0.00%)                  PartialEq::eq(&self[..], &other[..])
  1,020 ( 0.00%)              }
      .                       #[inline]
      .                       fn ne(&self, other: &$rhs) -> bool {
      .                           PartialEq::ne(&self[..], &other[..])
      .                       }
      .                   }
      .           
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[allow(unused_lifetimes)]
-- line 2100 ----------------------------------------
-- line 2120 ----------------------------------------
      .           #[cfg(not(no_global_oom_handling))]
      .           impl_eq! { Cow<'a, str>, String }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
      .           impl const Default for String {
      .               /// Creates an empty `String`.
      .               #[inline]
      3 ( 0.00%)      fn default() -> String {
      1 ( 0.00%)          String::new()
      2 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl fmt::Display for String {
      .               #[inline]
    299 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    598 ( 0.00%)          fmt::Display::fmt(&**self, f)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl fmt::Debug for String {
      .               #[inline]
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&**self, f)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl hash::Hash for String {
      .               #[inline]
      .               fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
  1,116 ( 0.00%)          (**self).hash(hasher)
      .               }
      .           }
      .           
      .           /// Implements the `+` operator for concatenating two strings.
      .           ///
      .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
      .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
      .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
-- line 2161 ----------------------------------------
-- line 2194 ----------------------------------------
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl Add<&str> for String {
      .               type Output = String;
      .           
      .               #[inline]
      .               fn add(mut self, other: &str) -> String {
      .                   self.push_str(other);
      2 ( 0.00%)          self
      .               }
      .           }
      .           
      .           /// Implements the `+=` operator for appending to a `String`.
      .           ///
      .           /// This has the same behavior as the [`push_str`][String::push_str] method.
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "stringaddassign", since = "1.12.0")]
-- line 2210 ----------------------------------------
-- line 2242 ----------------------------------------
      .                   &self[..][index]
      .               }
      .           }
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl ops::Index<ops::RangeFull> for String {
      .               type Output = str;
      .           
      .               #[inline]
    518 ( 0.00%)      fn index(&self, _index: ops::RangeFull) -> &str {
  1,554 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
    518 ( 0.00%)      }
      .           }
      .           #[stable(feature = "inclusive_range", since = "1.26.0")]
      .           impl ops::Index<ops::RangeInclusive<usize>> for String {
      .               type Output = str;
      .           
      .               #[inline]
      .               fn index(&self, index: ops::RangeInclusive<usize>) -> &str {
      .                   Index::index(&**self, index)
-- line 2260 ----------------------------------------
-- line 2313 ----------------------------------------
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl ops::Deref for String {
      .               type Target = str;
      .           
      .               #[inline]
    592 ( 0.00%)      fn deref(&self) -> &str {
  1,776 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
    592 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "derefmut_for_string", since = "1.3.0")]
      .           impl ops::DerefMut for String {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut str {
      .                   unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }
      .               }
-- line 2331 ----------------------------------------
-- line 2386 ----------------------------------------
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: fmt::Display + ?Sized> ToString for T {
      .               // A common guideline is to not inline generic functions. However,
      .               // removing `#[inline]` from this method causes non-negligible regressions.
      .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
      .               // to try to remove it.
      .               #[inline]
  1,140 ( 0.00%)      default fn to_string(&self) -> String {
    190 ( 0.00%)          let mut buf = String::new();
  4,900 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
      .                   // Bypass format_args!() to avoid write_str with zero-length strs
  3,545 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
      .                       .expect("a Display implementation returned an error unexpectedly");
      .                   buf
    380 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
      .           impl ToString for char {
      .               #[inline]
      .               fn to_string(&self) -> String {
      .                   String::from(self.encode_utf8(&mut [0; 4]))
-- line 2409 ----------------------------------------
-- line 2470 ----------------------------------------
      .                   self[..].to_owned()
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "string_to_string_specialization", since = "1.17.0")]
      .           impl ToString for String {
      .               #[inline]
      8 ( 0.00%)      fn to_string(&self) -> String {
      2 ( 0.00%)          self.to_owned()
      4 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl AsRef<str> for String {
      .               #[inline]
      .               fn as_ref(&self) -> &str {
      .                   self
      .               }
-- line 2488 ----------------------------------------
-- line 2494 ----------------------------------------
      .               fn as_mut(&mut self) -> &mut str {
      .                   self
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl AsRef<[u8]> for String {
      .               #[inline]
     90 ( 0.00%)      fn as_ref(&self) -> &[u8] {
    135 ( 0.00%)          self.as_bytes()
     90 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl From<&str> for String {
      .               /// Converts a `&str` into a [`String`].
      .               ///
      .               /// The result is allocated on the heap.
-- line 2512 ----------------------------------------
-- line 2553 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let s1: String = String::from("hello world");
      .               /// let s2: Box<str> = s1.into_boxed_str();
      .               /// let s3: String = String::from(s2);
      .               ///
      .               /// assert_eq!("hello world", s3)
      .               /// ```
     44 ( 0.00%)      fn from(s: Box<str>) -> String {
      .                   s.into_string()
     44 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "box_from_str", since = "1.20.0")]
      .           impl From<String> for Box<str> {
      .               /// Converts the given [`String`] to a boxed `str` slice that is owned.
      .               ///
      .               /// # Examples
-- line 2571 ----------------------------------------
-- line 2620 ----------------------------------------
      .               /// ```
      .               /// # use std::borrow::Cow;
      .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
      .               /// ```
      .               ///
      .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
      .               #[inline]
      .               fn from(s: &'a str) -> Cow<'a, str> {
    318 ( 0.00%)          Cow::Borrowed(s)
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<'a> From<String> for Cow<'a, str> {
      .               /// Converts a [`String`] into an [`Owned`] variant.
      .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
      .               /// let s = "eggplant".to_string();
      .               /// let s2 = "eggplant".to_string();
      .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
      .               /// ```
      .               ///
      .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
      .               #[inline]
      .               fn from(s: String) -> Cow<'a, str> {
    235 ( 0.00%)          Cow::Owned(s)
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
      .           impl<'a> From<&'a String> for Cow<'a, str> {
      .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
      .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
      .               /// ```
      .               /// let s1 = String::from("hello world");
      .               /// let v1 = Vec::from(s1);
      .               ///
      .               /// for b in v1 {
      .               ///     println!("{}", b);
      .               /// }
      .               /// ```
      3 ( 0.00%)      fn from(string: String) -> Vec<u8> {
     12 ( 0.00%)          string.into_bytes()
      3 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl fmt::Write for String {
      .               #[inline]
  8,792 ( 0.00%)      fn write_str(&mut self, s: &str) -> fmt::Result {
    190 ( 0.00%)          self.push_str(s);
    190 ( 0.00%)          Ok(())
  7,978 ( 0.00%)      }
      .           
      .               #[inline]
163,008 ( 0.06%)      fn write_char(&mut self, c: char) -> fmt::Result {
      2 ( 0.00%)          self.push(c);
      .                   Ok(())
163,008 ( 0.06%)      }
      .           }
      .           
      .           /// A draining iterator for `String`.
      .           ///
      .           /// This struct is created by the [`drain`] method on [`String`]. See its
      .           /// documentation for more.
      .           ///
      .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

 15,264 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
    9,105 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
   87,420 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   75,186 ( 0.03%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,617,335 ( 0.56%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
        .                   )]
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    4,540 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    3,648 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
    9,080 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    3,632 ( 0.00%)          }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  174,977 ( 0.06%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    6,538 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    6,822 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    4,548 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   11,370 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    4,548 ( 0.00%)          }
        .           
        .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   13,820 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        7 ( 0.00%)          }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      361 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  977,632 ( 0.34%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  312,536 ( 0.11%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
  907,113 ( 0.31%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  124,111 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    1,816 ( 0.00%)              (a as Self, b)
    3,632 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   36,870 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  204,531 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    2,274 ( 0.00%)              (a as Self, b)
    4,548 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      162 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
       54 ( 0.00%)          const fn one_less_than_next_power_of_two(self) -> Self {
    1,488 ( 0.00%)              if self <= 1 { return 0; }
        .           
    3,414 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    9,930 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,522 ( 0.00%)              <$SelfT>::MAX >> z
       72 ( 0.00%)          }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
        .                   /// # Examples
-- line 2172 ----------------------------------------
-- line 2178 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(3", stringify!($SelfT), ".next_power_of_two(), 4);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
       36 ( 0.00%)          pub const fn next_power_of_two(self) -> Self {
    5,238 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
       36 ( 0.00%)          }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 2196 ----------------------------------------
-- line 2264 ----------------------------------------
        .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
        .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        5 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
        4 ( 0.00%)              self.to_le().to_ne_bytes()
        3 ( 0.00%)          }
        .           
        .                   /// Return the memory representation of this integer as a byte array in
        .                   /// native byte order.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
        .                   /// instead.
        .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute them to arrays of bytes
        .                   #[inline]
        2 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
        .                       // arrays of bytes
        1 ( 0.00%)              unsafe { mem::transmute(self) }
        3 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its representation
        .                   /// as a byte array in big endian.
        .                   ///
        .                   #[doc = $from_xe_bytes_doc]
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
        .                   ///     *input = rest;
        .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   #[inline]
        4 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        5 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        2 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its memory representation
        .                   /// as a byte array in native endianness.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
        .                   /// appropriate instead.
        .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute to them
        .                   #[inline]
        4 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
        6 ( 0.00%)              unsafe { mem::transmute(bytes) }
        2 ( 0.00%)          }
        .           
        .                   /// New code should prefer to use
        .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
        .                   ///
        .                   /// Returns the smallest value that can be represented by this integer type.
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_promotable]
        .                   #[inline(always)]
-- line 2421 ----------------------------------------

   22,567 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
170,104 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
106,315 ( 0.04%)              .intern(kind, |kind| {
 10,616 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 21,232 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
191,367 ( 0.07%)      }
      .           
      .               #[inline(never)]
 51,104 ( 0.02%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 44,716 ( 0.02%)              .intern(kind, |kind| {
 13,614 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 57,492 ( 0.02%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 13,713 ( 0.00%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 10,474 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  2,117 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  2,117 ( 0.00%)          self.data.get(&id.local_id)
  8,402 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    270 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    180 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  1,122 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 13,277 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  1,122 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  2,166 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  1,444 ( 0.00%)          match *qpath {
  3,768 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    564 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  3,610 ( 0.00%)      }
      .           
     27 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    151 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     27 ( 0.00%)      }
      .           
    210 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    413 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    420 ( 0.00%)      }
      .           
    436 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    436 ( 0.00%)      }
      .           
    857 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    857 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    857 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    141 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     26 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    210 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    105 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    436 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    218 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    112 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     56 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  1,926 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    963 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  3,366 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,683 ( 0.00%)      }
      .           
 13,806 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  2,301 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 11,505 ( 0.00%)      }
      .           
  2,995 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  2,995 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  5,990 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    488 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    244 ( 0.00%)      }
      .           
  1,054 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,054 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  2,108 ( 0.00%)      }
      .           
    723 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    723 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  1,446 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    364 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  2,475 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  2,528 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,306 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    653 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,942 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    971 ( 0.00%)      }
      .           
  1,111 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  2,222 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  2,222 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    130 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     26 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     36 ( 0.00%)      }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    124 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    248 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    268 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    248 ( 0.00%)      }
      .           
    861 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  1,148 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    727 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    220 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    380 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    190 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    862 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    431 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    270 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    135 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    268 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    335 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     84 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     42 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    264 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    132 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    180 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     90 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     84 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     42 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     42 ( 0.00%)          &self.coercion_casts
     42 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     62 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     32 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     89 ( 0.00%)      pub fn is_identity(&self) -> bool {
    178 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     89 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    192 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     95 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      2 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    178 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    192 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  1,113 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  1,920 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    768 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  1,536 ( 0.00%)      }
      .           
    141 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     47 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    188 ( 0.00%)      }
      .           
    715 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    143 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,001 ( 0.00%)      }
      .           
    188 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     47 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    235 ( 0.00%)      }
      .           
    234 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    416 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    104 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    544 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    272 ( 0.00%)          let attrs = self.get_attrs(def_id);
  1,156 ( 0.00%)          let get = |name| {
    272 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  1,360 ( 0.00%)          };
    408 ( 0.00%)          (
    408 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    204 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    544 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     35 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      5 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     40 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     40 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 61,544 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 79,128 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     49 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     56 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  1,365 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  1,560 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,456 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,664 ( 0.00%)      }
      .           
  1,323 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  1,701 ( 0.00%)      }
      .           
 26,005 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 29,720 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  1,033 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    905 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    545 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
     92 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 23,338 ( 0.01%)          &*self.untracked_resolutions.cstore
 11,669 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      3 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     14 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
     84 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    126 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     42 ( 0.00%)          self.sess.opts.borrowck_mode
    168 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    638 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    464 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,044 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    522 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 18,571 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 21,224 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
     28 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
     32 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 19,225 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 76,516 ( 0.03%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 37,958 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 37,918 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 16,532 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,492 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  4,318 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,580 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 18,286 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  8,246 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  7,840 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  6,184 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 74,198 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 37,372 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,535 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 83,124 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
235,738 ( 0.08%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
210,582 ( 0.07%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
      .               /// unsafe.
      .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
      .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
      .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
      .               }
      .           
      .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
      .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
    216 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
      .                   self.super_traits_of(trait_def_id).any(|trait_did| {
      .                       self.associated_items(trait_did)
      .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
      .                           .is_some()
      .                   })
    162 ( 0.00%)      }
      .           
      .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
      .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
      .               /// to identify which traits may define a given associated type to help avoid cycle errors.
      .               /// Returns a `DefId` iterator.
      .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
      .                   let mut set = FxHashSet::default();
     36 ( 0.00%)          let mut stack = vec![trait_def_id];
      .           
      .                   set.insert(trait_def_id);
      .           
    162 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
     60 ( 0.00%)              let trait_did = stack.pop()?;
     30 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
      .           
      .                       for (predicate, _) in generic_predicates.predicates {
     36 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
     24 ( 0.00%)                      if set.insert(data.def_id()) {
      .                                   stack.push(data.def_id());
      .                               }
      .                           }
      .                       }
      .           
      .                       Some(trait_did)
      .                   })
      .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 10,576 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
153,539 ( 0.05%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 67,159 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 69,544 ( 0.02%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  5,618 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 69,544 ( 0.02%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     10 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     10 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     38 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    138 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    144 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     15 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    434 ( 0.00%)          iter.intern_with(|ts| {
    122 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    840 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    369 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     18 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    156 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  3,577 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  2,517 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
    114 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    984 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  3,577 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      1 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      1 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      2 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
      9 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     10 ( 0.00%)      }
      .           
  4,067 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    581 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
    310 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
  2,324 ( 0.00%)          self._intern_poly_existential_predicates(eps)
  4,648 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    981 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    373 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  1,216 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  2,601 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     58 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 40,374 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  4,228 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    524 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    228 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  1,969 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     50 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  2,244 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  3,440 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    398 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     74 ( 0.00%)              c_variadic,
    101 ( 0.00%)              unsafety,
     94 ( 0.00%)              abi,
     50 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  2,269 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      4 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    728 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 80,163 ( 0.03%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    435 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  1,256 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  2,512 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 11,576 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  7,728 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  7,728 ( 0.00%)          let hir = self.hir();
      .                   loop {
 12,663 ( 0.00%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 15,881 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  9,351 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 11,040 ( 0.00%)      }
      .           
  1,080 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  5,877 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    443 ( 0.00%)              let next = self.hir().get_parent_node(id);
  1,329 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,080 ( 0.00%)      }
      .           
    112 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    273 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    107 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     64 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    434 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    124 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    124 ( 0.00%)          Some(&*candidates)
    496 ( 0.00%)      }
      .           
  2,093 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  2,691 ( 0.00%)      }
      .           
     72 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      4 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     64 ( 0.00%)      }
      .           
  1,631 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  2,097 ( 0.00%)      }
      .           
  3,249 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  3,249 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     50 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      5 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     45 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 52,336 ( 0.02%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
134,072 ( 0.05%)          E::intern_with(self, f)
 51,093 ( 0.02%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 23,874 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 41,933 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      7 ( 0.00%)                  assert!(iter.next().is_none());
  6,603 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     34 ( 0.00%)                  assert!(iter.next().is_none());
  2,535 ( 0.00%)                  f(&[t0, t1])
      .                       }
    168 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 15,557 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,870 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     20 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  1,514 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 34,742 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 24,784 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
  1,353 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  4,279 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
    127 ( 0.00%)                  let t0 = iter.next().unwrap()?;
    118 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     78 ( 0.00%)                  assert!(iter.next().is_none());
  2,000 ( 0.00%)                  f(&[t0, t1])
      .                       }
    294 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 37,989 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 37,958 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  1,496 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

134,549 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
 66,609 ( 0.02%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 15,530 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     63 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
      .                           tok,
      .                           TokenKind::Whitespace
      .                               | TokenKind::LineComment { doc_style: None }
      .                               | TokenKind::BlockComment { doc_style: None, .. }
      .                       )
      .                   });
      1 ( 0.00%)          if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
     72 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
 22,200 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
  7,400 ( 0.00%)      Cursor::new(input).advance_token()
 29,600 ( 0.01%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      1 ( 0.00%)          if cursor.is_eof() {
      .                       None
      .                   } else {
      .                       cursor.reset_len_consumed();
     14 ( 0.00%)              Some(cursor.advance_token())
      .                   }
      .               })
      .           }
      .           
      .           /// True if `c` is considered a whitespace according to Rust language definition.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 18,128 ( 0.01%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
      .                   | '\u{2028}' // LINE SEPARATOR
      .                   | '\u{2029}' // PARAGRAPH SEPARATOR
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      8 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
    782 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      8 ( 0.00%)  }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
     21 ( 0.00%)  }
      .           
      .           /// The passed string is lexically an identifier.
  1,365 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
      .               let mut chars = string.chars();
      .               if let Some(start) = chars.next() {
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
  1,911 ( 0.00%)  }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
 59,208 ( 0.02%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
 24,811 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
  3,092 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
      .                           _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
     72 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    171 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
      .                               let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
      .                               if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
  7,917 ( 0.00%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
      .                           TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    180 ( 0.00%)              ';' => Semi,
    510 ( 0.00%)              ',' => Comma,
     70 ( 0.00%)              '.' => Dot,
    668 ( 0.00%)              '(' => OpenParen,
    668 ( 0.00%)              ')' => CloseParen,
    258 ( 0.00%)              '{' => OpenBrace,
    258 ( 0.00%)              '}' => CloseBrace,
    146 ( 0.00%)              '[' => OpenBracket,
    144 ( 0.00%)              ']' => CloseBracket,
     26 ( 0.00%)              '@' => At,
    144 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
      8 ( 0.00%)              '?' => Question,
    616 ( 0.00%)              ':' => Colon,
    164 ( 0.00%)              '$' => Dollar,
    262 ( 0.00%)              '=' => Eq,
     76 ( 0.00%)              '!' => Bang,
    176 ( 0.00%)              '<' => Lt,
    346 ( 0.00%)              '>' => Gt,
    110 ( 0.00%)              '-' => Minus,
    100 ( 0.00%)              '&' => And,
     12 ( 0.00%)              '|' => Or,
     48 ( 0.00%)              '+' => Plus,
     58 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
      .                       '%' => Percent,
      .           
      .                       // Lifetime or character literal.
     72 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    273 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    182 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    182 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
 66,609 ( 0.02%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  2,010 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
  1,623 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
 22,836 ( 0.01%)          self.eat_while(|c| c != '\n');
  2,319 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
      .                   let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
      .                   }
      .           
      .                   BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
  2,436 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
  7,765 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
  3,106 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
  3,106 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  1,553 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  1,553 ( 0.00%)              _ => Ident,
      .                   }
  6,212 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
    168 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
     48 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
     48 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
     48 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
     48 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
    144 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
      .                   if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
111,646 ( 0.04%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
  4,088 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
     91 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 816 ----------------------------------------
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
    182 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
    273 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
      .                   self.eat_while(is_id_continue);
    364 ( 0.00%)      }
      .           }

112,162 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           use rustc_data_structures::sync::Lrc;
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::symbol::{kw, sym};
      .           use rustc_span::symbol::{Ident, Symbol};
      .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
      .           use std::borrow::Cow;
      .           use std::{fmt, mem};
      .           
  9,320 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum CommentKind {
      .               Line,
      .               Block,
      .           }
      .           
     80 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum BinOpToken {
      .               Plus,
      .               Minus,
      .               Star,
      .               Slash,
      .               Percent,
      .               Caret,
      .               And,
      .               Or,
      .               Shl,
      .               Shr,
      .           }
      .           
      .           /// A delimiter token.
  2,965 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DelimToken {
      .               /// A round parenthesis (i.e., `(` or `)`).
      .               Paren,
      .               /// A square bracket (i.e., `[` or `]`).
      .               Bracket,
      .               /// A curly brace (i.e., `{` or `}`).
      .               Brace,
      .               /// An empty delimiter.
      .               NoDelim,
      .           }
      .           
    884 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum LitKind {
      .               Bool, // AST only, must never appear in a `Token`
      .               Byte,
      .               Char,
      .               Integer,
      .               Float,
      .               Str,
      .               StrRaw(u16), // raw string delimited by `n` hash symbols
      .               ByteStr,
      .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
      .               Err,
      .           }
      .           
      .           /// A literal token.
  4,172 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Lit {
      .               pub kind: LitKind,
      .               pub symbol: Symbol,
      .               pub suffix: Option<Symbol>,
      .           }
      .           
      .           impl fmt::Display for Lit {
    460 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    828 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
      .                   match kind {
      .                       Byte => write!(f, "b'{}'", symbol)?,
      .                       Char => write!(f, "'{}'", symbol)?,
    276 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
      .                       StrRaw(n) => write!(
      .                           f,
      .                           "r{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
      .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
      .                       ByteStrRaw(n) => write!(
-- line 91 ----------------------------------------
-- line 92 ----------------------------------------
      .                           f,
      .                           "br{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
      .                       Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
      .                   }
      .           
    184 ( 0.00%)          if let Some(suffix) = suffix {
      .                       write!(f, "{}", suffix)?;
      .                   }
      .           
      .                   Ok(())
    460 ( 0.00%)      }
      .           }
      .           
      .           impl LitKind {
      .               /// An English article for the literal token kind.
      .               pub fn article(self) -> &'static str {
      .                   match self {
      .                       Integer | Err => "an",
      .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
      .               crate fn may_have_suffix(self) -> bool {
      .                   matches!(self, Integer | Float | Err)
      .               }
      .           }
      .           
      .           impl Lit {
      .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
      .                   Lit { kind, symbol, suffix }
    493 ( 0.00%)      }
      .           }
      .           
    108 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
    189 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
     54 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [
      .                       kw::Async,
      .                       kw::Do,
      .                       kw::Box,
      .                       kw::Break,
      .                       kw::Const,
      .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
      .                       kw::True,
      .                       kw::Try,
      .                       kw::Unsafe,
      .                       kw::While,
      .                       kw::Yield,
      .                       kw::Static,
      .                   ]
      .                   .contains(&name)
    135 ( 0.00%)  }
      .           
      .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
    804 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
    282 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
      .                       .contains(&name)
      .           }
      .           
722,944 ( 0.25%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum TokenKind {
      .               /* Expression-operator symbols. */
      .               Eq,
      .               Lt,
      .               Le,
      .               EqEq,
      .               Ne,
      .               Ge,
      .               Gt,
      .               AndAnd,
      .               OrOr,
      .               Not,
      .               Tilde,
  4,191 ( 0.00%)      BinOp(BinOpToken),
      .               BinOpEq(BinOpToken),
      .           
      .               /* Structural symbols */
      .               At,
      .               Dot,
      .               DotDot,
      .               DotDotDot,
      .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
      .               LArrow,
      .               FatArrow,
      .               Pound,
      .               Dollar,
      .               Question,
      .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
      .               SingleQuote,
      .               /// An opening delimiter (e.g., `{`).
  6,882 ( 0.00%)      OpenDelim(DelimToken),
      .               /// A closing delimiter (e.g., `}`).
  2,235 ( 0.00%)      CloseDelim(DelimToken),
      .           
      .               /* Literals */
  3,311 ( 0.00%)      Literal(Lit),
      .           
      .               /// Identifier token.
      .               /// Do not forget about `NtIdent` when you want to match on identifiers.
      .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated identifiers in the same way.
  8,571 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
      .               /// Lifetime identifier token.
      .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
      .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated lifetime identifiers in the same way.
    108 ( 0.00%)      Lifetime(Symbol),
      .           
    409 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
      .           
      .               /// A doc comment token.
      .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
      .               /// similarly to symbols in string literal tokens.
  3,297 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
      .           
      .               Eof,
      .           }
      .           
      .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenKind, 16);
      .           
 92,614 ( 0.03%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Token {
  4,560 ( 0.00%)      pub kind: TokenKind,
     20 ( 0.00%)      pub span: Span,
      .           }
      .           
      .           impl TokenKind {
      .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
      .                   Literal(Lit::new(kind, symbol, suffix))
    225 ( 0.00%)      }
      .           
      .               // An approximation to proc-macro-style single-character operators used by rustc parser.
      .               // If the operator token can be broken into two tokens, the first of which is single-character,
      .               // then this function performs that operation, otherwise it returns `None`.
    581 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
  2,384 ( 0.00%)          Some(match *self {
      .                       Le => (Lt, Eq),
      .                       EqEq => (Eq, Eq),
      .                       Ne => (Not, Eq),
      .                       Ge => (Gt, Eq),
      .                       AndAnd => (BinOp(And), BinOp(And)),
      .                       OrOr => (BinOp(Or), BinOp(Or)),
      .                       BinOp(Shl) => (Lt, Lt),
      .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
      .                       BinOpEq(Shl) => (Lt, Le),
      .                       BinOpEq(Shr) => (Gt, Ge),
      .                       DotDot => (Dot, Dot),
      .                       DotDotDot => (Dot, DotDot),
      .                       ModSep => (Colon, Colon),
      .                       RArrow => (BinOp(Minus), Gt),
      .                       LArrow => (Lt, BinOp(Minus)),
      .                       FatArrow => (Eq, Gt),
    571 ( 0.00%)              _ => return None,
      .                   })
    581 ( 0.00%)      }
      .           
      .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
      .               /// Enables better error recovery when the wrong token is found.
      .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
      .                   match *self {
      .                       Comma => Some(vec![Dot, Lt, Semi]),
      .                       Semi => Some(vec![Colon, Comma]),
      .                       FatArrow => Some(vec![Eq, RArrow]),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               pub fn should_end_const_arg(&self) -> bool {
    276 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
     66 ( 0.00%)      }
      .           }
      .           
      .           impl Token {
  5,763 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 20,876 ( 0.01%)          Token { kind, span }
  5,763 ( 0.00%)      }
      .           
      .               /// Some token that will be thrown away later.
    981 ( 0.00%)      pub fn dummy() -> Self {
      .                   Token::new(TokenKind::Question, DUMMY_SP)
    981 ( 0.00%)      }
      .           
      .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
      .               pub fn from_ast_ident(ident: Ident) -> Self {
     88 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
      .               }
      .           
      .               /// Return this token by value and leave a dummy token in its place.
  3,851 ( 0.00%)      pub fn take(&mut self) -> Self {
      .                   mem::replace(self, Token::dummy())
  3,851 ( 0.00%)      }
      .           
      .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
      .               /// token refers. For all other tokens this is just a regular span.
      .               /// It is particularly important to use this for identifiers and lifetimes
      .               /// for which spans affect name resolution and edition checks.
      .               /// Note that keywords are also identifiers, so they should use this
      .               /// if they keep spans or perform edition checks.
      .               pub fn uninterpolated_span(&self) -> Span {
    134 ( 0.00%)          match &self.kind {
      .                       Interpolated(nt) => nt.span(),
     67 ( 0.00%)              _ => self.span,
      .                   }
     67 ( 0.00%)      }
      .           
      .               pub fn is_op(&self) -> bool {
 11,553 ( 0.00%)          !matches!(
  3,851 ( 0.00%)              self.kind,
      .                       OpenDelim(..)
      .                           | CloseDelim(..)
      .                           | Literal(..)
      .                           | DocComment(..)
      .                           | Ident(..)
      .                           | Lifetime(..)
      .                           | Interpolated(..)
      .                           | Eof
      .                   )
  3,851 ( 0.00%)      }
      .           
      .               pub fn is_like_plus(&self) -> bool {
  2,909 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    581 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of an expression.
    100 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
    500 ( 0.00%)          match self.uninterpolate().kind {
    243 ( 0.00%)              Ident(name, is_raw)              =>
     81 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
      .                       OpenDelim(..)                     | // tuple, array or block
      .                       Literal(..)                       | // literal
      .                       Not                               | // operator not
      .                       BinOp(Minus)                      | // unary minus
      .                       BinOp(Star)                       | // dereference
      .                       BinOp(Or) | OrOr                  | // closure
      .                       BinOp(And)                        | // reference
      .                       AndAnd                            | // double reference
      .                       // DotDotDot is no longer supported, but we need some way to display the error
      .                       DotDot | DotDotDot | DotDotEq     | // range notation
      .                       Lt | BinOp(Shl)                   | // associated path
      .                       ModSep                            | // global path
      .                       Lifetime(..)                      | // labeled loop
      .                       Pound                             => true, // expression attributes
    536 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
      .                           NtExpr(..)    |
      .                           NtBlock(..)   |
      .                           NtPath(..)),
      .                       _ => false,
      .                   }
    200 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a type.
    692 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
  1,058 ( 0.00%)          match self.uninterpolate().kind {
  1,206 ( 0.00%)              Ident(name, is_raw)        =>
    134 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
      .                       OpenDelim(Paren)            | // tuple
      .                       OpenDelim(Bracket)          | // array
      .                       Not                         | // never
      .                       BinOp(Star)                 | // raw pointer
      .                       BinOp(And)                  | // reference
      .                       AndAnd                      | // double reference
      .                       Question                    | // maybe bound in trait object
      .                       Lifetime(..)                | // lifetime bound in trait object
      .                       Lt | BinOp(Shl)             | // associated path
      .                       ModSep                      => true, // global path
      .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
      .                       _ => false,
      .                   }
  1,038 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a const param.
      .               pub fn can_begin_const_arg(&self) -> bool {
    505 ( 0.00%)          match self.kind {
      .                       OpenDelim(Brace) => true,
      .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
    101 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
      .                   }
      .               }
      .           
      .               /// Returns `true` if the token can appear at the start of a generic bound.
      .               pub fn can_begin_bound(&self) -> bool {
      .                   self.is_path_start()
      .                       || self.is_lifetime()
      .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
      .               }
      .           
      .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
      .               /// for example a '-42', or one of the boolean idents).
      .               ///
      .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
      .               ///
      .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
    101 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    977 ( 0.00%)          match self.uninterpolate().kind {
      .                       Literal(..) | BinOp(Minus) => true,
    336 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
      .                       Interpolated(ref nt) => match &**nt {
      .                           NtLiteral(_) => true,
      .                           NtExpr(e) => match &e.kind {
      .                               ast::ExprKind::Lit(_) => true,
      .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
      .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
      .                               }
      .                               _ => false,
      .                           },
      .                           _ => false,
      .                       },
      .                       _ => false,
      .                   }
    202 ( 0.00%)      }
      .           
      .               // A convenience function for matching on identifiers during parsing.
      .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
      .               // into the regular identifier or lifetime token it refers to,
      .               // otherwise returns the original token.
    472 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 61,769 ( 0.02%)          match &self.kind {
  2,070 ( 0.00%)              Interpolated(nt) => match **nt {
    120 ( 0.00%)                  NtIdent(ident, is_raw) => {
    300 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
      .                           }
      .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
      .                           _ => Cow::Borrowed(self),
      .                       },
      .                       _ => Cow::Borrowed(self),
      .                   }
    472 ( 0.00%)      }
      .           
      .               /// Returns an identifier if this token is an identifier.
  5,671 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
      .                   let token = self.uninterpolate();
 41,443 ( 0.01%)          match token.kind {
184,719 ( 0.06%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
      .                       _ => None,
      .                   }
 45,141 ( 0.02%)      }
      .           
      .               /// Returns a lifetime identifier if this token is a lifetime.
  1,083 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
      .                   let token = self.uninterpolate();
  2,986 ( 0.00%)          match token.kind {
    410 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
      .                       _ => None,
      .                   }
  7,581 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier.
      .               pub fn is_ident(&self) -> bool {
      .                   self.ident().is_some()
    337 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a lifetime.
    410 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
      .                   self.lifetime().is_some()
    820 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier whose name is the given
      .               /// string slice.
    156 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
      .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    312 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an interpolated path.
      .               fn is_path(&self) -> bool {
  2,960 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtPath(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   false
      .               }
      .           
      .               // Is the token an interpolated block (`$b:block`)?
      .               pub fn is_whole_block(&self) -> bool {
     18 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtBlock(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
      9 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either the `mut` or `const` keyword.
      .               pub fn is_mutability(&self) -> bool {
      .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
      .               }
      .           
     76 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
  1,556 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      .               }
      .           
  2,992 ( 0.00%)      pub fn is_path_start(&self) -> bool {
  4,302 ( 0.00%)          self == &ModSep
      .                       || self.is_qpath_start()
      .                       || self.is_path()
      .                       || self.is_path_segment_keyword()
    666 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
  3,740 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a given keyword, `kw`.
 11,967 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
      .                   self.is_non_raw_ident_where(|id| id.name == kw)
 23,934 ( 0.01%)      }
      .           
     80 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
      .               }
      .           
      .               // Returns true for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
    241 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_special)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    241 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    241 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
      .               pub fn is_reserved_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_reserved)
      .               }
      .           
      .               /// Returns `true` if the token is the identifier `true` or `false`.
     80 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    160 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
      .               }
      .           
      .               pub fn is_numeric_lit(&self) -> bool {
      .                   matches!(
      .                       self.kind,
      .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
      .                   )
      .               }
      .           
      .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
      .               pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 80,519 ( 0.03%)          match self.ident() {
    589 ( 0.00%)              Some((id, false)) => pred(id),
      .                       _ => false,
      .                   }
      .               }
      .           
  9,920 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
  4,960 ( 0.00%)          let kind = match self.kind {
    188 ( 0.00%)              Eq => match joint.kind {
      .                           Eq => EqEq,
      .                           Gt => FatArrow,
      .                           _ => return None,
      .                       },
     50 ( 0.00%)              Lt => match joint.kind {
      .                           Eq => Le,
      .                           Lt => BinOp(Shl),
      .                           Le => BinOpEq(Shl),
      .                           BinOp(Minus) => LArrow,
      .                           _ => return None,
      .                       },
    182 ( 0.00%)              Gt => match joint.kind {
      .                           Eq => Ge,
      .                           Gt => BinOp(Shr),
      .                           Ge => BinOpEq(Shr),
      .                           _ => return None,
      .                       },
      2 ( 0.00%)              Not => match joint.kind {
      .                           Eq => Ne,
      .                           _ => return None,
      .                       },
    452 ( 0.00%)              BinOp(op) => match joint.kind {
      .                           Eq => BinOpEq(op),
      2 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
      2 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
     62 ( 0.00%)                  Gt if op == Minus => RArrow,
      .                           _ => return None,
      .                       },
      9 ( 0.00%)              Dot => match joint.kind {
      .                           Dot => DotDot,
      .                           DotDot => DotDotDot,
      .                           _ => return None,
      .                       },
      .                       DotDot => match joint.kind {
      .                           Dot => DotDotDot,
      .                           Eq => DotDotEq,
      .                           _ => return None,
      .                       },
    312 ( 0.00%)              Colon => match joint.kind {
      .                           Colon => ModSep,
      .                           _ => return None,
      .                       },
      4 ( 0.00%)              SingleQuote => match joint.kind {
      9 ( 0.00%)                  Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
      .                           _ => return None,
      .                       },
      .           
      .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
      .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
      .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
      .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
      .                   };
      .           
  3,419 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
  8,928 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq<TokenKind> for Token {
      .               fn eq(&self, rhs: &TokenKind) -> bool {
 28,399 ( 0.01%)          self.kind == *rhs
      .               }
      .           }
      .           
     14 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
      .           /// For interpolation during macro expansion.
      .           pub enum Nonterminal {
      .               NtItem(P<ast::Item>),
      .               NtBlock(P<ast::Block>),
      .               NtStmt(ast::Stmt),
      .               NtPat(P<ast::Pat>),
      4 ( 0.00%)      NtExpr(P<ast::Expr>),
      .               NtTy(P<ast::Ty>),
      .               NtIdent(Ident, /* is_raw */ bool),
      .               NtLifetime(Ident),
      .               NtLiteral(P<ast::Expr>),
      .               /// Stuff inside brackets for attributes
      .               NtMeta(P<ast::AttrItem>),
      .               NtPath(ast::Path),
      .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
      .               Path,
      .               Vis,
      .               TT,
      .           }
      .           
      .           impl NonterminalKind {
      .               /// The `edition` closure is used to get the edition for the given symbol. Doing
      .               /// `span.edition()` is expensive, so we do it lazily.
    164 ( 0.00%)      pub fn from_symbol(
      .                   symbol: Symbol,
      .                   edition: impl FnOnce() -> Edition,
      .               ) -> Option<NonterminalKind> {
    364 ( 0.00%)          Some(match symbol {
      .                       sym::item => NonterminalKind::Item,
      .                       sym::block => NonterminalKind::Block,
      .                       sym::stmt => NonterminalKind::Stmt,
      .                       sym::pat => match edition() {
      .                           Edition::Edition2015 | Edition::Edition2018 => {
      .                               NonterminalKind::PatParam { inferred: true }
      .                           }
      .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
      .                       sym::lifetime => NonterminalKind::Lifetime,
      .                       sym::literal => NonterminalKind::Literal,
      .                       sym::meta => NonterminalKind::Meta,
      .                       sym::path => NonterminalKind::Path,
      .                       sym::vis => NonterminalKind::Vis,
      .                       sym::tt => NonterminalKind::TT,
      .                       _ => return None,
      .                   })
    164 ( 0.00%)      }
      .               fn symbol(self) -> Symbol {
      .                   match self {
      .                       NonterminalKind::Item => sym::item,
      .                       NonterminalKind::Block => sym::block,
      .                       NonterminalKind::Stmt => sym::stmt,
      .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
      .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
      .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------
-- line 765 ----------------------------------------
      .           
      .           impl fmt::Display for NonterminalKind {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "{}", self.symbol())
      .               }
      .           }
      .           
      .           impl Nonterminal {
      3 ( 0.00%)      pub fn span(&self) -> Span {
     15 ( 0.00%)          match self {
      .                       NtItem(item) => item.span,
      .                       NtBlock(block) => block.span,
      .                       NtStmt(stmt) => stmt.span,
      .                       NtPat(pat) => pat.span,
      3 ( 0.00%)              NtExpr(expr) | NtLiteral(expr) => expr.span,
      .                       NtTy(ty) => ty.span,
      .                       NtIdent(ident, _) | NtLifetime(ident) => ident.span,
      .                       NtMeta(attr_item) => attr_item.span(),
      .                       NtPath(path) => path.span,
      .                       NtVis(vis) => vis.span,
      .                       NtTT(tt) => tt.span(),
      .                   }
      6 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq for Nonterminal {
      .               fn eq(&self, rhs: &Self) -> bool {
      .                   match (self, rhs) {
      .                       (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) => {
      .                           ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs
      .                       }
-- line 795 ----------------------------------------

231,110 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 27,425 ( 0.01%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 27,343 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  2,954 ( 0.00%)          self.stride += Group::WIDTH;
  2,954 ( 0.00%)          self.pos += self.stride;
  1,477 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  1,380 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  2,455 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,194 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  5,261 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    834 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  3,094 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  3,784 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    328 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  3,668 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  5,698 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,380 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  1,380 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  2,760 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    690 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  6,210 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  5,411 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 14,584 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 14,584 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    690 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     45 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 43,958 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 11,002 ( 0.00%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 13,344 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
 99,512 ( 0.03%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 12,700 ( 0.00%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 17,792 ( 0.01%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  1,844 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  1,510 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     36 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    690 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  3,317 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  1,795 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  1,380 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    765 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  4,242 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    128 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  2,558 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  3,496 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 26,947 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 78,696 ( 0.03%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 37,234 ( 0.01%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
135,205 ( 0.05%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 55,010 ( 0.02%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 44,008 ( 0.02%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
 76,758 ( 0.03%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 25,586 ( 0.01%)          *self.ctrl(index) = ctrl;
 25,586 ( 0.01%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  1,380 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  4,889 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
    825 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  2,185 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  1,380 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    600 ( 0.00%)          Ok(guard(new_table, move |self_| {
    690 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    600 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    284 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  1,800 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  1,995 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  3,080 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 29,168 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 16,473 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
    984 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
    492 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
    984 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 17,091 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 12,372 ( 0.00%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  2,286 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

125,468 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
2,442,245 ( 0.84%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
        .           #[inline(always)]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_promotable]
        .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
        .           #[rustc_diagnostic_item = "ptr_null"]
        .           pub const fn null<T>() -> *const T {
        .               0 as *const T
       67 ( 0.00%)  }
        .           
        .           /// Creates a null mutable raw pointer.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
        .           /// use std::ptr;
        .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
        .           /// let x = [5, 6, 7];
        .           /// let raw_pointer = x.as_ptr();
        .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
        .           /// assert_eq!(unsafe { &*slice }[2], 7);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   16,680 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   20,850 ( 0.01%)      from_raw_parts(data.cast(), len)
    8,340 ( 0.00%)  }
        .           
        .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
        .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
        .           ///
        .           /// See the documentation of [`slice_from_raw_parts`] for more details.
        .           ///
        .           /// This function is safe, but actually using the return value is unsafe.
        .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
        .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
        .           /// };
        .           ///
        .           /// assert_eq!(unsafe { &*slice }[2], 99);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   30,272 ( 0.01%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   11,352 ( 0.00%)      from_raw_parts_mut(data.cast(), len)
    7,568 ( 0.00%)  }
        .           
        .           /// Swaps the values at two mutable locations of the same type, without
        .           /// deinitializing either.
        .           ///
        .           /// But for the following two exceptions, this function is semantically
        .           /// equivalent to [`mem::swap`]:
        .           ///
        .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
        6 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
        .           ///
        .           /// assert_eq!(s, "bar");
        .           /// ```
        .           ///
        .           /// [valid]: self#safety
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
   31,132 ( 0.01%)  pub const unsafe fn read<T>(src: *const T) -> T {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
    8,862 ( 0.00%)      let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
  104,042 ( 0.04%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  652,965 ( 0.23%)          tmp.assume_init()
        .               }
   16,359 ( 0.01%)  }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
        .           /// # Safety
        .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
        .           /// swap(&mut foo, &mut bar);
        .           ///
        .           /// assert_eq!(foo, "bar");
        .           /// assert_eq!(bar, "foo");
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
   31,219 ( 0.01%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
3,420,635 ( 1.18%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
   17,506 ( 0.01%)  }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
        .           ///
        .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
        .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      255 ( 0.00%)          return wrapping_sub(
    2,502 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   86,151 ( 0.03%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  356,894 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
95,073,015 (32.85%)  events annotated

